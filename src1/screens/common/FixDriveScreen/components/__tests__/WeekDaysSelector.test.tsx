import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react-native';
import { WeekDaysSelector } from '../WeekDaysSelector';

// –ú–æ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
jest.mock('../sections/WeekdaysSection', () => {
  const React = require('react');
  const { View, Text } = require('react-native');
  
  return {
    WeekdaysSection: function MockWeekdaysSection() {
      return (
        <View testID="weekdays-section">
          <Text>Weekdays Section</Text>
        </View>
      );
    }
  };
});

jest.mock('../sections/FlexibleScheduleSection', () => {
  const React = require('react');
  const { View, Text, TouchableOpacity } = require('react-native');
  
  return {
    FlexibleScheduleSection: function MockFlexibleScheduleSection({ onSaveSchedule }: any) {
      return (
        <View testID="flexible-schedule-section">
          <Text>Flexible Schedule Section</Text>
          <TouchableOpacity testID="mock-save-button" onPress={onSaveSchedule}>
            <Text>Save</Text>
          </TouchableOpacity>
        </View>
      );
    }
  };
});

jest.mock('../../../../../components/TimePicker', () => {
  const React = require('react');
  const { TouchableOpacity, Text } = require('react-native');
  
  return function MockTimePicker({ value, onChange, placeholder, title }: any) {
    return (
      <TouchableOpacity
        testID={`time-picker-${title || 'default'}`}
        onPress={() => onChange?.('12:00')}
      >
        <Text>{value || placeholder}</Text>
      </TouchableOpacity>
    );
  };
});

describe('WeekDaysSelector', () => {
  const mockProps = {
    colors: {
      primary: '#007AFF',
      background: '#FFFFFF',
      text: '#000000',
      border: '#E5E5E5',
    },
    isDark: false,
    t: (key: string) => key,
    selectedDays: ['mon', 'tue'],
    onSelectionChange: jest.fn(),
    selectedTime: '',
    onTimeChange: jest.fn(),
    returnTime: '',
    onReturnTimeChange: jest.fn(),
    returnTripTime: '',
    onReturnTripTimeChange: jest.fn(),
    returnWeekdaysTime: '',
    onReturnWeekdaysTimeChange: jest.fn(),
    isReturnTrip: false,
    onReturnTripChange: jest.fn(),
    onSaveSchedule: jest.fn(),
    scheduleType: 'oneWay',
  };

  beforeEach(() => {
    jest.clearAllMocks();
    console.log = jest.fn();
  });

  describe('–î–Ω–∏ –Ω–µ–¥–µ–ª–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–µ 7 –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏', () => {
      const { getAllByTestId } = render(<WeekDaysSelector {...mockProps} />);
      
      const dayButtons = getAllByTestId(/day-button/);
      expect(dayButtons).toHaveLength(7);
    });

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏', () => {
      const { getByTestId } = render(<WeekDaysSelector {...mockProps} />);
      
      // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω
      const mondayButton = getByTestId('day-button-mon');
      expect(mondayButton.props.style).toEqual(
        expect.objectContaining({
          backgroundColor: mockProps.colors.primary
        })
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å onSelectionChange –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –¥–µ–Ω—å', () => {
      const { getByTestId } = render(<WeekDaysSelector {...mockProps} />);
      
      // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ —Å—Ä–µ–¥—É (–Ω–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é)
      fireEvent.press(getByTestId('day-button-wed'));
      
      expect(mockProps.onSelectionChange).toHaveBeenCalledWith(['mon', 'tue', 'wed']);
    });

    it('–¥–æ–ª–∂–µ–Ω —É–±–∏—Ä–∞—Ç—å –¥–µ–Ω—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏', () => {
      const { getByTestId } = render(<WeekDaysSelector {...mockProps} />);
      
      // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (—É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π)
      fireEvent.press(getByTestId('day-button-mon'));
      
      expect(mockProps.onSelectionChange).toHaveBeenCalledWith(['tue']);
    });
  });

  describe('–†–µ–∂–∏–º—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å TimePicker –¥–ª—è —Ä–µ–∂–∏–º–∞ oneWay', () => {
      const { getByTestId } = render(<WeekDaysSelector {...mockProps} />);
      
      expect(getByTestId('time-picker-common.there')).toBeTruthy();
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å WeekdaysSection –¥–ª—è —Ä–µ–∂–∏–º–∞ weekdays', () => {
      const props = { ...mockProps, scheduleType: 'weekdays' };
      const { getByTestId } = render(<WeekDaysSelector {...props} />);
      
      expect(getByTestId('weekdays-section')).toBeTruthy();
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å FlexibleScheduleSection –¥–ª—è —Ä–µ–∂–∏–º–∞ flexible —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π', () => {
      const props = { 
        ...mockProps, 
        scheduleType: 'flexible',
        selectedDays: ['mon', 'tue', 'wed'] // 3 –¥–Ω—è >= 2
      };
      const { getByTestId } = render(<WeekDaysSelector {...props} />);
      
      expect(getByTestId('flexible-schedule-section')).toBeTruthy();
    });

    it('–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å FlexibleScheduleSection –µ—Å–ª–∏ –¥–Ω–µ–π –º–µ–Ω—å—à–µ 2', () => {
      const props = { 
        ...mockProps, 
        scheduleType: 'flexible',
        selectedDays: ['mon'] // 1 –¥–µ–Ω—å < 2
      };
      const { queryByTestId } = render(<WeekDaysSelector {...props} />);
      
      expect(queryByTestId('flexible-schedule-section')).toBeNull();
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å TimePicker –¥–ª—è —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–µ–∂–∏–º–µ thereAndBack', () => {
      const props = { 
        ...mockProps, 
        scheduleType: 'thereAndBack',
        selectedTime: '09:00' // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞–ª—Å—è –≤—Ç–æ—Ä–æ–π TimePicker
      };
      const { getByTestId } = render(<WeekDaysSelector {...props} />);
      
      expect(getByTestId('time-picker-common.there')).toBeTruthy();
      expect(getByTestId('time-picker-common.return')).toBeTruthy();
    });
  });

  describe('–¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è oneWay –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ', () => {
      const props = { ...mockProps, selectedTime: '09:00' };
      const { getByText } = render(<WeekDaysSelector {...props} />);
      
      expect(getByText('common.save (oneWay TEST)')).toBeTruthy();
    });

    it('–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è oneWay –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –Ω–µ –≤—ã–±—Ä–∞–Ω–æ', () => {
      const { queryByText } = render(<WeekDaysSelector {...mockProps} />);
      
      expect(queryByText('common.save (oneWay TEST)')).toBeNull();
    });

    it('–¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å onSaveSchedule –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ oneWay', () => {
      const props = { ...mockProps, selectedTime: '09:00' };
      const { getByText } = render(<WeekDaysSelector {...props} />);
      
      fireEvent.press(getByText('common.save (oneWay TEST)'));
      
      expect(mockProps.onSaveSchedule).toHaveBeenCalled();
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è flexible –≤ —Ä–µ–∂–∏–º–µ flexible-with-button', () => {
      const props = { 
        ...mockProps, 
        scheduleType: 'flexible-with-button',
        selectedDays: ['mon', 'tue'],
        selectedTime: '09:00'
      };
      const { getByText } = render(<WeekDaysSelector {...props} />);
      
      expect(getByText('common.save (flexible TEST)')).toBeTruthy();
    });
  });

  describe('–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å onTimeChange –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏', () => {
      const { getByTestId } = render(<WeekDaysSelector {...mockProps} />);
      
      fireEvent.press(getByTestId('time-picker-common.there'));
      
      expect(mockProps.onTimeChange).toHaveBeenCalledWith('12:00');
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è', () => {
      const props = { ...mockProps, selectedTime: '15:30' };
      const { getByText } = render(<WeekDaysSelector {...props} />);
      
      expect(getByText('15:30')).toBeTruthy();
    });
  });

  describe('–û–±—Ä–∞—Ç–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–µ–∂–∏–º–µ thereAndBack', () => {
      const props = { 
        ...mockProps, 
        scheduleType: 'thereAndBack',
        selectedTime: '09:00', // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
        isReturnTrip: true 
      };
      const { getByTestId } = render(<WeekDaysSelector {...props} />);
      
      expect(getByTestId('time-picker-common.return')).toBeTruthy();
    });

    it('–¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å onReturnTimeChange –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏', () => {
      const props = { 
        ...mockProps, 
        scheduleType: 'thereAndBack',
        selectedTime: '09:00', // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
        isReturnTrip: true 
      };
      const { getByTestId } = render(<WeekDaysSelector {...props} />);
      
      fireEvent.press(getByTestId('time-picker-common.return'));
      
      expect(mockProps.onReturnTimeChange).toHaveBeenCalledWith('12:00');
    });
  });

  describe('–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ', () => {
    it('–¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ', () => {
      render(<WeekDaysSelector {...mockProps} />);
      
      expect(console.log).toHaveBeenCalledWith('üîç WeekDaysSelector Debug:');
      expect(console.log).toHaveBeenCalledWith('  - scheduleType:', 'oneWay');
      expect(console.log).toHaveBeenCalledWith('  - selectedDays:', ['mon', 'tue']);
    });

    it('–¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ä–µ–∂–∏–º–∞ oneWay', () => {
      render(<WeekDaysSelector {...mockProps} />);
      
      expect(console.log).toHaveBeenCalledWith('üéØ WeekDaysSelector: –†–µ–∂–∏–º oneWay –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    });

    it('–¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', () => {
      const props = { ...mockProps, selectedTime: '09:00' };
      const { getByText } = render(<WeekDaysSelector {...props} />);
      
      fireEvent.press(getByText('common.save (oneWay TEST)'));
      
      expect(console.log).toHaveBeenCalledWith('üîò WeekDaysSelector oneWay: –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –Ω–∞–∂–∞—Ç–∞!');
      expect(console.log).toHaveBeenCalledWith(
        'üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è oneWay:',
        expect.objectContaining({
          scheduleType: 'oneWay',
          selectedDays: ['mon', 'tue'],
          selectedTime: '09:00'
        })
      );
    });
  });

  describe('–ê–Ω–∏–º–∞—Ü–∏–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –¥–µ–Ω—å', () => {
      const { getByTestId } = render(<WeekDaysSelector {...mockProps} />);
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
      fireEvent.press(getByTestId('day-button-wed'));
      
      // –ê–Ω–∏–º–∞—Ü–∏—è —Å–ª–æ–∂–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–ª–∞—Å—å
      expect(mockProps.onSelectionChange).toHaveBeenCalled();
    });
  });

  describe('Callback –æ—Ç —Ñ–ª–µ–∫—Å–∏–±–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å onSaveSchedule –≤ FlexibleScheduleSection', () => {
      const props = { 
        ...mockProps, 
        scheduleType: 'flexible',
        selectedDays: ['mon', 'tue', 'wed']
      };
      const { getByTestId } = render(<WeekDaysSelector {...props} />);
      
      // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –º–æ–∫-–∫–Ω–æ–ø–∫—É –∏–∑ FlexibleScheduleSection
      fireEvent.press(getByTestId('mock-save-button'));
      
      expect(mockProps.onSaveSchedule).toHaveBeenCalled();
    });
  });

  describe('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º', () => {
    it('–¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ scheduleType', () => {
      const props = { ...mockProps, scheduleType: 'unknown' };
      render(<WeekDaysSelector {...props} />);
      
      expect(console.log).toHaveBeenCalledWith('‚ö†Ô∏è WeekDaysSelector: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π scheduleType –∏–ª–∏ null');
    });

    it('–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞', () => {
      const props = { ...mockProps, scheduleType: 'unknown' };
      const { queryByTestId } = render(<WeekDaysSelector {...props} />);
      
      expect(queryByTestId('time-picker-common.there')).toBeNull();
      expect(queryByTestId('weekdays-section')).toBeNull();
      expect(queryByTestId('flexible-schedule-section')).toBeNull();
    });
  });
});
