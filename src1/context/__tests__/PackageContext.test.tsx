import React from 'react';
import { renderHook, act } from '@testing-library/react-native';
import { PackageProvider, usePackage } from '../PackageContext';

import { LanguageProvider } from '../LanguageContext';
import { useBalance } from '../../hooks/useBalance';

// –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
jest.mock('../../hooks/useBalance', () => ({
  useBalance: jest.fn(() => ({
    balance: 1000,
    transactions: [],
    topUpBalance: jest.fn(),
    deductBalance: jest.fn().mockResolvedValue(true),
    addTransaction: jest.fn(),
  })),
}));
jest.mock('@react-native-async-storage/async-storage', () => ({
  getItem: jest.fn().mockResolvedValue(null),
  setItem: jest.fn().mockResolvedValue(undefined),
  removeItem: jest.fn().mockResolvedValue(undefined),
}));

const mockUseBalance = useBalance as jest.MockedFunction<typeof useBalance>;

const renderWithProviders = (hook: () => any) => {
  return renderHook(hook, {
    wrapper: ({ children }) => (
      <LanguageProvider>
        <PackageProvider>
          {children}
        </PackageProvider>
      </LanguageProvider>
    ),
  });
};

describe('PackageContext', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Package Management', () => {
    it('should initialize with free package by default', () => {
      const { result } = renderWithProviders(() => usePackage());

      expect(result.current.currentPackage).toBe('free');
      expect(result.current.subscription).toBeNull();
    });

    it('should update package correctly', async () => {
      const { result } = renderWithProviders(() => usePackage());
      
      console.log('üîç usePackage result:', result.current);
      console.log('üîç updatePackage function:', typeof result.current.updatePackage);

      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      expect(result.current.currentPackage).toBe('premium');
      expect(result.current.subscription).toBeTruthy();
      expect(result.current.subscription?.packageType).toBe('premium');
      expect(result.current.subscription?.period).toBe('month');
    });

    it('should handle package extension', async () => {
      const { result } = renderWithProviders(() => usePackage());

      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç
      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      // –ó–∞—Ç–µ–º –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º
      await act(async () => {
        await result.current.extendSubscription('premiumPlus', 'year', 299);
      });

      expect(result.current.subscription?.pendingExtension).toBeTruthy();
      expect(result.current.subscription?.pendingExtension?.packageType).toBe('premiumPlus');
      expect(result.current.subscription?.pendingExtension?.period).toBe('year');
      expect(result.current.subscription?.pendingExtension?.price).toBe(299);
    });

    it('should cancel subscription correctly', async () => {
      const { result } = renderWithProviders(() => usePackage());

      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç
      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      expect(result.current.currentPackage).toBe('premium');

      // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      await act(async () => {
        await result.current.cancelSubscription();
      });

      expect(result.current.currentPackage).toBe('free');
      expect(result.current.subscription).toBeNull();
    });

    it('should toggle auto renew', async () => {
      const { result } = renderWithProviders(() => usePackage());

      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç
      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      expect(result.current.subscription?.autoRenew).toBe(true);

      // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await act(async () => {
        await result.current.toggleAutoRenew();
      });

      expect(result.current.subscription?.autoRenew).toBe(false);
    });
  });

  describe('Package Pricing', () => {
    it('should return correct prices for different packages', () => {
      const { result } = renderWithProviders(() => usePackage());

      expect(result.current.getPackagePrice('free')).toBe(0);
      expect(result.current.getPackagePrice('plus', 'month')).toBe(99);
      expect(result.current.getPackagePrice('plus', 'year')).toBe(999);
      expect(result.current.getPackagePrice('premium', 'month')).toBe(199);
      expect(result.current.getPackagePrice('premium', 'year')).toBe(1999);
      expect(result.current.getPackagePrice('premiumPlus', 'month')).toBe(299);
      expect(result.current.getPackagePrice('premiumPlus', 'year')).toBe(2999);
    });

    it('should return correct icons for different packages', () => {
      const { result } = renderWithProviders(() => usePackage());

      expect(result.current.getPackageIcon('free')).toBe('person');
      expect(result.current.getPackageIcon('plus')).toBe('add-circle');
      expect(result.current.getPackageIcon('premium')).toBe('diamond');
      expect(result.current.getPackageIcon('premiumPlus')).toBe('star');
    });

    it('should return correct colors for different packages', () => {
      const { result } = renderWithProviders(() => usePackage());

      expect(result.current.getPackageColor('free')).toBe('#666666');
      expect(result.current.getPackageColor('plus')).toBe('#0066CC');
      expect(result.current.getPackageColor('premium')).toBe('#FFD700');
      expect(result.current.getPackageColor('premiumPlus')).toBe('#FF6B35');
    });
  });

  describe('Auto Renewal', () => {
    it('should process auto renewal correctly', async () => {
      const { result } = renderWithProviders(() => usePackage());

      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –∏—Å—Ç–µ–∫—à–µ–π –¥–∞—Ç–æ–π
      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É
      const pastDate = new Date();
      pastDate.setDate(pastDate.getDate() - 1);
      
      await act(async () => {
        // –ú–æ–∫–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
        if (result.current.subscription) {
          result.current.subscription.nextBillingDate = pastDate.toISOString();
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const renewed = await act(async () => {
        return await result.current.processAutoRenewal();
      });

      expect(renewed).toBe(true);
    });

    it('should not auto renew free package', async () => {
      const { result } = renderWithProviders(() => usePackage());

      const renewed = await act(async () => {
        return await result.current.processAutoRenewal();
      });

      expect(renewed).toBe(false);
    });

    it('should check pending auto renewal', async () => {
      const { result } = renderWithProviders(() => usePackage());

      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å pending auto renewal
      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      // –°–æ–∑–¥–∞–µ–º pending auto renewal —á–µ—Ä–µ–∑ AsyncStorage
      const AsyncStorage = require('@react-native-async-storage/async-storage');
      const subscription = result.current.subscription;
      if (subscription) {
        const updatedSubscription = {
          ...subscription,
          pendingAutoRenewal: {
            price: 199,
            packageName: 'Premium',
            lastNotificationDate: new Date().toISOString(),
          }
        };
        
        await AsyncStorage.setItem('user_subscription', JSON.stringify(updatedSubscription));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pending auto renewal —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const hasPending = await act(async () => {
        return await result.current.checkPendingAutoRenewal();
      });

            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –µ—Å—Ç—å subscription —Å pendingAutoRenewal, —Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true
      expect(hasPending).toBe(true);
    });
  });

  describe('Integration with Balance', () => {
    it('should deduct balance when purchasing package', async () => {
      const mockDeductBalance = jest.fn().mockResolvedValue(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
      mockUseBalance.mockReturnValue({
        balance: 1000,
        transactions: [],
        topUpBalance: jest.fn(),
        deductBalance: mockDeductBalance,
        addTransaction: jest.fn(),
      });

      const { result } = renderWithProviders(() => usePackage());

      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      expect(mockDeductBalance).toHaveBeenCalledWith(199, 'premium package purchase', 'premium');
    });

    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    it('SIMPLE: should check if premium package triggers balance deduction', async () => {
      const mockDeductBalance = jest.fn().mockResolvedValue(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–∫
      mockUseBalance.mockReturnValue({
        balance: 1000,
        transactions: [],
        topUpBalance: jest.fn(),
        deductBalance: mockDeductBalance,
        addTransaction: jest.fn(),
      });

      const { result } = renderWithProviders(() => usePackage());

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–∫–µ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ free
      expect(result.current.currentPackage).toBe('free');

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ premium
      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–∫–µ—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
      expect(result.current.currentPackage).toBe('premium');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ deductBalance –±—ã–ª –≤—ã–∑–≤–∞–Ω
      expect(mockDeductBalance).toHaveBeenCalled();
    });

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç
    it('DEBUG: should check if deductBalance is called', async () => {
      console.log('üîç Starting debug test...');
      
      const mockDeductBalance = jest.fn().mockResolvedValue(true);
      console.log('üîç Mock deductBalance created:', mockDeductBalance);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
      mockUseBalance.mockReturnValue({
        balance: 1000,
        transactions: [],
        topUpBalance: jest.fn(),
        deductBalance: mockDeductBalance,
        addTransaction: jest.fn(),
      });

      const { result } = renderWithProviders(() => usePackage());
      console.log('üîç Package context rendered');

      await act(async () => {
        console.log('üîç Calling updatePackage...');
        await result.current.updatePackage('premium', 'month');
        console.log('üîç updatePackage completed');
      });

      console.log('üîç Mock calls:', mockDeductBalance.mock.calls);
      console.log('üîç Mock call count:', mockDeductBalance.mock.calls.length);
      
      expect(mockDeductBalance).toHaveBeenCalled();
    });

    it('should fail package purchase if insufficient balance', async () => {
      const mockDeductBalance = jest.fn().mockResolvedValue(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
      mockUseBalance.mockReturnValue({
        balance: 50, // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
        transactions: [],
        topUpBalance: jest.fn(),
        deductBalance: mockDeductBalance,
        addTransaction: jest.fn(),
      });

      const { result } = renderWithProviders(() => usePackage());

      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      expect(mockDeductBalance).toHaveBeenCalledWith(199, 'premium package purchase', 'premium');
      // –ü–∞–∫–µ—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è free, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
      expect(result.current.currentPackage).toBe('free');
    });

    it('should handle balance errors gracefully', async () => {
      const mockDeductBalance = jest.fn().mockRejectedValue(new Error('Balance error'));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
      mockUseBalance.mockReturnValue({
        balance: 1000,
        transactions: [],
        topUpBalance: jest.fn(),
        deductBalance: mockDeductBalance,
        addTransaction: jest.fn(),
      });

      const { result } = renderWithProviders(() => usePackage());

      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      expect(mockDeductBalance).toHaveBeenCalled();
      // –ü–∞–∫–µ—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è free –ø—Ä–∏ –æ—à–∏–±–∫–µ
      expect(result.current.currentPackage).toBe('free');
    });
  });

  describe('Data Persistence', () => {
    it('should load saved package on initialization', async () => {
      const AsyncStorage = require('@react-native-async-storage/async-storage');
      
      // –ú–æ–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
      AsyncStorage.getItem.mockImplementation((key: string) => {
        if (key === 'user_package') return Promise.resolve('premium');
        if (key === 'user_subscription') return Promise.resolve(JSON.stringify({
          packageType: 'premium',
          startDate: new Date().toISOString(),
          autoRenew: true,
          isActive: true,
          nextBillingDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
          period: 'month'
        }));
        return Promise.resolve(null);
      });

      const { result } = renderWithProviders(() => usePackage());

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      await act(async () => {
        await new Promise(resolve => setTimeout(resolve, 0));
      });

      expect(result.current.currentPackage).toBe('premium');
      expect(result.current.subscription).toBeTruthy();
    });

    it('should save package changes to storage', async () => {
      const AsyncStorage = require('@react-native-async-storage/async-storage');
      const mockSetItem = jest.fn().mockResolvedValue(undefined);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
      AsyncStorage.setItem.mockClear();
      AsyncStorage.setItem.mockImplementation(mockSetItem);

      const { result } = renderWithProviders(() => usePackage());

      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      expect(mockSetItem).toHaveBeenCalledWith('user_package', 'premium');
      expect(mockSetItem).toHaveBeenCalledWith('user_subscription', expect.any(String));
    });
  });

  describe('Error Handling', () => {
    it('should handle storage errors gracefully', async () => {
      const AsyncStorage = require('@react-native-async-storage/async-storage');
      AsyncStorage.setItem.mockRejectedValue(new Error('Storage error'));

      const { result } = renderWithProviders(() => usePackage());

      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      // –î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ free –ø—Ä–∏ –æ—à–∏–±–∫–µ
      expect(result.current.currentPackage).toBe('free');
    });

    it('should handle invalid package types', async () => {
      const { result } = renderWithProviders(() => usePackage());

      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π –ø–∞–∫–µ—Ç
      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      expect(result.current.currentPackage).toBe('premium');

      // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–∞–∫–µ—Ç
      await act(async () => {
        // @ts-ignore - —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø
        await result.current.updatePackage('invalid_package', 'month');
      });

      // –î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ premium (–Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)
      expect(result.current.currentPackage).toBe('premium');
    });
  });

  describe('Role-Specific Behavior', () => {
    it('should work correctly with client balance hook', async () => {
      const mockClientBalance = {
        balance: 1000,
        transactions: [],
        topUpBalance: jest.fn(),
        deductBalance: jest.fn().mockResolvedValue(true),
        addTransaction: jest.fn(),
      };

      mockUseBalance.mockReturnValue(mockClientBalance);

      const { result } = renderWithProviders(() => usePackage());

      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      expect(mockClientBalance.deductBalance).toHaveBeenCalledWith(199, 'premium package purchase', 'premium');
    });

    it('should work correctly with driver balance hook', async () => {
      const mockDriverBalance = {
        balance: 2500,
        transactions: [],
        topUpBalance: jest.fn(),
        deductBalance: jest.fn().mockResolvedValue(true),
        addTransaction: jest.fn(),
      };

      mockUseBalance.mockReturnValue(mockDriverBalance);

      const { result } = renderWithProviders(() => usePackage());

      await act(async () => {
        await result.current.updatePackage('premium', 'month');
      });

      // –í–æ–¥–∏—Ç–µ–ª–∏ —Ç–æ–∂–µ –º–æ–≥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å –ø–∞–∫–µ—Ç—ã
      expect(mockDriverBalance.deductBalance).toHaveBeenCalledWith(199, 'premium package purchase', 'premium');
    });
  });
}); 