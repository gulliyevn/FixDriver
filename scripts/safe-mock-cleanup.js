// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ mock –¥–∞–Ω–Ω—ã—Ö - –∑–∞–º–µ–Ω—è–µ—Ç mock –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
const fs = require('fs');
const path = require('path');

const rootDir = process.cwd();
let processedFiles = 0;
let mockReplacements = 0;

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã mock –¥–∞–Ω–Ω—ã—Ö
const mockReplacementPatterns = {
  // –ó–∞–º–µ–Ω—ã –¥–ª—è AuthService
  'mockUsers': 'await APIClient.get("/auth/users")',
  'findAuthUserByCredentials': 'await APIClient.post("/auth/login", credentials)',
  'findAuthUserByEmail': 'await APIClient.post("/auth/find-by-email", { email })',
  
  // –ó–∞–º–µ–Ω—ã –¥–ª—è BalanceService
  'balanceMock': 'await APIClient.get("/balance")',
  'mockTransactions': 'await APIClient.get("/balance/transactions")',
  
  // –ó–∞–º–µ–Ω—ã –¥–ª—è DriverService
  'mockDrivers': 'await APIClient.get("/drivers")',
  'mockDriverVehicles': 'await APIClient.get("/drivers/vehicles")',
  
  // –ó–∞–º–µ–Ω—ã –¥–ª—è OrderService
  'mockOrders': 'await APIClient.get("/orders")',
  'mockTrips': 'await APIClient.get("/orders/trips")',
  
  // –ó–∞–º–µ–Ω—ã –¥–ª—è ChatService
  'mockChats': 'await APIClient.get("/chats")',
  'mockMessages': 'await APIClient.get("/chats/messages")',
  
  // –ó–∞–º–µ–Ω—ã –¥–ª—è NotificationService
  'mockNotifications': 'await APIClient.get("/notifications")',
  
  // –ó–∞–º–µ–Ω—ã –¥–ª—è EarningsService
  'mockEarnings': 'await APIClient.get("/earnings")',
  'mockEarningsDetails': 'await APIClient.get("/earnings/details")',
};

// –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Ç—Ä–æ–≥–∞–µ–º (—Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∞–∂–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const protectedFiles = [
  'src/mocks/',
  'src/test-utils/',
  '__tests__',
  '.test.',
  '.spec.',
];

function isProtectedFile(filePath) {
  return protectedFiles.some(protected => filePath.includes(protected));
}

function processFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let hasChanges = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª mock –¥–∞–Ω–Ω—ã–µ
    const mockPatterns = [
      /mock\w+/gi,
      /Mock\w+/g,
      /MOCK_\w+/g,
      /\/\/\s*MOCK/g,
      /\/\*\s*MOCK/g,
    ];
    
    const hasMockData = mockPatterns.some(pattern => pattern.test(content));
    
    if (!hasMockData) {
      return false;
    }
    
    console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞: ${filePath}`);
    
    // –ó–∞–º–µ–Ω—è–µ–º mock –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
    Object.entries(mockReplacementPatterns).forEach(([mockPattern, apiCall]) => {
      const regex = new RegExp(`\\b${mockPattern}\\b`, 'g');
      if (content.match(regex)) {
        content = content.replace(regex, apiCall);
        hasChanges = true;
        mockReplacements++;
      }
    });
    
    // –ó–∞–º–µ–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å mock –¥–∞–Ω–Ω—ã–º–∏
    content = content.replace(/\/\/\s*MOCK.*$/gm, '');
    content = content.replace(/\/\*\s*MOCK[\s\S]*?\*\//g, '');
    
    // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    if (hasChanges) {
      fs.writeFileSync(filePath, content, 'utf8');
      processedFiles++;
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${filePath}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filePath}:`, error.message);
    return false;
  }
}

function scanDirectory(directory) {
  const items = fs.readdirSync(directory);
  
  items.forEach(item => {
    const fullPath = path.join(directory, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      if (!item.startsWith('.') && item !== 'node_modules' && item !== 'build') {
        scanDirectory(fullPath);
      }
    } else if (stat.isFile() && (item.endsWith('.ts') || item.endsWith('.tsx'))) {
      if (!isProtectedFile(fullPath)) {
        processFile(fullPath);
      }
    }
  });
}

console.log('üßπ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ mock –¥–∞–Ω–Ω—ã—Ö...\n');

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ src/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const srcDir = path.join(rootDir, 'src');
if (fs.existsSync(srcDir)) {
  scanDirectory(srcDir);
}

console.log(`\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedFiles}`);
console.log(`   - –ó–∞–º–µ–Ω–µ–Ω–æ mock –¥–∞–Ω–Ω—ã—Ö: ${mockReplacements}`);

if (processedFiles > 0) {
  console.log('\n‚ú® –ó–∞–ø—É—Å–∫ Prettier –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  try {
    const { execSync } = require('child_process');
    execSync('npx prettier --write src/', { stdio: 'inherit' });
    console.log('‚úÖ Prettier –∑–∞–≤–µ—Ä—à–µ–Ω.');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Prettier:', error.message);
  }
} else {
  console.log('\n‚úÖ Mock –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω—ã.');
}
