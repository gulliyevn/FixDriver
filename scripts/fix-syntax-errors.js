const fs = require('fs');
const path = require('path');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const filesToFix = [
  'src/components/FixDriveMapInput.tsx',
  'src/screens/common/FixDriveScreen/components/WeekDaysSelector.tsx',
  'src/screens/common/FixWaveScreen/components/TimeSchedulePage.tsx',
  'src/screens/common/FixWaveScreen/components/WeekDaysSelector.tsx',
  'src/screens/common/FixWaveScreen/components/ScheduleContainerContent.tsx',
  'src/screens/common/FixWaveScreen/hooks/useScheduleContainer.ts',
  'src/screens/common/FixWaveScreen/utils/scheduleUtils.ts',
  'src/services/DistanceCalculationService.ts',
  'src/screens/common/FixDriveScreen/components/FixDriveAddressPage.tsx',
  'src/screens/common/FixWaveScreen/components/AddressPage.tsx'
];

function fixFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    const fixes = [
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è console.log
      [/\)\);\s*$/gm, ''], // –£–±–∏—Ä–∞–µ–º )); –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
      [/\);\s*$/gm, ''], // –£–±–∏—Ä–∞–µ–º ); –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ
      [/\(\s*\);\s*$/gm, ''], // –£–±–∏—Ä–∞–µ–º (); –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
      [/\)\s*\);\s*$/gm, ''], // –£–±–∏—Ä–∞–µ–º )); –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
      [/\)\s*\)\s*\);\s*$/gm, ''], // –£–±–∏—Ä–∞–µ–º ))); –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ª–∏—à–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
      [/^\s*\)\s*$/gm, ''], // –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å–æ —Å–∫–æ–±–∫–æ–π
      [/^\s*\(\s*\)\s*$/gm, ''], // –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å ()
      [/^\s*\)\)\s*$/gm, ''], // –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å ))
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
      [/,\s*\)/g, ')'], // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
      [/,\s*}/g, '}'], // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π –æ–±—ä–µ–∫—Ç–∞
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
      [/}\s*\)\s*$/gm, '}'], // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏ –ø–æ—Å–ª–µ }
    ];
    
    for (const [regex, replacement] of fixes) {
      const newContent = content.replace(regex, replacement);
      if (newContent !== content) {
        content = newContent;
        modified = true;
      }
    }
    
    if (modified) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ Fixed syntax: ${filePath}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå Error fixing ${filePath}:`, error.message);
    return false;
  }
}

function main() {
  console.log('üîß Fixing syntax errors from console.log cleanup...\n');
  
  let totalFixed = 0;
  
  for (const file of filesToFix) {
    const fullPath = path.join(__dirname, '..', file);
    if (fs.existsSync(fullPath)) {
      if (fixFile(fullPath)) {
        totalFixed++;
      }
    } else {
      console.log(`‚ö†Ô∏è File not found: ${file}`);
    }
  }
  
  console.log(`\nüéâ Fixed syntax in ${totalFixed} files!`);
}

main();
