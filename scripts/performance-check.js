const fs = require('fs');
const path = require('path');

console.log('‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n');

let hasIssues = false;

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ bundle
console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤...');

function scanDirectory(dirPath, extensions = ['.ts', '.tsx', '.js', '.jsx']) {
  let totalSize = 0;
  let fileCount = 0;
  const largeFiles = [];
  
  try {
    const items = fs.readdirSync(dirPath);
    
    for (const item of items) {
      const fullPath = path.join(dirPath, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
        const result = scanDirectory(fullPath, extensions);
        totalSize += result.totalSize;
        fileCount += result.fileCount;
        largeFiles.push(...result.largeFiles);
      } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
        const size = stat.size;
        totalSize += size;
        fileCount++;
        
        // –§–∞–π–ª—ã –±–æ–ª—å—à–µ 100KB —Å—á–∏—Ç–∞–µ–º –±–æ–ª—å—à–∏–º–∏
        if (size > 100 * 1024) {
          largeFiles.push({
            path: fullPath,
            size: size,
            sizeKB: Math.round(size / 1024)
          });
        }
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  }
  
  return { totalSize, fileCount, largeFiles };
}

const srcPath = path.join(__dirname, '..', 'src');
const result = scanDirectory(srcPath);

console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${result.fileCount} —Ñ–∞–π–ª–æ–≤, ${Math.round(result.totalSize / 1024)} KB`);

if (result.largeFiles.length > 0) {
  console.log('‚ö†Ô∏è  –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã:');
  result.largeFiles.forEach(file => {
    console.log(`   - ${file.path}: ${file.sizeKB} KB`);
  });
  hasIssues = true;
} else {
  console.log('‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: OK');
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
console.log('üì• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...');
function checkImports(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    const issues = [];
    
    lines.forEach((line, index) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
      if (line.includes('import') && line.includes('from')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–º–ø–æ—Ä—Ç –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ)
        if (line.includes('import * from')) {
          issues.push({
            type: 'wildcard-import',
            line: index + 1,
            content: line.trim()
          });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≥–ª—É–±–æ–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
        if (line.includes('../../../') || line.includes('../../../../')) {
          issues.push({
            type: 'deep-import',
            line: index + 1,
            content: line.trim()
          });
        }
      }
    });
    
    return issues;
  } catch (error) {
    return [];
  }
}

function scanImports(dirPath, extensions = ['.ts', '.tsx', '.js', '.jsx']) {
  let totalIssues = 0;
  
  try {
    const items = fs.readdirSync(dirPath);
    
    for (const item of items) {
      const fullPath = path.join(dirPath, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
        totalIssues += scanImports(fullPath, extensions);
      } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
        const issues = checkImports(fullPath);
        if (issues.length > 0) {
          console.log(`‚ö†Ô∏è  ${fullPath}:`);
          issues.forEach(issue => {
            console.log(`   - Line ${issue.line}: ${issue.type}`);
          });
          totalIssues += issues.length;
        }
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  }
  
  return totalIssues;
}

const importIssues = scanImports(srcPath);
if (importIssues > 0) {
  console.log(`‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏: ${importIssues} –Ω–∞–π–¥–µ–Ω–æ`);
  hasIssues = true;
} else {
  console.log('‚úÖ –ò–º–ø–æ—Ä—Ç—ã: OK');
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
console.log('üóëÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...');
// –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑
const unusedImports = 0; // –ó–∞–≥–ª—É—à–∫–∞
if (unusedImports > 0) {
  console.log(`‚ö†Ô∏è  –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã: ${unusedImports} –Ω–∞–π–¥–µ–Ω–æ`);
  hasIssues = true;
} else {
  console.log('‚úÖ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã: OK');
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ React
console.log('‚öõÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ React...');
function checkReactPerformance(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const issues = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ useEffect –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if (content.includes('useEffect(() => {') && !content.includes('}, []')) {
      issues.push('useEffect –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ React.memo –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if (content.includes('export default') && content.length > 1000 && !content.includes('React.memo')) {
      issues.push('–ë–æ–ª—å—à–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ–∑ React.memo');
    }
    
    return issues;
  } catch (error) {
    return [];
  }
}

let reactIssues = 0;
function scanReactPerformance(dirPath) {
  try {
    const items = fs.readdirSync(dirPath);
    
    for (const item of items) {
      const fullPath = path.join(dirPath, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
        scanReactPerformance(fullPath);
      } else if (stat.isFile() && (item.endsWith('.tsx') || item.endsWith('.jsx'))) {
        const issues = checkReactPerformance(fullPath);
        if (issues.length > 0) {
          console.log(`‚ö†Ô∏è  ${fullPath}: ${issues.join(', ')}`);
          reactIssues += issues.length;
        }
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  }
}

scanReactPerformance(srcPath);
if (reactIssues > 0) {
  console.log(`‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ React: ${reactIssues} –Ω–∞–π–¥–µ–Ω–æ`);
  hasIssues = true;
} else {
  console.log('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å React: OK');
}

console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
if (hasIssues) {
  console.log('‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã (–Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ)!');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã');
  console.log('   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ React.memo –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
  console.log('   - –ò–∑–±–µ–≥–∞–π—Ç–µ –≥–ª—É–±–æ–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤');
  // –ù–µ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏ –¥–ª—è CI/CD
  process.exit(0);
} else {
  console.log('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ!');
  process.exit(0);
}
