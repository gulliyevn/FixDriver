/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è JavaScript –≤–µ—Ä—Å–∏—è TranslationValidator –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤
 */

const SUPPORTED_LANGUAGES = {
  ru: { name: '–†—É—Å—Å–∫–∏–π', native: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  en: { name: 'English', native: 'English', flag: 'üá∫üá∏' },
  tr: { name: 'T√ºrk√ße', native: 'T√ºrk√ße', flag: 'üáπüá∑' },
  az: { name: 'Az…ôrbaycan', native: 'Az…ôrbaycan', flag: 'üá¶üáø' },
  fr: { name: 'Fran√ßais', native: 'Fran√ßais', flag: 'üá´üá∑' },
  ar: { name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', native: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
  es: { name: 'Espa√±ol', native: 'Espa√±ol', flag: 'üá™üá∏' },
  de: { name: 'Deutsch', native: 'Deutsch', flag: 'üá©üá™' },
};

const REQUIRED_NAMESPACES = [
  'common',
  'login',
  'register',
  'profile',
  'errors',
  'notifications',
  'support',
  'navigation',
  'components',
  'driver',
  'client'
];

class TranslationValidator {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
   */
  static validateTranslations() {
    const missingTranslations = [];
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–æ—Å–Ω–æ–≤–Ω–æ–≥–æ)
    const baseLanguage = 'ru';
    const baseKeys = this.getAllTranslationKeys(baseLanguage);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö
    for (const translationKey of baseKeys) {
      const missingLanguages = [];
      
      for (const language of Object.keys(SUPPORTED_LANGUAGES)) {
        if (language === baseLanguage) continue;
        
        if (!this.hasTranslation(language, translationKey.key)) {
          missingLanguages.push(language);
        }
      }
      
      if (missingLanguages.length > 0) {
        missingTranslations.push({
          key: translationKey.key,
          namespace: translationKey.namespace,
          missingLanguages
        });
      }
    }
    
    return missingTranslations;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
   */
  static getAllTranslationKeys(language) {
    const keys = [];
    
    for (const namespace of REQUIRED_NAMESPACES) {
      try {
        const translations = require(`../src/i18n/${namespace}/${language}.json`);
        this.extractKeys(translations, namespace, [], keys);
      } catch (error) {
        console.warn(`Failed to load translations for ${namespace}/${language}:`, error.message);
      }
    }
    
    return keys;
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   */
  static extractKeys(obj, namespace, path, keys) {
    for (const [key, value] of Object.entries(obj)) {
      const currentPath = [...path, key];
      
      if (typeof value === 'string') {
        keys.push({
          key: `${namespace}.${currentPath.join('.')}`,
          namespace,
          path: currentPath
        });
      } else if (typeof value === 'object' && value !== null) {
        this.extractKeys(value, namespace, currentPath, keys);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
   */
  static hasTranslation(language, key) {
    const [namespace, ...pathParts] = key.split('.');
    
    try {
      const translations = require(`../src/i18n/${namespace}/${language}.json`);
      let current = translations;
      
      for (const part of pathParts) {
        if (current && typeof current === 'object' && part in current) {
          current = current[part];
        } else {
          return false;
        }
      }
      
      return typeof current === 'string' && current.trim().length > 0;
    } catch (error) {
      return false;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   */
  static generateReport() {
    const missingTranslations = this.validateTranslations();
    
    if (missingTranslations.length === 0) {
      return '‚úÖ –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ–ª–Ω—ã–µ!';
    }
    
    let report = `‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${missingTranslations.length} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤:\n\n`;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —è–∑—ã–∫–∞–º
    const missingByLanguage = {};
    missingTranslations.forEach(missing => {
      missing.missingLanguages.forEach(lang => {
        if (!missingByLanguage[lang]) {
          missingByLanguage[lang] = [];
        }
        missingByLanguage[lang].push(missing.key);
      });
    });
    
    Object.entries(missingByLanguage).forEach(([lang, keys]) => {
      const flag = SUPPORTED_LANGUAGES[lang]?.flag || 'üåê';
      report += `${flag} ${lang.toUpperCase()}: ${keys.length} –∫–ª—é—á–µ–π\n`;
    });
    
    return report;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö
   */
  static checkKey(key) {
    const result = {};
    
    for (const language of Object.keys(SUPPORTED_LANGUAGES)) {
      result[language] = this.hasTranslation(language, key);
    }
    
    return result;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ —è–∑—ã–∫–∞–º
   */
  static getTranslationStats() {
    const stats = {};
    
    for (const language of Object.keys(SUPPORTED_LANGUAGES)) {
      const keys = this.getAllTranslationKeys(language);
      stats[language] = keys.length;
    }
    
    return stats;
  }
}

module.exports = { TranslationValidator };
