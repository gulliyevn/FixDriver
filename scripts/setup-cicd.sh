#!/bin/bash

# üöÄ FixDrive CI/CD Setup Script
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ CI/CD

set -e

echo "üöÄ Setting up FixDrive CI/CD..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_dependencies() {
    log "üîç Checking dependencies..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
    if ! command -v node &> /dev/null; then
        error "Node.js is not installed. Please install Node.js 18+"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º npm
    if ! command -v npm &> /dev/null; then
        error "npm is not installed. Please install npm"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º git
    if ! command -v git &> /dev/null; then
        error "git is not installed. Please install git"
        exit 1
    fi
    
    success "All dependencies are available"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
install_packages() {
    log "üì¶ Installing CI/CD packages..."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è CI/CD
    npm install -g @expo/cli@latest
    npm install -g eas-cli@latest
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –∞—É–¥–∏—Ç–∞
    npm install --save-dev audit-ci
    
    success "CI/CD packages installed"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git hooks
setup_git_hooks() {
    log "ü™ù Setting up Git hooks..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è hooks
    mkdir -p .git/hooks
    
    # Pre-commit hook
    cat > .git/hooks/pre-commit << 'EOF'
#!/bin/bash
echo "üîç Running pre-commit checks..."

# TypeScript check
echo "üìù TypeScript check..."
npx tsc --noEmit

# ESLint check
echo "üßπ ESLint check..."
npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0

# Prettier check
echo "üíÖ Prettier check..."
npx prettier --check .

echo "‚úÖ Pre-commit checks passed!"
EOF
    
    # –î–µ–ª–∞–µ–º hook –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    chmod +x .git/hooks/pre-commit
    
    success "Git hooks configured"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ environment variables
setup_env_vars() {
    log "üîß Setting up environment variables..."
    
    # –°–æ–∑–¥–∞–µ–º .env.example
    cat > .env.example << 'EOF'
# API Configuration
API_BASE_URL=https://api.fixdrive.com
API_TIMEOUT=30000

# Authentication
JWT_SECRET=your-jwt-secret-here
JWT_EXPIRES_IN=24h

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/fixdrive

# External Services
GOOGLE_MAPS_API_KEY=your-google-maps-api-key
STRIPE_PUBLISHABLE_KEY=your-stripe-publishable-key

# CI/CD Secrets (set these in GitHub/GitLab)
SLACK_WEBHOOK=your-slack-webhook-url
TELEGRAM_BOT_TOKEN=your-telegram-bot-token
TELEGRAM_CHAT_ID=your-telegram-chat-id

# EAS Build
EAS_PROJECT_ID=your-eas-project-id
EOF
    
    # –°–æ–∑–¥–∞–µ–º .env.local –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if [ ! -f .env.local ]; then
        cp .env.example .env.local
        warning "Created .env.local - please update with your actual values"
    fi
    
    success "Environment variables configured"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
setup_docker() {
    log "üê≥ Setting up Docker configuration..."
    
    # –°–æ–∑–¥–∞–µ–º Dockerfile
    cat > Dockerfile << 'EOF'
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Expose port
EXPOSE 3000

# Start the application
CMD ["npm", "start"]
EOF
    
    # –°–æ–∑–¥–∞–µ–º .dockerignore
    cat > .dockerignore << 'EOF'
node_modules
npm-debug.log
.git
.gitignore
README.md
.env
.nyc_output
coverage
.nyc_output
.coverage
EOF
    
    # –°–æ–∑–¥–∞–µ–º docker-compose.yml –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - db

  db:
    image: postgres:13
    environment:
      POSTGRES_DB: fixdrive
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
EOF
    
    success "Docker configuration created"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
setup_monitoring() {
    log "üìä Setting up monitoring..."
    
    # –°–æ–∑–¥–∞–µ–º health check endpoint
    mkdir -p src/api
    cat > src/api/health.ts << 'EOF'
import { Request, Response } from 'express';

export const healthCheck = (req: Request, res: Response) => {
  const health = {
    uptime: process.uptime(),
    message: 'OK',
    timestamp: Date.now(),
    environment: process.env.NODE_ENV,
    version: process.env.npm_package_version || '1.0.0'
  };
  
  try {
    res.status(200).json(health);
  } catch (error) {
    health.message = 'ERROR';
    res.status(503).json(health);
  }
};
EOF
    
    success "Monitoring configured"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
setup_caching() {
    log "üíæ Setting up caching configuration..."
    
    # –°–æ–∑–¥–∞–µ–º .npmrc –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    cat > .npmrc << 'EOF'
cache-min=3600
registry=https://registry.npmjs.org/
save-exact=true
EOF
    
    success "Caching configured"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CI/CD
create_documentation() {
    log "üìö Creating CI/CD documentation..."
    
    cat > docs/CICD.md << 'EOF'
# üöÄ FixDrive CI/CD Documentation

## –û–±–∑–æ—Ä

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GitHub Actions –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ CI/CD –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

## Workflows

### 1. CI/CD Pipeline (`ci.yml`)
- **–¢—Ä–∏–≥–≥–µ—Ä—ã**: Push –Ω–∞ main/develop, Pull Requests
- **–ó–∞–¥–∞—á–∏**:
  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ (TypeScript, ESLint, Prettier)
  - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
  - –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  - –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
  - –î–µ–ø–ª–æ–π –Ω–∞ staging/production

### 2. Release Management (`release.yml`)
- **–¢—Ä–∏–≥–≥–µ—Ä—ã**: –¢–µ–≥–∏ –≤–µ—Ä—Å–∏–π, —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
- **–ó–∞–¥–∞—á–∏**:
  - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤
  - –°–±–æ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
  - –î–µ–ø–ª–æ–π —Ä–µ–ª–∏–∑–æ–≤
  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

### 3. Nightly Maintenance (`nightly.yml`)
- **–¢—Ä–∏–≥–≥–µ—Ä—ã**: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 02:00 UTC
- **–ó–∞–¥–∞—á–∏**:
  - –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  - –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤

## –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

### GitHub Secrets
```bash
SLACK_WEBHOOK          # URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Slack
TELEGRAM_BOT_TOKEN     # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TELEGRAM_CHAT_ID       # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
```

### Environment Variables
```bash
NODE_ENV=production    # –û–∫—Ä—É–∂–µ–Ω–∏–µ
API_BASE_URL          # URL API
DATABASE_URL          # URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
```

## –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞

### Pre-commit hooks
```bash
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ hooks
chmod +x .git/hooks/pre-commit

# –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
npm run pre-commit
```

### Docker
```bash
# –ó–∞–ø—É—Å–∫ –≤ Docker
docker-compose up

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
docker build -t fixdrive .
```

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

### Health Check
```bash
curl http://localhost:3000/health
```

### –õ–æ–≥–∏
```bash
# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ CI/CD
gh run list
gh run view <run-id>

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
npm run logs
```

## Troubleshooting

### –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

1. **–¢–µ—Å—Ç—ã –ø–∞–¥–∞—é—Ç**
   ```bash
   npm test -- --verbose
   ```

2. **ESLint –æ—à–∏–±–∫–∏**
   ```bash
   npx eslint . --fix
   ```

3. **TypeScript –æ—à–∏–±–∫–∏**
   ```bash
   npx tsc --noEmit
   ```

### –ö–æ–Ω—Ç–∞–∫—Ç—ã
- DevOps Team: devops@fixdrive.com
- Slack: #fixdrive-devops
EOF
    
    success "Documentation created"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ FixDrive CI/CD Setup"
    echo "========================"
    
    check_dependencies
    install_packages
    setup_git_hooks
    setup_env_vars
    setup_docker
    setup_monitoring
    setup_caching
    create_documentation
    
    echo ""
    success "üéâ CI/CD setup completed successfully!"
    echo ""
    echo "üìã Next steps:"
    echo "1. Update .env.local with your actual values"
    echo "2. Set up GitHub Secrets (SLACK_WEBHOOK, TELEGRAM_BOT_TOKEN, etc.)"
    echo "3. Configure EAS Build credentials"
    echo "4. Push to GitHub to trigger first CI/CD run"
    echo ""
    echo "üìö Documentation: docs/CICD.md"
    echo "üîß Configuration: .github/workflows/"
}

# –ó–∞–ø—É—Å–∫
main "$@"
