const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
function processFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å console.log
    const consoleLogRegex = /.*console\.log\([^)]*\);?\s*/g;
    const newContent = content.replace(consoleLogRegex, '');
    
    if (newContent !== content) {
      modified = true;
      fs.writeFileSync(filePath, newContent, 'utf8');
      console.log(`‚úÖ Fixed: ${filePath}`);
    }
    
    return modified;
  } catch (error) {
    console.error(`‚ùå Error processing ${filePath}:`, error.message);
    return false;
  }
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é src, –∏—Å–∫–ª—é—á–∞—è __tests__
function processDirectory(dirPath) {
  let totalFixed = 0;
  
  try {
    const items = fs.readdirSync(dirPath);
    
    for (const item of items) {
      const fullPath = path.join(dirPath, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º __tests__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if (item !== '__tests__') {
          totalFixed += processDirectory(fullPath);
        }
      } else if (stat.isFile() && (item.endsWith('.ts') || item.endsWith('.tsx'))) {
        if (processFile(fullPath)) {
          totalFixed++;
        }
      }
    }
  } catch (error) {
    console.error(`‚ùå Error processing directory ${dirPath}:`, error.message);
  }
  
  return totalFixed;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîß Final console.log cleanup (excluding tests)...\n');
  
  const srcDir = path.join(__dirname, '..', 'src');
  const totalFixed = processDirectory(srcDir);
  
  console.log(`\nüéâ Fixed ${totalFixed} files with console.log statements!`);
}

main();
