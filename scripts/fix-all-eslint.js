#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üöÄ Final ESLint Fix - Target: 0 warnings');
console.log('========================================');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function fixFile(filePath) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ùå File not found: ${filePath}`);
    return false;
  }

  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const fixes = [
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    {
      pattern: /(\s+}, \[[\s\S]*?)(\s*\]);\s*\/\/.*missing dependency.*'([^']+)'/g,
      replacement: '$1, $3]);',
      description: 'Add missing dependency'
    },
    {
      pattern: /(\s+}, \[\]);\s*\/\/.*missing dependency.*'([^']+)'/g,
      replacement: '$1, $2]);',
      description: 'Add missing dependency to empty array'
    },
    // –û–±–µ—Ä—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ useCallback
    {
      pattern: /(\s+)(const\s+(\w+)\s*=\s*async\s*\([^)]*\)\s*=>\s*\{)/g,
      replacement: '$1const $3 = useCallback(async ($4) => {',
      description: 'Wrap async function in useCallback'
    },
    {
      pattern: /(\s+)(const\s+(\w+)\s*=\s*\([^)]*\)\s*=>\s*\{)/g,
      replacement: '$1const $3 = useCallback(($4) => {',
      description: 'Wrap function in useCallback'
    },
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç useCallback –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    {
      pattern: /(import\s+React,\s*\{[^}]*\})/g,
      replacement: '$1, useCallback',
      description: 'Add useCallback import'
    },
    {
      pattern: /(import\s+React\s+from\s+"react")/g,
      replacement: 'import React, { useCallback } from "react"',
      description: 'Add useCallback import to React import'
    }
  ];

  for (const fix of fixes) {
    const newContent = content.replace(fix.pattern, fix.replacement);
    if (newContent !== content) {
      content = newContent;
      modified = true;
      console.log(`‚úÖ ${fix.description} in ${filePath}`);
    }
  }

  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`üìù Modified: ${filePath}`);
  }

  return modified;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const filesToFix = [
    'src/components/EarningsScreen/hooks/useVIPTimeTracking.ts',
    'src/context/PackageContext.tsx',
    'src/context/ProfileContext.tsx',
    'src/hooks/client/useClientBalance.ts',
    'src/hooks/client/useDriversList.ts',
    'src/hooks/driver/DriverUseAvatar.ts',
    'src/hooks/driver/DriverUseProfile.ts',
    'src/screens/client/DriversScreen.tsx'
  ];

  let fixedCount = 0;

  for (const file of filesToFix) {
    if (fixFile(file)) {
      fixedCount++;
    }
  }

  console.log(`\nüéâ Fixed ${fixedCount} files`);
  console.log('üîç Run "npm run lint" to check results');
}

main();
