#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üé® –°–æ–∑–¥–∞—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–∏–ª–∏...');

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ TypeScript
try {
  const tscOutput = execSync('npx tsc --noEmit', { encoding: 'utf8', stdio: 'pipe' });
  const errors = tscOutput.split('\n').filter(line => line.includes('Cannot find module') && line.includes('.styles'));
  
  let createdFiles = 0;
  
  errors.forEach(error => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ç–∏–ª–µ–π
    const match = error.match(/Cannot find module '([^']+\.styles[^']*)'/);
    if (match) {
      const stylePath = match[1];
      const fullPath = path.join('src', stylePath);
      const dir = path.dirname(fullPath);
      
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∏–ª–µ–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!fs.existsSync(fullPath)) {
        const fileName = path.basename(fullPath, '.styles.ts');
        const componentName = fileName.charAt(0).toUpperCase() + fileName.slice(1);
        
        const styleContent = `import { StyleSheet } from 'react-native';

export const create${componentName}Styles = (isDark: boolean) => StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: isDark ? '#000' : '#fff',
  },
  // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
});

export const ${componentName}Styles = create${componentName}Styles(false);
export const get${componentName}Styles = create${componentName}Styles;
`;
        
        fs.writeFileSync(fullPath, styleContent, 'utf8');
        createdFiles++;
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω: ${fullPath}`);
      }
    }
  });
  
  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:`);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∏–ª–µ–π: ${createdFiles}`);
  
} catch (error) {
  console.log('‚ÑπÔ∏è TypeScript –æ—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
}
