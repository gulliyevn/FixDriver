#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run test:schedule
 */

const { exec } = require('child_process');
const path = require('path');

const testPaths = [
  'src/screens/common/FixDriveScreen/components/sections/__tests__/FlexibleScheduleSection.test.tsx',
  'src/screens/common/FixDriveScreen/components/__tests__/WeekDaysSelector.test.tsx',
  'src/screens/common/FixDriveScreen/components/hooks/__tests__/useCustomizedDays.test.tsx',
  'src/utils/__tests__/scheduleStorage.test.ts',
];

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function runTest(testPath) {
  return new Promise((resolve, reject) => {
    const command = `npx jest ${testPath} --verbose --colors`;
    
    log(`\n${'='.repeat(80)}`, colors.cyan);
    log(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: ${path.basename(testPath)}`, colors.bright);
    log(`${'='.repeat(80)}`, colors.cyan);
    
    const child = exec(command, (error, stdout, stderr) => {
      if (error) {
        log(`‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏: ${testPath}`, colors.red);
        log(error.message, colors.red);
        reject(error);
      } else {
        log(`‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏: ${testPath}`, colors.green);
        resolve(stdout);
      }
    });

    child.stdout.on('data', (data) => {
      process.stdout.write(data);
    });

    child.stderr.on('data', (data) => {
      process.stderr.write(data);
    });
  });
}

async function runAllTests() {
  log('\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...', colors.bright + colors.blue);
  log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${testPaths.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤`, colors.blue);
  
  const results = [];
  let passedCount = 0;
  let failedCount = 0;

  for (const testPath of testPaths) {
    try {
      await runTest(testPath);
      results.push({ path: testPath, status: 'passed' });
      passedCount++;
    } catch (error) {
      results.push({ path: testPath, status: 'failed', error });
      failedCount++;
    }
  }

  // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  log('\n' + '='.repeat(80), colors.magenta);
  log('üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', colors.bright + colors.magenta);
  log('='.repeat(80), colors.magenta);

  results.forEach((result, index) => {
    const icon = result.status === 'passed' ? '‚úÖ' : '‚ùå';
    const color = result.status === 'passed' ? colors.green : colors.red;
    const fileName = path.basename(result.path);
    
    log(`${icon} ${fileName}`, color);
  });

  log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:', colors.bright);
  log(`‚úÖ –ü—Ä–æ—à–ª–∏: ${passedCount}`, colors.green);
  log(`‚ùå –ù–µ –ø—Ä–æ—à–ª–∏: ${failedCount}`, colors.red);
  log(`üìä –í—Å–µ–≥–æ: ${results.length}`, colors.blue);

  if (failedCount > 0) {
    log('\nüî• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.', colors.red);
    process.exit(1);
  } else {
    log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!', colors.green);
    log('üöÄ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!', colors.bright + colors.green);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
  log('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', colors.bright);
  log('');
  log('npm run test:schedule              - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã', colors.blue);
  log('npm run test:schedule --watch      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è', colors.blue);
  log('npm run test:schedule --coverage   - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞', colors.blue);
  log('npm run test:schedule --help       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É', colors.blue);
  log('');
  log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:', colors.bright);
  testPaths.forEach(path => {
    log(`  ‚Ä¢ ${path.basename(path)}`, colors.cyan);
  });
  process.exit(0);
}

if (args.includes('--watch')) {
  log('üëÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...', colors.yellow);
  const command = `npx jest ${testPaths.join(' ')} --watch --verbose`;
  exec(command, { stdio: 'inherit' });
} else if (args.includes('--coverage')) {
  log('üìä –ó–∞–ø—É—Å–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞...', colors.yellow);
  const command = `npx jest ${testPaths.join(' ')} --coverage --verbose`;
  exec(command, { stdio: 'inherit' });
} else {
  runAllTests().catch((error) => {
    log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
    process.exit(1);
  });
}
