#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è any —Ç–∏–ø–æ–≤
 * –ß–∞—Å—Ç—å –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å, —á–∞—Å—Ç—å –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ any —Ç–∏–ø–æ–≤...\n');

// 1. –ü—Ä–æ—Å—Ç—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ–Ω—ã
const simpleReplacements = [
  // –°—Ç–∏–ª–∏
  { from: 'styles: any', to: 'styles: StyleSheet.NamedStyles<any>' },
  { from: 'style: any', to: 'style: ViewStyle' },
  
  // –°–æ–±—ã—Ç–∏—è
  { from: 'event: any', to: 'event: unknown' },
  { from: 'onPress: any', to: 'onPress: () => void' },
  
  // –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
  { from: 'data: any', to: 'data: Record<string, unknown>' },
  { from: 'response: any', to: 'response: unknown' },
  { from: 'params: any', to: 'params: Record<string, unknown>' },
  
  // –ú–∞—Å—Å–∏–≤—ã
  { from: 'items: any[]', to: 'items: unknown[]' },
  { from: 'list: any[]', to: 'list: unknown[]' },
  
  // –§—É–Ω–∫—Ü–∏–∏
  { from: 'callback: any', to: 'callback: (...args: unknown[]) => void' },
  { from: 'handler: any', to: 'handler: (...args: unknown[]) => void' },
];

// 2. –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã —Å any
function findAnyFiles() {
  try {
    const result = execSync('npm run lint 2>&1 | grep "no-explicit-any"', { encoding: 'utf8' });
    const lines = result.split('\n').filter(line => line.includes('.tsx') || line.includes('.ts'));
    
    const files = new Set();
    lines.forEach(line => {
      // –ò—â–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å—Ç—Ä–æ–∫–µ
      const match = line.match(/(\/Users\/[^:]+\.(tsx?))/);
      if (match) {
        files.add(match[1]);
      }
    });
    
    return Array.from(files);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤ —Å any:', error.message);
    return [];
  }
}

// 3. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–º–µ–Ω—ã
function applySimpleReplacements(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let changed = false;
    
    simpleReplacements.forEach(({ from, to }) => {
      const regex = new RegExp(from.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
      if (content.includes(from)) {
        content = content.replace(regex, to);
        changed = true;
        console.log(`  ‚úÖ ${from} ‚Üí ${to}`);
      }
    });
    
    if (changed) {
      fs.writeFileSync(filePath, content);
      return true;
    }
    return false;
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
    return false;
  }
}

// 4. –ù–∞–π—Ç–∏ —Å–ª–æ–∂–Ω—ã–µ any –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function findComplexAny(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    const complexAny = [];
    
    lines.forEach((line, index) => {
      // –ò—â–µ–º —Å–ª–æ–∂–Ω—ã–µ any –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –≤—Ä—É—á–Ω—É—é
      if (line.includes(': any') && 
          !line.includes('styles: any') && 
          !line.includes('event: any') &&
          !line.includes('response: any') &&
          !line.includes('data: any') &&
          !line.includes('params: any')) {
        
        complexAny.push({
          line: index + 1,
          content: line.trim(),
          file: filePath
        });
      }
    });
    
    return complexAny;
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ${filePath}:`, error.message);
    return [];
  }
}

// 5. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üìä –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å any —Ç–∏–ø–∞–º–∏...');
  const files = findAnyFiles();
  
  if (files.length === 0) {
    console.log('‚úÖ –§–∞–π–ª–æ–≤ —Å any –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }
  
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ —Å any —Ç–∏–ø–∞–º–∏\n`);
  
  let totalFixed = 0;
  const complexAny = [];
  
  files.forEach(file => {
    console.log(`üîß –û–±—Ä–∞–±–æ—Ç–∫–∞: ${file}`);
    
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–º–µ–Ω—ã
    if (applySimpleReplacements(file)) {
      totalFixed++;
    }
    
    // –ù–∞–π—Ç–∏ —Å–ª–æ–∂–Ω—ã–µ any
    const complex = findComplexAny(file);
    complexAny.push(...complex);
  });
  
  console.log(`\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalFixed} —Ñ–∞–π–ª–æ–≤`);
  
  if (complexAny.length > 0) {
    console.log(`\n‚ö†Ô∏è  –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ –í–†–£–ß–ù–£–Æ (${complexAny.length} —Å–ª—É—á–∞–µ–≤):`);
    console.log('=' .repeat(60));
    
    complexAny.forEach((item, index) => {
      console.log(`${index + 1}. ${item.file}:${item.line}`);
      console.log(`   ${item.content}`);
      console.log('');
    });
    
    console.log('=' .repeat(60));
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log('1. –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤');
    console.log('2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ generic —Ç–∏–ø—ã –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π');
    console.log('3. –î–æ–±–∞–≤—å—Ç–µ —Ç–∏–ø—ã –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤');
    console.log('4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ union —Ç–∏–ø—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
  }
  
  console.log('\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run lint');
  console.log('2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è any –≤—Ä—É—á–Ω—É—é');
  console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤');
}

// –ó–∞–ø—É—Å–∫
main();
