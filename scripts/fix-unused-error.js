#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const glob = require('glob');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ error...');

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ .ts –∏ .tsx —Ñ–∞–π–ª—ã
const files = glob.sync('src/**/*.{ts,tsx}', { ignore: ['src/**/*.test.*', 'src/**/*.spec.*'] });

let fixedFiles = 0;
let totalFixes = 0;

files.forEach(filePath => {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // –ó–∞–º–µ–Ω—è–µ–º error –Ω–∞ _ –≤ catch –±–ª–æ–∫–∞—Ö –≥–¥–µ error –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    const catchErrorRegex = /catch\s*\(\s*error\s*\)\s*{\s*\/\/\s*Ignore\s*error\s*console\.warn\('Error caught',\s*error\);\s*}/g;
    
    content = content.replace(catchErrorRegex, (match) => {
      modified = true;
      totalFixes++;
      return `catch (_) {
        // Ignore error
        console.warn('Error caught');
      }`;
    });
    
    // –¢–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ–º –≤ –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö –≥–¥–µ error –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    const unusedErrorRegex = /catch\s*\(\s*error\s*\)\s*{\s*console\.warn\('Error caught',\s*error\);\s*}/g;
    
    content = content.replace(unusedErrorRegex, (match) => {
      modified = true;
      totalFixes++;
      return `catch (_) {
        console.warn('Error caught');
      }`;
    });
    
    if (modified) {
      fs.writeFileSync(filePath, content, 'utf8');
      fixedFiles++;
      console.log(`‚úÖ ${filePath} - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${filePath}:`, error.message);
  }
});

console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:`);
console.log(`‚úÖ –§–∞–π–ª–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedFiles}`);
console.log(`üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalFixes}`);
