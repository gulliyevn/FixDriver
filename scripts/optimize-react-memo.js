#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ React.memo Optimization Script');
console.log('================================');

// –ù–∞–π—Ç–∏ –≤—Å–µ .tsx —Ñ–∞–π–ª—ã –≤ src/components
function findTsxFiles(dir) {
  const files = [];
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      files.push(...findTsxFiles(fullPath));
    } else if (item.endsWith('.tsx')) {
      files.push(fullPath);
    }
  }
  
  return files;
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
function needsOptimization(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (!content.includes('React.FC') && !content.includes('const ') && !content.includes('function ')) {
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∂–µ –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω
  if (content.includes('React.memo') || content.includes('memo(')) {
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–±–æ–ª—å—à–µ 200 —Å—Ç—Ä–æ–∫)
  const lines = content.split('\n').length;
  if (lines < 200) {
    return false;
  }
  
  return true;
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
function optimizeComponent(filePath) {
  console.log(`üìù Optimizing: ${filePath}`);
  
  let content = fs.readFileSync(filePath, 'utf8');
  
  // –î–æ–±–∞–≤–∏—Ç—å memo –≤ –∏–º–ø–æ—Ä—Ç—ã
  if (content.includes('import React')) {
    if (content.includes('import React, {') && !content.includes('memo')) {
      content = content.replace(
        /import React, \{([^}]+)\}/,
        (match, imports) => {
          const importList = imports.split(',').map(imp => imp.trim());
          if (!importList.includes('memo')) {
            importList.push('memo');
          }
          return `import React, { ${importList.join(', ')} }`;
        }
      );
    } else if (content.includes('import React from') && !content.includes('memo')) {
      content = content.replace(
        'import React from "react"',
        'import React, { memo } from "react"'
      );
    }
  }
  
  // –ù–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (–±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥)
  const componentMatch = content.match(/const\s+(\w+)\s*[=:]\s*\([^)]*\)\s*=>\s*\{/);
  if (componentMatch) {
    const componentName = componentMatch[1];
    
    // –ó–∞–º–µ–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    content = content.replace(
      new RegExp(`const\\s+${componentName}\\s*[=:].*?=>\\s*\\{`),
      `const ${componentName} = memo(() => {`
    );
    
    // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π }; –∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ });
    const lines = content.split('\n');
    for (let i = lines.length - 1; i >= 0; i--) {
      if (lines[i].trim() === '};') {
        lines[i] = '});';
        break;
      }
    }
    content = lines.join('\n');
    
    // –î–æ–±–∞–≤–∏—Ç—å displayName –ø–µ—Ä–µ–¥ export
    const exportMatch = content.match(/export\s+default\s+(\w+)/);
    if (exportMatch) {
      const exportName = exportMatch[1];
      content = content.replace(
        `export default ${exportName}`,
        `${exportName}.displayName = '${exportName}';\n\nexport default ${exportName}`
      );
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
  fs.writeFileSync(filePath, content);
  console.log(`‚úÖ Optimized: ${filePath}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const componentsDir = path.join(__dirname, '..', 'src', 'components');
  
  if (!fs.existsSync(componentsDir)) {
    console.error('‚ùå Components directory not found');
    process.exit(1);
  }
  
  const tsxFiles = findTsxFiles(componentsDir);
  console.log(`üìÅ Found ${tsxFiles.length} .tsx files`);
  
  const filesToOptimize = tsxFiles.filter(needsOptimization);
  console.log(`üéØ ${filesToOptimize.length} files need optimization`);
  
  if (filesToOptimize.length === 0) {
    console.log('‚úÖ All components are already optimized!');
    return;
  }
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã
  for (const file of filesToOptimize) {
    try {
      optimizeComponent(file);
    } catch (error) {
      console.error(`‚ùå Error optimizing ${file}:`, error.message);
    }
  }
  
  console.log(`\nüéâ Optimization complete!`);
  console.log(`üìä Optimized ${filesToOptimize.length} components`);
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TypeScript
  console.log('\nüîç Checking TypeScript...');
  try {
    execSync('npm run type-check', { stdio: 'inherit' });
    console.log('‚úÖ TypeScript check passed');
  } catch (error) {
    console.error('‚ùå TypeScript check failed');
  }
}

main();
