const { execSync } = require('child_process');

console.log('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...\n');

let hasVulnerabilities = false;

// 1. npm audit
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π npm...');
try {
  execSync('npm audit --audit-level=critical', { stdio: 'pipe' });
  console.log('‚úÖ npm audit: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ—Ç');
} catch (error) {
  console.log('‚ö†Ô∏è  npm audit: –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã (–Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ)');
  // –ù–µ —Å—á–∏—Ç–∞–µ–º npm —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏ –¥–ª—è CI/CD
  // hasVulnerabilities = true;
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ
console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ...');
const fs = require('fs');
const path = require('path');

const sensitivePatterns = [
  /password\s*=\s*['"][^'"]+['"]/gi,
  /secret\s*=\s*['"][^'"]+['"]/gi,
  /api_key\s*=\s*['"][^'"]+['"]/gi,
  /private_key\s*=\s*['"][^'"]+['"]/gi,
  /access_token\s*=\s*['"][^'"]+['"]/gi,
  /refresh_token\s*=\s*['"][^'"]+['"]/gi,
];

function checkFileForSecrets(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const issues = [];
    
    sensitivePatterns.forEach((pattern, index) => {
      const matches = content.match(pattern);
      if (matches) {
        issues.push({
          pattern: pattern.source,
          matches: matches.length,
          lines: matches.map(match => {
            const lineNumber = content.substring(0, content.indexOf(match)).split('\n').length;
            return { line: lineNumber, content: match };
          })
        });
      }
    });
    
    return issues;
  } catch (error) {
    return [];
  }
}

function scanDirectory(dirPath, extensions = ['.ts', '.tsx', '.js', '.jsx']) {
  let hasSecrets = false;
  
  try {
    const items = fs.readdirSync(dirPath);
    
    for (const item of items) {
      const fullPath = path.join(dirPath, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
        if (scanDirectory(fullPath, extensions)) {
          hasSecrets = true;
        }
      } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        if (!fullPath.includes('__tests__') && !fullPath.includes('.test.') && !fullPath.includes('.spec.')) {
          const issues = checkFileForSecrets(fullPath);
          if (issues.length > 0) {
            console.log(`‚ö†Ô∏è  ${fullPath}:`);
            issues.forEach(issue => {
              console.log(`   - Pattern: ${issue.pattern} (${issue.matches} matches)`);
            });
            hasSecrets = true;
          }
        }
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  }
  
  return hasSecrets;
}

const srcPath = path.join(__dirname, '..', 'src');
const hasSecrets = scanDirectory(srcPath);

if (hasSecrets) {
  console.log('‚ö†Ô∏è  –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–¥–µ');
  hasVulnerabilities = true;
} else {
  console.log('‚úÖ –°–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ: –ù–µ –Ω–∞–π–¥–µ–Ω—ã');
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
try {
  const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8'));
  const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
  
  const suspiciousPackages = Object.keys(dependencies).filter(pkg => 
    pkg.includes('unmaintained') || 
    pkg.includes('deprecated') ||
    pkg.includes('vulnerable')
  );
  
  if (suspiciousPackages.length > 0) {
    console.log('‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:', suspiciousPackages.join(', '));
    hasVulnerabilities = true;
  } else {
    console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: OK');
  }
} catch (error) {
  console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');
}

console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
if (hasVulnerabilities) {
  console.log('‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã!');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   - –û–±–Ω–æ–≤–∏—Ç–µ —É—è–∑–≤–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');
  console.log('   - –£–¥–∞–ª–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –∫–æ–¥–∞');
  console.log('   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
} else {
  console.log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ!');
  process.exit(0);
}
