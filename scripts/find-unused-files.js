const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
function getAllFiles(dirPath, arrayOfFiles = []) {
  const files = fs.readdirSync(dirPath);

  files.forEach(file => {
    const fullPath = path.join(dirPath, file);
    if (fs.statSync(fullPath).isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
      if (!['node_modules', '.git', 'coverage', '__tests__'].includes(file)) {
        arrayOfFiles = getAllFiles(fullPath, arrayOfFiles);
      }
    } else {
      // –¢–æ–ª—å–∫–æ TypeScript/JavaScript —Ñ–∞–π–ª—ã
      if (file.endsWith('.ts') || file.endsWith('.tsx') || file.endsWith('.js') || file.endsWith('.jsx')) {
        arrayOfFiles.push(fullPath);
      }
    }
  });

  return arrayOfFiles;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function extractImports(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const imports = [];
    
    // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    const importRegexes = [
      /import\s+.*?\s+from\s+['"]([^'"]+)['"]/g,
      /import\s+['"]([^'"]+)['"]/g,
      /require\s*\(\s*['"]([^'"]+)['"]\s*\)/g
    ];

    importRegexes.forEach(regex => {
      let match;
      while ((match = regex.exec(content)) !== null) {
        const importPath = match[1];
        if (importPath.startsWith('./') || importPath.startsWith('../') || importPath.startsWith('src/')) {
          imports.push(importPath);
        }
      }
    });

    return imports;
  } catch (error) {
    console.error(`Error reading file ${filePath}:`, error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
function resolveImportPath(importPath, currentFile) {
  if (importPath.startsWith('src/')) {
    return path.resolve(process.cwd(), importPath);
  }
  
  const currentDir = path.dirname(currentFile);
  const resolvedPath = path.resolve(currentDir, importPath);
  
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  const extensions = ['.ts', '.tsx', '.js', '.jsx', ''];
  for (const ext of extensions) {
    const fullPath = resolvedPath + ext;
    if (fs.existsSync(fullPath)) {
      return fullPath;
    }
  }
  
  return null;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
function findUnusedFiles() {
  const srcPath = path.join(process.cwd(), 'src');
  const allFiles = getAllFiles(srcPath);
  
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${allFiles.length} —Ñ–∞–π–ª–æ–≤ –≤ src/`);
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  const fileMap = new Map();
  allFiles.forEach(file => {
    fileMap.set(file, {
      imports: extractImports(file),
      isUsed: false,
      usedBy: []
    });
  });
  
  // –û—Ç–º–µ—á–∞–µ–º —Ñ–∞–π–ª—ã –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ
  allFiles.forEach(file => {
    const fileInfo = fileMap.get(file);
    fileInfo.imports.forEach(importPath => {
      const resolvedPath = resolveImportPath(importPath, file);
      if (resolvedPath && fileMap.has(resolvedPath)) {
        const importedFile = fileMap.get(resolvedPath);
        importedFile.isUsed = true;
        importedFile.usedBy.push(file);
      }
    });
  });
  
  // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
  const unusedFiles = [];
  const usedFiles = [];
  
  fileMap.forEach((info, filePath) => {
    const relativePath = path.relative(process.cwd(), filePath);
    
    if (info.isUsed) {
      usedFiles.push({
        path: relativePath,
        usedBy: info.usedBy.map(f => path.relative(process.cwd(), f))
      });
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞
      const isEntryPoint = relativePath.includes('App.tsx') || 
                          relativePath.includes('index.ts') ||
                          relativePath.includes('main.ts');
      
      if (!isEntryPoint) {
        unusedFiles.push(relativePath);
      }
    }
  });
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
  console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: ${usedFiles.length}`);
  console.log(`‚ùå –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: ${unusedFiles.length}`);
  
  if (unusedFiles.length > 0) {
    console.log('\nüö® –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –§–ê–ô–õ–´:');
    unusedFiles.forEach(file => {
      console.log(`  - ${file}`);
    });
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞–ø–∫–∞–º
  const unusedByFolder = {};
  unusedFiles.forEach(file => {
    const folder = file.split('/')[1] || 'root';
    if (!unusedByFolder[folder]) {
      unusedByFolder[folder] = [];
    }
    unusedByFolder[folder].push(file);
  });
  
  console.log('\nüìÅ –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –§–ê–ô–õ–´ –ü–û –ü–ê–ü–ö–ê–ú:');
  Object.entries(unusedByFolder).forEach(([folder, files]) => {
    console.log(`\n${folder}/ (${files.length} —Ñ–∞–π–ª–æ–≤):`);
    files.forEach(file => {
      console.log(`  - ${file}`);
    });
  });
  
  return {
    unusedFiles,
    usedFiles,
    totalFiles: allFiles.length
  };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
if (require.main === module) {
  findUnusedFiles();
}

module.exports = { findUnusedFiles };
