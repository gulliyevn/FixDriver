// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ DEV-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ –∫–æ–¥–∞
const fs = require('fs');
const path = require('path');

const rootDir = process.cwd();
let processedFiles = 0;
let devCodeRemoved = 0;

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ DEV-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ –∫–æ–¥–∞
const devPatterns = [
  /console\.log\(['"`].*?['"`]\);?/g,
  /console\.warn\(['"`].*?['"`]\);?/g,
  /console\.info\(['"`].*?['"`]\);?/g,
  /console\.debug\(['"`].*?['"`]\);?/g,
  /\/\/\s*DEBUG.*$/gm,
  /\/\/\s*TODO.*$/gm,
  /\/\*\s*DEBUG[\s\S]*?\*\//g,
  /\/\*\s*TODO[\s\S]*?\*\//g,
];

// –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Ç—Ä–æ–≥–∞–µ–º
const protectedFiles = [
  'src/test-utils/',
  '__tests__',
  '.test.',
  '.spec.',
  'src/utils/devTools.ts', // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º devTools
  'src/utils/storageKeysDev.ts', // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º storageKeysDev
];

function isProtectedFile(filePath) {
  return protectedFiles.some(protected => filePath.includes(protected));
}

function processFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let hasChanges = false;
    let fileDevCodeRemoved = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª DEV-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∫–æ–¥
    const hasDevCode = devPatterns.some(pattern => pattern.test(content));
    
    if (!hasDevCode) {
      return false;
    }
    
    console.log(`üîß –û–±—Ä–∞–±–æ—Ç–∫–∞: ${filePath}`);
    
    // –£–¥–∞–ª—è–µ–º DEV-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∫–æ–¥
    devPatterns.forEach(pattern => {
      const matches = content.match(pattern);
      if (matches) {
        content = content.replace(pattern, '');
        fileDevCodeRemoved += matches.length;
        hasChanges = true;
      }
    });
    
    // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    if (hasChanges) {
      fs.writeFileSync(filePath, content, 'utf8');
      processedFiles++;
      devCodeRemoved += fileDevCodeRemoved;
      console.log(`‚úÖ –û—á–∏—â–µ–Ω: ${filePath} (—É–¥–∞–ª–µ–Ω–æ ${fileDevCodeRemoved} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DEV-–∫–æ–¥–∞)`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filePath}:`, error.message);
    return false;
  }
}

function scanDirectory(directory) {
  const items = fs.readdirSync(directory);
  
  items.forEach(item => {
    const fullPath = path.join(directory, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      if (!item.startsWith('.') && item !== 'node_modules' && item !== 'build') {
        scanDirectory(fullPath);
      }
    } else if (stat.isFile() && (item.endsWith('.ts') || item.endsWith('.tsx'))) {
      if (!isProtectedFile(fullPath)) {
        processFile(fullPath);
      }
    }
  });
}

console.log('üè≠ –û—á–∏—Å—Ç–∫–∞ DEV-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ –∫–æ–¥–∞...\n');

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ src/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const srcDir = path.join(rootDir, 'src');
if (fs.existsSync(srcDir)) {
  scanDirectory(srcDir);
}

console.log(`\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedFiles}`);
console.log(`   - –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DEV-–∫–æ–¥–∞: ${devCodeRemoved}`);

if (processedFiles > 0) {
  console.log('\n‚ú® –ó–∞–ø—É—Å–∫ Prettier –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  try {
    const { execSync } = require('child_process');
    execSync('npx prettier --write src/', { stdio: 'inherit' });
    console.log('‚úÖ Prettier –∑–∞–≤–µ—Ä—à–µ–Ω.');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Prettier:', error.message);
  }
} else {
  console.log('\n‚úÖ DEV-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω.');
}
