#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const projectRoot = process.cwd();
const srcPath = path.join(projectRoot, 'src');

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
const AUTOMATABLE_PATTERNS = [
  // –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã
  { pattern: /: any\s*=\s*\[\]/, replacement: ': unknown[] = []' },
  { pattern: /: any\s*=\s*\{\}/, replacement: ': Record<string, unknown> = {}' },
  { pattern: /: any\s*=\s*null/, replacement: ': unknown = null' },
  { pattern: /: any\s*=\s*undefined/, replacement: ': unknown = undefined' },
  { pattern: /: any\s*=\s*''/, replacement: ': string = \'\'' },
  { pattern: /: any\s*=\s*0/, replacement: ': number = 0' },
  { pattern: /: any\s*=\s*false/, replacement: ': boolean = false' },
  { pattern: /: any\s*=\s*true/, replacement: ': boolean = true' },
  
  // –§—É–Ω–∫—Ü–∏–∏
  { pattern: /: any\s*=\s*\(\)\s*=>\s*\{\}/, replacement: ': () => void = () => {}' },
  { pattern: /: any\s*=\s*\(\)\s*=>\s*null/, replacement: ': () => null = () => null' },
  
  // –ú–∞—Å—Å–∏–≤—ã –∏ –æ–±—ä–µ–∫—Ç—ã
  { pattern: /: any\[\]/, replacement: ': unknown[]' },
  { pattern: /: any\s*=\s*\[\]/, replacement: ': unknown[] = []' },
  { pattern: /: any\s*=\s*\{\}/, replacement: ': Record<string, unknown> = {}' },
  
  // React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  { pattern: /: any\s*as\s*any/, replacement: ': unknown as unknown' },
  { pattern: /as\s*any\s*\)/, replacement: 'as unknown)' },
  
  // –°–æ–±—ã—Ç–∏—è
  { pattern: /event:\s*any/, replacement: 'event: unknown' },
  { pattern: /error:\s*any/, replacement: 'error: unknown' },
  { pattern: /data:\s*any/, replacement: 'data: unknown' },
  { pattern: /item:\s*any/, replacement: 'item: unknown' },
  { pattern: /value:\s*any/, replacement: 'value: unknown' },
  { pattern: /result:\s*any/, replacement: 'result: unknown' },
  { pattern: /config:\s*any/, replacement: 'config: unknown' },
  
  // –°—Ç–∏–ª–∏
  { pattern: /styles:\s*any/, replacement: 'styles: Record<string, unknown>' },
  { pattern: /colors:\s*any/, replacement: 'colors: Record<string, string>' },
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  { pattern: /navigation:\s*any/, replacement: 'navigation: unknown' },
  { pattern: /params:\s*any/, replacement: 'params: Record<string, unknown>' },
  
  // API
  { pattern: /response:\s*any/, replacement: 'response: unknown' },
  { pattern: /request:\s*any/, replacement: 'request: unknown' },
];

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const MANUAL_PATTERNS = [
  // –°–ª–æ–∂–Ω—ã–µ —Ç–∏–ø—ã
  /: any\s*=\s*new\s+\w+\(/,
  /: any\s*=\s*await\s+/,
  /: any\s*=\s*JSON\.parse/,
  /: any\s*=\s*require\(/,
  /: any\s*=\s*import\(/,
  
  // –°–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
  /: any\s*=\s*\{[\s\S]*\}/,
  /: any\s*=\s*\[[\s\S]*\]/,
  
  // –§—É–Ω–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  /: any\s*=\s*\([^)]*\)\s*=>/,
  
  // –°–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
  /: any\s*=\s*[^=;,\n]+\.[^=;,\n]+/,
];

function analyzeFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const lines = content.split('\n');
  
  const results = {
    file: filePath,
    automatable: [],
    manual: [],
    total: 0
  };
  
  lines.forEach((line, index) => {
    if (line.includes('any')) {
      results.total++;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      for (const pattern of AUTOMATABLE_PATTERNS) {
        if (pattern.pattern.test(line)) {
          results.automatable.push({
            line: index + 1,
            content: line.trim(),
            pattern: pattern.pattern.toString(),
            replacement: pattern.replacement
          });
          return;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      for (const pattern of MANUAL_PATTERNS) {
        if (pattern.test(line)) {
          results.manual.push({
            line: index + 1,
            content: line.trim()
          });
          return;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –ø–æ–¥ –æ–¥–∏–Ω –ø–∞—Ç—Ç–µ—Ä–Ω, —Å—á–∏—Ç–∞–µ–º —Ä—É—á–Ω—ã–º
      results.manual.push({
        line: index + 1,
        content: line.trim()
      });
    }
  });
  
  return results;
}

function traverseDirectory(directory) {
  const results = [];
  
  function walkDir(dir) {
    const files = fs.readdirSync(dir);
    
    for (const file of files) {
      const fullPath = path.join(dir, file);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        walkDir(fullPath);
      } else if (file.endsWith('.ts') || file.endsWith('.tsx')) {
        const result = analyzeFile(fullPath);
        if (result.total > 0) {
          results.push(result);
        }
      }
    }
  }
  
  walkDir(directory);
  return results;
}

console.log('üîç –ê–Ω–∞–ª–∏–∑ any —Ç–∏–ø–æ–≤...\n');

const results = traverseDirectory(srcPath);

let totalAutomatable = 0;
let totalManual = 0;
let totalAny = 0;

console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:\n');

results.forEach(result => {
  if (result.total > 0) {
    console.log(`üìÅ ${result.file.replace(projectRoot + '/', '')}`);
    console.log(`   –í—Å–µ–≥–æ any: ${result.total}`);
    console.log(`   –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º—ã—Ö: ${result.automatable.length}`);
    console.log(`   –†—É—á–Ω—ã—Ö: ${result.manual.length}`);
    
    totalAutomatable += result.automatable.length;
    totalManual += result.manual.length;
    totalAny += result.total;
    
    if (result.automatable.length > 0) {
      console.log('   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º—ã–µ –ø—Ä–∏–º–µ—Ä—ã:');
      result.automatable.slice(0, 3).forEach(item => {
        console.log(`      –°—Ç—Ä–æ–∫–∞ ${item.line}: ${item.content}`);
        console.log(`      ‚Üí ${item.replacement}`);
      });
    }
    
    if (result.manual.length > 0) {
      console.log('   üîß –†—É—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:');
      result.manual.slice(0, 3).forEach(item => {
        console.log(`      –°—Ç—Ä–æ–∫–∞ ${item.line}: ${item.content}`);
      });
    }
    
    console.log('');
  }
});

console.log('üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
console.log(`   –í—Å–µ–≥–æ any —Ç–∏–ø–æ–≤: ${totalAny}`);
console.log(`   –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º—ã—Ö: ${totalAutomatable} (${Math.round(totalAutomatable/totalAny*100)}%)`);
console.log(`   –†—É—á–Ω—ã—Ö: ${totalManual} (${Math.round(totalManual/totalAny*100)}%)`);

console.log('\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
console.log(`   1. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å ${totalAutomatable} —Ç–∏–ø–æ–≤ —Å–∫—Ä–∏–ø—Ç–æ–º`);
console.log(`   2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å ${totalManual} —Ç–∏–ø–æ–≤ –≤—Ä—É—á–Ω—É—é`);
console.log(`   3. –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: ${Math.round(totalAutomatable/totalAny*100)}%`);
