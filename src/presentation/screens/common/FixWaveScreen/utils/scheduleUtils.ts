import { CONTAINER_COLORS } from '../components/TimeSchedulePage.styles';

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
export interface ScheduleContainer {
  color: string;
  address: string;
  fromCoordinate?: { latitude: number; longitude: number };
  toCoordinate?: { latitude: number; longitude: number };
  index: number;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
export const createScheduleContainers = (
  addresses: { from: string; to: string; stops: string[] },
  coordinates: { 
    from?: { latitude: number; longitude: number }; 
    to?: { latitude: number; longitude: number }; 
    stops: Array<{ latitude: number; longitude: number }> 
  },
  switchStates: { switch1: boolean; switch2: boolean; switch3: boolean }
): ScheduleContainer[] => {
  const containers: ScheduleContainer[] = [];
  let index = 0;
  
  // –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -> –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ -> –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
  if (addresses.from && addresses.to) {
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    containers.push({
      color: CONTAINER_COLORS.GREEN,
      address: addresses.from,
      fromCoordinate: coordinates.from,
      toCoordinate: coordinates.stops[0] || coordinates.to,
      index: index++,
    });
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–æ–∫
    addresses.stops.forEach((stop, stopIndex) => {
      containers.push({
        color: CONTAINER_COLORS.GREY,
        address: stop,
        fromCoordinate: coordinates.stops[stopIndex],
        toCoordinate: coordinates.stops[stopIndex + 1] || coordinates.to,
        index: index++,
      });
    });
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    containers.push({
      color: CONTAINER_COLORS.BLUE,
      address: addresses.to,
      fromCoordinate: coordinates.stops[coordinates.stops.length - 1] || coordinates.from,
      toCoordinate: coordinates.to,
      index: index++,
    });
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏
    if (addresses.from) {
      containers.push({
        color: CONTAINER_COLORS.GREEN,
        address: addresses.from,
        fromCoordinate: coordinates.from,
        toCoordinate: coordinates.stops[0] || coordinates.to,
        index: index++,
      });
    }
    
    addresses.stops.forEach((stop, stopIndex) => {
      containers.push({
        color: CONTAINER_COLORS.GREY,
        address: stop,
        fromCoordinate: coordinates.stops[stopIndex],
        toCoordinate: coordinates.stops[stopIndex + 1] || coordinates.to,
        index: index++,
      });
    });
    
    if (addresses.to) {
      containers.push({
        color: CONTAINER_COLORS.BLUE,
        address: addresses.to,
        fromCoordinate: coordinates.stops[coordinates.stops.length - 1] || coordinates.from,
        toCoordinate: coordinates.to,
        index: index++,
      });
    }
  }
  
  // –û–±—Ä–∞—Ç–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞
  if (switchStates.switch1) {
    containers.push({
      color: CONTAINER_COLORS.YELLOW,
      address: addresses.from || addresses.to || '',
      fromCoordinate: coordinates.to,
      toCoordinate: coordinates.from,
      index: index++,
    });
  }
  
  return containers;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ BLUE –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ö–£–î–ê)
export const getBlueContainerTime = (
  times: { fixed: Record<number, string>; weekday: Record<number, string>; weekend: Record<number, string> },
  isSmooth?: boolean,
  isWeekdaysMode?: boolean,
  isWeekendMode?: boolean,
  activeTimeField?: 'weekday' | 'weekend'
): string | undefined => {
  console.log('üîç getBlueContainerTime - –ò—â–µ–º –≤—Ä–µ–º—è –≤ BLUE –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:', {
    times,
    isSmooth,
    isWeekdaysMode,
    isWeekendMode,
    activeTimeField
  });
  
  // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∏—â–µ–º –≤—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
  let timeSource: Record<number, string>;
  
  if (isSmooth) {
    // –ü–ª–∞–≤–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º weekday/weekend
    if (isWeekdaysMode) {
      timeSource = times.weekday;
    } else {
      timeSource = times.weekend;
    }
  } else if (isWeekdaysMode !== undefined) {
    // –†–µ–∂–∏–º "–ë—É–¥–Ω–∏/–í—ã—Ö–æ–¥–Ω—ã–µ": –∏—Å–ø–æ–ª—å–∑—É–µ–º weekday/weekend
    if (activeTimeField) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
      timeSource = times[activeTimeField];
    } else if (isWeekendMode) {
      timeSource = times.weekend;
    } else {
      timeSource = times.weekday;
    }
  } else {
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º fixed
    timeSource = times.fixed;
  }
  
  console.log('üîç getBlueContainerTime - –ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–∏:', {
    timeSource,
    keys: Object.keys(timeSource),
    values: Object.values(timeSource)
  });
  
  // –ò—â–µ–º –≤—Ä–µ–º—è –≤ BLUE –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ (–æ–±—ã—á–Ω–æ –∏–Ω–¥–µ–∫—Å 1 –∏–ª–∏ 2)
  const allTimes = Object.values(timeSource);
  
  // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
  for (const time of allTimes) {
    if (time && time !== '') {
      console.log('‚úÖ getBlueContainerTime - –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è:', time);
      return time;
    }
  }
  
  // –ï—Å–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
  if (isSmooth || isWeekdaysMode !== undefined) {
    // –î–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∏ –±—É–¥–Ω–∏/–≤—ã—Ö–æ–¥–Ω—ã–µ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ–±—É–µ–º fixed –∫–∞–∫ fallback
    const fixedTimes = Object.values(times.fixed);
    for (const time of fixedTimes) {
      if (time && time !== '') {
        console.log('‚úÖ getBlueContainerTime - –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –≤ fixed (fallback):', time);
        return time;
      }
    }
  } else {
    // –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–±—É–µ–º weekday/weekend –∫–∞–∫ fallback
    const weekdayTimes = Object.values(times.weekday);
    for (const time of weekdayTimes) {
      if (time && time !== '') {
        console.log('‚úÖ getBlueContainerTime - –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –≤ weekday (fallback):', time);
        return time;
      }
    }
    
    const weekendTimes = Object.values(times.weekend);
    for (const time of weekendTimes) {
      if (time && time !== '') {
        console.log('‚úÖ getBlueContainerTime - –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –≤ weekend (fallback):', time);
        return time;
      }
    }
  }
  
  console.log('‚ùå getBlueContainerTime - –í—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  return undefined;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –¥–Ω—è –∏–∑ –∫–ª—é—á–∞
export const getDayNumber = (dayKey: string): number => {
  const dayMap: Record<string, number> = {
    'mon': 1,
    'tue': 2,
    'wed': 3,
    'thu': 4,
    'fri': 5,
    'sat': 6,
    'sun': 0
  };
  return dayMap[dayKey] ?? 0;
};

export const getDepartureTime = (
  containerIndex: number,
  times: { fixed: Record<number, string>; weekday: Record<number, string>; weekend: Record<number, string> },
  containerColor?: string,
  isSmooth?: boolean,
  isWeekdaysMode?: boolean,
  isWeekendMode?: boolean,
  activeTimeField?: 'weekday' | 'weekend'
): Date | undefined => {
  console.log('üîç getDepartureTime:', {
    containerIndex,
    containerColor,
    times,
  });
  
  // –î–ª—è GREEN –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–û–¢–ö–£–î–ê) –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ BLUE –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ö–£–î–ê)
  if (containerColor === CONTAINER_COLORS.GREEN) {
    const blueTime = getBlueContainerTime(times, isSmooth, isWeekdaysMode, isWeekendMode, activeTimeField);
    
    if (blueTime) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
      const today = new Date();
      const [hours, minutes] = blueTime.split(':').map(Number);
      today.setHours(hours, minutes, 0, 0);
      console.log('‚úÖ getDepartureTime - GREEN –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –≤—Ä–µ–º—è –æ—Ç–±—ã—Ç–∏—è:', today.toISOString());
      return today;
    }
  }
  
  // –î–ª—è GREY –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–î–û–ü1, –î–û–ü2) —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ BLUE –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  if (containerColor === CONTAINER_COLORS.GREY) {
    const blueTime = getBlueContainerTime(times, isSmooth, isWeekdaysMode, isWeekendMode, activeTimeField);
    
    if (blueTime) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
      const today = new Date();
      const [hours, minutes] = blueTime.split(':').map(Number);
      today.setHours(hours, minutes, 0, 0);
      console.log('‚úÖ getDepartureTime - GREY –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –≤—Ä–µ–º—è –æ—Ç–±—ã—Ç–∏—è:', today.toISOString());
      return today;
    }
  }
  
  // –î–ª—è BLUE –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ö–£–î–ê) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  if (containerColor === CONTAINER_COLORS.BLUE) {
    let blueTime: string | undefined;
    
    if (isSmooth) {
      // –ü–ª–∞–≤–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º weekday/weekend
      if (isWeekdaysMode) {
        blueTime = Object.values(times.weekday).find(time => time && time !== '');
      } else {
        blueTime = Object.values(times.weekend).find(time => time && time !== '');
      }
    } else if (isWeekdaysMode !== undefined) {
      // –†–µ–∂–∏–º "–ë—É–¥–Ω–∏/–í—ã—Ö–æ–¥–Ω—ã–µ": –∏—Å–ø–æ–ª—å–∑—É–µ–º weekday/weekend
      if (activeTimeField) {
        blueTime = Object.values(times[activeTimeField]).find(time => time && time !== '');
      } else if (isWeekendMode) {
        blueTime = Object.values(times.weekend).find(time => time && time !== '');
      } else {
        blueTime = Object.values(times.weekday).find(time => time && time !== '');
      }
    } else {
      // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º fixed
      blueTime = Object.values(times.fixed).find(time => time && time !== '');
    }
    
    if (blueTime) {
      const today = new Date();
      const [hours, minutes] = blueTime.split(':').map(Number);
      today.setHours(hours, minutes, 0, 0);
      console.log('‚úÖ getDepartureTime - BLUE –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –≤—Ä–µ–º—è:', today.toISOString());
      return today;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    console.log('‚ö†Ô∏è getDepartureTime - BLUE –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
    return getBlueContainerTime(times, isSmooth, isWeekdaysMode, isWeekendMode, activeTimeField) ? 
      (() => {
        const fallbackTime = getBlueContainerTime(times, isSmooth, isWeekdaysMode, isWeekendMode, activeTimeField);
        if (fallbackTime) {
          const today = new Date();
          const [hours, minutes] = fallbackTime.split(':').map(Number);
          today.setHours(hours, minutes, 0, 0);
          console.log('‚úÖ getDepartureTime - BLUE –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, fallback –≤—Ä–µ–º—è:', today.toISOString());
          return today;
        }
        return undefined;
      })() : undefined;
  }
  
  console.log('‚ùå getDepartureTime - –í—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  return undefined;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
export const canSelectTime = (color: string): boolean => {
  const result = color === CONTAINER_COLORS.BLUE || color === CONTAINER_COLORS.YELLOW;
  console.log('üîç canSelectTime:', { color, result });
  return result;
};
