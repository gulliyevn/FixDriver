import { useState, useEffect } from 'react';
import { RoutePoint } from '../../../../components/MapView/types/map.types';
import { DistanceCalculationService } from '../../../../services/DistanceCalculationService';

export const useScheduleContainer = (
  allowTimeSelection: boolean,
  fromCoordinate?: { latitude: number; longitude: number },
  toCoordinate?: { latitude: number; longitude: number },
  departureTime?: Date,
  shouldCalculateTime?: boolean
) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–ª–∞–≤–∞—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
  const [pickerState, setPickerState] = useState<{
    dayKey: string | null;
    date: Date;
    isVisible: boolean;
  }>({ dayKey: null, date: new Date(), isVisible: false });
  const [dayTempDate, setDayTempDate] = useState<Date>(new Date());
  const [localDayTimes, setLocalDayTimes] = useState<Record<string, string>>({});

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const [fixedPickerVisible, setFixedPickerVisible] = useState(false);
  const [fixedTempDate, setFixedTempDate] = useState<Date>(new Date());

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±—É–¥–Ω–∏/–≤—ã—Ö–æ–¥–Ω—ã–µ
  const [weekdayPickerVisible, setWeekdayPickerVisible] = useState(false);
  const [weekdayTempDate, setWeekdayTempDate] = useState<Date>(new Date());
  const [weekendPickerVisible, setWeekendPickerVisible] = useState(false);
  const [weekendTempDate, setWeekendTempDate] = useState<Date>(new Date());

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const [calculatedTime, setCalculatedTime] = useState<string>('--:--');
  const [isCalculating, setIsCalculating] = useState(false);

  // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª–µ–π "–û—Ç–∫—É–¥–∞" –∏ "–û—Å—Ç–∞–Ω–æ–≤–∫–∏"
  useEffect(() => {
    const calculateEstimatedTime = async () => {
      console.log('üîç useScheduleContainer - –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π:', {
        allowTimeSelection,
        hasFromCoordinate: !!fromCoordinate,
        hasToCoordinate: !!toCoordinate,
        hasDepartureTime: !!departureTime,
        shouldCalculateTime,
        shouldCalculate: shouldCalculateTime && fromCoordinate && toCoordinate && departureTime,
      });
      
      if (shouldCalculateTime && fromCoordinate && toCoordinate && departureTime) {
        setIsCalculating(true);
        try {
          const fromPoint: RoutePoint = {
            id: 'from',
            coordinate: fromCoordinate,
            type: 'start'
          };
          const toPoint: RoutePoint = {
            id: 'to',
            coordinate: toCoordinate,
            type: 'end'
          };
          
          const result = await DistanceCalculationService.calculateRouteSegment(
            fromPoint,
            toPoint,
            departureTime
          );
          
          console.log('üìà useScheduleContainer - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:', result);
          
          // –î–ª—è GREEN –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–û–¢–ö–£–î–ê) –≤—Ä–µ–º—è –æ—Ç–±—ã—Ç–∏—è = –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –º–∏–Ω—É—Å –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞
          let finalTime = result.estimatedTime;
          if (result.durationMinutes && result.durationMinutes > 0) {
            // –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (–∏–∑ BLUE –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
            const arrivalTime = new Date(departureTime);
            
            // –í—Ä–µ–º—è –æ—Ç–±—ã—Ç–∏—è = –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –º–∏–Ω—É—Å –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞
            const departureTimeCalculated = new Date(arrivalTime.getTime() - result.durationMinutes * 60 * 1000);
            const departureHours = departureTimeCalculated.getHours().toString().padStart(2, '0');
            const departureMinutes = departureTimeCalculated.getMinutes().toString().padStart(2, '0');
            
            finalTime = `${departureHours}:${departureMinutes}`;
            console.log('‚è∞ useScheduleContainer - –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–±—ã—Ç–∏—è:', {
              arrivalTime: arrivalTime.toISOString(),
              routeDurationMinutes: result.durationMinutes,
              departureTime: finalTime,
            });
          }
          
          setCalculatedTime(finalTime);
        } catch (error) {
          console.error('Error calculating time:', error);
          setCalculatedTime('--:--');
        } finally {
          setIsCalculating(false);
        }
      } else {
        setCalculatedTime('--:--');
      }
    };

    calculateEstimatedTime();
  }, [shouldCalculateTime, fromCoordinate, toCoordinate, departureTime]);

  return {
    // –ü–ª–∞–≤–∞—é—â–∏–π —Ä–µ–∂–∏–º
    pickerState,
    setPickerState,
    dayTempDate,
    setDayTempDate,
    localDayTimes,
    setLocalDayTimes,
    
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    fixedPickerVisible,
    setFixedPickerVisible,
    fixedTempDate,
    setFixedTempDate,
    
    // –ë—É–¥–Ω–∏/–≤—ã—Ö–æ–¥–Ω—ã–µ
    weekdayPickerVisible,
    setWeekdayPickerVisible,
    weekdayTempDate,
    setWeekdayTempDate,
    weekendPickerVisible,
    setWeekendPickerVisible,
    weekendTempDate,
    setWeekendTempDate,
    
    // –†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    calculatedTime,
    isCalculating,
  };
};
