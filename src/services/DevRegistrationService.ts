/**
 * ‚ö†Ô∏è DEV ONLY - TEMPORARY SERVICE ‚ö†Ô∏è
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ AsyncStorage –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
 * 
 * TODO: –£–î–ê–õ–ò–¢–¨ –ü–ï–†–ï–î –ü–†–û–î–ê–ö–®–ï–ù–û–ú!
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * - –í–∫–ª—é—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ __DEV__ === true
 * - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ª–æ–∫–∞–ª—å–Ω–æ
 * - –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ AsyncStorage
 * - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */

import AsyncStorage from '@react-native-async-storage/async-storage';

const DEV_STORAGE_KEYS = {
  USERS: '@dev_registered_users',
  DRIVERS: '@dev_registered_drivers',
};

export interface DevRegisteredUser {
  id: string;
  email: string;
  phone: string;
  password: string; // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ù–ò–ö–û–ì–î–ê –Ω–µ —Ö—Ä–∞–Ω–∏–º –ø–∞—Ä–æ–ª–∏ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ!
  firstName: string;
  lastName: string;
  role: 'client' | 'driver';
  registeredAt: string;
  
  // Driver-specific fields
  country?: string;
  licenseNumber?: string;
  licenseExpiry?: string;
  vehicleNumber?: string;
  experience?: string;
  carBrand?: string;
  carModel?: string;
  carYear?: string;
  carMileage?: string;
  tariff?: string;
  licensePhoto?: string;
  passportPhoto?: string;
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
 */
export const saveClientRegistration = async (data: {
  email: string;
  phone: string;
  password: string;
  firstName: string;
  lastName: string;
}): Promise<DevRegisteredUser> => {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
    const userId = `dev_client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    const user: DevRegisteredUser = {
      id: userId,
      ...data,
      role: 'client',
      registeredAt: new Date().toISOString(),
    };
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const existingUsersJson = await AsyncStorage.getItem(DEV_STORAGE_KEYS.USERS);
    const existingUsers: DevRegisteredUser[] = existingUsersJson 
      ? JSON.parse(existingUsersJson) 
      : [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ email
    const duplicate = existingUsers.find(u => u.email === data.email);
    if (duplicate) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existingUsers.push(user);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    await AsyncStorage.setItem(DEV_STORAGE_KEYS.USERS, JSON.stringify(existingUsers));
    
    console.log(`[DEV] üë§ Client registered locally: ${user.email}`);
    console.log(`[DEV] üÜî User ID: ${user.id}`);
    console.log(`[DEV] üîë Password saved: ${user.password}`);
    console.log(`[DEV] üì¶ Total users in storage: ${existingUsers.length}`);
    console.log(`[DEV] üíæ Storage key: ${DEV_STORAGE_KEYS.USERS}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    const verifyJson = await AsyncStorage.getItem(DEV_STORAGE_KEYS.USERS);
    const verifyUsers = verifyJson ? JSON.parse(verifyJson) : [];
    console.log(`[DEV] ‚úÖ Verification: ${verifyUsers.length} users in AsyncStorage`);
    
    return user;
  } catch (error) {
    console.error('[DEV] Error saving client registration:', error);
    throw error;
  }
};

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ)
 */
export const saveDriverRegistration = async (data: {
  email: string;
  phone: string;
  password: string;
  firstName: string;
  lastName: string;
  country: string;
  licenseNumber: string;
  licenseExpiry: string;
  vehicleNumber: string;
  experience: string;
  carBrand: string;
  carModel: string;
  carYear: string;
  carMileage: string;
  tariff: string;
  licensePhoto?: string;
  passportPhoto?: string;
}): Promise<DevRegisteredUser> => {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
    const driverId = `dev_driver_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    const driver: DevRegisteredUser = {
      id: driverId,
      ...data,
      role: 'driver',
      registeredAt: new Date().toISOString(),
    };
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
    const existingDriversJson = await AsyncStorage.getItem(DEV_STORAGE_KEYS.DRIVERS);
    const existingDrivers: DevRegisteredUser[] = existingDriversJson 
      ? JSON.parse(existingDriversJson) 
      : [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ email
    const duplicate = existingDrivers.find(d => d.email === data.email);
    if (duplicate) {
      throw new Error('–í–æ–¥–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
    existingDrivers.push(driver);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    await AsyncStorage.setItem(DEV_STORAGE_KEYS.DRIVERS, JSON.stringify(existingDrivers));
    
    console.log(`[DEV] üöó Driver registered locally: ${driver.email}`);
    console.log(`[DEV] üÜî Driver ID: ${driver.id}`);
    console.log(`[DEV] üîë Password saved: ${driver.password}`);
    console.log(`[DEV] üì¶ Total drivers in storage: ${existingDrivers.length}`);
    console.log(`[DEV] üíæ Storage key: ${DEV_STORAGE_KEYS.DRIVERS}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    const verifyJson = await AsyncStorage.getItem(DEV_STORAGE_KEYS.DRIVERS);
    const verifyDrivers = verifyJson ? JSON.parse(verifyJson) : [];
    console.log(`[DEV] ‚úÖ Verification: ${verifyDrivers.length} drivers in AsyncStorage`);
    
    return driver;
  } catch (error) {
    console.error('[DEV] Error saving driver registration:', error);
    throw error;
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
export const getAllDevUsers = async (): Promise<DevRegisteredUser[]> => {
  try {
    const usersJson = await AsyncStorage.getItem(DEV_STORAGE_KEYS.USERS);
    const driversJson = await AsyncStorage.getItem(DEV_STORAGE_KEYS.DRIVERS);
    
    const users: DevRegisteredUser[] = usersJson ? JSON.parse(usersJson) : [];
    const drivers: DevRegisteredUser[] = driversJson ? JSON.parse(driversJson) : [];
    
    return [...users, ...drivers];
  } catch (error) {
    console.error('[DEV] Error getting all users:', error);
    return [];
  }
};

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
export const clearAllDevRegistrations = async (): Promise<void> => {
  try {
    await AsyncStorage.multiRemove([
      DEV_STORAGE_KEYS.USERS,
      DEV_STORAGE_KEYS.DRIVERS,
    ]);
    console.log('[DEV] üóëÔ∏è All dev registrations cleared');
  } catch (error) {
    console.error('[DEV] Error clearing registrations:', error);
    throw error;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω –ª–∏ Dev —Ä–µ–∂–∏–º
 */
export const isDevModeEnabled = (): boolean => {
  return __DEV__;
};

/**
 * –í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å
 */
export const logDevRegistrationStats = async (): Promise<void> => {
  if (!__DEV__) return;
  
  try {
    const users = await getAllDevUsers();
    const clients = users.filter(u => u.role === 'client');
    const drivers = users.filter(u => u.role === 'driver');
    
    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë   DEV REGISTRATION STATS               ‚ïë');
    console.log('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£');
    console.log(`‚ïë üë• Total Users:    ${users.length.toString().padEnd(20)}‚ïë`);
    console.log(`‚ïë üë§ Clients:        ${clients.length.toString().padEnd(20)}‚ïë`);
    console.log(`‚ïë üöó Drivers:        ${drivers.length.toString().padEnd(20)}‚ïë`);
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
    
    if (users.length > 0) {
      console.log('\nRecent registrations:');
      users.slice(-5).forEach((user, index) => {
        console.log(`${index + 1}. [${user.role.toUpperCase()}] ${user.email} (${user.firstName} ${user.lastName})`);
      });
    }
  } catch (error) {
    console.error('[DEV] Error logging stats:', error);
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const DevRegistrationService = {
  saveClientRegistration,
  saveDriverRegistration,
  getAllDevUsers,
  clearAllDevRegistrations,
  isDevModeEnabled,
  logDevRegistrationStats,
};

export default DevRegistrationService;

