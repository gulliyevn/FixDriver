import { RoutePoint } from '../components/MapView/types/map.types';

export interface DistanceCalculationResult {
  distanceMeters: number;
  durationMinutes: number;
  trafficLevel: 'low' | 'medium' | 'high';
  estimatedTime: string; // —Ñ–æ—Ä–º–∞—Ç "HH:MM"
}

export class DistanceCalculationService {
  private static readonly OSRM_API_URL = 'https://router.project-osrm.org/route/v1/driving';
  
  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
   */
  static async calculateRouteSegment(
    from: RoutePoint,
    to: RoutePoint,
    departureTime?: Date
  ): Promise<DistanceCalculationResult> {
    try {
      console.log('üó∫Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º OSRM –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º OSRM API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –±–µ–∑ –∫–ª—é—á–∞)
      const coordinates = `${from.coordinate.longitude},${from.coordinate.latitude};${to.coordinate.longitude},${to.coordinate.latitude}`;
      const url = `${this.OSRM_API_URL}/${coordinates}?overview=false&steps=false`;

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`OpenRouteService error: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.routes || !data.routes[0]) {
        throw new Error('No route found');
      }

      const route = data.routes[0];
      const distanceMeters = route.distance;
      const durationSeconds = route.duration;
      const durationMinutes = Math.ceil(durationSeconds / 60);
      
      console.log('üìä OSRM —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
        distanceKm: (distanceMeters / 1000).toFixed(2),
        durationMinutes,
        durationSeconds
      });

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
      const estimatedTime = this.calculateEstimatedTime(departureTime, durationMinutes);

      return {
        distanceMeters,
        durationMinutes,
        trafficLevel: 'medium', // OpenRouteService –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–∫–∞—Ö
        estimatedTime,
      };
          } catch (error) {
        console.error('OSRM error:', error);
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–∞—Å—á–µ—Ç');
        // Fallback –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return this.calculateFallback(from, to);
      }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
   */
  static async calculateFullRoute(
    points: RoutePoint[],
    departureTime?: Date
  ): Promise<DistanceCalculationResult[]> {
    if (points.length < 2) {
      return [];
    }

    const results: DistanceCalculationResult[] = [];
    
    for (let i = 0; i < points.length - 1; i++) {
      const from = points[i];
      const to = points[i + 1];
      
      // –î–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      let segmentDepartureTime = departureTime;
      if (segmentDepartureTime && i > 0) {
        const accumulatedMinutes = results.reduce((sum, result) => sum + result.durationMinutes, 0);
        segmentDepartureTime = new Date(segmentDepartureTime.getTime() + accumulatedMinutes * 60 * 1000);
      }
      
      const result = await this.calculateRouteSegment(from, to, segmentDepartureTime);
      results.push(result);
    }

    return results;
  }

  /**
   * Fallback —Ä–∞—Å—á–µ—Ç—ã –±–µ–∑ API
   */
  private static calculateFallback(from: RoutePoint, to: RoutePoint): DistanceCalculationResult {
    // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
    const lat1 = from.coordinate.latitude * Math.PI / 180;
    const lat2 = to.coordinate.latitude * Math.PI / 180;
    const deltaLat = (to.coordinate.latitude - from.coordinate.latitude) * Math.PI / 180;
    const deltaLon = (to.coordinate.longitude - from.coordinate.longitude) * Math.PI / 180;

    const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +
              Math.cos(lat1) * Math.cos(lat2) *
              Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distanceMeters = 6371000 * c; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö

    // –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞
    // –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –¥–æ—Ä–æ–≥–∞–º –±–æ–ª—å—à–µ –ø—Ä—è–º–æ–≥–æ
    const roadDistanceMultiplier = 1.3; // +30% –∫ –ø—Ä—è–º–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    const averageSpeedKmh = 25; // –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –≥–æ—Ä–æ–¥–µ 25 –∫–º/—á
    
    const roadDistanceKm = (distanceMeters / 1000) * roadDistanceMultiplier;
    const durationMinutes = Math.ceil(roadDistanceKm / averageSpeedKmh * 60);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
    const trafficVariation = 0.9 + Math.random() * 0.4; // +10% –¥–æ +50%
    const finalDurationMinutes = Math.ceil(durationMinutes * trafficVariation);

    console.log('üöó Fallback —Ä–∞—Å—á–µ—Ç:', {
      directDistanceKm: (distanceMeters / 1000).toFixed(2),
      roadDistanceKm: roadDistanceKm.toFixed(2),
      averageSpeedKmh,
      baseDurationMinutes: durationMinutes,
      finalDurationMinutes,
      trafficVariation: trafficVariation.toFixed(2),
      formula: `${roadDistanceKm.toFixed(2)} –∫–º √∑ ${averageSpeedKmh} –∫–º/—á √ó 60 = ${durationMinutes} –º–∏–Ω`,
    });

    return {
      distanceMeters: Math.round(distanceMeters * roadDistanceMultiplier),
      durationMinutes: finalDurationMinutes,
      trafficLevel: 'medium',
      estimatedTime: this.calculateEstimatedTime(new Date(), finalDurationMinutes),
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–∞—Ñ–∏–∫–∞
   */
  private static determineTrafficLevel(
    durationInTraffic?: number,
    duration?: number
  ): 'low' | 'medium' | 'high' {
    if (!durationInTraffic || !duration) {
      return 'medium';
    }

    const ratio = durationInTraffic / duration;
    
    if (ratio < 1.2) return 'low';
    if (ratio < 1.5) return 'medium';
    return 'high';
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
   */
  private static calculateEstimatedTime(departureTime: Date | undefined, durationMinutes: number): string {
    const now = departureTime || new Date();
    const arrivalTime = new Date(now.getTime() + durationMinutes * 60 * 1000);
    
    const hours = arrivalTime.getHours().toString().padStart(2, '0');
    const minutes = arrivalTime.getMinutes().toString().padStart(2, '0');
    
    return `${hours}:${minutes}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static formatDistance(meters: number): string {
    if (meters < 1000) {
      return `${Math.round(meters)}–º`;
    }
    return `${(meters / 1000).toFixed(1)}–∫–º`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static formatDuration(minutes: number): string {
    if (minutes < 60) {
      return `${minutes}–º–∏–Ω`;
    }
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    return remainingMinutes > 0 ? `${hours}—á ${remainingMinutes}–º–∏–Ω` : `${hours}—á`;
  }
}
