import { useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useUserStorageKey, STORAGE_KEYS } from '../../utils/storageKeys';

export interface ClientTransaction {
  id: string;
  type: 'balance_topup' | 'package_purchase' | 'trip_payment' | 'cashback';
  amount: number;
  description: string;
  date: string;
  translationKey?: string;
  translationParams?: Record<string, string>;
  packageType?: string;
}

export interface ClientBalanceContextType {
  balance: number;
  transactions: ClientTransaction[];
  cashback: number;
  earnings?: number;
  topUpBalance: (amount: number) => Promise<void>;
  addEarnings?: (amount: number) => Promise<void>;
  deductBalance: (amount: number, description: string, packageType?: string) => Promise<boolean>;
  addTransaction: (transaction: Omit<ClientTransaction, 'id' | 'date'>) => Promise<void>;
  getCashback: () => Promise<number>;
  resetBalance?: () => Promise<void>;
  loadEarnings?: () => Promise<void>;
}

export const useClientBalance = (): ClientBalanceContextType => {
  const [balance, setBalance] = useState<number>(50); // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
  const [transactions, setTransactions] = useState<ClientTransaction[]>([]);
  const [cashback, setCashback] = useState<number>(0);
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const balanceKey = useUserStorageKey(STORAGE_KEYS.CLIENT_BALANCE);
  const transactionsKey = useUserStorageKey(STORAGE_KEYS.CLIENT_TRANSACTIONS);
  const cashbackKey = useUserStorageKey(STORAGE_KEYS.CLIENT_CASHBACK);

  useEffect(() => {
    loadBalance();
    loadTransactions();
    loadCashback();
  }, []);

  const loadBalance = async () => {
    try {
      const storedBalance = await AsyncStorage.getItem(balanceKey);
      if (storedBalance) {
        setBalance(parseFloat(storedBalance));
      }
    } catch (error) {
      console.error('Error loading client balance:', error);
    }
  };

  const loadTransactions = async () => {
    try {
      const storedTransactions = await AsyncStorage.getItem(transactionsKey);
      if (storedTransactions) {
        const parsedTransactions = JSON.parse(storedTransactions);
        
        // –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º translationKey –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        const migratedTransactions = parsedTransactions.map((transaction: any) => {
          if (transaction.type === 'balance_topup' && !transaction.translationKey) {
            return {
              ...transaction,
              translationKey: 'client.paymentHistory.transactions.topUp',
              translationParams: { amount: Math.abs(transaction.amount).toString() }
            };
          }
          return transaction;
        });
        
        setTransactions(migratedTransactions);
      }
    } catch (error) {
      console.error('Error loading client transactions:', error);
    }
  };

  const loadCashback = async () => {
    try {
      const storedCashback = await AsyncStorage.getItem(cashbackKey);
      if (storedCashback) {
        setCashback(parseFloat(storedCashback));
      }
    } catch (error) {
      console.error('Error loading client cashback:', error);
    }
  };

  const saveBalance = async (newBalance: number) => {
    try {
      await AsyncStorage.setItem(balanceKey, newBalance.toString());
      setBalance(newBalance);
    } catch (error) {
      console.error('Error saving client balance:', error);
    }
  };

  const saveTransactions = async (newTransactions: ClientTransaction[]) => {
    try {
      await AsyncStorage.setItem(transactionsKey, JSON.stringify(newTransactions));
      setTransactions(newTransactions);
    } catch (error) {
      console.error('Error saving client transactions:', error);
    }
  };

  const saveCashback = async (newCashback: number) => {
    try {
      await AsyncStorage.setItem(cashbackKey, newCashback.toString());
      setCashback(newCashback);
    } catch (error) {
      console.error('Error saving client cashback:', error);
    }
  };

  const topUpBalance = async (amount: number) => {
    const newBalance = balance + amount;
    await saveBalance(newBalance);
    
    await addTransaction({
      type: 'balance_topup',
      amount: amount,
      description: `Balance top-up ${amount} AFc`,
      translationKey: 'client.paymentHistory.transactions.topUp',
      translationParams: { amount: amount.toString() },
    });
  };

  const deductBalance = async (amount: number, description: string, packageType?: string): Promise<boolean> => {
    if (balance < amount) {
      return false; // Insufficient funds
    }

    const newBalance = balance - amount;
    await saveBalance(newBalance);
    
    await addTransaction({
      type: 'package_purchase',
      amount: -amount,
      description,
      packageType,
    });

    return true;
  };

  const addTransaction = async (transaction: Omit<ClientTransaction, 'id' | 'date'>) => {
    const newTransaction: ClientTransaction = {
      ...transaction,
      id: Date.now().toString(),
      date: new Date().toISOString(),
    };

    const newTransactions = [newTransaction, ...transactions];
    await saveTransactions(newTransactions);
  };

  const getCashback = async (): Promise<number> => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ cashback
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π cashback
    return cashback;
  };

  const resetBalance = async () => {
    try {
      console.log('üîÑ –°–±—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
      
      // –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      setBalance(0);
      await AsyncStorage.setItem(balanceKey, '0');
      
      // –û—á–∏—â–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      setTransactions([]);
      await AsyncStorage.setItem(transactionsKey, JSON.stringify([]));
      
      // –û–±–Ω—É–ª—è–µ–º cashback
      setCashback(0);
      await AsyncStorage.setItem(cashbackKey, '0');
      
      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', error);
    }
  };

  // Dummy —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
  const addEarnings = async (amount: number) => {
    console.log('üíµ –ö–ª–∏–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
  };

  // Dummy —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
  const loadEarnings = async () => {
    console.log('üíµ –ö–ª–∏–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
  };

  return {
    balance,
    transactions,
    cashback,
    earnings: 0, // –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç
    topUpBalance,
    addEarnings,
    deductBalance,
    addTransaction,
    getCashback,
    resetBalance,
    loadEarnings,
  };
}; 