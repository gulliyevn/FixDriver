import { useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useUserStorageKey, STORAGE_KEYS } from '../../utils/storageKeys';

export interface DriverTransaction {
  id: string;
  type: 'payment' | 'topup' | 'refund' | 'withdrawal';
  amount: number;
  description: string;
  date: string;
  translationKey?: string;
  translationParams?: Record<string, string>;
}

export interface DriverBalanceContextType {
  balance: number;
  transactions: DriverTransaction[];
  earnings: number;
  topUpBalance: (amount: number) => Promise<void>;
  addEarnings: (amount: number) => Promise<void>;
  withdrawBalance: (amount: number) => Promise<boolean>;
  addTransaction: (transaction: Omit<DriverTransaction, 'id' | 'date'>) => Promise<void>;
  getEarnings: () => Promise<number>;
  loadBalance: () => Promise<void>;
  loadEarnings: () => Promise<void>;
  resetBalance: () => Promise<void>;
}

export const useDriverBalance = (): DriverBalanceContextType => {
  const [balance, setBalance] = useState<number>(0);
  const [transactions, setTransactions] = useState<DriverTransaction[]>([]);
  const [earnings, setEarnings] = useState<number>(0);
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const balanceKey = useUserStorageKey(STORAGE_KEYS.DRIVER_BALANCE);
  const transactionsKey = useUserStorageKey(STORAGE_KEYS.DRIVER_TRANSACTIONS);
  const earningsKey = useUserStorageKey(STORAGE_KEYS.DRIVER_EARNINGS);

  useEffect(() => {
    loadBalance();
    loadTransactions();
    loadEarnings();
  }, []);

  const loadBalance = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
      const savedBalance = await AsyncStorage.getItem(balanceKey);
      if (savedBalance !== null) {
        setBalance(parseFloat(savedBalance));
      } else {
        setBalance(0);
      }
    } catch (error) {
      console.error('Error loading driver balance:', error);
      setBalance(0);
    }
  };

  const loadTransactions = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const savedTransactions = await AsyncStorage.getItem(transactionsKey);
      if (savedTransactions !== null) {
        setTransactions(JSON.parse(savedTransactions));
      } else {
        setTransactions([]);
      }
    } catch (error) {
      console.error('Error loading driver transactions:', error);
      setTransactions([]);
    }
  };

  const loadEarnings = async () => {
    try {
      console.log('üîÑ loadEarnings –≤—ã–∑–≤–∞–Ω');
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏
      const savedEarnings = await AsyncStorage.getItem(earningsKey);
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ earnings –∏–∑ AsyncStorage:', savedEarnings);
      console.log('üîÑ –¢–µ–∫—É—â–∏–µ earnings –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:', earnings);
      if (savedEarnings !== null) {
        const parsedEarnings = parseFloat(savedEarnings);
        console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º earnings:', parsedEarnings);
        setEarnings(parsedEarnings);
      } else {
        console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º earnings: 0 (–Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö)');
        setEarnings(0);
      }
    } catch (error) {
      console.error('Error loading driver earnings:', error);
      setEarnings(0);
    }
  };

  const saveBalance = async (newBalance: number) => {
    try {
      console.log('üíæ saveBalance –≤—ã–∑–≤–∞–Ω —Å –±–∞–ª–∞–Ω—Å–æ–º:', newBalance);
      await AsyncStorage.setItem(balanceKey, newBalance.toString());
      setBalance(newBalance);
      console.log('üíæ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:', newBalance);
    } catch (error) {
      console.error('Error saving driver balance:', error);
    }
  };

  const saveTransactions = async (newTransactions: DriverTransaction[]) => {
    try {
      await AsyncStorage.setItem(transactionsKey, JSON.stringify(newTransactions));
      setTransactions(newTransactions);
    } catch (error) {
      console.error('Error saving driver transactions:', error);
    }
  };

  const saveEarnings = async (newEarnings: number) => {
    try {
      await AsyncStorage.setItem(earningsKey, newEarnings.toString());
      setEarnings(newEarnings);
    } catch (error) {
      console.error('Error saving driver earnings:', error);
    }
  };

  const topUpBalance = async (amount: number) => {
    console.log('üí∞ topUpBalance –≤—ã–∑–≤–∞–Ω —Å —Å—É–º–º–æ–π:', amount);
    console.log('üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', balance);
    console.log('üí∞ –¢–∏–ø amount:', typeof amount);
    console.log('üí∞ –¢–∏–ø balance:', typeof balance);
    
    const newBalance = balance + amount;
    console.log('üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç:', newBalance);
    
    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setBalance(newBalance);
    console.log('üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:', newBalance);
    
    // –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage
    await AsyncStorage.setItem(balanceKey, newBalance.toString());
    console.log('üí∞ –ë–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ AsyncStorage');
    
    await addTransaction({
      type: 'topup',
      amount: amount,
      description: `TopUp ${amount} AFc`,
      translationKey: 'driver.balance.transactions.topup',
      translationParams: { amount: amount.toString() },
    });
    
    console.log('üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
      loadBalance();
    }, 100);
  };

  const addEarnings = async (amount: number) => {
    console.log('üíµ addEarnings –≤—ã–∑–≤–∞–Ω —Å —Å—É–º–º–æ–π:', amount);
    console.log('üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', balance);
    console.log('üíµ –¢–µ–∫—É—â–∏–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏:', earnings);
    
    const newBalance = balance + amount;
    const newEarnings = earnings + amount;
    
    console.log('üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç:', newBalance);
    console.log('üíµ –ù–æ–≤—ã–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –±—É–¥—É—Ç:', newEarnings);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setBalance(newBalance);
    setEarnings(newEarnings);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage - balance:', newBalance, 'earnings:', newEarnings);
    await AsyncStorage.setItem(balanceKey, newBalance.toString());
    await AsyncStorage.setItem(earningsKey, newEarnings.toString());
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ AsyncStorage');
    
    await addTransaction({
      type: 'payment',
      amount: amount,
      description: `Earnings ${amount} AFc`,
      translationKey: 'driver.balance.transactions.earnings',
      translationParams: { amount: amount.toString() },
    });
    
    console.log('üíµ –ó–∞—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    console.log('üíµ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ - –±–∞–ª–∞–Ω—Å:', newBalance, 'earnings:', newEarnings);
  };

  const withdrawBalance = async (amount: number): Promise<boolean> => {
    if (balance < amount) {
      return false; // Insufficient funds
    }

    const newBalance = balance - amount;
    await saveBalance(newBalance);
    
    await addTransaction({
      type: 'withdrawal',
      amount: -amount,
      description: `Withdrawal ${amount} AFc`,
      translationKey: 'driver.balance.transactions.withdrawal',
      translationParams: { amount: amount.toString() },
    });

    return true;
  };

  const addTransaction = async (transaction: Omit<DriverTransaction, 'id' | 'date'>) => {
    const newTransaction: DriverTransaction = {
      ...transaction,
      id: Date.now().toString(),
      date: new Date().toISOString(),
    };

    const newTransactions = [newTransaction, ...transactions];
    await saveTransactions(newTransactions);
  };

  const getEarnings = async (): Promise<number> => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏
    return earnings;
  };

  const resetBalance = async () => {
    try {
      console.log('üîÑ –°–±—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞...');
      
      // –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      setBalance(0);
      await AsyncStorage.setItem(balanceKey, '0');
      
      // –û—á–∏—â–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      setTransactions([]);
      await AsyncStorage.setItem(transactionsKey, JSON.stringify([]));
      
      // –û–±–Ω—É–ª—è–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∂–µ
      setEarnings(0);
      await AsyncStorage.setItem(earningsKey, '0');
      
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –∏ earnings —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞:', error);
    }
  };

  return {
    balance,
    transactions,
    earnings,
    topUpBalance,
    addEarnings,
    withdrawBalance,
    addTransaction,
    getEarnings,
    loadBalance, // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    loadEarnings, // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    resetBalance,
  };
}; 