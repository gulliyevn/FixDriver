import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useBalance } from '../hooks/useBalance';
import { useI18n } from '../hooks/useI18n';
import { Alert } from 'react-native';

export type PackageType = 'free' | 'plus' | 'premium' | 'premiumPlus';

interface Subscription {
  packageType: PackageType;
  startDate: string;
  autoRenew: boolean;
  isActive: boolean;
  nextBillingDate: string;
  period: 'month' | 'year';
  pendingExtension?: {
    packageType: PackageType;
    period: 'month' | 'year';
    activationDate: string;
    price: number;
  };
  pendingAutoRenewal?: {
    price: number;
    packageName: string;
    lastNotificationDate?: string; // –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  };
}

interface PackageContextType {
  currentPackage: PackageType;
  subscription: Subscription | null;
  updatePackage: (newPackage: PackageType, period?: 'month' | 'year') => Promise<void>;
  extendSubscription: (packageType: PackageType, period: 'month' | 'year', price: number) => Promise<void>;
  cancelSubscription: () => Promise<void>;
  toggleAutoRenew: () => Promise<void>;
  processAutoRenewal: () => Promise<boolean>;
  checkPendingAutoRenewal: () => Promise<boolean>;
  getPackageIcon: (packageType?: PackageType) => string;
  getPackageColor: (packageType?: PackageType) => string;
  getPackagePrice: (packageType: PackageType, period?: 'month' | 'year') => number;
}

const PackageContext = createContext<PackageContextType | undefined>(undefined);

const PACKAGE_KEY = 'user_package';
const SUBSCRIPTION_KEY = 'user_subscription';

export const PackageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [currentPackage, setCurrentPackage] = useState<PackageType>('free');
  const [subscription, setSubscription] = useState<Subscription | null>(null);
  const { t } = useI18n();
  const balanceHook = useBalance();
  const deductBalance = 'deductBalance' in balanceHook ? balanceHook.deductBalance : balanceHook.withdrawBalance;


  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –∏ –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {

    loadPackage();
    loadSubscription();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  useEffect(() => {
    if (!subscription || subscription.packageType === 'free') {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    processAutoRenewal();
    checkDailyNotification();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    const interval = setInterval(() => {
      processAutoRenewal();
      checkDailyNotification();
    }, 6 * 60 * 60 * 1000); // 6 —á–∞—Å–æ–≤

    return () => clearInterval(interval);
  }, [subscription]);

  const loadPackage = async () => {
    try {
      const storedPackage = await AsyncStorage.getItem(PACKAGE_KEY);
      
      if (storedPackage) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ (_month, _year)
        const basePackage = storedPackage.replace(/_month$|_year$/, '');
        
        if (['free', 'plus', 'premium', 'premiumPlus'].includes(basePackage)) {
          setCurrentPackage(basePackage as PackageType);
          
          // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É—Ñ—Ñ–∏–∫—Å, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
          if (storedPackage !== basePackage) {
            await AsyncStorage.setItem(PACKAGE_KEY, basePackage);
          }
        } else {
          setCurrentPackage('free');
          // –û—á–∏—â–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          await AsyncStorage.removeItem(PACKAGE_KEY);
        }
      } else {
        setCurrentPackage('free');
      }
    } catch (error) {
      console.error('‚ùå Error loading package:', error);
    }
  };

  const loadSubscription = async () => {
    try {
      const storedSubscription = await AsyncStorage.getItem(SUBSCRIPTION_KEY);
      
      if (storedSubscription) {
        const parsedSubscription = JSON.parse(storedSubscription);
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç packageType –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É—Ñ—Ñ–∏–∫—Å
        if (parsedSubscription.packageType && parsedSubscription.packageType.includes('_')) {
          const basePackageType = parsedSubscription.packageType.replace(/_month$|_year$/, '');
          if (['free', 'plus', 'premium', 'premiumPlus'].includes(basePackageType)) {
            parsedSubscription.packageType = basePackageType;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(parsedSubscription));
          }
        }
        
        setSubscription(parsedSubscription);
      } else {
        // No subscription found
      }
    } catch (error) {
      console.error('‚ùå Error loading subscription:', error);
    }
  };

  const updatePackage = async (newPackage: PackageType, period: 'month' | 'year' = 'month') => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞–∫–µ—Ç –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const previousPackage = currentPackage;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞
      if (!['free', 'plus', 'premium', 'premiumPlus'].includes(newPackage)) {
        console.error('‚ùå Invalid package type:', newPackage);
        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–∞—Ç–Ω—ã–π –ø–∞–∫–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      if (newPackage !== 'free') {
        const price = getPackagePrice(newPackage, period);
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞
        const success = await deductBalance(price, `${newPackage} package purchase`, newPackage);
        
        if (!success) {
          // –ï—Å–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          Alert.alert(
            t('package.insufficientFunds.title'),
            t('package.insufficientFunds.message'),
            [{ text: t('common.ok'), style: 'default' }]
          );
          return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
        }
        
        console.log('‚úÖ Balance deducted successfully:', price);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
      await AsyncStorage.setItem(PACKAGE_KEY, newPackage);
      
      setCurrentPackage(newPackage);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–∞—Ç–Ω—ã–π –ø–∞–∫–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      if (newPackage !== 'free') {
        const now = new Date();
        const daysInPeriod = period === 'year' ? 365 : 30;
        const nextBilling = new Date(now.getTime() + daysInPeriod * 24 * 60 * 60 * 1000);
        
        const newSubscription: Subscription = {
          packageType: newPackage,
          startDate: now.toISOString(),
          autoRenew: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
          isActive: true,
          nextBillingDate: nextBilling.toISOString(),
          period: period,
        };
        
        await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(newSubscription));
        console.log('‚úÖ Subscription saved to AsyncStorage:', newSubscription);
        
        setSubscription(newSubscription);
        console.log('‚úÖ Subscription state updated');
      } else {
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–∞–∫–µ—Ç, –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await AsyncStorage.removeItem(SUBSCRIPTION_KEY);
        console.log('‚úÖ Subscription removed from AsyncStorage');
        
        setSubscription(null);
        console.log('‚úÖ Subscription state cleared');
      }
      
      console.log('üéâ Package update completed successfully!');

    } catch (error) {
      console.error('‚ùå Error saving package:', error);
      Alert.alert(
        t('package.error.title'),
        t('package.error.message'),
        [{ text: t('common.ok'), style: 'default' }]
      );
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–∞–∫–µ—Ç—É
      setCurrentPackage(previousPackage);
      return;
    }
  };

  const extendSubscription = async (packageType: PackageType, period: 'month' | 'year', price: number) => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      const success = await deductBalance(price, `${packageType} subscription extension`, packageType);
      
      if (!success) {
        // –ï—Å–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        Alert.alert(
          t('package.insufficientFunds.title'),
          t('package.insufficientFunds.message'),
          [{ text: t('common.ok'), style: 'default' }]
        );
        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
      }
      
      console.log('‚úÖ Balance deducted for subscription extension:', price);
      
      if (subscription) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏)
        const currentEndDate = new Date(subscription.nextBillingDate);
        const activationDate = new Date(currentEndDate.getTime() + 24 * 60 * 60 * 1000); // +1 –¥–µ–Ω—å
        
        const updatedSubscription: Subscription = {
          ...subscription,
          pendingExtension: {
            packageType,
            period,
            activationDate: activationDate.toISOString(),
            price,
          },
        };
        
        await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(updatedSubscription));
        setSubscription(updatedSubscription);
      }
    } catch (error) {
      console.error('Error extending subscription:', error);
      Alert.alert(
        t('package.error.title'),
        t('package.error.message'),
        [{ text: t('common.ok'), style: 'default' }]
      );
    }
  };

  const cancelSubscription = async () => {
    try {
      // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–∞–∫–µ—Ç
      await AsyncStorage.removeItem(SUBSCRIPTION_KEY);
      setSubscription(null);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–∞–∫–µ—Ç
      await AsyncStorage.setItem(PACKAGE_KEY, 'free');
      setCurrentPackage('free');
    } catch (error) {
      console.error('Error canceling subscription:', error);
    }
  };

  const toggleAutoRenew = async () => {
    try {
      if (subscription) {
        const updatedSubscription = {
          ...subscription,
          autoRenew: !subscription.autoRenew,
        };
        
        await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(updatedSubscription));
        setSubscription(updatedSubscription);
      }
    } catch (error) {
      console.error('Error toggling auto renew:', error);
    }
  };

  const processAutoRenewal = async (): Promise<boolean> => {
    try {
      if (!subscription || !subscription.autoRenew || subscription.packageType === 'free') {
        return false;
      }

      const now = new Date();
      const nextBillingDate = new Date(subscription.nextBillingDate);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
      if (now >= nextBillingDate) {
        const price = getPackagePrice(subscription.packageType, subscription.period);
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const packageName = t(`premium.packages.${subscription.packageType}`);
        
        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
        const success = await deductBalance(
          price, 
          t('premium.autoRenewal.transactionDescription', { packageName }), 
          subscription.packageType
        );
        
        if (success) {
  
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –±–∏–ª–ª–∏–Ω–≥–∞
          const daysInPeriod = subscription.period === 'year' ? 365 : 30;
          const newNextBillingDate = new Date(nextBillingDate.getTime() + daysInPeriod * 24 * 60 * 60 * 1000);
          
          const updatedSubscription: Subscription = {
            ...subscription,
            nextBillingDate: newNextBillingDate.toISOString(),
          };
          
          await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(updatedSubscription));
          setSubscription(updatedSubscription);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
          Alert.alert(
            t('premium.autoRenewal.success.title'),
            t('premium.autoRenewal.success.message', { 
              packageName: t(`premium.packages.${subscription.packageType}`)
            }),
            [{ text: t('common.ok') }]
          );
          
          return true;
        } else {
          // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pending –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
          const updatedSubscription = {
            ...subscription,
            pendingAutoRenewal: {
              price,
              packageName: t(`premium.packages.${subscription.packageType}`),
              lastNotificationDate: new Date().toISOString() // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            }
          };
          
          await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(updatedSubscription));
          setSubscription(updatedSubscription);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          Alert.alert(
            t('premium.autoRenewal.insufficientFunds.title'),
            t('premium.autoRenewal.insufficientFunds.message', { 
              packageName: t(`premium.packages.${subscription.packageType}`),
              price: price.toFixed(2)
            }),
            [
              {
                text: t('premium.autoRenewal.insufficientFunds.topUp'),
                onPress: () => {
                  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                }
              },
              {
                text: t('common.ok'),
                style: 'cancel'
              }
            ]
          );
          
          return false;
        }
      }
      
      return false;
    } catch (error) {
      console.log('Error processing auto renewal:', error);
      return false;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ pending –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
  const checkPendingAutoRenewal = async (): Promise<boolean> => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AsyncStorage
      const storedSubscription = await AsyncStorage.getItem(SUBSCRIPTION_KEY);
      if (!storedSubscription) {
        return false;
      }
      
      const currentSubscription = JSON.parse(storedSubscription);
      if (!currentSubscription || !currentSubscription.pendingAutoRenewal) {
        return false;
      }

      const { price, packageName } = currentSubscription.pendingAutoRenewal;
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
      const success = await deductBalance(
        price, 
        t('premium.autoRenewal.transactionDescription', { packageName }), 
        currentSubscription.packageType
      );
      
      if (success) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –±–∏–ª–ª–∏–Ω–≥–∞
        const daysInPeriod = currentSubscription.period === 'year' ? 365 : 30;
        const nextBillingDate = new Date(currentSubscription.nextBillingDate);
        const newNextBillingDate = new Date(nextBillingDate.getTime() + daysInPeriod * 24 * 60 * 60 * 1000);
        
        const updatedSubscription: Subscription = {
          ...currentSubscription,
          nextBillingDate: newNextBillingDate.toISOString(),
          pendingAutoRenewal: undefined, // –£–±–∏—Ä–∞–µ–º pending
        };
        
        await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(updatedSubscription));
        setSubscription(updatedSubscription);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        Alert.alert(
          t('premium.autoRenewal.success.title'),
          t('premium.autoRenewal.success.message', { packageName }),
          [{ text: t('common.ok') }]
        );
        
        return true;
      }
      
      return false;
    } catch (error) {
      console.log('Error checking pending auto renewal:', error);
      return false;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
  const checkDailyNotification = async () => {
    try {
      if (!subscription || !subscription.pendingAutoRenewal) {
        return;
      }

      const now = new Date();
      const lastNotification = subscription.pendingAutoRenewal.lastNotificationDate 
        ? new Date(subscription.pendingAutoRenewal.lastNotificationDate)
        : null;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const shouldShowNotification = !lastNotification || 
        (now.getTime() - lastNotification.getTime()) >= 24 * 60 * 60 * 1000;

      if (shouldShowNotification) {
        const { price, packageName } = subscription.pendingAutoRenewal;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const updatedSubscription: Subscription = {
          ...subscription,
          pendingAutoRenewal: {
            ...subscription.pendingAutoRenewal,
            lastNotificationDate: now.toISOString(),
          }
        };
        
        await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(updatedSubscription));
        setSubscription(updatedSubscription);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        Alert.alert(
          t('premium.autoRenewal.dailyReminder.title'),
          t('premium.autoRenewal.dailyReminder.message', { 
            packageName,
            price: price.toFixed(2)
          }),
          [
            {
              text: t('premium.autoRenewal.dailyReminder.topUp'),
              onPress: () => {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
              }
            },
            {
              text: t('premium.autoRenewal.dailyReminder.remindLater'),
              style: 'cancel'
            }
          ]
        );
      }
    } catch (error) {
      console.log('Error checking daily notification:', error);
    }
  };

  const getPackageIcon = (packageType: PackageType = currentPackage) => {
    switch (packageType) {
      case 'free': return 'person';
      case 'plus': return 'add-circle';
      case 'premium': return 'diamond';
      case 'premiumPlus': return 'star';
      default: return 'person';
    }
  };

  const getPackageColor = (packageType: PackageType = currentPackage) => {
    switch (packageType) {
      case 'free': return '#666666';
      case 'plus': return '#0066CC';
      case 'premium': return '#FFD700';
      case 'premiumPlus': return '#FF6B35';
      default: return '#666666';
    }
  };

  const getPackagePrice = (packageType: PackageType, period: 'month' | 'year' = 'month') => {
    const monthlyPrices = {
      free: 0,
      plus: 99,
      premium: 199,
      premiumPlus: 299,
    };
    
    const yearlyPrices = {
      free: 0,
      plus: 999,
      premium: 1999,
      premiumPlus: 2999,
    };
    
    const prices = period === 'year' ? yearlyPrices : monthlyPrices;
    
    switch (packageType) {
      case 'free': return prices.free;
      case 'plus': return prices.plus;
      case 'premium': return prices.premium;
      case 'premiumPlus': return prices.premiumPlus;
      default: return 0;
    }
  };

  return (
    <PackageContext.Provider value={{
      currentPackage,
      subscription,
      updatePackage,
      extendSubscription,
      cancelSubscription,
      toggleAutoRenew,
      processAutoRenewal,
      checkPendingAutoRenewal,
      getPackageIcon,
      getPackageColor,
      getPackagePrice,
    }}>
      {children}
    </PackageContext.Provider>
  );
};

export const usePackage = (): PackageContextType => {
  const context = useContext(PackageContext);
  if (context === undefined) {
    throw new Error('usePackage must be used within a PackageProvider');
  }
  return context;
}; 