import React, { useMemo, useState } from 'react';
import { View, Text, TouchableOpacity, Alert } from 'react-native';
import { useTheme } from '../../../../context/ThemeContext';
import { useLanguage } from '../../../../context/LanguageContext';
import { getCurrentColors } from '../../../../constants/colors';
import { TimeScheduleData } from '../types/fix-wave.types';
import { fixwaveOrderService } from '../../../../services/fixwaveOrderService';
import { createTimeSchedulePageStyles } from './TimeSchedulePage.styles';
import { SwitchToggle } from './SwitchToggle';
import { WeekDaysSelector } from './WeekDaysSelector';
import { ScheduleContainer } from './ScheduleContainer';
import { useScheduleState } from '../hooks/useScheduleState';
import { useSessionData } from '../hooks/useSessionData';
import { createScheduleContainers, getDepartureTime, canSelectTime, getDayNumber } from '../utils/scheduleUtils';

interface TimeSchedulePageProps {
  onNext: (data: TimeScheduleData) => void;
  onBack: () => void;
  initialData?: TimeScheduleData;
}

const TimeSchedulePage: React.FC<TimeSchedulePageProps> = ({ onNext, onBack, initialData }) => {
  const { isDark } = useTheme();
  const colors = getCurrentColors(isDark);
  const { t } = useLanguage();
  
  // –°—Ç–∏–ª–∏
  const styles = useMemo(() => createTimeSchedulePageStyles(isDark), [isDark]);
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const state = useScheduleState(initialData);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Å—Å–∏–∏
  useSessionData(state, initialData);
  
  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const isSmooth = useMemo(() => state.switchStates.switch2 === true, [state.switchStates.switch2]);
  
  const isWeekdaysMode = useMemo(() => !isSmooth && state.switchStates.switch3 === true, [isSmooth, state.switchStates.switch3]);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–Ω—é
  const isWeekendMode = useMemo(() => {
    if (state.selectedDays.length > 0) {
      const selectedDay = state.selectedDays[0];
      const weekends = ['sat', 'sun'];
      return weekends.includes(selectedDay);
    }
    return false;
  }, [state.selectedDays]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
  const [activeTimeField, setActiveTimeField] = useState<'weekday' | 'weekend' | undefined>(undefined);
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º—ã
  console.log('üîç TimeSchedulePage - –†–µ–∂–∏–º—ã:', {
    isSmooth,
    isWeekdaysMode,
    isWeekendMode,
    switchStates: state.switchStates,
    selectedDays: state.selectedDays
  });
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  const containers = useMemo(() => 
    createScheduleContainers(state.addresses, state.coordinates, state.switchStates),
    [state.addresses, state.coordinates, state.switchStates]
  );
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const toggleSwitch = (switchKey: keyof typeof state.switchStates) => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤
    state.resetAllData();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
    const newSwitchStates = {
      ...state.switchStates,
      [switchKey]: !state.switchStates[switchKey]
    };
    state.forceSetSwitchStates(newSwitchStates);
    
    console.log(`Switch ${switchKey} toggled, all data reset`);
  };
  
  const saveToSession = async (data: TimeScheduleData) => {
    try {
      const sessionData = {
        currentPage: 'timeSchedule',
        timeScheduleData: data,
      };
      await fixwaveOrderService.saveSessionData(sessionData);
    } catch (error) {
      console.error('Error saving to session:', error);
    }
  };
  
  const handleSaveAndNext = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—Ä–µ–º—è
    const hasAnyTime = Object.values(state.times.fixed).some(time => time) || 
                      Object.values(state.times.weekday).some(time => time) || 
                      Object.values(state.times.weekend).some(time => time);
    
    if (!hasAnyTime) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è');
      return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const dataToSave: TimeScheduleData = {
      ...state.timeScheduleData,
      fixedTimes: state.times.fixed,
      weekdayTimes: state.times.weekday,
      weekendTimes: state.times.weekend,
      selectedDays: state.selectedDays,
      switchStates: state.switchStates
    };

    await saveToSession(dataToSave);
    onNext(dataToSave);
  };

  return (
    <View style={styles.container}>
      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ */}
      <View style={styles.switchesContainer}>
        <SwitchToggle
          isActive={state.switchStates.switch1}
          onToggle={() => toggleSwitch('switch1')}
          colors={colors}
        />
        <SwitchToggle
          isActive={state.switchStates.switch2}
          onToggle={() => toggleSwitch('switch2')}
          colors={colors}
        />
        <View style={isSmooth ? styles.switchToggleDisabled : undefined} pointerEvents={isSmooth ? 'none' : 'auto'}>
          <SwitchToggle
            isActive={state.switchStates.switch3}
            onToggle={() => toggleSwitch('switch3')}
            colors={colors}
          />
        </View>
      </View>

      {/* –¢–µ–∫—Å—Ç—ã –ø–æ–¥ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏ */}
      <View style={styles.switchLabelsContainer}>
        <Text style={[styles.switchLabel, { color: colors.textSecondary }]}>
          {state.switchStates.switch1 ? t('common.thereAndBack') : t('common.there')}
        </Text>
        <Text style={[styles.switchLabel, { color: colors.textSecondary }]}>
          {state.switchStates.switch2 ? t('common.smooth') : t('common.normal')}
        </Text>
        <Text style={[styles.switchLabel, { color: colors.textSecondary, opacity: isSmooth ? 0.5 : 1, width: 120, textAlign: 'center' }]}> 
          {state.switchStates.switch3 ? t('common.weekdays') : t('common.fixed')}
        </Text>
      </View>

      {/* –í—ã–±–æ—Ä –¥–Ω–µ–π */}
      <WeekDaysSelector 
        colors={colors} 
        t={t}
        selectedDays={state.selectedDays}
        onSelectionChange={state.setSelectedDays}
      />

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è */}
      {containers.map((container, index) => {
        const allowTimeSelection = canSelectTime(container.color);
        const departureTime = getDepartureTime(index, state.times, container.color, isSmooth, isWeekdaysMode, isWeekendMode, activeTimeField);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –±—É–¥–Ω–µ–π –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö
        const weekdayDepartureTime = getDepartureTime(index, state.times, container.color, isSmooth, isWeekdaysMode, false, 'weekday');
        const weekendDepartureTime = getDepartureTime(index, state.times, container.color, isSmooth, isWeekdaysMode, true, 'weekend');
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Date –≤ —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏
        const formatTimeFromDate = (date: Date | undefined): string => {
          if (!date) return '';
          const hours = date.getHours().toString().padStart(2, '0');
          const minutes = date.getMinutes().toString().padStart(2, '0');
          return `${hours}:${minutes}`;
        };
        
        const calculatedWeekdayTime = formatTimeFromDate(weekdayDepartureTime);
        const calculatedWeekendTime = formatTimeFromDate(weekendDepartureTime);
        
        console.log(`üèóÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${index} (${container.color}):`, {
          allowTimeSelection,
          departureTime: departureTime?.toISOString(),
          fromCoordinate: container.fromCoordinate,
          toCoordinate: container.toCoordinate,
          address: container.address,
          isSmooth,
          isWeekdaysMode,
          shouldCalculateTime: !allowTimeSelection,
          shouldShowCalculatedTime: !allowTimeSelection,
        });
        
        return (
          <ScheduleContainer
            key={`${container.color}-${index}`}
            fromAddress={container.address}
            borderColor={container.color}
            colors={colors}
            t={t}
            isLast={index === containers.length - 1}
            fixedMode={!isSmooth}
            fixedTime={state.times.fixed[index]}
            onFixedTimeChange={(time) => {
              console.log(`üìÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${index}:`, {
                time,
                isSmooth,
                isWeekdaysMode,
                currentTimes: state.times
              });
              state.forceSetTimes({
                ...state.times,
                fixed: { ...state.times.fixed, [index]: time }
              });
            }}
            weekdaysMode={isWeekdaysMode}
            weekdayTime={state.times.weekday[index]}
            weekendTime={state.times.weekend[index]}
            onWeekdayTimeChange={(time) => {
              console.log(`üìÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–Ω–µ–π –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${index}:`, {
                time,
                isSmooth,
                isWeekdaysMode,
                currentTimes: state.times
              });
              state.forceSetTimes({
                ...state.times,
                weekday: { ...state.times.weekday, [index]: time }
              });
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –∫–∞–∫ –±—É–¥–Ω–∏
              setActiveTimeField('weekday');
            }}
            onWeekendTimeChange={(time) => {
              console.log(`üìÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${index}:`, {
                time,
                isSmooth,
                isWeekdaysMode,
                currentTimes: state.times
              });
              state.forceSetTimes({
                ...state.times,
                weekend: { ...state.times.weekend, [index]: time }
              });
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –∫–∞–∫ –≤—ã—Ö–æ–¥–Ω—ã–µ
              setActiveTimeField('weekend');
            }}
            showDays={isSmooth}
            dayTimes={{}}
            calculatedWeekdayTime={calculatedWeekdayTime}
            calculatedWeekendTime={calculatedWeekendTime}
            onDayTimeChange={(dayKey, time) => {
              console.log(`üìÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è ${dayKey} –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${index}:`, {
                time,
                isSmooth,
                isWeekdaysMode,
                currentTimes: state.times,
              });
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –≤ –ø–ª–∞–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
              if (isSmooth) {
                const timeKey = isWeekdaysMode ? 'weekday' : 'weekend';
                const dayNumber = getDayNumber(dayKey);
                
                const newTimes = {
                  ...state.times,
                  [timeKey]: {
                    ...state.times[timeKey],
                    [dayNumber]: time
                  }
                };
                
                state.forceSetTimes(newTimes);
                
                console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –¥–Ω—è ${dayKey} (${dayNumber}) –≤ ${timeKey}:`, time);
              }
              
              // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ë—É–¥–Ω–∏/–í—ã—Ö–æ–¥–Ω—ã–µ" (–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å 3)
              if (!isSmooth && state.switchStates.switch3) {
                console.log(`üìÖ –ë—É–¥–Ω–∏/–í—ã—Ö–æ–¥–Ω—ã–µ —Ä–µ–∂–∏–º - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${index}:`, {
                  time,
                  isWeekdaysMode,
                  currentTimes: state.times,
                  switchStates: state.switchStates
                });
              }
            }}
            activeDays={state.selectedDays}
            allowTimeSelection={allowTimeSelection}
            fromCoordinate={container.fromCoordinate}
            toCoordinate={container.toCoordinate}
            departureTime={departureTime}
            shouldCalculateTime={!allowTimeSelection}
            shouldShowCalculatedTime={!allowTimeSelection}
            isDark={isDark}
          />
        );
      })}

      {/* –ö–Ω–æ–ø–∫–∞ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å */}
      <TouchableOpacity 
        style={[styles.saveButton, { backgroundColor: colors.primary }]}
        onPress={handleSaveAndNext}
      >
        <Text style={styles.saveButtonText}>
          {t('common.save')}
        </Text>
      </TouchableOpacity>
    </View>
  );
};

export default TimeSchedulePage;
