import React, { useMemo, useState } from 'react';
import { SafeAreaView, View, Text, ScrollView, TouchableOpacity, Alert } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useTheme } from '../../../context/ThemeContext';
import { useLanguage } from '../../../context/LanguageContext';
import { getCurrentColors } from '../../../constants/colors';
import ProgressBar from './components/ProgressBar';
import ScheduleTypeSelector from './components/ScheduleTypeSelector';
import FixDriveAddressPage from './components/FixDriveAddressPage';
import FixDriveConfirm from './components/FixDriveConfirm';
import { FixDrivePage, AddressData } from './types/fix-drive.types';

interface FixDriveScreenProps {
  isChild?: boolean;
}

const FixDriveScreen: React.FC<FixDriveScreenProps> = ({ isChild = false }) => {
  const { isDark } = useTheme();
  const colors = useMemo(() => getCurrentColors(isDark), [isDark]);
  const { t } = useLanguage();

  const [currentPage, setCurrentPage] = useState<FixDrivePage>('timeSchedule');
  const [selectedScheduleType, setSelectedScheduleType] = useState<string>('');
  const [selectedDays, setSelectedDays] = useState<string[]>([]);
  const [selectedTime, setSelectedTime] = useState<string>('');
  const [returnTime, setReturnTime] = useState<string>('');
  const [returnTripTime, setReturnTripTime] = useState<string>('');
  const [returnWeekdaysTime, setReturnWeekdaysTime] = useState<string>('');
  const [isReturnTrip, setIsReturnTrip] = useState(false);
  const [addressData, setAddressData] = useState<AddressData | null>(null);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const isScheduleReadyToSave = () => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å":');
    console.log('  - scheduleType:', `"${selectedScheduleType}" (type: ${typeof selectedScheduleType})`);
    console.log('  - selectedDays:', selectedDays);
    console.log('  - selectedTime:', selectedTime);
    console.log('  - returnTime:', returnTime);
    console.log('  - isReturnTrip:', isReturnTrip);
    console.log('  - returnWeekdaysTime:', returnWeekdaysTime);

    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (!selectedScheduleType || selectedDays.length === 0) {
      console.log('‚ùå –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
      return false;
    }

    // –°—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    switch (selectedScheduleType) {
      case 'oneWay':
        // –ù—É–∂–Ω–æ: –≤—Ä–µ–º—è —Ç—É–¥–∞
        const oneWayReady = !!selectedTime;
        console.log('üéØ oneWay –≥–æ—Ç–æ–≤:', oneWayReady, '(–Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ selectedTime)');
        return oneWayReady;

      case 'thereAndBack':
        // –ù—É–∂–Ω–æ: –≤—Ä–µ–º—è —Ç—É–¥–∞ –ò –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ (–≤—Å–µ–≥–¥–∞)
        const thereAndBackReady = !!selectedTime && !!returnTime;
        console.log('üîÑ thereAndBack –≥–æ—Ç–æ–≤:', thereAndBackReady, '(–Ω—É–∂–Ω–æ selectedTime + returnTime)');
        return thereAndBackReady;

      case 'weekdays':
        // –ù—É–∂–Ω–æ: selectedTime + (returnWeekdaysTime –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞)
        if (!selectedTime) {
          console.log('‚ùå weekdays: –Ω–µ—Ç selectedTime');
          return false;
        }
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∏–ª –æ–±—Ä–∞—Ç–Ω—É—é –ø–æ–µ–∑–¥–∫—É - –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ
        if (isReturnTrip && !returnWeekdaysTime) {
          console.log('‚ùå weekdays: –≤–∫–ª—é—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞, –Ω–æ –Ω–µ—Ç returnWeekdaysTime');
          return false;
        }
        console.log('üìÖ weekdays –≥–æ—Ç–æ–≤: true (–≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã)');
        return true;

      case 'flexible':
        // –ù—É–∂–Ω–æ: selectedTime + (returnTime –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞)
        if (!selectedTime) {
          console.log('‚ùå flexible: –Ω–µ—Ç selectedTime');
          return false;
        }
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∏–ª –æ–±—Ä–∞—Ç–Ω—É—é –ø–æ–µ–∑–¥–∫—É - –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ
        if (isReturnTrip && !returnTime) {
          console.log('‚ùå flexible: –≤–∫–ª—é—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞, –Ω–æ –Ω–µ—Ç returnTime');
          return false;
        }
        console.log('üîß flexible –≥–æ—Ç–æ–≤: true (–≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã)');
        return true;

      default:
        console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', selectedScheduleType);
        return false;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–∏–¥–∏–º—ã–π —á–µ–∫–±–æ–∫—Å "–¢—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ"
  const hasVisibleCheckbox = () => {
    // –ß–µ–∫–±–æ–∫—Å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–æ–≥–¥–∞ –µ—Å—Ç—å –≤—Ä–µ–º—è –∏ —ç—Ç–æ flexible/thereAndBack —Ä–µ–∂–∏–º—ã
    if (!selectedTime) return false;
    
    // –í flexible —Ä–µ–∂–∏–º–µ —á–µ–∫–±–æ–∫—Å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è
    if (selectedScheduleType === 'flexible') return true;
    
    // –í thereAndBack —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if (selectedScheduleType === 'thereAndBack') return true;
    
    // –í weekdays —Ä–µ–∂–∏–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–µ–∫–±–æ–∫—Å
    if (selectedScheduleType === 'weekdays') return true;
    
    return false;
  };

  // –ù—É–∂–µ–Ω –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
  const needsBottomPadding = () => {
    const hasButton = isScheduleReadyToSave();
    const hasCheckbox = hasVisibleCheckbox();
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—Ç—É–ø–∞ —Å–Ω–∏–∑—É:');
    console.log('  - hasButton (–∫–Ω–æ–ø–∫–∞ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å):', hasButton);
    console.log('  - hasCheckbox (—á–µ–∫–±–æ–∫—Å –≤–∏–¥–µ–Ω):', hasCheckbox);
    console.log('  - needsPadding:', !hasButton && !hasCheckbox);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –ò –Ω–µ—Ç —á–µ–∫–±–æ–∫—Å–∞ = –Ω—É–∂–µ–Ω –æ—Ç—Å—Ç—É–ø
    return !hasButton && !hasCheckbox;
  };

  const handleProgressStepPress = (page: FixDrivePage) => {
    setCurrentPage(page);
  };

  const handleScheduleTypeSelect = (type: string) => {
    setSelectedScheduleType(type);
  };

  const handleAddressPageNext = (data: AddressData) => {
    setAddressData(data);
    setCurrentPage('confirmation');
  };

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const validateSchedule = () => {
    console.log('üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
    console.log('üìã –¢–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', selectedScheduleType);
    console.log('üìÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏:', selectedDays);
    console.log('‚è∞ –í—Ä–µ–º—è —Ç—É–¥–∞:', selectedTime);
    console.log('üîÑ –í—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ:', returnTime);
    console.log('üöå –û–±—Ä–∞—Ç–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞:', isReturnTrip);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    if (!selectedScheduleType) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
      return false;
    }

    if (selectedDays.length === 0) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏');
      return false;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    switch (selectedScheduleType) {
      case 'oneWay':
        if (!selectedTime) {
          Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
          return false;
        }
        break;

      case 'thereAndBack':
        if (!selectedTime) {
          Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è "—Ç—É–¥–∞"');
          return false;
        }
        if (!returnTime) {
          Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è "–æ–±—Ä–∞—Ç–Ω–æ"');
          return false;
        }
        break;

      case 'weekdays':
        if (!selectedTime) {
          Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –±—É–¥–Ω–µ–π');
          return false;
        }
        if (isReturnTrip && !returnWeekdaysTime) {
          Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –±—É–¥–Ω–µ–π');
          return false;
        }
        break;

      case 'flexible':
        if (!selectedTime) {
          Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è');
          return false;
        }
        if (isReturnTrip && !returnTime) {
          Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ');
          return false;
        }
        break;

      default:
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        return false;
    }

    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    return true;
  };

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const saveScheduleToStorage = async () => {
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ localStorage...');
      
      const scheduleData = {
        scheduleType: selectedScheduleType,
        selectedDays,
        selectedTime,
        returnTime,
        returnTripTime,
        returnWeekdaysTime,
        isReturnTrip,
        timestamp: new Date().toISOString(),
      };

      console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', JSON.stringify(scheduleData, null, 2));

      await AsyncStorage.setItem('universalSchedule', JSON.stringify(scheduleData));
      
      console.log('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ');
      return false;
    }
  };

  const handleSaveAndNext = async () => {
    console.log('üîò –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –Ω–∞–∂–∞—Ç–∞!');
    
    if (currentPage === 'timeSchedule') {
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
      if (!validateSchedule()) {
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
      const saved = await saveScheduleToStorage();
      if (!saved) {
        return;
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      console.log('üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–¥—Ä–µ—Å–æ–≤');
      setCurrentPage('addresses');
      
    } else if (currentPage === 'addresses') {
      setCurrentPage('confirmation');
    }
  };

  const renderContent = () => {
    // –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã confirmation –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (currentPage === 'confirmation') {
      return (
        <View style={{ flex: 1 }}>
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
          <View style={{ 
            paddingHorizontal: 20,
            paddingTop: 20
          }}>
            <ProgressBar 
              currentPage={currentPage} 
              onStepPress={handleProgressStepPress}
            />
          </View>
          
          {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
          <FixDriveConfirm 
            scheduleData={{
              scheduleType: selectedScheduleType,
              selectedDays,
              selectedTime,
              returnTime,
              returnTripTime,
              returnWeekdaysTime,
              isReturnTrip,
            }}
            addressData={addressData}
          />
        </View>
      );
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏—Å–ø–æ–ª—å–∑—É–µ–º ScrollView
    return (
      <ScrollView 
        style={{ 
          flex: 1, 
          padding: 20
        }} 
        contentContainerStyle={{
          paddingBottom: needsBottomPadding() ? 80 : 20
        }}
        showsVerticalScrollIndicator={false}
      >
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
        <View style={{ 
          paddingHorizontal: 0,
          paddingTop: 0
        }}>
          <ProgressBar 
            currentPage={currentPage} 
            onStepPress={handleProgressStepPress}
          />
        </View>
        
        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü */}
        <View style={{ marginTop: 16 }}>
          {currentPage === 'addresses' && (
            <FixDriveAddressPage 
              onNext={handleAddressPageNext}
              initialData={addressData}
            />
          )}
          
          {currentPage === 'timeSchedule' && (
            <View style={{ padding: 0 }}>
              <ScheduleTypeSelector 
                onSelect={handleScheduleTypeSelect}
                selectedType={selectedScheduleType}
                selectedDays={selectedDays}
                onDaysChange={setSelectedDays}
                selectedTime={selectedTime}
                onTimeChange={setSelectedTime}
                returnTime={returnTime}
                onReturnTimeChange={setReturnTime}
                returnTripTime={returnTripTime}
                onReturnTripTimeChange={setReturnTripTime}
                returnWeekdaysTime={returnWeekdaysTime}
                onReturnWeekdaysTimeChange={setReturnWeekdaysTime}
                isReturnTrip={isReturnTrip}
                onReturnTripChange={setIsReturnTrip}
              />
              
              {/* –ö–Ω–æ–ø–∫–∞ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã */}
              {isScheduleReadyToSave() && (
                <TouchableOpacity 
                  style={{ 
                    backgroundColor: colors.primary,
                    paddingVertical: 12,
                    marginHorizontal: 20,
                    marginTop: 24,
                    marginBottom: 20,
                    borderRadius: 8,
                  }}
                  onPress={handleSaveAndNext}
                >
                  <Text style={{ 
                    color: '#FFFFFF', 
                    fontSize: 16, 
                    fontWeight: '600',
                    textAlign: 'center'
                  }}>
                    {t('common.save')}
                  </Text>
                </TouchableOpacity>
              )}
            </View>
          )}
        </View>
      </ScrollView>
    );
  };

  return (
    <>
      {isChild ? (
        renderContent()
      ) : (
        <View style={{ 
          flex: 1, 
          backgroundColor: currentPage === 'confirmation' ? 'transparent' : colors.background 
        }}>
          <SafeAreaView style={{ flex: 1 }}>
            {renderContent()}
          </SafeAreaView>
        </View>
      )}
    </>
  );
};

export default FixDriveScreen;