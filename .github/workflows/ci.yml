name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  EXPO_CLI_VERSION: 'latest'

jobs:
  # 🔍 Проверка качества кода
  code-quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps
        
      - name: 📝 TypeScript check
        run: npx tsc --noEmit
        
      - name: 🧹 ESLint check
        run: npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0
        continue-on-error: true
        
      - name: 💅 Prettier check
        run: npx prettier --check .
        continue-on-error: true

  # 🧪 Тестирование
  tests:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps
        
      - name: 🧪 Run tests
        run: npm test -- --coverage --watchAll=false
        continue-on-error: true
        
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # 🔒 Безопасность
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps
        
      - name: 🔒 Security audit
        run: node scripts/security-audit.js
        
      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ⚡ Производительность
  performance:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps
        
      - name: ⚡ Performance check
        run: node scripts/performance-check.js

  # 🏗️ Сборка проекта
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [code-quality, tests, security, performance]
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps
        
      - name: 🏗️ Build project
        run: npx expo export --platform web
        
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            dist/
          retention-days: 7

  # 🚀 Деплой на Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          
      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Здесь будет логика деплоя на staging
          # Например, через EAS Build или другой сервис
          
      - name: 📱 Trigger EAS Build (Staging)
        run: |
          echo "📱 Triggering EAS Build for staging..."
          # npx eas build --platform all --profile staging
          
      - name: 📊 Post-deployment tests
        run: |
          echo "🧪 Running post-deployment tests..."
          # Здесь можно добавить smoke tests

  # 🌟 Деплой на Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          
      - name: 🌟 Deploy to production
        run: |
          echo "🌟 Deploying to production environment..."
          # Здесь будет логика деплоя на production
          
      - name: 📱 Trigger EAS Build (Production)
        run: |
          echo "📱 Triggering EAS Build for production..."
          # npx eas build --platform all --profile production
          
      - name: 📊 Post-deployment tests
        run: |
          echo "🧪 Running post-deployment tests..."
          
      - name: 🏷️ Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

  # 📢 Уведомления
  notifications:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [code-quality, tests, security, performance, build]
    if: always()
    
    steps:
      - name: 📢 Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#fixdrive-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: always()
        
      - name: 📱 Telegram notification
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="✅ FixDrive CI/CD: All checks passed! 🚀"
          else
            MESSAGE="❌ FixDrive CI/CD: Some checks failed! 🔧"
          fi
          
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{
              \"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\",
              \"text\": \"$MESSAGE\",
              \"parse_mode\": \"HTML\"
            }"
        if: always()

  # 🧹 Очистка
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 🧹 Cleanup artifacts
        run: |
          echo "🧹 Cleaning up old artifacts..."
          # Здесь можно добавить логику очистки старых артефактов