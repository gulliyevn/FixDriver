import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, ScrollView, Alert, ActivityIndicator } from 'react-native';
import { ChevronLeft, Plus, Edit, Trash2, Star, MapPin } from '../../../../../shared/components/IconLibrary';
import { useTheme } from '../../../../../core/context/ThemeContext';
import { useAuth } from '../../../../../core/context/AuthContext';
import { useI18n } from '../../../../../shared/i18n';
import { getAddressesSync, addAddress, updateAddress, deleteAddress, setDefaultAddress, Address } from '../../../../../shared/mocks/residenceMock';
import { createResidenceScreenStyles } from './styles/ResidenceScreen.styles';

interface ResidenceScreenProps {
  onBack: () => void;
}

/**
 * –≠–∫—Ä–∞–Ω —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏–∏
 * 
 * TODO –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±—ç–∫–µ–Ω–¥–æ–º:
 * 1. –ó–∞–º–µ–Ω–∏—Ç—å useState –Ω–∞ useResidence hook
 * 2. –ü–æ–¥–∫–ª—é—á–∏—Ç—å ResidenceService –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
 * 3. –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
 * 4. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏
 * 5. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
 */

const ResidenceScreen: React.FC<ResidenceScreenProps> = ({ onBack }) => {
  const { colors } = useTheme();
  const { user } = useAuth();
  const { t } = useI18n();
  const styles = createResidenceScreenStyles(colors);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const isDriver = user?.role === 'driver';
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
  const [addresses, setAddresses] = useState<Address[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
  const getScreenTitle = () => {
    return isDriver ? '–ú–æ–∏ –∞–¥—Ä–µ—Å–∞' : '–ú–æ–∏ –∞–¥—Ä–µ—Å–∞';
  };
  
  const getEmptyStateText = () => {
    return '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.\n–î–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏.';
  };
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
  const loadAddresses = async () => {
    try {
      setLoading(true);
      setError(null);
      const loadedAddresses = getAddressesSync();
      setAddresses(loadedAddresses);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤');
      console.error('Load addresses error:', err);
    } finally {
      setLoading(false);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
  const handleAddAddress = () => {
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    Alert.alert('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞', '–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
  const handleEditAddress = (address: Address) => {
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    Alert.alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞', `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ "${address.title}" –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ`);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
  const handleDeleteAddress = (address: Address) => {
    Alert.alert(
      '–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞',
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å "${address.title}"?`,
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–£–¥–∞–ª–∏—Ç—å',
          style: 'destructive',
          onPress: async () => {
            try {
              await deleteAddress(address.id);
              await loadAddresses();
            } catch (err) {
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å');
              console.error('Delete address error:', err);
            }
          }
        }
      ]
    );
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥—Ä–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const handleSetDefault = async (address: Address) => {
    try {
      await setDefaultAddress(address.id);
      await loadAddresses();
    } catch (err) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      console.error('Set default address error:', err);
    }
  };
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadAddresses();
  }, []);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getCategoryIcon = (category?: string) => {
    switch (category) {
      case 'home':
        return 'üè†';
      case 'work':
        return 'üíº';
      case 'university':
        return 'üéì';
      case 'mall':
        return 'üõí';
      case 'hospital':
        return 'üè•';
      case 'gym':
        return 'üí™';
      case 'restaurant':
        return 'üçΩÔ∏è';
      case 'parents':
        return 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶';
      case 'dacha':
        return 'üå≥';
      default:
        return 'üìç';
    }
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getCategoryName = (category?: string) => {
    switch (category) {
      case 'home':
        return '–î–æ–º';
      case 'work':
        return '–†–∞–±–æ—Ç–∞';
      case 'university':
        return '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç';
      case 'mall':
        return '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä';
      case 'hospital':
        return '–ë–æ–ª—å–Ω–∏—Ü–∞';
      case 'gym':
        return '–°–ø–æ—Ä—Ç–∑–∞–ª';
      case 'restaurant':
        return '–†–µ—Å—Ç–æ—Ä–∞–Ω';
      case 'parents':
        return '–†–æ–¥–∏—Ç–µ–ª–∏';
      case 'dacha':
        return '–î–∞—á–∞';
      default:
        return '–î—Ä—É–≥–æ–π';
    }
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={onBack}>
          <ChevronLeft size={24} color={colors.text} />
        </TouchableOpacity>
        <Text style={styles.title}>{getScreenTitle()}</Text>
        <View style={styles.headerSpacer} />
      </View>

      {/* Content */}
      <View style={styles.content}>
        {loading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color={colors.primary} />
            <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤...</Text>
          </View>
        ) : error ? (
          <View style={styles.errorContainer}>
            <Text style={styles.errorText}>{error}</Text>
            <TouchableOpacity style={styles.retryButton} onPress={loadAddresses}>
              <Text style={styles.retryButtonText}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</Text>
            </TouchableOpacity>
          </View>
        ) : addresses.length === 0 ? (
          // Empty State
          <View style={styles.emptyState}>
            <MapPin size={48} color={colors.textSecondary} />
            <Text style={styles.emptyStateText}>{getEmptyStateText()}</Text>
            <TouchableOpacity style={styles.addFirstAddressButton} onPress={handleAddAddress}>
              <Text style={styles.addFirstAddressButtonText}>–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å</Text>
            </TouchableOpacity>
          </View>
        ) : (
          // Addresses List
          <ScrollView style={styles.contentContainer} showsVerticalScrollIndicator={false}>
            {addresses.map((address) => (
              <View key={address.id} style={styles.addressItem}>
                <View style={styles.addressHeader}>
                  <View style={styles.addressInfo}>
                    <Text style={styles.addressTitle}>
                      {getCategoryIcon(address.category)} {address.title}
                    </Text>
                    <Text style={styles.addressText}>{address.address}</Text>
                    {address.category && (
                      <Text style={styles.addressDescription}>
                        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {getCategoryName(address.category)}
                      </Text>
                    )}
                    {address.isDefault && (
                      <View style={styles.defaultBadge}>
                        <Text style={styles.defaultText}>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</Text>
                      </View>
                    )}
                  </View>
                  <View style={styles.actionButtons}>
                    {!address.isDefault && (
                      <TouchableOpacity
                        style={styles.defaultButton}
                        onPress={() => handleSetDefault(address)}
                      >
                        <Star size={20} color="#ffc107" />
                      </TouchableOpacity>
                    )}
                    <TouchableOpacity
                      style={styles.editButton}
                      onPress={() => handleEditAddress(address)}
                    >
                      <Edit size={20} color={colors.primary} />
                    </TouchableOpacity>
                    <TouchableOpacity
                      style={styles.deleteButton}
                      onPress={() => handleDeleteAddress(address)}
                    >
                      <Trash2 size={20} color="#f44336" />
                    </TouchableOpacity>
                  </View>
                </View>
              </View>
            ))}
          </ScrollView>
        )}
      </View>

      {/* Floating Add Button */}
      {addresses.length > 0 && (
        <TouchableOpacity style={styles.floatingAddButton} onPress={handleAddAddress}>
          <Plus size={24} color="#fff" />
        </TouchableOpacity>
      )}
    </View>
  );
};

export default ResidenceScreen;
