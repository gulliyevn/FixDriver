import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, ScrollView, Switch, Alert, ActivityIndicator, Modal } from 'react-native';
import { ChevronLeft, Bell, Globe, Palette, Shield, LogOut, User, Car, Settings as SettingsIcon } from '../../../../../shared/components/IconLibrary';
import { useTheme } from '../../../../../core/context/ThemeContext';
import { useI18n } from '../../../../../shared/i18n';
import { useAuth } from '../../../../../core/context/AuthContext';
import { createSettingsScreenStyles } from './styles/SettingsScreen.styles.ts';

interface SettingsScreenProps {
  onBack: () => void;
}

const SettingsScreen: React.FC<SettingsScreenProps> = ({ onBack }) => {
  const { colors, isDark, toggleTheme } = useTheme();
  const { language, changeLanguage, t } = useI18n();
  const { logout, user } = useAuth();
  const styles = createSettingsScreenStyles(colors);

  const [isLoading, setIsLoading] = useState(false);
  const [languageModalVisible, setLanguageModalVisible] = useState(false);
  const [notificationSettings, setNotificationSettings] = useState({
    pushNotifications: true,
    emailNotifications: false,
    smsNotifications: false,
    tripUpdates: true,
    promotions: false,
    securityAlerts: true,
  });

  const isDriver = user?.role === 'driver';

  // –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
  const getScreenTitle = () => {
    return isDriver ? t('driver.settings') : t('profile.settings.title');
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const handleNotificationToggle = (key: string, value: boolean) => {
    setNotificationSettings(prev => ({
      ...prev,
      [key]: value
    }));
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∞)
  const saveSettings = async () => {
    setIsLoading(true);
    try {
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await new Promise(resolve => setTimeout(resolve, 1000));
      Alert.alert('–£—Å–ø–µ—Ö', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
  const handleLanguageChange = (newLanguage: string) => {
    changeLanguage(newLanguage);
    setLanguageModalVisible(false);
  };

  // –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  const handleLogout = () => {
    Alert.alert(
      '–í—ã—Ö–æ–¥',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        { 
          text: '–í—ã–π—Ç–∏', 
          style: 'destructive',
          onPress: logout
        }
      ]
    );
  };

  // –û–ø—Ü–∏–∏ —è–∑—ã–∫–∞
  const languageOptions = [
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
    { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { code: 'az', name: 'Az…ôrbaycan', flag: 'üá¶üáø' },
    { code: 'tr', name: 'T√ºrk√ße', flag: 'üáπüá∑' },
    { code: 'ar', name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
  ];

  const currentLanguage = languageOptions.find(lang => lang.code === language);

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={onBack} style={styles.backButton}>
          <ChevronLeft size={24} color={colors.text} />
        </TouchableOpacity>
        <Text style={styles.title}>{getScreenTitle()}</Text>
        <View style={styles.headerSpacer} />
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>{t('profile.settings.general')}</Text>
          
          {/* –¢–µ–º–∞ */}
          <TouchableOpacity style={styles.settingItem} onPress={toggleTheme}>
            <View style={styles.settingLeft}>
              <Palette size={24} color={colors.text} />
              <Text style={styles.settingLabel}>{t('profile.settings.theme')}</Text>
            </View>
            <Text style={styles.settingValue}>
              {isDark ? t('profile.settings.dark') : t('profile.settings.light')}
            </Text>
          </TouchableOpacity>

          {/* –Ø–∑—ã–∫ */}
          <TouchableOpacity 
            style={styles.settingItem} 
            onPress={() => setLanguageModalVisible(true)}
          >
            <View style={styles.settingLeft}>
              <Globe size={24} color={colors.text} />
              <Text style={styles.settingLabel}>{t('profile.settings.language')}</Text>
            </View>
            <View style={styles.settingRight}>
              <Text style={styles.settingValue}>{currentLanguage?.flag} {currentLanguage?.name}</Text>
              <ChevronLeft size={16} color={colors.textSecondary} style={styles.chevron} />
            </View>
          </TouchableOpacity>
        </View>

        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>{t('profile.settings.notifications')}</Text>
          
          {/* Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
          <View style={styles.settingItem}>
            <View style={styles.settingLeft}>
              <Bell size={24} color={colors.text} />
              <Text style={styles.settingLabel}>{t('profile.settings.pushNotifications')}</Text>
            </View>
            <Switch
              value={notificationSettings.pushNotifications}
              onValueChange={(value) => handleNotificationToggle('pushNotifications', value)}
              trackColor={{ false: colors.border, true: colors.primary }}
              thumbColor={notificationSettings.pushNotifications ? colors.background : colors.textSecondary}
            />
          </View>

          {/* –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–æ–∫ */}
          <View style={styles.settingItem}>
            <View style={styles.settingLeft}>
              <Car size={24} color={colors.text} />
              <Text style={styles.settingLabel}>{t('profile.settings.tripUpdates')}</Text>
            </View>
            <Switch
              value={notificationSettings.tripUpdates}
              onValueChange={(value) => handleNotificationToggle('tripUpdates', value)}
              trackColor={{ false: colors.border, true: colors.primary }}
              thumbColor={notificationSettings.tripUpdates ? colors.background : colors.textSecondary}
            />
          </View>

          {/* –ü—Ä–æ–º–æ–∞–∫—Ü–∏–∏ */}
          <View style={styles.settingItem}>
            <View style={styles.settingLeft}>
              <Bell size={24} color={colors.text} />
              <Text style={styles.settingLabel}>{t('profile.settings.promotions')}</Text>
            </View>
            <Switch
              value={notificationSettings.promotions}
              onValueChange={(value) => handleNotificationToggle('promotions', value)}
              trackColor={{ false: colors.border, true: colors.primary }}
              thumbColor={notificationSettings.promotions ? colors.background : colors.textSecondary}
            />
          </View>

          {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å */}
          <View style={styles.settingItem}>
            <View style={styles.settingLeft}>
              <Shield size={24} color={colors.text} />
              <Text style={styles.settingLabel}>{t('profile.settings.securityAlerts')}</Text>
            </View>
            <Switch
              value={notificationSettings.securityAlerts}
              onValueChange={(value) => handleNotificationToggle('securityAlerts', value)}
              trackColor={{ false: colors.border, true: colors.primary }}
              thumbColor={notificationSettings.securityAlerts ? colors.background : colors.textSecondary}
            />
          </View>
        </View>

        {/* –†–æ–ª—å-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        {isDriver && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>{t('driver.settings.driverSpecific')}</Text>
            
            <TouchableOpacity style={styles.settingItem}>
              <View style={styles.settingLeft}>
                <Car size={24} color={colors.text} />
                <Text style={styles.settingLabel}>{t('driver.settings.vehicleSettings')}</Text>
              </View>
              <ChevronLeft size={16} color={colors.textSecondary} style={styles.chevron} />
            </TouchableOpacity>

            <TouchableOpacity style={styles.settingItem}>
              <View style={styles.settingLeft}>
                <Shield size={24} color={colors.text} />
                <Text style={styles.settingLabel}>{t('driver.settings.documentSettings')}</Text>
              </View>
              <ChevronLeft size={16} color={colors.textSecondary} style={styles.chevron} />
            </TouchableOpacity>
          </View>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        <TouchableOpacity 
          style={[styles.saveButton, isLoading && styles.saveButtonDisabled]} 
          onPress={saveSettings}
          disabled={isLoading}
        >
          {isLoading ? (
            <ActivityIndicator color={colors.background} />
          ) : (
            <Text style={styles.saveButtonText}>{t('profile.settings.save')}</Text>
          )}
        </TouchableOpacity>

        {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
        <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
          <LogOut size={20} color={colors.error} />
          <Text style={[styles.logoutButtonText, { color: colors.error }]}>
            {t('profile.settings.logout')}
          </Text>
        </TouchableOpacity>
      </ScrollView>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ */}
      <Modal
        visible={languageModalVisible}
        transparent
        animationType="slide"
        onRequestClose={() => setLanguageModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>{t('profile.settings.selectLanguage')}</Text>
              <TouchableOpacity onPress={() => setLanguageModalVisible(false)}>
                <Text style={styles.modalCloseButton}>‚úï</Text>
              </TouchableOpacity>
            </View>
            
            <ScrollView style={styles.languageList}>
              {languageOptions.map((lang) => (
                <TouchableOpacity
                  key={lang.code}
                  style={[
                    styles.languageItem,
                    language === lang.code && styles.languageItemSelected
                  ]}
                  onPress={() => handleLanguageChange(lang.code)}
                >
                  <Text style={styles.languageFlag}>{lang.flag}</Text>
                  <Text style={[
                    styles.languageName,
                    language === lang.code && styles.languageNameSelected
                  ]}>
                    {lang.name}
                  </Text>
                  {language === lang.code && (
                    <Text style={styles.checkmark}>‚úì</Text>
                  )}
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>
        </View>
      </Modal>
    </View>
  );
};

export default SettingsScreen;
