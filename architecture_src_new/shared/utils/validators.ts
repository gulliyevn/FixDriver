/**
 * ‚úÖ VALIDATORS
 * Clean, compact validation for forms - gRPC ready!
 */

import { SECURITY_CONFIG, SecurityUtils } from '../config/security';

export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings?: string[];
}

export interface PasswordStrength {
  score: number;
  level: 'weak' | 'medium' | 'strong' | 'very-strong';
  feedback: string[];
}

export class Validators {
  // üìß EMAIL VALIDATION
  static validateEmail(email: string): ValidationResult {
    if (!email) return { isValid: false, errors: ['Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'] };
    
    const errors: string[] = [];
    if (!SECURITY_CONFIG.VALIDATION.PATTERNS.EMAIL.test(email)) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
    }
    if (email.length > SECURITY_CONFIG.VALIDATION.MAX_LENGTHS.EMAIL) {
      errors.push(`Email –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${SECURITY_CONFIG.VALIDATION.MAX_LENGTHS.EMAIL} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
    
    return { isValid: errors.length === 0, errors };
  }

  // üîë PASSWORD VALIDATION
  static validatePassword(password: string): ValidationResult {
    const result = SecurityUtils.validatePassword(password);
    const strength = this.getPasswordStrength(password);
    
    return {
      isValid: result.isValid,
      errors: result.errors,
      warnings: strength.level === 'weak' ? ['–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π'] : undefined
    };
  }

  // üìä PASSWORD STRENGTH
  static getPasswordStrength(password: string): PasswordStrength {
    let score = 0;
    const feedback: string[] = [];
    
    // Length scoring
    if (password.length >= 8) score += 1;
    if (password.length >= 12) score += 1;
    if (password.length >= 16) score += 1;
    
    // Complexity scoring
    if (/[a-z]/.test(password)) score += 1;
    if (/[A-Z]/.test(password)) score += 1;
    if (/\d/.test(password)) score += 1;
    if (/[@$!%*?&]/.test(password)) score += 1;
    
    // Penalties
    if (/(.)\1{2,}/.test(password)) score -= 1;
    if (/123|abc|qwe/i.test(password)) score -= 1;
    
    // Level determination
    const level = score <= 3 ? 'weak' : score <= 5 ? 'medium' : score <= 7 ? 'strong' : 'very-strong';
    
    // Feedback
    if (password.length < 8) feedback.push('minLength');
    if (!/[A-Z]/.test(password)) feedback.push('uppercase');
    if (!/[a-z]/.test(password)) feedback.push('lowercase');
    if (!/\d/.test(password)) feedback.push('numbers');
    if (!/[@$!%*?&]/.test(password)) feedback.push('specialChars');
    
    return { score, level, feedback };
  }

  // üì± PHONE VALIDATION
  static validatePhone(phone: string): ValidationResult {
    if (!phone) return { isValid: false, errors: ['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'] };
    
    const cleanPhone = phone.replace(/\D/g, '');
    const errors: string[] = [];
    
    if (cleanPhone.length < 7) errors.push('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
    if (cleanPhone.length > 15) errors.push('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π');
    if (!SECURITY_CONFIG.VALIDATION.PATTERNS.PHONE.test(phone)) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    }
    
    return { isValid: errors.length === 0, errors };
  }

  // üë§ NAME VALIDATION
  static validateName(name: string, fieldName: string = '–ò–º—è'): ValidationResult {
    if (!name) return { isValid: false, errors: [`${fieldName} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ`] };
    
    const errors: string[] = [];
    if (name.length < 2) errors.push(`${fieldName} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞`);
    if (name.length > SECURITY_CONFIG.VALIDATION.MAX_LENGTHS.NAME) {
      errors.push(`${fieldName} –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${SECURITY_CONFIG.VALIDATION.MAX_LENGTHS.NAME} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
    if (!SECURITY_CONFIG.VALIDATION.PATTERNS.NAME.test(name)) {
      errors.push(`${fieldName} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã`);
    }
    
    return { isValid: errors.length === 0, errors };
  }

  // üöó DRIVER VALIDATION
  static validateDriverData(data: {
    licenseNumber: string;
    vehicleNumber: string;
    licenseExpiry: string;
  }): ValidationResult {
    const errors: string[] = [];
    
    // License validation
    if (!SECURITY_CONFIG.VALIDATION.PATTERNS.LICENSE.test(data.licenseNumber)) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤ (AZ12345678)');
    }
    
    // Vehicle validation
    if (!SECURITY_CONFIG.VALIDATION.PATTERNS.VEHICLE.test(data.vehicleNumber)) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (12-AB-123)');
    }
    
    // Expiry validation
    const expiry = new Date(data.licenseExpiry);
    if (isNaN(expiry.getTime())) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞');
    } else if (expiry <= new Date()) {
      errors.push('–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∞–≤ –∏—Å—Ç–µ–∫');
    }
    
    return { isValid: errors.length === 0, errors };
  }

  // üîê LOGIN VALIDATION
  static validateLogin(data: { email: string; password: string }): ValidationResult {
    const errors: string[] = [];
    if (!data.email) errors.push('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    if (!data.password) errors.push('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    return { isValid: errors.length === 0, errors };
  }

  // üìù REGISTRATION VALIDATION
  static validateRegistration(data: {
    name: string;
    email: string;
    phone: string;
    password: string;
    confirmPassword: string;
  }): ValidationResult {
    const errors: string[] = [];
    
    // Basic validations
    errors.push(...this.validateName(data.name).errors);
    errors.push(...this.validateEmail(data.email).errors);
    errors.push(...this.validatePhone(data.phone).errors);
    errors.push(...this.validatePassword(data.password).errors);
    
    // Password confirmation
    if (data.password !== data.confirmPassword) {
      errors.push('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    }
    
    return { isValid: errors.length === 0, errors };
  }
}

export default Validators;
