[{"filePath":"/Users/gulliyevn/FixDrive/src/components/AddressAutocomplete.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'verifyAddress' is assigned a value but never used.","line":42,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  ActivityIndicator,\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../context/ThemeContext';\nimport { useLanguage } from '../context/LanguageContext';\nimport { getCurrentColors } from '../constants/colors';\nimport { placesService, PlacePrediction, AddressHistory } from '../services/placesService';\nimport { MapLocation } from './MapView/types/map.types';\nimport { useUserStorageKey, STORAGE_KEYS } from '../utils/storageKeys';\nimport AddressService from '../services/addressService';\nimport { useAddressGeocoding } from '../shared/hooks/useAddressGeocoding';\n\ninterface AddressAutocompleteProps {\n  placeholder?: string;\n  value: string;\n  onChangeText: (text: string) => void;\n  onAddressSelect: (address: string, coordinates: MapLocation) => void;\n  onValidationChange: (isValid: boolean) => void;\n  type: 'from' | 'to' | 'stop';\n}\n\nconst AddressAutocomplete: React.FC<AddressAutocompleteProps> = ({\n  placeholder,\n  value,\n  onChangeText,\n  onAddressSelect,\n  onValidationChange,\n  type,\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useLanguage();\n  const colors = getCurrentColors(isDark);\n  const historyKey = useUserStorageKey(STORAGE_KEYS.ADDRESS_AUTOCOMPLETE_HISTORY);\n  const addressService = useMemo(() => new AddressService(), []);\n  const { verifyAddress } = useAddressGeocoding(addressService);\n\n  const [predictions, setPredictions] = useState<PlacePrediction[]>([]);\n  const [history, setHistory] = useState<AddressHistory[]>([]);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  const debounceRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const inputRef = useRef<TextInput>(null);\n\n  const loadHistory = useCallback(async () => {\n    try {\n      const historyData = await placesService.getHistory(historyKey);\n      setHistory(historyData);\n    } catch (error) {\n      console.error('Error loading history:', error);\n    }\n  }, [historyKey]);\n\n  useEffect(() => {\n    loadHistory();\n  }, [loadHistory]);\n\n  const searchPredictions = useCallback(\n    async (input: string) => {\n      if (debounceRef.current) {\n        clearTimeout(debounceRef.current);\n      }\n\n      debounceRef.current = setTimeout(async () => {\n        if (input.trim().length < 2) {\n          setPredictions([]);\n          setIsLoading(false);\n          return;\n        }\n\n        setIsLoading(true);\n        try {\n          const predictionsData = await placesService.getPlacePredictions(input);\n          setPredictions(predictionsData);\n        } catch (error) {\n          console.error('Error searching predictions:', error);\n          setPredictions([]);\n        } finally {\n          setIsLoading(false);\n        }\n      }, 300);\n    },\n    []\n  );\n\n  const handleTextChange = (text: string) => {\n    onChangeText(text);\n\n    const validation = placesService.validateAddress(text);\n    setValidationError(validation.error || null);\n    onValidationChange(validation.isValid);\n\n    if (text.trim().length >= 2) {\n      setShowDropdown(true);\n      searchPredictions(text);\n    } else {\n      setShowDropdown(false);\n      setPredictions([]);\n    }\n  };\n\n  const handlePredictionSelect = async (prediction: PlacePrediction) => {\n    try {\n      setIsLoading(true);\n      const details = await placesService.getPlaceDetails(prediction.place_id);\n      if (!details) {\n        return;\n      }\n\n      const coordinates: MapLocation = {\n        latitude: details.geometry.location.lat,\n        longitude: details.geometry.location.lng,\n      };\n\n      if (__DEV__) {\n        await placesService.saveToHistory(historyKey, details.formatted_address, details.place_id, coordinates);\n        await loadHistory();\n      }\n\n      onAddressSelect(details.formatted_address, coordinates);\n      onChangeText(details.formatted_address);\n      setShowDropdown(false);\n      setPredictions([]);\n      setValidationError(null);\n      onValidationChange(true);\n    } catch (error) {\n      console.error('Error selecting prediction:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleHistorySelect = (historyItem: AddressHistory) => {\n    const coordinates: MapLocation = {\n      latitude: historyItem.coordinates.latitude,\n      longitude: historyItem.coordinates.longitude,\n    };\n\n    onAddressSelect(historyItem.address, coordinates);\n    onChangeText(historyItem.address);\n    setShowDropdown(false);\n    setValidationError(null);\n    onValidationChange(true);\n  };\n\n  const handleQuickOption = (option: string) => {\n    setShowDropdown(false);\n    console.log('Quick option selected:', option);\n  };\n\n  const getBorderColor = () => {\n    if (validationError) return colors.error;\n    if (value.trim() && !validationError) {\n      switch (type) {\n        case 'from':\n          return colors.success;\n        case 'to':\n          return colors.primary;\n        case 'stop':\n          return colors.textSecondary;\n        default:\n          return colors.border;\n      }\n    }\n    return colors.border;\n  };\n\n  return (\n    <View style={{ position: 'relative', zIndex: 1000 }}>\n      <TextInput\n        ref={inputRef}\n        style={{\n          fontSize: 12,\n          color: colors.text,\n          paddingVertical: 4,\n          paddingHorizontal: 0,\n          borderBottomWidth: 1,\n          borderBottomColor: getBorderColor(),\n        }}\n        placeholder={placeholder || t(`components:common.autocomplete.placeholder.${type}`)}\n        value={value}\n        onChangeText={handleTextChange}\n        placeholderTextColor={colors.textSecondary}\n        onFocus={() => {\n          if (value.trim().length >= 2 || history.length > 0) {\n            setShowDropdown(true);\n          }\n        }}\n        onBlur={() => {\n          setTimeout(() => setShowDropdown(false), 200);\n        }}\n      />\n\n      {validationError && (\n        <Text\n          style={{\n            fontSize: 10,\n            color: colors.error,\n            marginTop: 2,\n          }}\n        >\n          {validationError}\n        </Text>\n      )}\n\n      {showDropdown && (\n        <View\n          style={{\n            position: 'absolute',\n            top: '100%',\n            left: 0,\n            right: 0,\n            backgroundColor: colors.surface,\n            borderRadius: 8,\n            borderWidth: 1,\n            borderColor: colors.border,\n            shadowColor: '#000',\n            shadowOffset: { width: 0, height: 4 },\n            shadowOpacity: 0.2,\n            shadowRadius: 5,\n            elevation: 10,\n            zIndex: 1000,\n            maxHeight: 300,\n            marginTop: 4,\n          }}\n        >\n          <ScrollView style={{ maxHeight: 300 }} showsVerticalScrollIndicator={false}>\n            <TouchableOpacity\n              style={{\n                flexDirection: 'row',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                paddingVertical: 12,\n                paddingHorizontal: 16,\n                borderBottomWidth: 1,\n                borderBottomColor: colors.border,\n              }}\n              onPress={() => handleQuickOption('current')}\n            >\n              <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                <Ionicons name=\"navigate\" size={16} color={colors.primary} style={{ marginRight: 8 }} />\n                <Text style={{ fontSize: 16, color: colors.text }}>\n                  {t('components:common.autocomplete.quick.current')}\n                </Text>\n              </View>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={{\n                flexDirection: 'row',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                paddingVertical: 12,\n                paddingHorizontal: 16,\n                borderBottomWidth: 1,\n                borderBottomColor: colors.border,\n              }}\n              onPress={() => handleQuickOption('recent')}\n            >\n              <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                <Ionicons name=\"time\" size={16} color={colors.primary} style={{ marginRight: 8 }} />\n                <Text style={{ fontSize: 16, color: colors.text }}>\n                  {t('components:common.autocomplete.quick.recent')}\n                </Text>\n              </View>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={{\n                flexDirection: 'row',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                paddingVertical: 12,\n                paddingHorizontal: 16,\n                borderBottomWidth: 1,\n                borderBottomColor: colors.border,\n              }}\n              onPress={() => handleQuickOption('home')}\n            >\n              <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                <Ionicons name=\"home\" size={16} color={colors.primary} style={{ marginRight: 8 }} />\n                <Text style={{ fontSize: 16, color: colors.text }}>\n                  {t('components:common.autocomplete.quick.home')}\n                </Text>\n              </View>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={{\n                flexDirection: 'row',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                paddingVertical: 12,\n                paddingHorizontal: 16,\n                borderBottomWidth: 1,\n                borderBottomColor: colors.border,\n              }}\n              onPress={() => handleQuickOption('work')}\n            >\n              <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                <Ionicons name=\"business\" size={16} color={colors.primary} style={{ marginRight: 8 }} />\n                <Text style={{ fontSize: 16, color: colors.text }}>\n                  {t('components:common.autocomplete.quick.work')}\n                </Text>\n              </View>\n            </TouchableOpacity>\n\n            <View style={{ height: 1, backgroundColor: colors.border, marginVertical: 8 }} />\n\n            {predictions.length > 0 && (\n              <>\n                <View style={{ paddingHorizontal: 16, paddingVertical: 8 }}>\n                  <Text\n                    style={{\n                      fontSize: 12,\n                      color: colors.textSecondary,\n                      fontWeight: '500',\n                    }}\n                  >\n                    {t('components:common.autocomplete.sections.suggestions')}\n                  </Text>\n                </View>\n\n                {predictions.map((prediction, index) => (\n                  <TouchableOpacity\n                    key={prediction.place_id}\n                    style={{\n                      flexDirection: 'row',\n                      alignItems: 'center',\n                      justifyContent: 'space-between',\n                      paddingVertical: 12,\n                      paddingHorizontal: 16,\n                      borderBottomWidth: index < predictions.length - 1 ? 1 : 0,\n                      borderBottomColor: colors.border,\n                    }}\n                    onPress={() => handlePredictionSelect(prediction)}\n                  >\n                    <View style={{ flex: 1 }}>\n                      <Text style={{ fontSize: 16, color: colors.text }}>{prediction.structured_formatting.main_text}</Text>\n                      <Text style={{ fontSize: 14, color: colors.textSecondary }}>\n                        {prediction.structured_formatting.secondary_text}\n                      </Text>\n                    </View>\n                    {isLoading && <ActivityIndicator size=\"small\" color={colors.primary} />}\n                  </TouchableOpacity>\n                ))}\n              </>\n            )}\n\n            {history.length > 0 && (\n              <>\n                <View style={{ height: 1, backgroundColor: colors.border, marginVertical: 8 }} />\n\n                <View style={{ paddingHorizontal: 16, paddingVertical: 8 }}>\n                  <Text\n                    style={{\n                      fontSize: 12,\n                      color: colors.textSecondary,\n                      fontWeight: '500',\n                    }}\n                  >\n                    {t('components:common.autocomplete.sections.history')}\n                  </Text>\n                </View>\n\n                {history.map((historyItem, index) => (\n                  <TouchableOpacity\n                    key={historyItem.id}\n                    style={{\n                      flexDirection: 'row',\n                      alignItems: 'center',\n                      justifyContent: 'space-between',\n                      paddingVertical: 12,\n                      paddingHorizontal: 16,\n                      borderBottomWidth: index < history.length - 1 ? 1 : 0,\n                      borderBottomColor: colors.border,\n                    }}\n                    onPress={() => handleHistorySelect(historyItem)}\n                  >\n                    <View style={{ flex: 1 }}>\n                      <Text style={{ fontSize: 16, color: colors.text }}>{historyItem.address}</Text>\n                    </View>\n                    <Ionicons name=\"time\" size={16} color={colors.textSecondary} />\n                  </TouchableOpacity>\n                ))}\n              </>\n            )}\n\n            {predictions.length === 0 && history.length === 0 && !isLoading && value.trim().length >= 2 && (\n              <View style={{\n                paddingVertical: 16,\n                paddingHorizontal: 16,\n                alignItems: 'center',\n              }}>\n                <Text style={{ fontSize: 14, color: colors.textSecondary }}>\n                  {t('components:common.autocomplete.states.noResults')}\n                </Text>\n              </View>\n            )}\n\n            {isLoading && predictions.length === 0 && (\n              <View\n                style={{\n                  paddingVertical: 16,\n                  paddingHorizontal: 16,\n                  alignItems: 'center',\n                }}\n              >\n                <ActivityIndicator size=\"small\" color={colors.primary} />\n                <Text\n                  style={{\n                    fontSize: 14,\n                    color: colors.textSecondary,\n                    marginTop: 8,\n                  }}\n                >\n                  {t('components:common.autocomplete.states.searching')}\n                </Text>\n              </View>\n            )}\n          </ScrollView>\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport default AddressAutocomplete;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/AddressModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/AgreementCheckbox.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[324,327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[324,327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity, Modal, ScrollView } from 'react-native';\nimport Ionicons from '@expo/vector-icons/Ionicons';\nimport { useLanguage } from '../context/LanguageContext';\n\ninterface AgreementCheckboxProps {\n  agree: boolean;\n  onAgreeChange: (agree: boolean) => void;\n  styles: any;\n}\n\nconst AgreementCheckbox: React.FC<AgreementCheckboxProps> = ({\n  agree,\n  onAgreeChange,\n  styles,\n}) => {\n  const { t } = useLanguage();\n  const [showTerms, setShowTerms] = React.useState(false);\n  const [showPrivacy, setShowPrivacy] = React.useState(false);\n\n  const agreeTermsRich = t('register.agreeTermsRich');\n  const termsMatch = agreeTermsRich.match(/<terms>(.*?)<\\/terms>/);\n  const privacyMatch = agreeTermsRich.match(/<privacy>(.*?)<\\/privacy>/);\n  const beforeTerms = agreeTermsRich.split('<terms>')[0];\n  const afterTerms = agreeTermsRich.split('<terms>')[1]?.split('</terms>')[1]?.split('<privacy>')[0] || '';\n  const afterPrivacy = agreeTermsRich.split('</privacy>')[1] || '';\n\n  return (\n    <>\n      <View style={styles.checkboxContainer}>\n        <TouchableOpacity\n          onPress={() => onAgreeChange(!agree)}\n          style={[styles.checkbox, agree && styles.checkboxChecked]}\n        >\n          {agree && <Ionicons name=\"checkmark\" size={18} color=\"#fff\" />}\n        </TouchableOpacity>\n        <Text style={styles.agreeText}>\n          {beforeTerms as React.ReactNode}\n          <Text style={styles.link} onPress={() => setShowTerms(true)}>\n            {termsMatch ? termsMatch[1] : ''}\n          </Text>\n          {afterTerms as React.ReactNode}\n          <Text style={styles.link} onPress={() => setShowPrivacy(true)}>\n            {privacyMatch ? privacyMatch[1] : ''}\n          </Text>\n          {afterPrivacy as React.ReactNode}\n        </Text>\n      </View>\n\n      {/* Модалка для условий */}\n      <Modal visible={showTerms} transparent animationType=\"fade\" onRequestClose={() => setShowTerms(false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <Text style={styles.modalTitle}>\n              {termsMatch ? termsMatch[1] : t('register.terms')}\n            </Text>\n            <ScrollView style={{ maxHeight: 300 }}>\n              <Text style={styles.modalText}>{t('register.termsText')}</Text>\n            </ScrollView>\n            <TouchableOpacity style={styles.modalCloseBtn} onPress={() => setShowTerms(false)}>\n              <Text style={styles.modalCloseText}>{t('register.ok')}</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Модалка для политики */}\n      <Modal visible={showPrivacy} transparent animationType=\"fade\" onRequestClose={() => setShowPrivacy(false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <Text style={styles.modalTitle}>\n              {privacyMatch ? privacyMatch[1] : t('register.privacy')}\n            </Text>\n            <ScrollView style={{ maxHeight: 300 }}>\n              <Text style={styles.modalText}>{t('register.privacyText')}</Text>\n            </ScrollView>\n            <TouchableOpacity style={styles.modalCloseBtn} onPress={() => setShowPrivacy(false)}>\n              <Text style={styles.modalCloseText}>{t('register.ok')}</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n    </>\n  );\n};\n\nexport default AgreementCheckbox; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/AppAvatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/AppCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/BalanceCardDecoration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/BalanceTopUpHistory.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'slideAnim'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [showWithdrawals, slideAnim]","fix":{"range":[1358,1375],"text":"[showWithdrawals, slideAnim]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5206,5209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5206,5209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5240,5243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5240,5243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":151,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":154,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5308,5311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5308,5311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":185,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":188,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5342,5345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5342,5345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport { View, Text, ScrollView, TouchableOpacity, Animated } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../context/ThemeContext';\nimport { useI18n } from '../hooks/useI18n';\nimport { useBalance } from '../hooks/useBalance';\nimport { useDriverBalance } from '../hooks/driver/useDriverBalance';\nimport { useLanguage } from '../context/LanguageContext';\nimport { useAuth } from '../context/AuthContext';\nimport { \n  BalanceTopUpHistoryStyles as styles, \n  getBalanceTopUpHistoryStyles,\n  SWITCH_COLORS\n} from '../styles/components/BalanceTopUpHistory.styles';\nimport { formatDateWithLanguage } from '../utils/formatters';\n\ninterface BalanceTopUpHistoryProps {\n  maxItems?: number;\n}\n\nconst BalanceTopUpHistory: React.FC<BalanceTopUpHistoryProps> = ({ maxItems = 5 }) => {\n  const slideAnim = useRef(new Animated.Value(0)).current;\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const isDriver = user?.role === 'driver';\n  const [showWithdrawals, setShowWithdrawals] = useState(false);\n\n  useEffect(() => {\n    Animated.spring(slideAnim, {\n      toValue: showWithdrawals ? 1 : 0,\n      useNativeDriver: true,\n      tension: 50,\n      friction: 7\n    }).start();\n  }, [showWithdrawals]);\n  const clientBalanceHook = useBalance();\n  const driverBalanceHook = useDriverBalance();\n  const transactions = isDriver ? driverBalanceHook.transactions : clientBalanceHook.transactions;\n  const dynamicStyles = getBalanceTopUpHistoryStyles(isDark);\n\n  // Фильтруем транзакции в зависимости от роли и выбранного типа\n  const filteredTransactions = transactions\n    .filter(transaction => {\n      if (!isDriver) {\n        return transaction.type === 'topup';\n      }\n      return showWithdrawals ? transaction.type === 'withdrawal' : transaction.type === 'topup';\n    })\n    .slice(0, maxItems);\n\n  // Отладочная информация\n\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return t('client.paymentHistory.today');\n    } else if (date.toDateString() === yesterday.toDateString()) {\n      return t('client.paymentHistory.yesterday');\n    } else {\n      // Используем язык приложения для форматирования даты\n      return formatDateWithLanguage(date, language, 'short');\n    }\n  };\n\n  if (filteredTransactions.length === 0) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.headerContainer}>\n        <Text style={[styles.title, dynamicStyles.title]}>\n          {t('client.balance.recentTransactions')}\n        </Text>\n        {isDriver && (\n          <TouchableOpacity \n            onPress={() => setShowWithdrawals(!showWithdrawals)}\n            style={[\n              styles.switchContainer,\n              { backgroundColor: showWithdrawals ? SWITCH_COLORS.active : SWITCH_COLORS.inactive }\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.switchThumb,\n                { \n                  transform: [{\n                    translateX: slideAnim.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [2, 26]\n                    })\n                  }]\n                }\n              ]}\n            />\n            <View style={[styles.switchIcon, { opacity: showWithdrawals ? 0.5 : 1 }]}>\n              <Ionicons \n                name=\"add-circle\"\n                style={styles.switchIconImage}\n              />\n            </View>\n            <View style={[styles.switchIcon, { opacity: showWithdrawals ? 1 : 0.5 }]}>\n              <Ionicons \n                name=\"card\"\n                style={styles.switchIconImage}\n              />\n            </View>\n          </TouchableOpacity>\n        )}\n      </View>\n      \n      <ScrollView \n        style={styles.transactionsList}\n        showsVerticalScrollIndicator={false}\n      >\n        {filteredTransactions.map((transaction) => {\n          const isWithdraw = transaction.type === 'withdrawal';\n          const amountColor = isWithdraw ? '#EF4444' : '#10B981';\n          const iconName = isWithdraw ? 'remove-circle' : 'add-circle';\n          \n          return (\n            <View key={transaction.id} style={[styles.transactionItem, dynamicStyles.transactionItem]}>\n              <View style={styles.transactionInfo}>\n                <Ionicons \n                  name={iconName}\n                  size={20} \n                  color={amountColor}\n                  style={styles.transactionIcon}\n                />\n                <View style={styles.transactionDetails}>\n                  <Text style={[styles.transactionTitle, dynamicStyles.transactionTitle]}>\n                    {t(isWithdraw ? 'client.balance.withdrawal' : 'client.balance.balanceTopUp')}\n                  </Text>\n                  <Text style={[styles.transactionDate, dynamicStyles.transactionDate]}>\n                    {formatDate((transaction as any).createdAt || (transaction as any).date || new Date().toISOString())} • {new Date((transaction as any).createdAt || (transaction as any).date || new Date().toISOString()).toTimeString().split(' ')[0].substring(0, 5)}\n                  </Text>\n                </View>\n              </View>\n              <View style={styles.transactionRight}>\n                <Text style={[styles.transactionAmount, { color: amountColor }]}>\n                  {isWithdraw ? '-' : '+'}{Math.abs(transaction.amount)} AFc\n                </Text>\n                <View style={styles.statusBadge}>\n                  <Text style={styles.statusText}>\n                    {t('client.paymentHistory.status.completed')}\n                  </Text>\n                </View>\n              </View>\n            </View>\n          );\n        })}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default BalanceTopUpHistory; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/BookingHelpModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3471,3474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3471,3474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useCallback, useMemo } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, Modal, Animated } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { RulesModalStyles as styles, getRulesModalStyles } from '../styles/components/RulesModal.styles';\nimport { RulesSlidesStyles as slideStyles } from '../styles/components/RulesSlides.styles';\nimport { createSlideAnimation, slideAnimationConfig } from '../styles/animations';\nimport { useTheme } from '../context/ThemeContext';\nimport { useI18n } from '../hooks/useI18n';\n\ninterface BookingHelpSlide {\n  id: number;\n  title: string;\n  icon: string;\n  content: string;\n  description: string;\n}\n\ninterface BookingHelpModalProps {\n  visible: boolean;\n  onClose: () => void;\n}\n\nconst bookingSlides: BookingHelpSlide[] = [\n  {\n    id: 1,\n    title: 'help.booking.routeSelection.title',\n    icon: 'map',\n    content: 'help.booking.routeSelection.content',\n    description: 'help.booking.routeSelection.description',\n  },\n  {\n    id: 2,\n    title: 'help.booking.driverSelection.title',\n    icon: 'person',\n    content: 'help.booking.driverSelection.content',\n    description: 'help.booking.driverSelection.description',\n  },\n  {\n    id: 3,\n    title: 'help.booking.orderConfirmation.title',\n    icon: 'checkmark-circle',\n    content: 'help.booking.orderConfirmation.content',\n    description: 'help.booking.orderConfirmation.description',\n  },\n  {\n    id: 4,\n    title: 'help.booking.waitingDriver.title',\n    icon: 'time',\n    content: 'help.booking.waitingDriver.content',\n    description: 'help.booking.waitingDriver.description',\n  },\n];\n\nconst BookingHelpModal: React.FC<BookingHelpModalProps> = ({ visible, onClose }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const dynamicStyles = getRulesModalStyles(isDark);\n  const [activeSlide, setActiveSlide] = useState(0);\n  const slideAnim = useRef(new Animated.Value(0)).current;\n  const slides = useMemo(() => bookingSlides, []);\n\n  const openSlide = useCallback(\n    (slideIndex: number) => {\n      setActiveSlide(slideIndex);\n      Animated.spring(slideAnim, slideAnimationConfig.open).start();\n    },\n    [slideAnim]\n  );\n\n  const closeSlide = useCallback(() => {\n    Animated.spring(slideAnim, slideAnimationConfig.close).start(() => {\n      setActiveSlide(0);\n    });\n  }, [slideAnim]);\n\n  return (\n    <Modal visible={visible} animationType=\"slide\" presentationStyle=\"pageSheet\" onRequestClose={onClose}>\n      <View style={[styles.modalContainer, dynamicStyles.modalContainer]}>\n        <View style={[styles.modalHeader, dynamicStyles.modalHeader]}>\n          <TouchableOpacity onPress={onClose} style={styles.modalCloseButton}>\n            <Ionicons name=\"close\" size={24} color={isDark ? '#fff' : '#003366'} />\n          </TouchableOpacity>\n          <Text style={[styles.modalTitle, dynamicStyles.modalTitle]}>{t('help.howToOrder')}</Text>\n          <View style={styles.placeholder} />\n        </View>\n\n        <ScrollView style={styles.modalContent} showsVerticalScrollIndicator={false}>\n          {slides.map((slide, index) => (\n            <TouchableOpacity\n              key={slide.id}\n              style={[slideStyles.slideItem, dynamicStyles.slideItem]}\n              onPress={() => openSlide(index)}\n              activeOpacity={0.7}\n            >\n              <View style={[slideStyles.slideIcon, dynamicStyles.slideIcon]}>\n                <Ionicons name={slide.icon as any} size={24} color={isDark ? '#fff' : '#003366'} />\n              </View>\n              <View style={slideStyles.slideInfo}>\n                <Text style={[slideStyles.slideTitle, dynamicStyles.slideTitle]}>{t(slide.title)}</Text>\n                <Text style={[slideStyles.slideDescription, dynamicStyles.slideContent]}>{t(slide.description)}</Text>\n              </View>\n              <Ionicons name=\"chevron-forward\" size={20} color={isDark ? '#666' : '#ccc'} />\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n\n        <Animated.View\n          style={[slideStyles.slideOverlay, dynamicStyles.slideOverlay, createSlideAnimation(slideAnim)]}\n        >\n          {activeSlide >= 0 && (\n            <View style={slideStyles.slideContent}>\n              <View style={[slideStyles.slideHeader, dynamicStyles.slideHeader]}>\n                <TouchableOpacity onPress={closeSlide} style={slideStyles.backButton}>\n                  <Ionicons name=\"arrow-back\" size={24} color={isDark ? '#fff' : '#003366'} />\n                </TouchableOpacity>\n                <Text style={[slideStyles.slideHeaderTitle, dynamicStyles.slideHeaderTitle]}>\n                  {t(slides[activeSlide]?.title)}\n                </Text>\n                <View style={styles.placeholder} />\n              </View>\n              <ScrollView style={slideStyles.slideScroll}>\n                <Text style={[slideStyles.slideText, dynamicStyles.slideText]}>\n                  {t(slides[activeSlide]?.content)}\n                </Text>\n              </ScrollView>\n            </View>\n          )}\n        </Animated.View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default BookingHelpModal; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DatePicker.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1150,1153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1150,1153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, Platform, Modal } from 'react-native';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../context/ThemeContext';\nimport { DatePickerStyles as styles, getDatePickerColors } from '../styles/components/DatePicker.styles';\n\ninterface DatePickerProps {\n  value: string;\n  onChange: (date: string) => void;\n  placeholder?: string;\n  label?: string;\n  disabled?: boolean;\n  inline?: boolean; // Для встраивания в строку как другие поля\n  readOnly?: boolean; // Режим только для чтения (без иконки календаря и возможности редактирования)\n}\n\nconst DatePicker: React.FC<DatePickerProps> = ({\n  value,\n  onChange,\n  placeholder = 'Выберите дату',\n  label,\n  disabled = false,\n  inline = false,\n  readOnly = false,\n}) => {\n  const { isDark } = useTheme();\n  const [showPicker, setShowPicker] = useState(false);\n  const [currentDate, setCurrentDate] = useState(value ? new Date(value) : new Date());\n  const dynamicStyles = getDatePickerColors(isDark);\n\n  const handleDateChange = (event: any, selectedDate?: Date) => {\n    // Для Android закрываем пикер только при нажатии \"OK\"\n    if (Platform.OS === 'android' && event.type === 'set') {\n      setShowPicker(false);\n    }\n    \n    // Для iOS inline режима не закрываем автоматически - только по кнопке \"Готово\"\n    \n    if (selectedDate) {\n      setCurrentDate(selectedDate);\n      const formattedDate = selectedDate.toISOString().split('T')[0]; // YYYY-MM-DD format\n      onChange(formattedDate);\n    }\n  };\n\n  const showDatePicker = () => {\n    if (!disabled && !readOnly) {\n      setShowPicker(true);\n    }\n  };\n\n  const formatDisplayDate = (dateString: string) => {\n    if (!dateString) return placeholder;\n    \n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return placeholder;\n    \n    return date.toLocaleDateString('ru-RU', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n    });\n  };\n\n  // Если режим только для чтения, показываем только текст\n  if (readOnly) {\n    return (\n      <View style={{ flex: 1, justifyContent: 'flex-end', alignItems: 'flex-end' }}>\n        <Text style={[\n          inline ? styles.readOnlyText : styles.pickerText, \n          dynamicStyles.pickerText\n        ]}>\n          {formatDisplayDate(value)}\n        </Text>\n      </View>\n    );\n  }\n\n  // Если в режиме редактирования (inline), показываем только кнопку без дополнительного текста\n  if (inline) {\n    return (\n      <View style={{ alignSelf: 'flex-start', width: 'auto' }}>\n        <TouchableOpacity\n          onPress={showDatePicker}\n          disabled={disabled}\n          style={[\n            styles.inlinePickerButton,\n            { opacity: disabled ? 0.6 : 1, width: 'auto' }\n          ]}\n        >\n          <Text style={[\n            styles.inlinePickerText, \n            value ? dynamicStyles.pickerText : dynamicStyles.pickerTextPlaceholder\n          ]}>\n            {formatDisplayDate(value)}\n          </Text>\n        </TouchableOpacity>\n\n        {showPicker && (\n          Platform.OS === 'ios' ? (\n            <Modal\n              transparent={true}\n              animationType=\"fade\"\n              visible={showPicker}\n            >\n              <View style={styles.modalOverlay}>\n                <View style={[styles.modalContent, dynamicStyles.modalContent]}>\n                  <View style={styles.modalHeader}>\n                    <TouchableOpacity onPress={() => {\n                      // Отменяем изменения, возвращаем исходную дату и закрываем пикер\n                      setCurrentDate(value ? new Date(value) : new Date());\n                      setShowPicker(false);\n                    }}>\n                      <Text style={[styles.modalButtonText, dynamicStyles.modalButtonText]}>\n                        Отмена\n                      </Text>\n                    </TouchableOpacity>\n                    <Text style={[styles.modalTitle, dynamicStyles.modalTitle]}>\n                      Выберите дату\n                    </Text>\n                    <TouchableOpacity onPress={() => {\n                      // Сохраняем текущую выбранную дату и закрываем пикер\n                      const formattedDate = currentDate.toISOString().split('T')[0];\n                      onChange(formattedDate);\n                      setShowPicker(false);\n                    }}>\n                      <Text style={[styles.modalButtonText, dynamicStyles.modalButtonText]}>\n                        Готово\n                      </Text>\n                    </TouchableOpacity>\n                  </View>\n                  <DateTimePicker\n                    value={currentDate}\n                    mode=\"date\"\n                    display=\"spinner\"\n                    onChange={handleDateChange}\n                    maximumDate={new Date()}\n                    minimumDate={new Date(1900, 0, 1)}\n                    textColor={dynamicStyles.modalTitle.color}\n                    style={{ width: '100%', marginLeft: -10 }}\n                  />\n                </View>\n              </View>\n            </Modal>\n          ) : (\n            <DateTimePicker\n              value={currentDate}\n              mode=\"date\"\n              display=\"default\"\n              onChange={handleDateChange}\n              maximumDate={new Date()}\n              minimumDate={new Date(1900, 0, 1)}\n            />\n          )\n        )}\n      </View>\n    );\n  }\n\n  return (\n    <View>\n      {label && !inline && !readOnly && (\n        <Text style={[styles.label, dynamicStyles.label]}>\n          {label}\n        </Text>\n      )}\n      \n      <TouchableOpacity\n        onPress={showDatePicker}\n        disabled={disabled}\n        style={[\n          inline ? styles.inlinePickerButton : styles.pickerButton, \n          dynamicStyles.pickerButton,\n          { opacity: disabled ? 0.6 : 1 }\n        ]}\n      >\n        <Text style={[\n          inline ? styles.inlinePickerText : styles.pickerText, \n          value ? dynamicStyles.pickerText : dynamicStyles.pickerTextPlaceholder\n        ]}>\n          {formatDisplayDate(value)}\n        </Text>\n        {!inline && (\n          <Ionicons \n            name=\"calendar-outline\" \n            size={20} \n            color={dynamicStyles.pickerIcon.color} \n          />\n        )}\n      </TouchableOpacity>\n\n      {showPicker && (\n        Platform.OS === 'ios' && !inline ? (\n          <Modal\n            transparent={true}\n            animationType=\"fade\"\n            visible={showPicker}\n          >\n            <View style={styles.modalOverlay}>\n              <View style={[styles.modalContent, dynamicStyles.modalContent]}>\n                <View style={styles.modalHeader}>\n                  <TouchableOpacity onPress={() => setShowPicker(false)}>\n                    <Text style={[styles.modalButtonText, dynamicStyles.modalButtonText]}>\n                      Отмена\n                    </Text>\n                  </TouchableOpacity>\n                  <Text style={[styles.modalTitle, dynamicStyles.modalTitle]}>\n                    Выберите дату\n                  </Text>\n                  <TouchableOpacity onPress={() => setShowPicker(false)}>\n                    <Text style={[styles.modalButtonText, dynamicStyles.modalButtonText]}>\n                      Готово\n                    </Text>\n                  </TouchableOpacity>\n                </View>\n                                  <DateTimePicker\n                    value={currentDate}\n                    mode=\"date\"\n                    display=\"spinner\"\n                    onChange={handleDateChange}\n                    maximumDate={new Date()}\n                    minimumDate={new Date(1900, 0, 1)}\n                    textColor={dynamicStyles.modalTitle.color}\n                    style={{ width: '100%', marginLeft: -10 }}\n                  />\n              </View>\n            </View>\n          </Modal>\n        ) : (\n          <DateTimePicker\n            value={currentDate}\n            mode=\"date\"\n            display=\"default\"\n            onChange={handleDateChange}\n            maximumDate={new Date()}\n            minimumDate={new Date(1900, 0, 1)}\n          />\n        )\n      )}\n    </View>\n  );\n};\n\nexport default DatePicker; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DayEndModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1857,1860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1857,1860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Modal, View, Text, TouchableOpacity, StyleSheet } from 'react-native';\nimport { useLanguage } from '../context/LanguageContext';\nimport { useTheme } from '../context/ThemeContext';\nimport { getCurrentColors } from '../constants/colors';\n\ninterface DayEndModalProps {\n  visible: boolean;\n  onConfirm: () => void;\n  onCancel: () => void;\n}\n\nexport const DayEndModal: React.FC<DayEndModalProps> = ({\n  visible,\n  onConfirm,\n  onCancel,\n}) => {\n  const { t } = useLanguage();\n  const { isDark } = useTheme();\n  const colors = getCurrentColors(isDark);\n\n  const styles = createStyles(isDark, colors);\n\n  return (\n    <Modal\n      visible={visible}\n      transparent\n      animationType=\"fade\"\n      onRequestClose={onCancel}\n    >\n      <View style={styles.overlay}>\n        <View style={styles.modalContainer}>\n          <View style={styles.content}>\n            <Text style={styles.title}>\n              {t('common.dayEnd.title')}\n            </Text>\n            <Text style={styles.subtitle}>\n              {t('common.dayEnd.subtitle')}\n            </Text>\n          </View>\n          \n          <View style={styles.buttonContainer}>\n            <TouchableOpacity\n              style={[styles.button, styles.cancelButton]}\n              onPress={onCancel}\n            >\n              <Text style={styles.cancelButtonText}>\n                {t('common.cancel')}\n              </Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity\n              style={[styles.button, styles.confirmButton]}\n              onPress={onConfirm}\n            >\n              <Text style={styles.confirmButtonText}>\n                {t('common.ok')}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nconst createStyles = (isDark: boolean, colors: any) => StyleSheet.create({\n  overlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContainer: {\n    backgroundColor: isDark ? colors.card : colors.background,\n    borderRadius: 16,\n    padding: 24,\n    margin: 20,\n    minWidth: 280,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  content: {\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: colors.text,\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: colors.textSecondary,\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    gap: 12,\n  },\n  button: {\n    flex: 1,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  cancelButton: {\n    backgroundColor: isDark ? colors.border : '#F3F4F6',\n  },\n  confirmButton: {\n    backgroundColor: '#10B981',\n  },\n  cancelButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: colors.text,\n  },\n  confirmButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#FFFFFF',\n  },\n});\n\nexport default DayEndModal;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DriverModal/DriverModal.tsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useDriverDetails\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":37,"column":45,"nodeType":"Identifier","endLine":37,"endColumn":61},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useDriverModalState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":43,"column":28,"nodeType":"Identifier","endLine":43,"endColumn":47},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useDriverModalHandlers\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":44,"column":20,"nodeType":"Identifier","endLine":44,"endColumn":42},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallSheet\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":45,"column":21,"nodeType":"Identifier","endLine":45,"endColumn":33},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useSliderLogic\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":46,"column":18,"nodeType":"Identifier","endLine":46,"endColumn":32},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":48,"column":3,"nodeType":"Identifier","endLine":48,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":60,"column":3,"nodeType":"Identifier","endLine":60,"endColumn":12}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { View, TouchableOpacity, Animated, Text, Modal } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\nimport { useTheme } from '../../context/ThemeContext';\nimport { t } from '../../i18n';\nimport { createDriverModalStyles } from '../../styles/components/DriverModal';\nimport DriverTripDialogs from '../driver/DriverTripDialogs';\nimport DriverModalHeader from '../driver/DriverModalHeader';\nimport DriverInfoBar from '../driver/DriverInfoBar';\nimport DriverTrips from '../driver/DriverTrips';\nimport { DriverModalProps } from './types/driver-modal.types';\nimport { useDriverModalState } from './hooks/useDriverModalState';\nimport { useDriverModalHandlers } from './hooks/useDriverModalHandlers';\nimport { useCallSheet } from './hooks/useCallSheet';\nimport { useSliderLogic } from './hooks/useSliderLogic';\nimport DriverCallSheet from './components/DriverCallSheet';\nimport { useDriverDetails } from '../../hooks/driver/useDriverDetails';\n\nconst DriverModal: React.FC<DriverModalProps> = ({\n  isVisible,\n  onClose,\n  onOverlayClose,\n  role = 'client',\n  onChat,\n  driverId,\n}) => {\n  const { isDark } = useTheme();\n  const styles = createDriverModalStyles(isDark, role);\n\n  if (!driverId) {\n    return null;\n  }\n\n  const { driverInfo, clientInfo, trips } = useDriverDetails(driverId);\n\n  if (!driverInfo) {\n    return null;\n  }\n\n  const [state, actions] = useDriverModalState(driverId);\n  const handlers = useDriverModalHandlers(state, actions, onChat, driverInfo);\n  const callSheet = useCallSheet(actions, driverInfo);\n  const slider = useSliderLogic(state, actions);\n\n  useEffect(() => {\n    if (!isVisible) return;\n    (async () => {\n      try {\n        const saved = await AsyncStorage.getItem('@driver_online_status');\n        actions.setIsOnline(saved === 'true');\n      } catch (error) {\n        console.error('Error loading online status:', error);\n      }\n    })();\n  }, [isVisible, actions]);\n\n  useEffect(() => {\n    Animated.spring(slider.driverExpandAnim, {\n      toValue: state.isDriverExpanded ? 1 : 0,\n      useNativeDriver: false,\n      tension: 100,\n      friction: 8,\n    }).start();\n  }, [state.isDriverExpanded, slider.driverExpandAnim]);\n\n  const driverExpandHeight = slider.driverExpandAnim.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 300],\n  });\n\n  const driverExpandOpacity = slider.driverExpandAnim.interpolate({\n    inputRange: [0, 0.3, 1],\n    outputRange: [0, 0, 1],\n  });\n\n  const getMainButtonColor = () => {\n    if (state.buttonColorState === 1) return state.isButtonsSwapped ? '#DC2626' : '#EAB308';\n    if (state.buttonColorState === 2) return state.isButtonsSwapped ? '#DC2626' : '#06B6D4';\n    if (state.buttonColorState === 3) return '#10B981';\n    if (state.buttonColorState === 4) return '#6B7280';\n    return undefined;\n  };\n\n  const getMainButtonIcon = () => {\n    if (state.buttonColorState === 1) return state.isButtonsSwapped ? 'close' : 'chevron-back';\n    if (state.buttonColorState === 2) return state.isButtonsSwapped ? 'close' : 'chevron-back';\n    if (state.buttonColorState === 3) return 'chevron-back';\n    if (state.buttonColorState === 4) return state.isPaused ? 'pause' : 'shield';\n    return 'chevron-back';\n  };\n\n  const getSmallButtonColor = () => {\n    if (state.buttonColorState === 1) return state.isButtonsSwapped ? '#EAB308' : '#DC2626';\n    if (state.buttonColorState === 2) return state.isButtonsSwapped ? '#06B6D4' : '#DC2626';\n    return '#DC2626';\n  };\n\n  const getSmallButtonIcon = () => {\n    if (state.buttonColorState === 1 || state.buttonColorState === 2) return state.isButtonsSwapped ? 'chevron-back' : 'close';\n    return 'close';\n  };\n\n  return (\n    <Modal visible={isVisible} transparent animationType=\"slide\" onRequestClose={onClose}>\n      <TouchableOpacity style={styles.modalOverlay} activeOpacity={1} onPress={onOverlayClose}>\n        <TouchableOpacity style={styles.modalContainer} activeOpacity={1} onPress={(e) => e.stopPropagation()}>\n          <View style={styles.driverItem}>\n            <PanGestureHandler\n              onGestureEvent={slider.onHandleGestureEvent}\n              onHandlerStateChange={slider.onHandleStateChange}\n              shouldCancelWhenOutside={false}\n              activeOffsetY={[-10, 10]}\n              failOffsetX={[-10, 10]}\n            >\n              <Animated.View\n                style={[\n                  styles.sliderHandleContainer,\n                  {\n                    transform: [\n                      {\n                        translateY: slider.handleSwipeAnim.interpolate({\n                          inputRange: [-100, 0, 100],\n                          outputRange: [-10, 0, 10],\n                          extrapolate: 'clamp',\n                        }),\n                      },\n                    ],\n                  },\n                ]}\n              >\n                <TouchableOpacity onPress={() => actions.setIsDriverExpanded(!state.isDriverExpanded)} style={{ width: '100%', height: '100%' }} activeOpacity={0.7}>\n                  <View style={styles.sliderHandle} />\n                </TouchableOpacity>\n              </Animated.View>\n            </PanGestureHandler>\n\n            <View style={styles.driverHeader}>\n              <View style={styles.driverHeaderContainer}>\n                {role === 'driver' && (\n                  <View style={styles.sliderBackgroundContainer} onLayout={(e) => actions.setSliderWidth(e.nativeEvent.layout.width)}>\n                    <PanGestureHandler\n                      onGestureEvent={slider.onGestureEvent}\n                      onHandlerStateChange={slider.onHandlerStateChange}\n                      shouldCancelWhenOutside={false}\n                      activeOffsetX={[-10, 10]}\n                      failOffsetY={[-5, 5]}\n                    >\n                      <Animated.View\n                        style={[\n                          styles.sliderButton,\n                          getMainButtonColor() && { backgroundColor: getMainButtonColor() },\n                          {\n                            transform: [\n                              {\n                                translateX: slider.slideAnim.interpolate({\n                                  inputRange: [-slider.sliderConfig.maxSlideDistance, 0, slider.sliderConfig.maxSlideDistance],\n                                  outputRange: [-slider.sliderConfig.maxSlideDistance, 0, 0],\n                                  extrapolate: 'clamp',\n                                }),\n                              },\n                            ],\n                          },\n                        ]}\n                      >\n                        <TouchableOpacity\n                          onPress={handlers.handleButtonClick}\n                          style={{ width: '100%', height: '100%', alignItems: 'center', justifyContent: 'center', opacity: 1 }}\n                          disabled={!(state.buttonColorState === 3 || (state.buttonColorState === 4 && state.isEmergencyButtonActive))}\n                        >\n                          <Animated.View style={{ opacity: state.iconOpacity }}>\n                            <Ionicons name={getMainButtonIcon()} size={24} color=\"#FFFFFF\" />\n                          </Animated.View>\n                        </TouchableOpacity>\n                      </Animated.View>\n                    </PanGestureHandler>\n                  </View>\n                )}\n\n                {role === 'driver' && (state.buttonColorState === 3 || state.buttonColorState === 4) && (\n                  <TouchableOpacity\n                    style={[styles.smallCircle, state.buttonColorState === 3 ? { backgroundColor: '#6B7280' } : { backgroundColor: '#10B981' }]}\n                    onPress={handlers.handleButtonClick}\n                  >\n                    <View style={{ alignItems: 'center', justifyContent: 'center', width: '100%', height: '100%' }}>\n                      <Ionicons name={state.buttonColorState === 3 ? 'shield' : 'chevron-back'} size={16} color=\"#FFFFFF\" />\n                    </View>\n                  </TouchableOpacity>\n                )}\n\n                {role === 'driver' && (state.buttonColorState === 1 || state.buttonColorState === 2) && (\n                  <TouchableOpacity style={[styles.smallCircle, { backgroundColor: getSmallButtonColor() }]} onPress={handlers.handleSmallButtonClick}>\n                    <View style={{ alignItems: 'center', justifyContent: 'center', width: '100%', height: '100%' }}>\n                      <Ionicons name={getSmallButtonIcon()} size={16} color=\"#FFFFFF\" />\n                    </View>\n                  </TouchableOpacity>\n                )}\n\n                <DriverModalHeader\n                  styles={styles}\n                  role={role}\n                  driver={driverInfo}\n                  childName={clientInfo?.childName}\n                  childAge={clientInfo?.childAge?.toString()}\n                  slideProgress={state.slideProgress}\n                  isPaused={state.isPaused}\n                  pauseStartTime={state.pauseStartTime}\n                  formatTime={handlers.formatTime}\n                  buttonColorState={state.buttonColorState}\n                  isTripTimerActive={state.isTripTimerActive}\n                  tripStartTime={state.tripStartTime}\n                />\n              </View>\n            </View>\n\n            <DriverInfoBar\n              role={role}\n              schedule={driverInfo.schedule ?? ''}\n              price={driverInfo.price ?? ''}\n              distance={driverInfo.distance ?? ''}\n              timeOrChildType={role === 'driver' ? driverInfo.time ?? '' : clientInfo?.childType ?? ''}\n            />\n\n            <Animated.View style={[styles.expandableContent, { maxHeight: driverExpandHeight, opacity: driverExpandOpacity }]}>\n              <DriverTrips styles={styles} driverId={driverId} trips={trips} />\n\n              <View style={styles.bottomBorder} />\n\n              <View style={styles.buttonsContainer}>\n                <TouchableOpacity style={styles.leftButton} onPress={handlers.handleChatPress}>\n                  <View style={styles.buttonContent}>\n                    <Ionicons name=\"chatbubble-outline\" size={18} color=\"#FFFFFF\" />\n                    <Text style={styles.leftButtonText}>{t('client.driversScreen.actions.chat')}</Text>\n                  </View>\n                </TouchableOpacity>\n\n                <TouchableOpacity style={styles.rightButton} onPress={callSheet.openCallSheet}>\n                  <View style={styles.rightButtonContent}>\n                    <Ionicons name=\"call-outline\" size={18} color={isDark ? '#F9FAFB' : '#111827'} />\n                    <Text style={styles.rightButtonText}>{t('client.driversScreen.actions.call')}</Text>\n                  </View>\n                </TouchableOpacity>\n              </View>\n            </Animated.View>\n          </View>\n        </TouchableOpacity>\n      </TouchableOpacity>\n\n      <DriverTripDialogs\n        styles={styles}\n        clientName={clientInfo?.name ?? ''}\n        showStart={state.showDialog1}\n        onStartCancel={() => actions.setShowDialog1(false)}\n        onStartOk={handlers.handleStartOk}\n        showWaiting={state.showDialog2}\n        onWaitingCancel={() => actions.setShowDialog2(false)}\n        onWaitingOk={handlers.handleWaitingOk}\n        showEmpty={state.showDialogEmpty}\n        onEmptyCancel={() => actions.setShowDialogEmpty(false)}\n        onEmptyOk={handlers.handleEmptyOk}\n        showCancel={state.showDialogCancel}\n        onCancelCancel={() => actions.setShowDialogCancel(false)}\n        onCancelOk={handlers.handleCancelOk}\n        showEnd={state.showDialog3}\n        onEndCancel={() => actions.setShowDialog3(false)}\n        onEndOk={handlers.handleEndTripOk}\n        showEmergency={state.showLongPressDialog}\n        onEmergencyStop={handlers.handleStopPress}\n        onEmergencyEnd={handlers.handleEndPress}\n        onEmergencyClose={() => actions.setShowLongPressDialog(false)}\n        showStop={state.showStopDialog}\n        onStopCancel={() => actions.setShowStopDialog(false)}\n        onStopOk={handlers.handleStopOkPress}\n        showForceEnd={state.showEndDialog}\n        onForceEndCancel={() => actions.setShowEndDialog(false)}\n        onForceEndOk={handlers.handleEndOkPress}\n        showContinue={state.showContinueDialog}\n        onContinueCancel={() => actions.setShowContinueDialog(false)}\n        onContinueOk={handlers.handleContinueOk}\n        showRating={state.showRatingDialog}\n        onRatingCancel={handlers.handleRatingCancel}\n        onRatingSubmit={handlers.handleRatingSubmit}\n        emergencyActionsUsed={state.emergencyActionsUsed}\n        emergencyActionType={state.emergencyActionType}\n      />\n\n      <DriverCallSheet\n        isVisible={state.isCallSheetOpen}\n        isDark={isDark}\n        role={role}\n        callAnim={callSheet.callAnim}\n        driver={driverInfo}\n        onClose={callSheet.closeCallSheet}\n        onNetworkCall={callSheet.handleNetworkCall}\n        onInternetCall={callSheet.handleInternetCall}\n      />\n\n      <Modal visible={state.showGoOnlineConfirm} transparent animationType=\"fade\">\n        <TouchableOpacity style={styles.dialogOverlay} activeOpacity={1} onPress={() => actions.setShowGoOnlineConfirm(false)}>\n          <TouchableOpacity style={styles.onlineDialogContainer} activeOpacity={1} onPress={(e) => e.stopPropagation()}>\n            <Text style={styles.dialogTitle}>{t('driver.status.goOnlineMessage')}</Text>\n            <View style={styles.onlineDialogButtonsContainer}>\n              <TouchableOpacity style={styles.dialogOkButton} onPress={handlers.handleGoOnlineConfirm}>\n                <Text style={styles.dialogOkButtonText}>{t('driver.tripDialogs.buttons.okAction')}</Text>\n              </TouchableOpacity>\n            </View>\n          </TouchableOpacity>\n        </TouchableOpacity>\n      </Modal>\n    </Modal>\n  );\n};\n\nexport default DriverModal;\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DriverModal/components/DriverCallSheet.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useTheme' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[480,483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[480,483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity, Modal, Pressable, Animated } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../../context/ThemeContext';\nimport { t } from '../../../i18n';\nimport { createDriverModalStyles } from '../../../styles/components/DriverModal';\n\ninterface DriverCallSheetProps {\n  isVisible: boolean;\n  isDark: boolean;\n  role: 'client' | 'driver';\n  callAnim: Animated.Value;\n  driver: any;\n  onClose: () => void;\n  onNetworkCall: () => void;\n  onInternetCall: () => void;\n}\n\nconst DriverCallSheet: React.FC<DriverCallSheetProps> = ({\n  isVisible,\n  isDark,\n  role,\n  callAnim,\n  driver,\n  onClose,\n  onNetworkCall,\n  onInternetCall,\n}) => {\n  const styles = createDriverModalStyles(isDark, role);\n\n  return (\n    <Modal\n      visible={isVisible}\n      transparent={true}\n      animationType=\"none\"\n      onRequestClose={onClose}\n    >\n      <View style={styles.callSheetOverlay}>\n        <Pressable style={styles.callSheetBackdrop} onPress={onClose} />\n        <Animated.View\n          style={[\n            styles.callSheetContainer,\n            {\n              transform: [\n                {\n                  translateY: callAnim.interpolate({ inputRange: [0, 1], outputRange: [300, 0] }),\n                },\n              ],\n            },\n          ]}\n        >\n          <TouchableOpacity style={styles.callSheetClose} onPress={onClose} accessibilityLabel={t('common.close')}>\n            <Ionicons name=\"close\" size={22} color={isDark ? '#F9FAFB' : '#111827'} />\n          </TouchableOpacity>\n          <View style={styles.callSheetHandle} />\n          <Text style={styles.callSheetTitle}>\n            {t('client.driversScreen.call.callTitle', { firstName: driver.first_name, lastName: driver.last_name })}\n          </Text>\n          <TouchableOpacity style={styles.callSheetOption} onPress={onInternetCall}>\n            <Ionicons name=\"wifi\" size={24} color={isDark ? '#F9FAFB' : '#111827'} />\n            <Text style={styles.callSheetOptionText}>{t('client.driversScreen.call.internetCall')}</Text>\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.callSheetOption} onPress={onNetworkCall}>\n            <Ionicons name=\"call\" size={24} color={isDark ? '#F9FAFB' : '#111827'} />\n            <Text style={styles.callSheetOptionText}>\n              {t('client.driversScreen.call.networkCallWithNumber', { phone: driver.phone_number })}\n            </Text>\n          </TouchableOpacity>\n        </Animated.View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default DriverCallSheet;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DriverModal/hooks/useCallSheet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DriverModal/hooks/useDriverModalHandlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'rating' is defined but never used.","line":93,"column":6,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'comment' is defined but never used.","line":93,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\n\nimport { DriverModalState, DriverModalActions } from '../types/driver-modal.types';\nimport { DriverDetails } from '../../../hooks/driver/useDriverDetails';\n\nexport const useDriverModalHandlers = (\n  state: DriverModalState,\n  actions: DriverModalActions,\n  onChat: ((driverId: string) => void) | undefined,\n  driverInfo: DriverDetails['driver'],\n) => {\n  const handleButtonClick = useCallback(() => {\n    if (state.buttonColorState === 3) {\n      actions.setShowDialog3(true);\n    } else if (state.buttonColorState === 4) {\n      actions.setShowLongPressDialog(true);\n    }\n  }, [state.buttonColorState, actions]);\n\n  const handleSmallButtonClick = useCallback(() => {\n    if (state.buttonColorState === 1) {\n      actions.setShowDialog1(true);\n    } else if (state.buttonColorState === 2) {\n      actions.setShowDialog2(true);\n    }\n  }, [state.buttonColorState, actions]);\n\n  const handleChatPress = useCallback(() => {\n    onChat?.(driverInfo.id);\n  }, [onChat, driverInfo.id]);\n\n  const handleStartOk = useCallback(() => {\n    actions.setShowDialog1(false);\n    actions.setButtonColorState(2);\n  }, [actions]);\n\n  const handleWaitingOk = useCallback(() => {\n    actions.setShowDialog2(false);\n    actions.setButtonColorState(3);\n  }, [actions]);\n\n  const handleEmptyOk = useCallback(() => {\n    actions.setShowDialogEmpty(false);\n  }, [actions]);\n\n  const handleCancelOk = useCallback(() => {\n    actions.setShowDialogCancel(false);\n    actions.setButtonColorState(0);\n  }, [actions]);\n\n  const handleStopPress = useCallback(() => {\n    actions.setShowLongPressDialog(false);\n    actions.setEmergencyActionType('stop');\n    actions.setEmergencyActionsUsed(true);\n  }, [actions]);\n\n  const handleEndPress = useCallback(() => {\n    actions.setShowLongPressDialog(false);\n    actions.setEmergencyActionType('end');\n    actions.setEmergencyActionsUsed(true);\n  }, [actions]);\n\n  const handleStopOkPress = useCallback(() => {\n    actions.setShowStopDialog(false);\n  }, [actions]);\n\n  const handleEndOkPress = useCallback(() => {\n    actions.setShowEndDialog(false);\n  }, [actions]);\n\n  const handleContinueOk = useCallback(() => {\n    actions.setShowContinueDialog(false);\n  }, [actions]);\n\n  const handleGoOnlineConfirm = useCallback(() => {\n    actions.setShowGoOnlineConfirm(false);\n    actions.setIsOnline(true);\n  }, [actions]);\n\n  const formatTime = useCallback((timestamp: number | null) => {\n    if (!timestamp) return '00:00';\n    const diff = Date.now() - timestamp;\n    const minutes = Math.floor(diff / 60000);\n    const seconds = Math.floor((diff % 60000) / 1000);\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  }, []);\n\n  const handleRatingCancel = useCallback(() => {\n    actions.setShowRatingDialog(false);\n  }, [actions]);\n\n  const handleRatingSubmit = useCallback(\n    (rating: number, comment: string) => {\n      actions.setShowRatingDialog(false);\n    },\n    [actions],\n  );\n\n  const handleEndTripOk = useCallback(() => {\n    actions.setShowDialog3(false);\n    actions.setShowRatingDialog(true);\n  }, [actions]);\n\n  return {\n    handleButtonClick,\n    handleSmallButtonClick,\n    handleChatPress,\n    handleStartOk,\n    handleWaitingOk,\n    handleEmptyOk,\n    handleCancelOk,\n    handleStopPress,\n    handleEndPress,\n    handleStopOkPress,\n    handleEndOkPress,\n    handleContinueOk,\n    handleGoOnlineConfirm,\n    formatTime,\n    handleRatingCancel,\n    handleRatingSubmit,\n    handleEndTripOk,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DriverModal/hooks/useDriverModalState.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used.","line":1,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AsyncStorage' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateButtonState'. Either include it or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":137,"suggestions":[{"desc":"Update the dependencies array to be: [buttonColorState, isPaused, emergencyActionsUsed, emergencyActionType, pauseStartTime, isTripTimerActive, tripStartTime, isLoaded, updateButtonState]","fix":{"range":[3307,3438],"text":"[buttonColorState, isPaused, emergencyActionsUsed, emergencyActionType, pauseStartTime, isTripTimerActive, tripStartTime, isLoaded, updateButtonState]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { DriverModalState, DriverModalActions } from '../types/driver-modal.types';\nimport { usePersistentButtonState } from '../../../hooks/usePersistentButtonState';\n\nexport const useDriverModalState = (driverId: string): [DriverModalState, DriverModalActions] => {\n  const { buttonState, updateButtonState, resetButtonState, isLoaded } = usePersistentButtonState(driverId);\n  const isInitialized = useRef(false);\n  \n  const [isDriverExpanded, setIsDriverExpanded] = useState(false);\n  const [buttonColorState, setButtonColorState] = useState(0);\n  const [isOnline, setIsOnline] = useState(false);\n  const [showDialog1, setShowDialog1] = useState(false);\n  const [showDialog2, setShowDialog2] = useState(false);\n  const [showDialog3, setShowDialog3] = useState(false);\n  const [showDialogEmpty, setShowDialogEmpty] = useState(false);\n  const [showDialogCancel, setShowDialogCancel] = useState(false);\n  const [showLongPressDialog, setShowLongPressDialog] = useState(false);\n  const [showStopDialog, setShowStopDialog] = useState(false);\n  const [showEndDialog, setShowEndDialog] = useState(false);\n  const [showContinueDialog, setShowContinueDialog] = useState(false);\n  const [showRatingDialog, setShowRatingDialog] = useState(false);\n  const [showGoOnlineConfirm, setShowGoOnlineConfirm] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [emergencyActionsUsed, setEmergencyActionsUsed] = useState(false);\n  const [emergencyActionType, setEmergencyActionType] = useState<'stop' | 'end' | null>(null);\n  const [isEmergencyButtonActive, setIsEmergencyButtonActive] = useState(false);\n  const [pauseStartTime, setPauseStartTime] = useState<number | null>(null);\n  const [slideProgress, setSlideProgress] = useState(0);\n  const [showSwapIcon, setShowSwapIcon] = useState(false);\n  const [iconOpacity, setIconOpacity] = useState(1);\n  const [isCallSheetOpen, setCallSheetOpen] = useState(false);\n  const [sliderWidth, setSliderWidth] = useState(0);\n  const [isButtonsSwapped, setIsButtonsSwapped] = useState(false);\n  // Новые состояния для таймера в статусе 2 (циан)\n  const [isTripTimerActive, setIsTripTimerActive] = useState(false);\n  const [tripStartTime, setTripStartTime] = useState<number | null>(null);\n\n  // Синхронизация с персистентным состоянием при загрузке\n  useEffect(() => {\n    if (isLoaded && !isInitialized.current) {\n      setButtonColorState(buttonState.buttonColorState);\n      setIsPaused(buttonState.isPaused);\n      setEmergencyActionsUsed(buttonState.emergencyActionsUsed);\n      setEmergencyActionType(buttonState.emergencyActionType);\n      setPauseStartTime(buttonState.pauseStartTime);\n      setIsTripTimerActive(buttonState.isTripTimerActive);\n      setTripStartTime(buttonState.tripStartTime);\n      isInitialized.current = true;\n    }\n  }, [isLoaded, buttonState]);\n\n  // Сохранение состояния в AsyncStorage при изменении\n  useEffect(() => {\n    if (isLoaded && isInitialized.current) {\n      updateButtonState({\n        buttonColorState,\n        isPaused,\n        emergencyActionsUsed,\n        emergencyActionType,\n        pauseStartTime,\n        isTripTimerActive,\n        tripStartTime,\n      });\n    }\n  }, [buttonColorState, isPaused, emergencyActionsUsed, emergencyActionType, pauseStartTime, isTripTimerActive, tripStartTime, isLoaded]);\n\n  // Асинхронная активация кнопки экстренных действий\n  useEffect(() => {\n    if (buttonColorState === 4 && !isPaused) {\n      setIsEmergencyButtonActive(true);\n    } else {\n      setIsEmergencyButtonActive(false);\n    }\n  }, [buttonColorState, isPaused]);\n\n  const state: DriverModalState = {\n    driverId,\n    isDriverExpanded,\n    buttonColorState,\n    isOnline,\n    showDialog1,\n    showDialog2,\n    showDialog3,\n    showDialogEmpty,\n    showDialogCancel,\n    showLongPressDialog,\n    showStopDialog,\n    showEndDialog,\n    showContinueDialog,\n    showRatingDialog,\n    showGoOnlineConfirm,\n    isPaused,\n    emergencyActionsUsed,\n    emergencyActionType,\n    isEmergencyButtonActive,\n    pauseStartTime,\n    slideProgress,\n    showSwapIcon,\n    iconOpacity,\n    isCallSheetOpen,\n    sliderWidth,\n    isButtonsSwapped,\n    isTripTimerActive,\n    tripStartTime,\n  };\n\n  const actions: DriverModalActions = {\n    setIsDriverExpanded,\n    setButtonColorState,\n    setIsOnline,\n    setShowGoOnlineConfirm,\n    setShowDialog1,\n    setShowDialog2,\n    setShowDialog3,\n    setShowDialogEmpty,\n    setShowDialogCancel,\n    setShowLongPressDialog,\n    setShowStopDialog,\n    setShowEndDialog,\n    setShowContinueDialog,\n    setShowRatingDialog,\n    setIsPaused,\n    setEmergencyActionsUsed,\n    setEmergencyActionType,\n    setIsEmergencyButtonActive,\n    setPauseStartTime,\n    setSlideProgress,\n    setShowSwapIcon,\n    setIconOpacity,\n    setCallSheetOpen,\n    setSliderWidth,\n    setIsButtonsSwapped,\n    resetButtonState,\n    setIsTripTimerActive,\n    setTripStartTime,\n  };\n\n  return [state, actions];\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DriverModal/hooks/useSliderLogic.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PanGestureHandler' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2940,2943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2940,2943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3441,3444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3441,3444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRef, useCallback, useEffect } from 'react';\nimport { Animated } from 'react-native';\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport * as Haptics from 'expo-haptics';\nimport { DriverModalState, DriverModalActions, SliderConfig } from '../types/driver-modal.types';\n\nexport const useSliderLogic = (\n  state: DriverModalState,\n  actions: DriverModalActions\n) => {\n  const slideAnim = useRef(new Animated.Value(0)).current;\n  const handleSwipeAnim = useRef(new Animated.Value(0)).current;\n  const driverExpandAnim = useRef(new Animated.Value(0)).current;\n\n  const SLIDER_BUTTON_SIZE = 60;\n  const SLIDER_PADDING = 4;\n  const maxSlideDistance = Math.max(0, state.sliderWidth - SLIDER_BUTTON_SIZE - SLIDER_PADDING * 2);\n  const completeThreshold = maxSlideDistance * 0.95;\n\n  const sliderConfig: SliderConfig = {\n    SLIDER_BUTTON_SIZE,\n    SLIDER_PADDING,\n    maxSlideDistance,\n    completeThreshold,\n  };\n\n  // Слушатель для отслеживания прогресса свайпа\n  useEffect(() => {\n    const listener = slideAnim.addListener(({ value }) => {\n      actions.setSlideProgress(value);\n    });\n    return () => slideAnim.removeListener(listener);\n  }, [slideAnim, actions]);\n\n  const resetSlider = useCallback(() => {\n    Animated.spring(slideAnim, {\n      toValue: 0,\n      useNativeDriver: false,\n      tension: 100,\n      friction: 8,\n    }).start();\n  }, [slideAnim]);\n\n  const completeSwipe = useCallback(() => {\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n    \n    Animated.sequence([\n      Animated.timing(slideAnim, {\n        toValue: -maxSlideDistance,\n        duration: 150,\n        useNativeDriver: false,\n      }),\n      Animated.delay(100),\n      Animated.spring(slideAnim, {\n        toValue: 0,\n        useNativeDriver: false,\n        tension: 100,\n        friction: 8,\n      })\n    ]).start();\n\n    if (state.buttonColorState === 0) {\n      // Всегда показываем диалог \"Вы начинаете поездку к ...\"\n      actions.setShowDialog1(true);\n    } else if (state.buttonColorState === 1) {\n      // Если кнопка изменена (красная), показать диалог отмены\n      if (state.isButtonsSwapped) {\n        actions.setShowDialogCancel(true);\n      } else {\n        actions.setShowDialog2(true);\n      }\n    } else if (state.buttonColorState === 2) {\n      // Если кнопка изменена (красная), показать диалог отмены\n      if (state.isButtonsSwapped) {\n        actions.setShowDialogCancel(true);\n      } else {\n        actions.setShowDialogEmpty(true);\n      }\n    } else if (state.buttonColorState === 3) {\n      actions.setShowDialog3(true);\n    } else if (state.buttonColorState === 4) {\n      if (state.isPaused) {\n        actions.setShowContinueDialog(true);\n      } else {\n        actions.setShowLongPressDialog(true);\n      }\n    }\n  }, [slideAnim, maxSlideDistance, state.buttonColorState, state.isPaused, state.isButtonsSwapped, actions]);\n\n  const onHandlerStateChange = useCallback((event: any) => {\n    const { state: gestureState, translationX } = event.nativeEvent;\n    \n    if (gestureState === State.END || gestureState === State.CANCELLED || gestureState === State.FAILED) {\n      const slideDistance = Math.abs(translationX);\n      \n      if (slideDistance >= completeThreshold && translationX < 0) {\n        completeSwipe();\n      } else {\n        resetSlider();\n      }\n    }\n  }, [completeThreshold, completeSwipe, resetSlider]);\n\n  const onHandleStateChange = useCallback((event: any) => {\n    if (event.nativeEvent.state === State.END) {\n      const { translationY } = event.nativeEvent;\n      \n      // Если свайп меньше 5px - считаем это кликом\n      if (Math.abs(translationY) < 5) {\n        // Клик - переключаем состояние\n        actions.setIsDriverExpanded(!state.isDriverExpanded);\n      } else if (translationY < -20 && !state.isDriverExpanded) {\n        // Свайп вверх - раскрываем\n        actions.setIsDriverExpanded(true);\n      } else if (translationY > 20 && state.isDriverExpanded) {\n        // Свайп вниз - сворачиваем\n        actions.setIsDriverExpanded(false);\n      }\n      \n      Animated.spring(handleSwipeAnim, {\n        toValue: 0,\n        useNativeDriver: false,\n        tension: 100,\n        friction: 8,\n      }).start();\n    }\n  }, [state.isDriverExpanded, actions, handleSwipeAnim]);\n\n  const onGestureEvent = Animated.event(\n    [{ nativeEvent: { translationX: slideAnim } }],\n    { useNativeDriver: false }\n  );\n\n  const onHandleGestureEvent = Animated.event(\n    [{ nativeEvent: { translationY: handleSwipeAnim } }],\n    { useNativeDriver: false }\n  );\n\n  return {\n    slideAnim,\n    handleSwipeAnim,\n    driverExpandAnim,\n    sliderConfig,\n    onGestureEvent,\n    onHandlerStateChange,\n    onHandleGestureEvent,\n    onHandleStateChange,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DriverModal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DriverModal/types/driver-modal.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DriversHeader.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[240,243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[240,243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity, Animated, ScrollView } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useI18n } from '../hooks/useI18n';\n\ntype DriversHeaderProps = {\n  styles: any;\n  isDark: boolean;\n  filterExpandAnim: Animated.Value;\n  onToggleFilter: () => void;\n  onOpenNotifications: () => void;\n  activeFilters?: {\n    all?: boolean;\n    online?: boolean;\n    priceAsc?: boolean;\n    priceDesc?: boolean;\n    rating45?: boolean;\n    vip?: boolean;\n    nearby?: boolean;\n    fastDispatch?: boolean;\n    economy?: boolean;\n    dailyTrips?: boolean;\n  };\n  onSelectFilter?: (\n    key: 'all' | 'online' | 'priceAsc' | 'priceDesc' | 'rating45' | 'vip' | 'nearby' | 'fastDispatch' | 'economy' | 'dailyTrips'\n  ) => void;\n};\n\nconst DriversHeader: React.FC<DriversHeaderProps> = ({ styles, isDark, filterExpandAnim, onToggleFilter, onOpenNotifications, activeFilters = {}, onSelectFilter = () => {} }) => {\n  const { t } = useI18n();\n\n  return (\n    <Animated.View\n      style={[\n        styles.header,\n        {\n          paddingTop: filterExpandAnim.interpolate({ inputRange: [0, 1], outputRange: [8, 16] }),\n          paddingBottom: filterExpandAnim.interpolate({ inputRange: [0, 1], outputRange: [8, 12] }),\n        },\n      ]}\n    >\n      <View style={styles.headerTop}>\n        <View style={[styles.headerRow, { marginTop: 4 }]}>\n          <Text style={styles.headerTitle}>{t('client.drivers')}</Text>\n          <View style={styles.headerActions}>\n            <TouchableOpacity style={styles.filterIconContainer} onPress={onToggleFilter} accessibilityLabel={t('client.notifications.filter')}>\n              <Ionicons name=\"funnel-outline\" size={22} color={isDark ? '#F9FAFB' : '#111827'} />\n            </TouchableOpacity>\n            <TouchableOpacity accessibilityLabel={t('client.notifications.title')} onPress={onOpenNotifications} style={styles.filterButton}>\n              <Ionicons name=\"notifications-outline\" size={22} color={isDark ? '#F9FAFB' : '#111827'} />\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        <Animated.View\n          style={[\n            styles.filtersWrapper,\n            {\n              maxHeight: filterExpandAnim.interpolate({ inputRange: [0, 1], outputRange: [0, 60] }),\n              opacity: filterExpandAnim.interpolate({ inputRange: [0, 0.3, 1], outputRange: [0, 0, 1] }),\n              overflow: 'hidden',\n            },\n          ]}\n        >\n          <ScrollView\n            horizontal\n            showsHorizontalScrollIndicator={false}\n            directionalLockEnabled\n            alwaysBounceVertical={false}\n            bounces={false}\n            overScrollMode=\"never\"\n            scrollEventThrottle={16}\n            style={styles.filtersContainer}\n            contentContainerStyle={styles.filtersContent}\n          >\n            <TouchableOpacity\n              style={[styles.filterChip, activeFilters.all && styles.filterChipActive]}\n              onPress={() => onSelectFilter('all')}\n            >\n              <Text style={[styles.filterChipText, activeFilters.all && styles.filterChipTextActive]}>{t('client.driversScreen.filters.all')}</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={[styles.filterChip, activeFilters.online && styles.filterChipActive]}\n              onPress={() => onSelectFilter('online')}\n            >\n              <Ionicons name=\"radio-button-on\" size={16} color={isDark ? '#3B82F6' : '#083198'} />\n              <Text style={[styles.filterChipText, activeFilters.online && styles.filterChipTextActive]}>{t('client.chat.online')}</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={[styles.filterChip, activeFilters.priceDesc && styles.filterChipActive]}\n              onPress={() => onSelectFilter('priceDesc')}\n            >\n              <Ionicons name=\"chevron-down-outline\" size={16} color={isDark ? '#3B82F6' : '#083198'} />\n              <Text style={[styles.filterChipText, activeFilters.priceDesc && styles.filterChipTextActive]}>{t('client.driversScreen.filters.price')}</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={[styles.filterChip, activeFilters.priceAsc && styles.filterChipActive]}\n              onPress={() => onSelectFilter('priceAsc')}\n            >\n              <Ionicons name=\"chevron-up-outline\" size={16} color={isDark ? '#3B82F6' : '#083198'} />\n              <Text style={[styles.filterChipText, activeFilters.priceAsc && styles.filterChipTextActive]}>{t('client.driversScreen.filters.price')}</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={[styles.filterChip, activeFilters.rating45 && styles.filterChipActive]}\n              onPress={() => onSelectFilter('rating45')}\n            >\n              <Ionicons name=\"star\" size={16} color={isDark ? '#3B82F6' : '#083198'} />\n              <Text style={[styles.filterChipText, activeFilters.rating45 && styles.filterChipTextActive]}>{t('client.driversScreen.filters.rating45')}</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={[styles.filterChip, activeFilters.vip && styles.filterChipActive]}\n              onPress={() => onSelectFilter('vip')}\n            >\n              <Ionicons name=\"diamond\" size={16} color={isDark ? '#3B82F6' : '#083198'} />\n              <Text style={[styles.filterChipText, activeFilters.vip && styles.filterChipTextActive]}>{t('client.profile.vip.title')}</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={[styles.filterChip, activeFilters.dailyTrips && styles.filterChipActive]}\n              onPress={() => onSelectFilter('dailyTrips')}\n            >\n              <Ionicons name=\"calendar-outline\" size={16} color={isDark ? '#3B82F6' : '#083198'} />\n              <Text style={[styles.filterChipText, activeFilters.dailyTrips && styles.filterChipTextActive]}>{t('client.driversScreen.filters.dailyTrips')}</Text>\n            </TouchableOpacity>\n            {/* Nearby and Fast dispatch removed per request */}\n            <TouchableOpacity\n              style={[styles.filterChip, activeFilters.economy && styles.filterChipActive]}\n              onPress={() => onSelectFilter('economy')}\n            >\n              <Ionicons name=\"wallet\" size={16} color={isDark ? '#3B82F6' : '#083198'} />\n              <Text style={[styles.filterChipText, activeFilters.economy && styles.filterChipTextActive]}>{t('client.driversScreen.filters.economy')}</Text>\n            </TouchableOpacity>\n          </ScrollView>\n        </Animated.View>\n      </View>\n    </Animated.View>\n  );\n};\n\nexport default React.memo(DriversHeader);\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DriversSearchBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[226,229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[226,229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, TextInput, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useI18n } from '../hooks/useI18n';\n\ntype DriversSearchBarProps = {\n  styles: any;\n  isDark: boolean;\n  value: string;\n  onChange: (text: string) => void;\n};\n\nconst DriversSearchBar: React.FC<DriversSearchBarProps> = ({ styles, isDark, value, onChange }) => {\n  const { t } = useI18n();\n  return (\n    <View style={styles.searchContainer}>\n      <Ionicons name=\"search\" size={20} color={isDark ? '#9CA3AF' : '#6B7280'} />\n      <TextInput\n        style={styles.searchInput}\n        placeholder={t('client.driversScreen.searchPlaceholder')}\n        placeholderTextColor={isDark ? '#9CA3AF' : '#6B7280'}\n        value={value}\n        onChangeText={onChange}\n      />\n      {value.length > 0 && (\n        <TouchableOpacity onPress={() => onChange('')}>\n          <Ionicons name=\"close-circle\" size={20} color={isDark ? '#9CA3AF' : '#6B7280'} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nexport default React.memo(DriversSearchBar);\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DriversSelectionBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[177,180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[177,180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { useI18n } from '../hooks/useI18n';\n\ntype DriversSelectionBarProps = {\n  styles: any;\n  selectedCount: number;\n  totalCount: number;\n  onSelectAll: () => void;\n  onBook: () => void;\n};\n\nconst DriversSelectionBar: React.FC<DriversSelectionBarProps> = ({ styles, selectedCount, totalCount, onSelectAll, onBook }) => {\n  const { t } = useI18n();\n  return (\n    <View style={styles.actionButtonsContainer}>\n      <View style={styles.actionButtonsRow}>\n        <TouchableOpacity style={[styles.actionButton, styles.selectAllButton]} onPress={onSelectAll}>\n          <Text style={styles.selectAllButtonText}>\n            {selectedCount === totalCount ? t('client.driversScreen.selection.deselectAll') : t('client.driversScreen.selection.selectAll')}\n          </Text>\n        </TouchableOpacity>\n        {selectedCount > 0 && (\n          <TouchableOpacity style={[styles.actionButton, styles.bookButton]} onPress={onBook}>\n            <Text style={styles.bookButtonText}>{t('client.driversScreen.selection.bookCount', { count: selectedCount })}</Text>\n          </TouchableOpacity>\n        )}\n      </View>\n    </View>\n  );\n};\n\nexport default React.memo(DriversSelectionBar);\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/DynamicStatusBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusBarStyle' is defined but never used.","line":2,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { StatusBar, StatusBarStyle } from 'expo-status-bar';\nimport { useTheme } from '../context/ThemeContext';\n\nconst DynamicStatusBar: React.FC = () => {\n  const { isDark } = useTheme();\n  \n  return (\n    <StatusBar \n      style={isDark ? 'light' : 'dark'} \n      backgroundColor=\"transparent\"\n      translucent\n    />\n  );\n};\n\nexport default DynamicStatusBar; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsHeader.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[241,244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[241,244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3437,3440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3437,3440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity, Animated, ScrollView } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useI18n } from '../hooks/useI18n';\n\ntype EarningsHeaderProps = {\n  styles: any;\n  isDark: boolean;\n  filterExpandAnim: Animated.Value;\n  onToggleFilter: () => void;\n  selectedPeriod: 'today' | 'week' | 'month' | 'year';\n  onPeriodSelect: (period: 'today' | 'week' | 'month' | 'year') => void;\n  isOnline: boolean;\n  onStatusChange: () => void;\n\n};\n\nconst EarningsHeader: React.FC<EarningsHeaderProps> = ({ \n  styles, \n  isDark, \n  filterExpandAnim, \n  onToggleFilter, \n  selectedPeriod, \n  onPeriodSelect,\n  isOnline,\n  onStatusChange,\n\n}) => {\n  const { t } = useI18n();\n\n  const periodOptions = [\n    { key: 'today', label: t('driver.earnings.today'), icon: 'time' },\n    { key: 'week', label: t('driver.earnings.week'), icon: 'today' },\n    { key: 'month', label: t('driver.earnings.month'), icon: 'calendar' },\n    { key: 'year', label: t('driver.earnings.year'), icon: 'calendar-outline' },\n  ] as const;\n\n  return (\n    <Animated.View\n      style={[\n        styles.header,\n        {\n          paddingTop: filterExpandAnim.interpolate({ inputRange: [0, 1], outputRange: [8, 16] }),\n          paddingBottom: filterExpandAnim.interpolate({ inputRange: [0, 1], outputRange: [-2, 12] }),\n        },\n      ]}\n    >\n      <View style={styles.headerTop}>\n        <View style={[styles.headerRow, { marginTop: 4 }]}>\n          <Text style={styles.headerTitle}>{t('driver.earnings.title')}</Text>\n          <View style={styles.headerActions}>\n            <TouchableOpacity \n              style={styles.filterIconContainer} \n              onPress={onToggleFilter} \n              accessibilityLabel={t('client.notifications.filter')}\n            >\n              <Ionicons name=\"funnel-outline\" size={22} color={isDark ? '#F9FAFB' : '#111827'} />\n            </TouchableOpacity>\n            <TouchableOpacity \n              accessibilityLabel={t('driver.status.changeStatus')} \n              onPress={onStatusChange} \n              style={styles.statusButton}\n            >\n              <Ionicons \n                name={isOnline ? \"radio-button-on\" : \"radio-button-off\"} \n                size={22} \n                color={isOnline ? \"#10B981\" : \"#6B7280\"} \n              />\n            </TouchableOpacity>\n\n\n\n            {/* Кнопки сброса удалены */}\n          </View>\n        </View>\n\n        <Animated.View\n          style={[\n            styles.filtersWrapper,\n            {\n              maxHeight: filterExpandAnim.interpolate({ inputRange: [0, 1], outputRange: [0, 60] }),\n              opacity: filterExpandAnim.interpolate({ inputRange: [0, 0.3, 1], outputRange: [0, 0, 1] }),\n              overflow: 'hidden',\n            },\n          ]}\n        >\n          <ScrollView \n            horizontal \n            showsHorizontalScrollIndicator={false} \n            style={styles.filtersContainer} \n            contentContainerStyle={styles.filtersContent}\n          >\n            {periodOptions.map((period) => (\n              <TouchableOpacity \n                key={period.key}\n                style={[\n                  styles.filterChip,\n                  selectedPeriod === period.key && styles.filterChipActive\n                ]}\n                onPress={() => onPeriodSelect(period.key)}\n              >\n                <Ionicons \n                  name={period.icon as any} \n                  size={16} \n                  color={selectedPeriod === period.key \n                    ? (isDark ? '#FFFFFF' : '#FFFFFF') \n                    : (isDark ? '#3B82F6' : '#083198')\n                  } \n                />\n                <Text style={[\n                  styles.filterChipText,\n                  selectedPeriod === period.key && styles.filterChipTextActive\n                ]}>\n                  {period.label}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </ScrollView>\n        </Animated.View>\n      </View>\n    </Animated.View>\n  );\n};\n\nexport default React.memo(EarningsHeader);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/EarningsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Haptics' is defined but never used.","line":4,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'incrementProgress' is assigned a value but never used.","line":57,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'balance' is assigned a value but never used.","line":58,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addEarnings' is assigned a value but never used.","line":58,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loadBalance' is assigned a value but never used.","line":58,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loadEarnings' is assigned a value but never used.","line":58,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'resetBalance' is assigned a value but never used.","line":58,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":82},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":71,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'resetVIPTimeData' is assigned a value but never used.","line":90,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'registerRide' is assigned a value but never used.","line":91,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addManualOnlineHours' is assigned a value but never used.","line":92,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'simulateDayChange' is assigned a value but never used.","line":93,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'simulateMonthChange' is assigned a value but never used.","line":94,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'forceDayCheck' is assigned a value but never used.","line":100,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'isCurrentlyOnline'. Either include it or remove the dependency array.","line":145,"column":6,"nodeType":"ArrayExpression","endLine":145,"endColumn":65,"suggestions":[{"desc":"Update the dependencies array to be: [isCurrentlyOnline, vipTimeData.isCurrentlyOnline, vipTimeData.lastOnlineTime]","fix":{"range":[5254,5313],"text":"[isCurrentlyOnline, vipTimeData.isCurrentlyOnline, vipTimeData.lastOnlineTime]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { SafeAreaView, View, Text, TouchableOpacity, ScrollView, Modal, Animated } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport * as Haptics from 'expo-haptics';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { createEarningsScreenStyles } from '../../styles/screens/EarningsScreen.styles';\nimport EarningsHeader from '../EarningsHeader';\nimport levelsTranslations from '../../i18n/common/levels.json';\nimport { \n  LEVELS_CONFIG, \n  VIP_CONFIG, \n  getLevelConfig,\n  getTranslatedLevelName\n} from './types/levels.config';\nimport { useLevelProgress } from '../../context/LevelProgressContext';\nimport { useBalance } from '../../hooks/useBalance';\n\nimport { useEarningsState } from './hooks/useEarningsState';\nimport { useEarningsHandlers } from './hooks/useEarningsHandlers';\nimport { useEarningsData } from './hooks/useEarningsData';\nimport { useVIPTimeTracking } from './hooks/useVIPTimeTracking';\nimport EarningsStats from './components/EarningsStats';\nimport EarningsEmptyContainer from './components/EarningsEmptyContainer';\nimport EarningsProgressLine from './components/EarningsProgressLine';\nimport DayEndModal from '../DayEndModal';\n\nconst EarningsScreen: React.FC = () => {\n  const { isDark } = useTheme();\n  const { t } = useLanguage();\n  const styles = createEarningsScreenStyles(isDark);\n\n  // Хуки для состояния, обработчиков и данных\n  const {\n    selectedPeriod,\n    setSelectedPeriod,\n    filterExpanded,\n    setFilterExpanded,\n    isOnline,\n    setIsOnline,\n    statusModalVisible,\n    setStatusModalVisible,\n    filterExpandAnim,\n    uiUpdateTrigger, // Добавляем триггер для обновления UI\n  } = useEarningsState();\n\n  // Состояние для принудительного обновления\n  const [forceUpdate, setForceUpdate] = useState(0);\n  // Тикер для обновления таймера (раз в секунду при открытой модалке)\n  const [timerTick, setTimerTick] = useState(0);\n  \n  // Анимация для визуальной обратной связи\n  const balanceAnim = useRef(new Animated.Value(1)).current;\n\n  // Получаем данные о прогрессе водителя из контекста — единый источник истины\n  const { driverLevel, incrementProgress, updateVIPLevel } = useLevelProgress();\n  const { balance, earnings, addEarnings, loadBalance, loadEarnings, resetBalance } = useBalance();\n  \n  const { currentData } = useEarningsData(selectedPeriod, forceUpdate);\n  \n  // Синхронизируем earnings с UI\n  React.useEffect(() => {\n    setForceUpdate(prev => prev + 1);\n  }, [earnings]);\n\n  // Обновляем VIP уровень на основе истории выполненных периодов\n  // (перенесено ниже, после инициализации useVIPTimeTracking)\n\n  // Получаем роль пользователя на верхнем уровне\n  const { user } = useAuth();\n\n  // Адаптивный цвет для круга\n  const circleColor = isDark ? '#3B82F6' : '#083198';\n  const textColor = isDark ? '#3B82F6' : '#083198';\n\n  // Состояние для модалки уровня\n  const [levelModalVisible, setLevelModalVisible] = useState(false);\n\n  // Получаем переводы для текущего языка\n  const currentLanguage = useLanguage().language || 'ru';\n  const levelTranslations = levelsTranslations[currentLanguage as keyof typeof levelsTranslations] || levelsTranslations.ru;\n  \n  // VIP система отслеживания времени\n  const { \n    vipTimeData, \n    startOnlineTime, \n    stopOnlineTime, \n    getCurrentHoursOnline,\n    resetVIPTimeData,\n    registerRide,\n    addManualOnlineHours,\n    simulateDayChange,\n    simulateMonthChange,\n    getQualifiedDaysHistory,\n    // Диалог окончания дня\n    dayEndModalVisible,\n    handleDayEndConfirm,\n    handleDayEndCancel,\n    forceDayCheck,\n  } = useVIPTimeTracking(driverLevel.isVIP);\n\n\n  \n  // Единый источник значений для VIP прогресс-бара и тестового контейнера\n  const vipQualifiedDays = vipTimeData.qualifiedDaysThisMonth;\n  const vipRidesToday = vipTimeData.ridesToday;\n  const vipCurrentHours = getCurrentHoursOnline();\n  const isCurrentlyOnline = vipTimeData.isCurrentlyOnline;\n\n  // Обновляем VIP уровень на основе истории выполненных периодов\n  React.useEffect(() => {\n    if (driverLevel.isVIP && driverLevel.vipStartDate) {\n      const qualifiedHistory = getQualifiedDaysHistory();\n      updateVIPLevel(qualifiedHistory);\n    }\n  }, [driverLevel.isVIP, driverLevel.vipStartDate, getQualifiedDaysHistory, updateVIPLevel]);\n\n  // Автообновление таймера в модалке раз в 1 секунду\n  React.useEffect(() => {\n    if (!statusModalVisible) return;\n    const id = setInterval(() => setTimerTick((v) => v + 1), 1000);\n    return () => clearInterval(id);\n  }, [statusModalVisible]);\n\n  // Автообновление таймера на экране, когда онлайн\n  React.useEffect(() => {\n    if (!isOnline) return;\n    const id = setInterval(() => setTimerTick((v) => v + 1), 1000);\n    return () => clearInterval(id);\n  }, [isOnline]);\n\n  // Принудительное обновление таймера при изменении статуса через DriverModal\n  React.useEffect(() => {\n    if (uiUpdateTrigger > 0) {\n      setTimerTick(prev => prev + 1);\n    }\n  }, [uiUpdateTrigger]);\n\n  // Принудительное обновление таймера при изменении VIP данных\n  React.useEffect(() => {\n    if (isCurrentlyOnline) {\n      setTimerTick(prev => prev + 1);\n    }\n  }, [vipTimeData.isCurrentlyOnline, vipTimeData.lastOnlineTime]);\n\n  // Принудительное обновление таймера при изменении онлайн-статуса\n  React.useEffect(() => {\n    if (isOnline) {\n      setTimerTick(prev => prev + 1);\n    }\n  }, [isOnline]);\n\n  const {\n    toggleFilter,\n    handlePeriodSelect,\n    handleStatusChange,\n    confirmStatusChange,\n    handleBalancePress,\n  } = useEarningsHandlers(\n    filterExpanded,\n    setFilterExpanded,\n    filterExpandAnim,\n    setSelectedPeriod,\n    setStatusModalVisible,\n    isOnline,\n    setIsOnline,\n    startOnlineTime,\n    stopOnlineTime\n  );\n  \n\n\n  // Функция для получения названия уровня на текущем языке\n  const getLevelDisplayName = () => {\n    // Если VIP статус, показываем \"ВИП N\" из driverLevel.vipLevel\n    if (driverLevel.currentLevel >= 7) {\n      const vipLabel = 'ВИП';\n      const vipLevel = driverLevel.vipLevel || 1; // Получаем VIP уровень из состояния\n      return `${vipLabel} ${vipLevel}`;\n    }\n    \n    // Получаем конфигурацию текущего уровня\n    const config = getLevelConfig(driverLevel.currentLevel, driverLevel.currentSubLevel);\n    return getTranslatedLevelName(config.levelKey, config.subLevel, t);\n  };\n\n  // Функция для получения иконки уровня\n  const getLevelIcon = () => {\n    // Используем иконку из driverLevel для синхронизации\n    return driverLevel.icon;\n  };\n  // Предпросмотр месячного бонуса для VIP: 20->50, 25->75, 26+->100 AFc\n  const isQualifiedToday = driverLevel.isVIP && vipCurrentHours >= 10 && vipRidesToday >= 3;\n  const displayQualifiedDays = driverLevel.isVIP\n    ? vipQualifiedDays + (isQualifiedToday ? 1 : 0)\n    : 0;\n  // Месячный превью-бонус по правилам:\n  // 0–19 → 0, 20–25 → +50, 26–29 → +75, 30 → +100\n  const baseMonthlyPreview = driverLevel.isVIP\n    ? (displayQualifiedDays < 20 ? 0\n      : displayQualifiedDays <= 25 ? VIP_CONFIG.monthlyBonuses.days20\n      : displayQualifiedDays <= 29 ? VIP_CONFIG.monthlyBonuses.days25\n      : VIP_CONFIG.monthlyBonuses.days30)\n    : 0;\n\n  // Квартальный превью-бонус добавляем в ТЕКУЩЕМ периоде, когда в нём уже >=20 дней\n  let quarterlyPreview = 0;\n  if (driverLevel.isVIP) {\n    const history = getQualifiedDaysHistory?.() || [];\n    // Считаем подряд идущие успешные периоды с конца истории\n    let trailingQualified = 0;\n    for (let i = history.length - 1; i >= 0; i -= 1) {\n      if (history[i] >= VIP_CONFIG.minDaysPerMonth) trailingQualified += 1;\n      else break;\n    }\n\n    const qualifiesCurrent = displayQualifiedDays >= VIP_CONFIG.minDaysPerMonth;\n    const effectiveConsecutive = trailingQualified + (qualifiesCurrent ? 1 : 0);\n\n    if (qualifiesCurrent) {\n      if (effectiveConsecutive === 3) quarterlyPreview = VIP_CONFIG.quarterlyBonuses.months3;\n      else if (effectiveConsecutive === 6) quarterlyPreview = VIP_CONFIG.quarterlyBonuses.months6;\n      else if (effectiveConsecutive === 12) quarterlyPreview = VIP_CONFIG.quarterlyBonuses.months12;\n    }\n  }\n\n  const vipMonthlyPreviewBonus = baseMonthlyPreview + quarterlyPreview;\n\n\n\n\n  // Функция для генерации контента модалки на основе новой конфигурации\n  const generateLevelModalContent = () => {\n    let content = '';\n    \n    // Добавляем информацию о каждом уровне\n    for (let level = 1; level <= 6; level++) {\n      const levelConfigs = [\n        LEVELS_CONFIG[`${level}.1`],\n        LEVELS_CONFIG[`${level}.2`],\n        LEVELS_CONFIG[`${level}.3`]\n      ];\n      \n      if (levelConfigs[0]) {\n        const levelName = getTranslatedLevelName(levelConfigs[0].levelKey, 1, t).split(' ')[0]; // Берем только название уровня без номера\n        const icon = levelConfigs[0].icon;\n        \n        // Вычисляем диапазон поездок для уровня согласно MD файлу\n        let startRides = 0;\n        let endRides = 0;\n        \n        if (level === 1) {\n          startRides = 0;\n          endRides = 120;\n        } else if (level === 2) {\n          startRides = 121;\n          endRides = 360;\n        } else if (level === 3) {\n          startRides = 361;\n          endRides = 810;\n        } else if (level === 4) {\n          startRides = 811;\n          endRides = 1560;\n        } else if (level === 5) {\n          startRides = 1561;\n          endRides = 2700;\n        } else if (level === 6) {\n          startRides = 2701;\n          endRides = 4320;\n        }\n        \n        content += `${icon} ${levelName} (${startRides}-${endRides} поездок)\\n`;\n        \n        // Добавляем подуровни с правильными диапазонами\n        levelConfigs.forEach((config, index) => {\n          let subLevelStart = 0;\n          let subLevelEnd = 0;\n          \n          if (level === 1) {\n            if (index === 0) { subLevelStart = 0; subLevelEnd = 30; }\n            else if (index === 1) { subLevelStart = 31; subLevelEnd = 70; }\n            else if (index === 2) { subLevelStart = 71; subLevelEnd = 120; }\n          } else if (level === 2) {\n            if (index === 0) { subLevelStart = 121; subLevelEnd = 180; }\n            else if (index === 1) { subLevelStart = 181; subLevelEnd = 260; }\n            else if (index === 2) { subLevelStart = 261; subLevelEnd = 360; }\n          } else if (level === 3) {\n            if (index === 0) { subLevelStart = 361; subLevelEnd = 480; }\n            else if (index === 1) { subLevelStart = 481; subLevelEnd = 630; }\n            else if (index === 2) { subLevelStart = 631; subLevelEnd = 810; }\n          } else if (level === 4) {\n            if (index === 0) { subLevelStart = 811; subLevelEnd = 1020; }\n            else if (index === 1) { subLevelStart = 1021; subLevelEnd = 1270; }\n            else if (index === 2) { subLevelStart = 1271; subLevelEnd = 1560; }\n          } else if (level === 5) {\n            if (index === 0) { subLevelStart = 1561; subLevelEnd = 1890; }\n            else if (index === 1) { subLevelStart = 1891; subLevelEnd = 2270; }\n            else if (index === 2) { subLevelStart = 2271; subLevelEnd = 2700; }\n          } else if (level === 6) {\n            if (index === 0) { subLevelStart = 2701; subLevelEnd = 3180; }\n            else if (index === 1) { subLevelStart = 3181; subLevelEnd = 3720; }\n            else if (index === 2) { subLevelStart = 3721; subLevelEnd = 4320; }\n          }\n          \n          content += `• ${getTranslatedLevelName(config.levelKey, config.subLevel, t)} (${subLevelStart}-${subLevelEnd}) +${config.bonus} AFc\\n`;\n        });\n        \n        content += '\\n';\n      }\n    }\n    \n    // Добавляем VIP систему с переводами\n    const vipTranslations = levelTranslations.vip;\n    content += `${VIP_CONFIG.icon} ${vipTranslations.title} (${vipTranslations.subtitle})\\n\\n`;\n    content += `${vipTranslations.monthlyTitle}\\n`;\n    content += `• 20 ${vipTranslations.daysOnline} +${VIP_CONFIG.monthlyBonuses.days20} AFc\\n`;\n    content += `• 25 ${vipTranslations.daysOnline} +${VIP_CONFIG.monthlyBonuses.days25} AFc\\n`;\n    content += `• 30 ${vipTranslations.daysOnline} +${VIP_CONFIG.monthlyBonuses.days30} AFc\\n\\n`;\n    content += `${vipTranslations.quarterlyTitle}\\n`;\n    content += `• 3 ${vipTranslations.monthsInRow} +${VIP_CONFIG.quarterlyBonuses.months3} AFc\\n`;\n    content += `• 6 ${vipTranslations.monthsInRow} +${VIP_CONFIG.quarterlyBonuses.months6} AFc\\n`;\n    content += `• 12 ${vipTranslations.monthsInRow} +${VIP_CONFIG.quarterlyBonuses.months12} AFc\\n\\n`;\n    content += vipTranslations.additionalNote;\n    \n    return content;\n  };\n\n  const handleLevelPress = () => {\n    setLevelModalVisible(true);\n  };\n\n  // Обработчик для сброса баланса\n  // Кнопки сброса удалены\n\n  // Тестовая кнопка удалена\n\n\n\n  return (\n    <View style={styles.container}>\n      <SafeAreaView style={styles.safeAreaTop}>\n                    <EarningsHeader\n              styles={styles}\n              isDark={isDark}\n              filterExpandAnim={filterExpandAnim}\n              onToggleFilter={toggleFilter}\n              selectedPeriod={selectedPeriod}\n              onPeriodSelect={handlePeriodSelect}\n              isOnline={isOnline}\n              onStatusChange={handleStatusChange}\n\n            />\n      </SafeAreaView>\n\n      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>\n        <Animated.View style={{ transform: [{ scale: balanceAnim }] }}>\n          <TouchableOpacity style={styles.earningsCard} onPress={handleBalancePress}>\n          <View style={styles.earningsHeader}>\n            <View style={styles.earningsLeft}>\n              <TouchableOpacity style={{ alignItems: 'center', marginRight: 12 }} onPress={handleLevelPress}>\n                <View style={{ \n                  backgroundColor: circleColor,\n                  borderRadius: 25,\n                  width: 50,\n                  height: 50,\n                  justifyContent: 'center',\n                  alignItems: 'center'\n                }}>\n                  <Text style={{ fontSize: 32 }}>{getLevelIcon()}</Text>\n                </View>\n              </TouchableOpacity>\n              <View>\n                <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                  <Text style={styles.earningsAmount}>{currentData.total}</Text>\n                  {driverLevel.isVIP ? (\n                    <Text style={[styles.earningsReward, { color: '#10B981' }]}>+{vipMonthlyPreviewBonus} AFc</Text>\n                  ) : (\n                    <Text style={styles.earningsReward}>+{parseInt(driverLevel.nextReward)} AFc</Text>\n                  )}\n                </View>\n                <Text style={{ fontSize: 10, color: textColor, marginTop: 4, fontWeight: '600', marginLeft: 14 }}>{getLevelDisplayName()}</Text>\n              </View>\n            </View>\n            <Ionicons name=\"chevron-forward\" size={20} color=\"#6B7280\" />\n          </View>\n          <EarningsProgressLine \n            isDark={isDark}\n            vipQualifiedDays={vipQualifiedDays}\n            vipRidesToday={vipRidesToday}\n            vipCurrentHours={vipCurrentHours}\n          />\n          \n          {/* Тестовая кнопка удалена */}\n        </TouchableOpacity>\n        </Animated.View>\n        \n        {/* VIP Test Container removed */}\n        \n        <EarningsStats period={selectedPeriod} isDark={isDark} />\n        <EarningsEmptyContainer isDark={isDark} />\n      </ScrollView>\n\n      {/* Модалка изменения статуса */}\n      <Modal\n        visible={statusModalVisible}\n        transparent={true}\n        animationType=\"fade\"\n        onRequestClose={() => setStatusModalVisible(false)}\n      >\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            {/* Таймер текущих часов онлайн за сегодня (локально 00:00-23:59) */}\n            <View style={styles.modalTimerContainer}>\n              <Text style={styles.modalTimerText}>\n                {(() => {\n                  // timerTick используется для принудительного пересчета каждую секунду\n                  void timerTick;\n                  const totalSeconds = Math.max(0, Math.floor(vipCurrentHours * 3600));\n                  const hh = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');\n                  const mm = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, '0');\n                  const ss = String(totalSeconds % 60).padStart(2, '0');\n                  return `${hh}:${mm}:${ss}`;\n                })()}\n              </Text>\n            </View>\n            <Text style={styles.modalTitle}>{t('driver.status.changeStatus')}</Text>\n            <Text style={styles.modalMessage}>\n              {t('driver.status.changeStatusMessage')}{'\\n'}\n              <Text style={styles.modalStatusText}>\n                {isOnline ? t('driver.status.offline') : t('driver.status.online')}?\n              </Text>\n            </Text>\n            <View style={styles.modalButtons}>\n              <TouchableOpacity \n                style={styles.modalButtonCancel} \n                onPress={() => setStatusModalVisible(false)}\n              >\n                <Text style={styles.modalButtonCancelText}>{t('driver.status.cancel')}</Text>\n              </TouchableOpacity>\n              <TouchableOpacity \n                style={styles.modalButtonConfirm} \n                onPress={confirmStatusChange}\n              >\n                <Text style={styles.modalButtonConfirmText}>{t('driver.status.confirm')}</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Модалка уровня водителя */}\n      <Modal\n        visible={levelModalVisible}\n        transparent={true}\n        animationType=\"fade\"\n        onRequestClose={() => setLevelModalVisible(false)}\n      >\n        <View style={styles.modalOverlay}>\n          <View style={[styles.modalContent, { maxHeight: '80%', width: '90%', minHeight: 500 }]}>\n            <Text style={[styles.modalTitle, { textAlign: 'left' }]}>{levelTranslations.title}</Text>\n            <Text style={{ fontSize: 14, color: '#6B7280', textAlign: 'left', marginBottom: 15 }}>\n              {levelTranslations.description}\n            </Text>\n            <ScrollView style={{ flex: 1, marginVertical: 10 }}>\n              <Text style={[styles.modalMessage, { textAlign: 'left' }]}>\n                {generateLevelModalContent().split(/(\\+\\d+ AFc|Ежеквартальными и Ежемесячными бонусами считаются дни.*|Quarterly and Monthly bonuses count days.*|Rüblük və Aylıq bonuslar üçün günlər.*|المكافآت الفصلية والشهرية تحتسب الأيام.*|Vierteljährliche und Monatliche Boni zählen Tage.*|Las bonificaciones trimestrales y mensuales cuentan días.*|Les bonus trimestriels et mensuels comptabilisent.*|Üç aylık ve Aylık bonuslar.*)/u).map((part, index) => {\n                  if (part.match(/^\\+\\d+ AFc$/)) {\n                    return (\n                      <Text key={index} style={{ fontWeight: 'bold', color: '#10B981' }}>\n                        {part}\n                      </Text>\n                    );\n                  }\n                  if (part.includes('*Ежеквартальные бонусы')) {\n                    return (\n                      <Text key={index} style={{ fontStyle: 'italic', color: '#6B7280', fontSize: 12 }}>\n                        {part}\n                      </Text>\n                    );\n                  }\n                  // Проверяем, содержит ли часть текст про правила бонусов (для любого языка)\n                  if (part.includes('Ежеквартальными и Ежемесячными бонусами') || \n                      part.includes('Quarterly and Monthly bonuses') ||\n                      part.includes('Rüblük və Aylıq bonuslar') ||\n                      part.includes('المكافآت الفصلية والشهرية') ||\n                      part.includes('Vierteljährliche und Monatliche') ||\n                      part.includes('Las bonificaciones trimestrales') ||\n                      part.includes('Les bonus trimestriels') ||\n                      part.includes('Üç aylık ve Aylık bonuslar')) {\n                    return (\n                      <Text key={index} style={{ fontWeight: 'bold', fontSize: 14 }}>\n                        {part}\n                      </Text>\n                    );\n                  }\n                  return part;\n                })}\n              </Text>\n            </ScrollView>\n            <View style={styles.modalButtons}>\n              <TouchableOpacity \n                style={styles.modalButtonCancel} \n                onPress={() => setLevelModalVisible(false)}\n              >\n                <Text style={styles.modalButtonCancelText}>Закрыть</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Диалог окончания дня */}\n      <DayEndModal\n        visible={dayEndModalVisible}\n        onConfirm={handleDayEndConfirm}\n        onCancel={handleDayEndCancel}\n      />\n\n    </View>\n  );\n};\n\nexport default EarningsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/components/EarningsDetailView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TouchableOpacity' is defined but never used.","line":2,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'period' is defined but never used.","line":7,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'period' is defined but never used.","line":8,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'period' is defined but never used.","line":9,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'period' is defined but never used.","line":10,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onClose' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1905,1908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1905,1908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2651,2654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2651,2654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3145,3148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3145,3148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3297,3300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3297,3300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3578,3581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3578,3581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5203,5206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5203,5206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport PropTypes from 'prop-types';\nimport { getCurrentColors, SIZES } from '../../../constants/colors';\n// Mock functions removed - using hardcoded data\nconst getRideHistoryByPeriod = (period: string) => [];\nconst getHourlyActivityByPeriod = (period: string) => [];\nconst getDistanceMetricsByPeriod = (period: string) => [];\nconst getRoutePointsByPeriod = (period: string) => [];\n\ninterface EarningsDetailViewProps {\n  selectedStat: 'totalRides' | 'workHours' | 'totalDistance' | 'routePoints' | null;\n  isDark: boolean;\n  onClose: () => void;\n  period: 'today' | 'week' | 'month' | 'year';\n}\n\nconst EarningsDetailView: React.FC<EarningsDetailViewProps> = React.memo(({ \n  selectedStat, \n  isDark, \n  onClose,\n  period\n}) => {\n  const colors = getCurrentColors(isDark);\n\n  if (!selectedStat) return null;\n\n  const getDetailContent = () => {\n    switch (selectedStat) {\n      case 'totalRides':\n        return {\n          title: 'История поездок',\n          icon: 'car-outline',\n          data: getRideHistoryByPeriod(period)\n        };\n      \n      case 'workHours':\n        return {\n          title: 'Активность по часам',\n          icon: 'time-outline',\n          data: getHourlyActivityByPeriod(period)\n        };\n      \n      case 'totalDistance':\n        return {\n          title: 'Статистика пробега',\n          icon: 'navigate-outline',\n          data: getDistanceMetricsByPeriod(period)\n        };\n      \n      case 'routePoints':\n        return {\n          title: 'Маршруты на сегодня',\n          icon: 'location-outline',\n          data: getRoutePointsByPeriod(period)\n        };\n      \n      default:\n        return null;\n    }\n  };\n\n  const content = getDetailContent();\n  if (!content) return null;\n\n  const renderRideItem = (item: any, index: number) => (\n    <View key={index} style={styles.rideItem}>\n      <View style={styles.rideHeader}>\n        <Text style={[styles.clientName, { color: colors.text }]}>\n          {item.clientName} {item.clientSurname}\n        </Text>\n        <Text style={[styles.rideDateTime, { color: colors.textSecondary }]}>{item.datetime}</Text>\n      </View>\n      <View style={styles.rideFooter}>\n        <Text style={[styles.rideAmount, { color: colors.primary }]}>{item.amount}</Text>\n        <View style={[styles.statusBadge, { backgroundColor: colors.success + '20' }]}>\n          <Text style={[styles.statusText, { color: colors.success }]}>{item.status}</Text>\n        </View>\n      </View>\n    </View>\n  );\n\n  const renderHourItem = (item: any, index: number) => (\n    <View key={index} style={styles.hourItem}>\n      <Text style={[styles.hourText, { color: colors.text }]}>{item.hour}</Text>\n      <View style={styles.hourStats}>\n        <Text style={[styles.ridesCount, { color: colors.textSecondary }]}>\n          {item.rides} поездок\n        </Text>\n        <Text style={[styles.hourEarnings, { color: colors.primary }]}>\n          {item.earnings}\n        </Text>\n      </View>\n    </View>\n  );\n\n  const renderMetricItem = (item: any, index: number) => (\n    <View key={index} style={styles.metricItem}>\n      <View style={styles.metricHeader}>\n        <Ionicons name={item.icon as any} size={16} color={colors.primary} />\n        <Text style={[styles.metricName, { color: colors.text }]}>{item.metric}</Text>\n      </View>\n      <Text style={[styles.metricValue, { color: colors.primary }]}>{item.value}</Text>\n    </View>\n  );\n\n  const renderRouteItem = (item: any, index: number) => (\n    <View key={index} style={styles.routeItem}>\n      <View style={styles.routeHeader}>\n        <Text style={[styles.routePoint, { color: colors.text }]}>{item.point}</Text>\n        <Text style={[styles.routeTime, { color: colors.textSecondary }]}>{item.time}</Text>\n      </View>\n      <View style={styles.routeFooter}>\n        <Text style={[styles.routeAddress, { color: colors.textSecondary }]}>{item.address}</Text>\n        <View style={[\n          styles.statusBadge, \n          { \n            backgroundColor: item.status === 'В процессе' ? colors.warning + '20' : \n                            colors.textSecondary + '20' \n          }\n        ]}>\n          <Text style={[\n            styles.statusText, \n            { \n              color: item.status === 'В процессе' ? colors.warning : \n                     colors.textSecondary \n            }\n          ]}>\n            {item.status}\n          </Text>\n        </View>\n      </View>\n    </View>\n  );\n\n  const renderContent = () => {\n    switch (selectedStat) {\n      case 'totalRides':\n        return content.data.map(renderRideItem);\n      case 'workHours':\n        return content.data.map(renderHourItem);\n      case 'totalDistance':\n        return content.data.map(renderMetricItem);\n      case 'routePoints':\n        return content.data.map(renderRouteItem);\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <View style={[styles.container, { backgroundColor: colors.surface }]}>\n      {/* Заголовок */}\n      <View style={styles.header}>\n        <View style={styles.titleContainer}>\n          <Ionicons name={content.icon as any} size={20} color={colors.primary} />\n          <Text style={[styles.title, { color: colors.text }]}>{content.title}</Text>\n        </View>\n      </View>\n\n      {/* Контент */}\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {renderContent()}\n      </ScrollView>\n    </View>\n  );\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: SIZES.lg,\n    borderRadius: SIZES.radius.md,\n    marginHorizontal: SIZES.sm,\n    marginBottom: SIZES.md,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: SIZES.md,\n  },\n  titleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: SIZES.sm,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  closeButton: {\n    padding: SIZES.xs,\n  },\n  content: {\n    maxHeight: 200,\n  },\n  // Стили для поездок\n  rideItem: {\n    paddingVertical: SIZES.md,\n    paddingHorizontal: SIZES.md,\n    borderBottomWidth: 1,\n    borderBottomColor: 'rgba(0,0,0,0.1)',\n  },\n  rideHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: SIZES.xs,\n  },\n  clientName: {\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  rideDateTime: {\n    fontSize: 12,\n    color: '#666',\n  },\n  ratingContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  rating: {\n    fontSize: 12,\n  },\n  rideFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  rideAmount: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  statusBadge: {\n    paddingHorizontal: SIZES.sm,\n    paddingVertical: SIZES.xs,\n    borderRadius: SIZES.radius.sm,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '500',\n  },\n  // Стили для часов\n  hourItem: {\n    padding: SIZES.md,\n    borderRadius: SIZES.radius.sm,\n    marginBottom: SIZES.sm,\n  },\n  hourText: {\n    fontSize: 14,\n    fontWeight: '500',\n    marginBottom: SIZES.xs,\n  },\n  hourStats: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  ridesCount: {\n    fontSize: 12,\n  },\n  hourEarnings: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  // Стили для метрик\n  metricItem: {\n    padding: SIZES.md,\n    borderRadius: SIZES.radius.sm,\n    marginBottom: SIZES.sm,\n  },\n  metricHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: SIZES.sm,\n    marginBottom: SIZES.xs,\n  },\n  metricName: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  metricValue: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginLeft: 24,\n  },\n  // Стили для маршрутов\n  routeItem: {\n    padding: SIZES.md,\n    borderRadius: SIZES.radius.sm,\n    marginBottom: SIZES.sm,\n  },\n  routeHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: SIZES.xs,\n  },\n  routeFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  routePoint: {\n    fontSize: 16,\n    fontWeight: '500',\n    marginBottom: SIZES.xs,\n  },\n  routeTime: {\n    fontSize: 12,\n  },\n  routeAddress: {\n    fontSize: 12,\n  },\n});\n\nEarningsDetailView.displayName = 'EarningsDetailView';\n\nEarningsDetailView.propTypes = {\n  selectedStat: PropTypes.object,\n  isDark: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  period: PropTypes.oneOf(['today', 'week', 'month', 'year']).isRequired,\n};\n\nexport default EarningsDetailView;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/components/EarningsEmptyContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/components/EarningsLevel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":13,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from 'react';\nimport { View, Text, StyleSheet, Animated } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useI18n } from '../../../hooks/useI18n';\nimport { getCurrentColors, SHADOWS, SIZES } from '../../../constants/colors';\nimport { useLevelProgress } from '../../../context/LevelProgressContext';\n\ninterface EarningsLevelProps {\n  isDark: boolean;\n}\n\nconst EarningsLevel: React.FC<EarningsLevelProps> = ({ isDark }) => {\n  const { t } = useI18n();\n  const colors = getCurrentColors(isDark);\n  const { driverLevel } = useLevelProgress();\n\n  // Анимация для круглого прогресс бара\n  const circleProgressAnim = useRef(new Animated.Value(0)).current;\n  const barProgressAnim = useRef(new Animated.Value(0)).current;\n  const prevProgress = useRef(driverLevel.currentProgress);\n\n  const progressPercentage = (driverLevel.currentProgress / driverLevel.maxProgress) * 100;\n\n  // Анимация при изменении прогресса\n  useEffect(() => {\n    if (driverLevel.currentProgress !== prevProgress.current) {\n      // Анимируем круглый прогресс\n      Animated.timing(circleProgressAnim, {\n        toValue: progressPercentage,\n        duration: 800,\n        useNativeDriver: false,\n      }).start();\n\n      // Анимируем линейный прогресс\n      Animated.timing(barProgressAnim, {\n        toValue: progressPercentage,\n        duration: 800,\n        useNativeDriver: false,\n      }).start();\n      \n      prevProgress.current = driverLevel.currentProgress;\n    } else {\n      // Устанавливаем начальные значения без анимации\n      circleProgressAnim.setValue(progressPercentage);\n      barProgressAnim.setValue(progressPercentage);\n    }\n  }, [driverLevel.currentProgress, driverLevel.maxProgress, progressPercentage, circleProgressAnim, barProgressAnim]);\n\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: colors.surface,\n      padding: SIZES.xl,\n      marginHorizontal: SIZES.xl,\n      marginBottom: SIZES.lg,\n      borderRadius: SIZES.radius.lg,\n      ...(isDark ? SHADOWS.dark.small : SHADOWS.light.small),\n    },\n    levelContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n    },\n    progressSection: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    progressCircle: {\n      width: 80,\n      height: 80,\n      borderRadius: 40,\n      borderWidth: 6,\n      borderColor: colors.border,\n      justifyContent: 'center',\n      alignItems: 'center',\n      position: 'relative',\n    },\n    progressFill: {\n      position: 'absolute',\n      width: 80,\n      height: 80,\n      borderRadius: 40,\n      borderWidth: 6,\n      borderColor: 'transparent',\n      borderTopColor: '#10B981',\n      borderRightColor: '#10B981',\n    },\n    progressText: {\n      fontSize: SIZES.fontSize.lg,\n      fontWeight: '700',\n      color: colors.text,\n    },\n    levelInfo: {\n      flex: 1,\n      marginLeft: SIZES.lg,\n    },\n    levelTitle: {\n      fontSize: SIZES.fontSize.lg,\n      fontWeight: '600',\n      color: colors.text,\n      marginBottom: SIZES.xs,\n    },\n    levelDescription: {\n      fontSize: SIZES.fontSize.sm,\n      color: colors.textSecondary,\n      marginBottom: SIZES.sm,\n    },\n    rewardSection: {\n      alignItems: 'flex-end',\n    },\n    rewardIcon: {\n      position: 'absolute',\n      top: -8,\n      right: -8,\n      width: 20,\n      height: 20,\n      borderRadius: 10,\n      backgroundColor: colors.success + '15',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    rewardText: {\n      fontSize: SIZES.fontSize.xs,\n      fontWeight: '600',\n      color: colors.success,\n      marginTop: 2,\n    },\n    progressBar: {\n      width: '100%',\n      height: 4,\n      backgroundColor: colors.border,\n      borderRadius: 2,\n      marginTop: SIZES.sm,\n      overflow: 'hidden',\n    },\n    \n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.levelContainer}>\n        {/* Круглый прогресс-бар */}\n        <View style={styles.progressSection}>\n          <View style={styles.progressCircle}>\n            <Animated.View\n              style={[\n                styles.progressFill,\n                {\n                  transform: [\n                    {\n                      rotate: circleProgressAnim.interpolate({\n                        inputRange: [0, 100],\n                        outputRange: ['-90deg', '270deg'], // От -90 до 270 градусов для полного круга\n                      }),\n                    },\n                  ],\n                },\n              ]}\n            />\n            <Text style={styles.progressText}>\n              {driverLevel.currentProgress}/{driverLevel.maxProgress}\n            </Text>\n            <Text style={styles.rewardText}>{driverLevel.nextReward}</Text>\n          </View>\n          \n          {/* Информация об уровне */}\n          <View style={styles.levelInfo}>\n            <Text style={styles.levelTitle}>{driverLevel.subLevelTitle}</Text>\n            <Text style={styles.levelDescription}>\n              Уровень {driverLevel.currentLevel}\n            </Text>\n            <View style={styles.progressBar}>\n              <Animated.View\n                style={{\n                  width: barProgressAnim.interpolate({\n                    inputRange: [0, 100],\n                    outputRange: ['0%', '100%'],\n                  }),\n                  height: '100%',\n                  borderRadius: 2,\n                }}\n              >\n                <LinearGradient\n                  colors={['#10B981', '#059669']}\n                  start={{ x: 0, y: 0 }}\n                  end={{ x: 1, y: 0 }}\n                  style={{\n                    width: '100%',\n                    height: '100%',\n                    borderRadius: 2,\n                  }}\n                />\n              </Animated.View>\n            </View>\n          </View>\n        </View>\n      </View>\n      \n    </View>\n  );\n};\n\nexport default EarningsLevel;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/components/EarningsListContainer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1999,2002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1999,2002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { getCurrentColors, SIZES } from '../../../constants/colors';\n\ninterface EarningsListContainerProps {\n  isDark: boolean;\n}\n\nconst EarningsListContainer: React.FC<EarningsListContainerProps> = ({ isDark }) => {\n  const colors = getCurrentColors(isDark);\n\n  // Мок данные для топ водителей\n  const topDrivers = [\n    {\n      id: '1',\n      name: 'Алексей Петров',\n      level: 'VIP 8',\n      rides: '45',\n      earnings: '1,250 AFc',\n      position: '1'\n    },\n    {\n      id: '2',\n      name: 'Мария Иванова',\n      level: 'VIP 6',\n      rides: '42',\n      earnings: '1,180 AFc',\n      position: '2'\n    },\n    {\n      id: '3',\n      name: 'Дмитрий Сидоров',\n      level: 'VIP 5',\n      rides: '38',\n      earnings: '1,050 AFc',\n      position: '3'\n    },\n    {\n      id: '4',\n      name: 'Анна Козлова',\n      level: 'VIP 3',\n      rides: '35',\n      earnings: '980 AFc',\n      position: '4'\n    },\n    {\n      id: '5',\n      name: 'Сергей Новиков',\n      level: 'VIP 2',\n      rides: '32',\n      earnings: '890 AFc',\n      position: '5'\n    },\n    {\n      id: '6',\n      name: 'Елена Морозова',\n      level: 'VIP 1',\n      rides: '28',\n      earnings: '750 AFc',\n      position: '6'\n    },\n    {\n      id: '7',\n      name: 'Андрей Волков',\n      level: 'Император',\n      rides: '25',\n      earnings: '680 AFc',\n      position: '7'\n    },\n    {\n      id: '8',\n      name: 'Ольга Лебедева',\n      level: 'Суперзвезда',\n      rides: '22',\n      earnings: '620 AFc',\n      position: '8'\n    },\n    {\n      id: '9',\n      name: 'Игорь Соколов',\n      level: 'Чемпион',\n      rides: '20',\n      earnings: '580 AFc',\n      position: '9'\n    },\n    {\n      id: '10',\n      name: 'Наталья Романова',\n      level: 'Надежный',\n      rides: '18',\n      earnings: '520 AFc',\n      position: '10'\n    }\n  ];\n\n  const renderDriverItem = (driver: any, index: number) => (\n    <TouchableOpacity \n      key={driver.id} \n      style={[\n        styles.driverItem,\n        index === topDrivers.length - 1 && { borderBottomWidth: 0 }\n      ]}\n      activeOpacity={0.7}\n    >\n      <View style={styles.driverHeader}>\n        <View style={styles.positionContainer}>\n          <Text style={[styles.position, { color: colors.primary }]}>{driver.position}</Text>\n        </View>\n        <View style={styles.driverContent}>\n          <Text style={[styles.driverName, { color: colors.text }]}>{driver.name}</Text>\n          <Text style={[styles.driverLevel, { color: colors.textSecondary }]}>{driver.level}</Text>\n        </View>\n        <View style={styles.statsContainer}>\n          <Text style={[styles.rides, { color: colors.textSecondary }]}>{driver.rides}</Text>\n          <Text style={[styles.earnings, { color: colors.primary }]}>{driver.earnings}</Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  return (\n    <View style={[styles.container, { backgroundColor: colors.surface }]}>\n      {/* Заголовок */}\n      <View style={styles.header}>\n        <View style={styles.titleContainer}>\n          <Ionicons name=\"trophy-outline\" size={20} color={colors.primary} />\n          <Text style={[styles.title, { color: colors.text }]}>Топ водители</Text>\n        </View>\n      </View>\n\n\n\n      {/* Список водителей */}\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {topDrivers.map(renderDriverItem)}\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: SIZES.xl,\n    borderRadius: SIZES.radius.lg,\n    marginHorizontal: SIZES.xl,\n    marginBottom: SIZES.xs,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: SIZES.lg,\n  },\n  titleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: SIZES.sm,\n    marginLeft: SIZES.xs,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  content: {\n    maxHeight: 200,\n  },\n  columnsHeader: {\n    flexDirection: 'row',\n    paddingHorizontal: SIZES.md,\n    paddingVertical: SIZES.sm,\n    marginBottom: SIZES.sm,\n    alignItems: 'center',\n  },\n  columnHeader: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  driverItem: {\n    paddingVertical: SIZES.md,\n    paddingHorizontal: SIZES.md,\n    borderBottomWidth: 1,\n    borderBottomColor: 'rgba(0,0,0,0.1)',\n  },\n  driverHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  positionContainer: {\n    width: 30,\n    alignItems: 'center',\n  },\n  position: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  driverContent: {\n    flex: 1,\n    marginLeft: SIZES.md,\n  },\n  driverName: {\n    fontSize: 16,\n    fontWeight: '500',\n    marginBottom: SIZES.xs,\n  },\n  driverLevel: {\n    fontSize: 12,\n  },\n  statsContainer: {\n    alignItems: 'flex-end',\n  },\n  rides: {\n    fontSize: 14,\n    fontWeight: '500',\n    marginBottom: SIZES.xs,\n  },\n  earnings: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default EarningsListContainer;\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/components/EarningsProgressLine.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":18,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getNextLevelTitle' is assigned a value but never used.","line":87,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from 'react';\nimport { View, Text, StyleSheet, Animated } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useI18n } from '../../../hooks/useI18n';\nimport { getCurrentColors, SIZES } from '../../../constants/colors';\nimport { useLevelProgress } from '../../../context/LevelProgressContext';\nimport { getLevelConfig } from '../types/levels.config';\n\ninterface EarningsProgressLineProps {\n  isDark: boolean;\n  // Данные VIP, поднятые на уровень выше для единого источника истины\n  vipQualifiedDays?: number;\n  vipRidesToday?: number;\n  vipCurrentHours?: number;\n}\n\nconst EarningsProgressLine: React.FC<EarningsProgressLineProps> = ({ isDark, vipQualifiedDays, vipRidesToday, vipCurrentHours }) => {\n  const { t } = useI18n();\n  const colors = getCurrentColors(isDark);\n  const { driverLevel } = useLevelProgress();\n  \n  // Получаем текущие часы онлайн из пропсов (единый источник от родителя)\n  const currentHours = vipCurrentHours ?? 0;\n  \n  // Анимация для прогресс бара\n  const progressAnim = useRef(new Animated.Value(0)).current;\n  const prevProgress = useRef(driverLevel.isVIP ? (vipQualifiedDays ?? 0) : driverLevel.currentProgress);\n  \n  // Проверяем условия VIP сегодня\n  const isQualifiedToday = driverLevel.isVIP && currentHours >= 10 && (vipRidesToday ?? 0) >= 3;\n  const displayDays = driverLevel.isVIP \n    ? (vipQualifiedDays ?? 0) + (isQualifiedToday ? 1 : 0)\n    : 0;\n  \n  // Рассчитываем процент прогресса в зависимости от VIP статуса\n  const progressPercentage = driverLevel.isVIP \n    ? (displayDays / 30) * 100\n    : (driverLevel.currentProgress / driverLevel.maxProgress) * 100;\n\n\n  \n  // Текущий прогресс для анимации\n  const currentProgress = driverLevel.isVIP ? displayDays : driverLevel.currentProgress;\n  \n  // Анимация при изменении прогресса\n  useEffect(() => {\n    \n    if (currentProgress !== prevProgress.current) {\n      // Анимируем к новому значению\n      Animated.timing(progressAnim, {\n        toValue: progressPercentage,\n        duration: 800, // 800ms для плавной анимации\n        useNativeDriver: false,\n      }).start();\n      \n      prevProgress.current = currentProgress;\n    } else {\n      // Устанавливаем начальное значение без анимации\n      progressAnim.setValue(progressPercentage);\n    }\n  }, [currentProgress, progressPercentage, progressAnim, vipQualifiedDays, vipRidesToday, currentHours, driverLevel.isVIP]);\n\n  const styles = StyleSheet.create({\n    container: {\n      marginTop: SIZES.lg,\n    },\n    progressBar: {\n      width: '100%',\n      height: 24,\n      backgroundColor: colors.border,\n      borderRadius: 12,\n      justifyContent: 'center',\n      alignItems: 'center',\n      position: 'relative',\n      overflow: 'hidden',\n    },\n    progressText: {\n      fontSize: SIZES.fontSize.sm,\n      fontWeight: '700',\n      color: colors.background,\n      textAlign: 'center',\n      zIndex: 1,\n    },\n  });\n\n  // Функция для получения названия следующего уровня\n  const getNextLevelTitle = (level: number) => {\n    const config = getLevelConfig(level, 1);\n    return config.levelKey;\n  };\n\n  // Функция для получения текста прогресса\n  const getProgressText = () => {\n    // Если VIP статус, показываем квалифицированные дни\n    if (driverLevel.isVIP) {\n      // Только формат x/30 без доп. текста\n      return `${Math.max(0, Math.floor(displayDays))}/30`;\n    }\n    \n    // Обычный прогресс поездок\n    return `${driverLevel.currentProgress}/${driverLevel.maxProgress}`;\n  };\n\n  // Проверяем, есть ли данные\n  if (!driverLevel || !driverLevel.subLevelTitle) {\n    console.log('EarningsProgressLine - нет данных driverLevel');\n    return (\n      <View style={styles.container}>\n        <View style={styles.progressBar}>\n          <Text style={styles.progressText}>0/0</Text>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Прогресс бар с информацией внутри */}\n      <View style={styles.progressBar}>\n        <Animated.View\n          style={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            width: progressAnim.interpolate({\n              inputRange: [0, 100],\n              outputRange: ['0%', '100%'],\n            }),\n            borderRadius: 12,\n          }}\n        >\n          <LinearGradient\n            colors={['#10B981', '#059669']}\n            start={{ x: 0, y: 0 }}\n            end={{ x: 1, y: 0 }}\n            style={{\n              width: '100%',\n              height: '100%',\n              borderRadius: 12,\n            }}\n          />\n        </Animated.View>\n        \n        <Text style={styles.progressText}>\n          {getProgressText()}\n        </Text>\n      </View>\n    </View>\n  );\n};\n\nexport default EarningsProgressLine;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/components/EarningsStats.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'periodStats' is assigned a value but never used.","line":20,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5460,5463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5460,5463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6419,6422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6419,6422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, Animated } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\nimport { useI18n } from '../../../hooks/useI18n';\nimport { useEarningsData } from '../hooks/useEarningsData';\n\nimport { getCurrentColors, SHADOWS, SIZES } from '../../../constants/colors';\nimport EarningsDetailView from './EarningsDetailView';\n\n\ninterface EarningsStatsProps {\n  period: 'today' | 'week' | 'month' | 'year';\n  isDark: boolean;\n}\n\nconst EarningsStats: React.FC<EarningsStatsProps> = ({ period, isDark }) => {\n  const { t } = useI18n();\n  const colors = getCurrentColors(isDark);\n  const { quickStats, periodStats } = useEarningsData(period);\n\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [animation] = useState(new Animated.Value(0));\n  const [selectedStat, setSelectedStat] = useState<'totalRides' | 'workHours' | 'totalDistance' | 'routePoints' | null>('routePoints');\n  const [chevronRotation] = useState(new Animated.Value(0));\n  \n\n\n  // Создаем карточки статистики на основе реальных данных из БД\n\n  const statsCards = useMemo(() => [\n    {\n      key: 'totalRides',\n      title: 'totalRides',\n      value: quickStats.totalTrips,\n      icon: 'checkmark-outline',\n      color: '#3B82F6',\n      trend: { value: 12, isPositive: true },\n    },\n    {\n      key: 'workHours',\n      title: 'workHours',\n      value: quickStats.onlineHours.toString(),\n      icon: 'time-outline',\n      color: '#10B981',\n      trend: { value: 1.5, isPositive: true },\n    },\n    {\n      key: 'totalDistance',\n      title: 'totalDistance',\n      value: '85', // Моковые данные, в реальности будут из БД\n      icon: 'navigate-outline',\n      color: '#F59E0B',\n      trend: { value: 0.2, isPositive: true },\n    },\n    {\n      key: 'routePoints',\n      title: 'waitingTime',\n      value: '15', // Моковые данные времени ожидания в минутах\n      icon: 'calendar-outline',\n      color: '#8B5CF6',\n      trend: { value: 0.8, isPositive: true },\n    },\n  ], [quickStats]);\n\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: colors.surface,\n      padding: SIZES.xl,\n      marginHorizontal: SIZES.xl,\n      marginBottom: SIZES.lg,\n      borderRadius: SIZES.radius.lg,\n      ...(isDark ? SHADOWS.dark.small : SHADOWS.light.small),\n    },\n    headerContainer: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: SIZES.lg,\n    },\n    title: {\n      fontSize: SIZES.fontSize.xl,\n      fontWeight: '600',\n      color: colors.text,\n    },\n    statsGrid: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'space-between',\n    },\n    statCard: {\n      width: '24%',\n      backgroundColor: colors.background,\n      borderRadius: SIZES.radius.md,\n      padding: SIZES.md,\n      marginBottom: SIZES.sm,\n      alignItems: 'center',\n      borderWidth: 1,\n      borderColor: colors.border,\n      ...(isDark ? SHADOWS.dark.small : SHADOWS.light.small),\n    },\n    valueContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      marginBottom: SIZES.xs,\n    },\n    statValue: {\n      fontSize: SIZES.fontSize.xl,\n      fontWeight: '700',\n      color: colors.text,\n      textAlign: 'center',\n    },\n    statSubtitle: {\n      fontSize: SIZES.fontSize.xs,\n      color: colors.textSecondary,\n      marginBottom: SIZES.xs,\n      textAlign: 'center',\n      marginLeft: SIZES.xs,\n      marginTop: SIZES.xs,\n    },\n    statTitle: {\n      fontSize: SIZES.fontSize.sm,\n      color: colors.textSecondary,\n      textAlign: 'center',\n      marginBottom: SIZES.xs,\n    },\n    divider: {\n      height: 1,\n      backgroundColor: colors.border,\n      marginVertical: SIZES.lg,\n    },\n    chartSection: {\n      marginTop: SIZES.md,\n    },\n    chartTitle: {\n      fontSize: SIZES.fontSize.lg,\n      fontWeight: '600',\n      color: colors.text,\n      marginTop: SIZES.md,\n      textAlign: 'center',\n      lineHeight: SIZES.lineHeight.lg,\n    },\n\n\n  });\n\n  const toggleExpanded = () => {\n    const toValue = isExpanded ? 0 : 1;\n    const toRotation = isExpanded ? 1 : 0;\n    \n    Animated.parallel([\n      Animated.timing(animation, {\n        toValue,\n        duration: 300,\n        useNativeDriver: false,\n      }),\n      Animated.timing(chevronRotation, {\n        toValue: toRotation,\n        duration: 300,\n        useNativeDriver: true,\n      }),\n    ]).start();\n    \n    setIsExpanded(!isExpanded);\n  };\n\n  return (\n    <View style={styles.container}>\n              <TouchableOpacity style={styles.headerContainer} onPress={toggleExpanded}>\n          <Text style={styles.title}>{t('driver.earnings.stats.title')}</Text>\n        <Animated.View style={{\n          transform: [{\n            rotate: chevronRotation.interpolate({\n              inputRange: [0, 1],\n              outputRange: ['0deg', '180deg'],\n            }),\n          }],\n        }}>\n          <Ionicons \n            name=\"chevron-down\" \n            size={20} \n            color={colors.textSecondary} \n          />\n        </Animated.View>\n      </TouchableOpacity>\n      \n              <View style={styles.statsGrid}>\n          {statsCards.map((card, index) => (\n                              <TouchableOpacity \n                    key={index} \n                    style={styles.statCard}\n                    onPress={() => {\n                      setSelectedStat(card.key as any);\n                      if (!isExpanded) {\n                        setIsExpanded(true);\n                        const toValue = 1;\n                        const toRotation = 1;\n                        \n                        Animated.parallel([\n                          Animated.timing(animation, {\n                            toValue,\n                            duration: 300,\n                            useNativeDriver: false,\n                          }),\n                          Animated.timing(chevronRotation, {\n                            toValue: toRotation,\n                            duration: 300,\n                            useNativeDriver: true,\n                          }),\n                        ]).start();\n                      }\n                    }}\n                    activeOpacity={0.7}\n                  >\n              <View style={styles.valueContainer}>\n                <Ionicons \n                  name={card.icon as any} \n                  size={16} \n                  color={card.color} \n                  style={{ marginRight: SIZES.xs }}\n                />\n                <View style={{ flexDirection: 'column', alignItems: 'center' }}>\n                  <Text style={styles.statValue}>{card.value}</Text>\n                </View>\n              </View>\n            </TouchableOpacity>\n          ))}\n        </View>\n        \n        {/* Линия разделения и детальная статистика */}\n        <Animated.View style={{\n          maxHeight: animation.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0, 300],\n          }),\n          opacity: animation,\n          overflow: 'hidden',\n        }}>\n          {/* Линия разделения */}\n          <View style={styles.divider} />\n          \n          {/* Детальная статистика */}\n          {selectedStat && (\n            <EarningsDetailView\n              selectedStat={selectedStat}\n              isDark={isDark}\n              onClose={() => setSelectedStat(null)}\n              period={period}\n            />\n          )}\n        </Animated.View>\n    </View>\n  );\n};\n\nexport default EarningsStats;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/hooks/useEarningsData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'period' is defined but never used.","line":9,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":44},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has unnecessary dependencies: 'balance', 'earnings', 'forceUpdate', and 'localBalance'. Either exclude them or remove the dependency array.","line":85,"column":6,"nodeType":"ArrayExpression","endLine":85,"endColumn":99,"suggestions":[{"desc":"Update the dependencies array to be: [selectedPeriod, effectiveBalance, periodStats]","fix":{"range":[2876,2969],"text":"[selectedPeriod, effectiveBalance, periodStats]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'selectedPeriod'. Either exclude it or remove the dependency array.","line":105,"column":6,"nodeType":"ArrayExpression","endLine":105,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [periodStats]","fix":{"range":[3476,3505],"text":"[periodStats]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useEffect, useState } from 'react';\nimport { useBalance } from '../../../hooks/useBalance';\nimport { useDriverStats } from '../../../hooks/useDriverStats';\nimport { PeriodStats } from '../../../services/DriverStatsService';\n\ntype PeriodType = 'today' | 'week' | 'month' | 'year';\n\n// Получаем данные поездок из API\nconst getDefaultRides = (period: PeriodType) => {\n  // Возвращаем пустой массив - данные будут загружаться из API\n  return [];\n};\n\nexport const useEarningsData = (selectedPeriod: PeriodType = 'week', forceUpdate?: number, localBalance?: number) => {\n  const { balance, earnings } = useBalance();\n  const { getWeekStats, getMonthStats, getTodayStats, loading, error } = useDriverStats();\n  const [periodStats, setPeriodStats] = useState<PeriodStats | null>(null);\n  \n  // Используем локальный баланс, если он передан, иначе используем earnings из хука\n  const effectiveBalance = localBalance !== undefined ? localBalance : earnings;\n\n  // Загружаем статистику из БД в зависимости от выбранного периода\n  useEffect(() => {\n    const loadStats = async () => {\n      let stats: PeriodStats | null = null;\n      \n      switch (selectedPeriod) {\n        case 'today': {\n          const todayStats = await getTodayStats();\n          if (todayStats) {\n            stats = {\n              totalHours: todayStats.hoursOnline,\n              totalRides: todayStats.ridesCount,\n              totalEarnings: todayStats.earnings,\n              qualifiedDays: todayStats.isQualified ? 1 : 0,\n              averageHoursPerDay: todayStats.hoursOnline,\n              averageRidesPerDay: todayStats.ridesCount,\n            };\n          }\n          break;\n        }\n        case 'week':\n          stats = await getWeekStats();\n          break;\n        case 'month':\n          stats = await getMonthStats();\n          break;\n        case 'year':\n          // TODO: Добавить getYearStats\n          stats = null;\n          break;\n      }\n      \n      setPeriodStats(stats);\n    };\n\n    loadStats();\n  }, [selectedPeriod, getWeekStats, getMonthStats, getTodayStats, forceUpdate]);\n\n  const currentData = useMemo(() => {\n    // Для периода \"сегодня\" показываем текущий заработок (earnings)\n    // Для других периодов показываем данные из БД\n    let currentBalance = 0;\n    \n    if (selectedPeriod === 'today') {\n      // Показываем текущий дневной заработок\n      currentBalance = effectiveBalance || 0;\n    } else {\n      // Показываем данные из БД для выбранного периода\n      currentBalance = periodStats?.totalEarnings || 0;\n    }\n    \n    // Если баланс 0, показываем без точки\n    if (currentBalance === 0) {\n      return {\n        total: `0 AFc`,\n      };\n    }\n    \n    // Для остальных случаев показываем с одним знаком после точки\n    const formattedBalance = currentBalance.toFixed(1);\n    return {\n      total: `${formattedBalance} AFc`,\n    };\n  }, [selectedPeriod, effectiveBalance, periodStats, forceUpdate, localBalance, earnings, balance]);\n\n  const quickStats = useMemo(() => {\n    // Используем данные из БД\n    if (periodStats) {\n      return {\n        totalTrips: periodStats.totalRides,\n        totalEarnings: `${periodStats.totalEarnings.toFixed(1)} AFc`,\n        averageRating: 4.8, // TODO: Добавить в БД\n        onlineHours: Math.round(periodStats.totalHours),\n      };\n    }\n    \n    // Fallback на пустые данные\n    return {\n      totalTrips: 0,\n      totalEarnings: '0 AFc',\n      averageRating: 0,\n      onlineHours: 0,\n    };\n  }, [periodStats, selectedPeriod]);\n\n  const rides = useMemo(() => getDefaultRides(selectedPeriod), [selectedPeriod]);\n\n  return {\n    currentData,\n    quickStats,\n    rides,\n    periodStats,\n    loading,\n    error,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/hooks/useEarningsHandlers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[726,729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[726,729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2254,2257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2254,2257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2375,2378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2375,2378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2604,2607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2604,2607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport DriverStatusService from '../../../services/DriverStatusService';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Animated } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\n\nexport const useEarningsHandlers = (\n  filterExpanded: boolean,\n  setFilterExpanded: (expanded: boolean) => void,\n  filterExpandAnim: Animated.Value,\n  setSelectedPeriod: (period: 'today' | 'week' | 'month' | 'year') => void,\n  setStatusModalVisible: (visible: boolean) => void,\n  isOnline: boolean,\n  setIsOnline: (online: boolean) => void,\n  startOnlineTime?: () => void,\n  stopOnlineTime?: () => void\n) => {\n  const navigation = useNavigation<any>();\n\n  const toggleFilter = useCallback(() => {\n    const toValue = filterExpanded ? 0 : 1;\n    setFilterExpanded(!filterExpanded);\n    \n    Animated.timing(filterExpandAnim, {\n      toValue,\n      duration: 300,\n      useNativeDriver: false,\n    }).start();\n  }, [filterExpanded, filterExpandAnim, setFilterExpanded]);\n\n  const handlePeriodSelect = useCallback((period: 'today' | 'week' | 'month' | 'year') => {\n    setSelectedPeriod(period);\n  }, [setSelectedPeriod]);\n\n  const handleStatusChange = useCallback(() => {\n    setStatusModalVisible(true);\n  }, [setStatusModalVisible]);\n\n  const confirmStatusChange = useCallback(() => {\n    const newOnlineStatus = !isOnline;\n    setIsOnline(newOnlineStatus);\n    setStatusModalVisible(false);\n    // Persist status to AsyncStorage\n    AsyncStorage.setItem('@driver_online_status', String(newOnlineStatus)).catch(() => {});\n    \n    // Интеграция с VIP системой\n    if (newOnlineStatus) {\n      // Становимся онлайн\n      startOnlineTime?.();\n      DriverStatusService.setOnline(true);\n      \n      // Принудительно обновляем UI через небольшую задержку\n      setTimeout(() => {\n        DriverStatusService.setOnline(true);\n      }, 100);\n    } else {\n      // Становимся офлайн\n      stopOnlineTime?.();\n      DriverStatusService.setOnline(false);\n    }\n  }, [isOnline, setIsOnline, setStatusModalVisible, startOnlineTime, stopOnlineTime]);\n\n  const handleBalancePress = useCallback(() => {\n    try {\n      // Переходим на таб профиля\n      navigation.navigate('Profile' as any);\n      \n      setTimeout(() => {\n        // Навигируем к экрану баланса внутри стека профиля\n        (navigation as any).navigate('Profile', {\n          screen: 'Balance'\n        });\n      }, 100);\n    } catch (error) {\n      console.warn('Balance navigation failed, falling back to Profile tab:', error);\n      navigation.navigate('Profile' as any);\n    }\n  }, [navigation]);\n\n\n\n  return {\n    toggleFilter,\n    handlePeriodSelect,\n    handleStatusChange,\n    confirmStatusChange,\n    handleBalancePress,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/hooks/useEarningsLevel.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LEVELS_CONFIG' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loadBalance' is assigned a value but never used.","line":33,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loadEarnings' is assigned a value but never used.","line":33,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":34,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadLevelProgress'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadLevelProgress]","fix":{"range":[1635,1637],"text":"[loadLevelProgress]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'calculateVIPLevel' function makes the dependencies of useCallback Hook (at line 329) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'calculateVIPLevel' in its own useCallback() Hook.","line":111,"column":9,"nodeType":"VariableDeclarator","endLine":118,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'progressInSubLevel' is assigned a value but never used.","line":209,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":209,"endColumn":35},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addEarnings'. Either exclude it or remove the dependency array.","line":309,"column":6,"nodeType":"ArrayExpression","endLine":309,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [driverLevel]","fix":{"range":[10063,10089],"text":"[driverLevel]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Haptics from 'expo-haptics';\nimport { \n  LEVELS_CONFIG, \n  VIP_CONFIG, \n  getLevelConfig, \n  isVIPLevel\n} from '../types/levels.config';\nimport { useBalanceContext } from '../../../context/BalanceContext';\nimport { useI18n } from '../../../hooks/useI18n';\n\nconst LEVEL_PROGRESS_KEY = '@driver_level_progress';\n\nexport interface DriverLevel {\n  currentLevel: number;\n  currentSubLevel: number;\n  currentProgress: number;\n  maxProgress: number;\n  title: string;\n  subLevelTitle: string;\n  icon: string;\n  nextReward: string;\n  isRewardAvailable: boolean;\n  isVIP: boolean;\n  vipDaysOnline: number;\n  vipDaysRequired: number;\n  vipStartDate?: string; // Дата начала VIP статуса\n  vipLevel: number; // VIP уровень 1-12\n}\n\nexport const useEarningsLevel = () => {\n  const { addEarnings, loadBalance, loadEarnings } = useBalanceContext();\n  const { t } = useI18n();\n  \n  const [driverLevel, setDriverLevel] = useState<DriverLevel>(() => {\n    const config = getLevelConfig(1, 1);\n    return {\n      currentLevel: 1,\n      currentSubLevel: 1,\n      currentProgress: 0,\n      maxProgress: config.maxProgress,\n      title: config.levelKey,\n      subLevelTitle: `${config.levelKey} 1`,\n      icon: config.icon,\n      nextReward: config.bonus.toString(),\n      isRewardAvailable: false,\n      isVIP: false,\n      vipDaysOnline: 0,\n      vipDaysRequired: VIP_CONFIG.minDaysPerMonth,\n      vipLevel: 1,\n    };\n  });\n\n  // Загружаем прогресс при инициализации\n  useEffect(() => {\n    loadLevelProgress();\n  }, []);\n\n  const loadLevelProgress = async () => {\n    try {\n      const savedProgress = await AsyncStorage.getItem(LEVEL_PROGRESS_KEY);\n      if (savedProgress) {\n        const progress = JSON.parse(savedProgress);\n        setDriverLevel(progress);\n      } else {\n        // Инициализируем начальный уровень\n        const initialLevel = createInitialLevel();\n        setDriverLevel(initialLevel);\n        await saveLevelProgress(initialLevel);\n        \n      }\n    } catch (error) {\n      \n      const initialLevel = createInitialLevel();\n      setDriverLevel(initialLevel);\n    }\n  };\n\n  const createInitialLevel = (): DriverLevel => {\n    const config = getLevelConfig(1, 1);\n    return {\n      currentLevel: 1,\n      currentSubLevel: 1,\n      currentProgress: 0,\n      maxProgress: config.maxProgress,\n      title: config.levelKey,\n      subLevelTitle: `${config.levelKey} 1`,\n      icon: config.icon,\n      nextReward: config.bonus.toString(),\n      isRewardAvailable: false,\n      isVIP: false,\n      vipDaysOnline: 0,\n      vipDaysRequired: VIP_CONFIG.minDaysPerMonth,\n      vipLevel: 1,\n    };\n  };\n\n  const saveLevelProgress = async (progress: DriverLevel) => {\n    try {\n      await AsyncStorage.setItem(LEVEL_PROGRESS_KEY, JSON.stringify(progress));\n      setDriverLevel(progress);\n      // Прогресс сохранен\n    } catch (error) {\n      console.error('Error saving level progress:', error);\n    }\n  };\n\n  // Функция для расчета VIP уровня: +1 за каждый успешный 30-дневный период (>=20 дней)\n  // Расчет ведется по массиву завершенных периодов текущего цикла (до 12 шт.)\n  const calculateVIPLevel = (vipStartDate: string, qualifiedDaysInPeriods: number[]): number => {\n    void vipStartDate; // дата старта VIP не влияет на подсчет уровня внутри цикла\n    const successfulPeriods = qualifiedDaysInPeriods.filter(\n      (days) => days >= VIP_CONFIG.minDaysPerMonth\n    ).length;\n    const vipLevel = 1 + successfulPeriods;\n    return Math.min(vipLevel, 12);\n  };\n\n  // Принудительно активировать VIP уровень\n  const activateVIPLevel = useCallback(async () => {\n    const currentDate = new Date().toISOString();\n    const updatedLevel: DriverLevel = {\n      currentLevel: 7,\n      currentSubLevel: 1,\n      currentProgress: 0,\n      maxProgress: VIP_CONFIG.minDaysPerMonth,\n      title: 'vip',\n      subLevelTitle: 'VIP 1',\n      icon: VIP_CONFIG.icon,\n      nextReward: VIP_CONFIG.monthlyBonuses.days20.toString(),\n      isRewardAvailable: false,\n      isVIP: true,\n      vipDaysOnline: 0,\n      vipDaysRequired: VIP_CONFIG.minDaysPerMonth,\n      vipStartDate: currentDate,\n      vipLevel: 1,\n    };\n    await saveLevelProgress(updatedLevel);\n  }, []);\n\n  // Функция для сброса данных (для тестирования)\n  const resetProgress = async () => {\n    try {\n      await AsyncStorage.removeItem(LEVEL_PROGRESS_KEY);\n      const initialLevel = createInitialLevel();\n      setDriverLevel(initialLevel);\n      await saveLevelProgress(initialLevel);\n      \n    } catch (error) {\n      console.error('Error resetting level progress:', error);\n    }\n  };\n\n  // Функция для расчета общего количества поездок\n  const getTotalRidesForLevel = (level: number, subLevel: number, progress: number): number => {\n    let totalRides = 0;\n    \n    // Суммируем поездки из предыдущих уровней\n    for (let l = 1; l < level; l++) {\n      for (let s = 1; s <= 3; s++) {\n        const config = getLevelConfig(l, s);\n        totalRides += config.maxProgress;\n      }\n    }\n    \n    // Добавляем поездки из предыдущих подуровней текущего уровня\n    for (let s = 1; s < subLevel; s++) {\n      const config = getLevelConfig(level, s);\n      totalRides += config.maxProgress;\n    }\n    \n    // Добавляем прогресс в текущем подуровне\n    totalRides += progress;\n    \n    return totalRides;\n  };\n\n  // Функция для расчета уровня и подуровня на основе количества поездок\n  const calculateLevelAndSubLevel = (totalRides: number) => {\n    \n    \n    // Проверяем VIP статус (4320+ поездок)\n    if (isVIPLevel(totalRides)) {\n      \n      // При первом достижении VIP, устанавливаем VIP 1\n      // Дальнейшие расчеты VIP уровня происходят через calculateVIPLevel\n      return {\n        level: 7, // VIP уровень\n        subLevel: 1,\n        maxProgress: VIP_CONFIG.minDaysPerMonth,\n        title: 'vip',\n        subLevelTitle: 'VIP 1',\n        icon: VIP_CONFIG.icon,\n        nextReward: VIP_CONFIG.monthlyBonuses.days20.toString(),\n      };\n    }\n    \n    // Определяем уровень и подуровень по общему количеству поездок\n    let accumulatedRides = 0;\n    \n    for (let level = 1; level <= 6; level++) {\n      for (let subLevel = 1; subLevel <= 3; subLevel++) {\n        const config = getLevelConfig(level, subLevel);\n        const ridesInThisSubLevel = config.maxProgress;\n        \n        if (totalRides < accumulatedRides + ridesInThisSubLevel) {\n          // Нашли нужный подуровень\n          const progressInSubLevel = totalRides - accumulatedRides;\n          \n          \n          \n          return {\n            level,\n            subLevel,\n            maxProgress: ridesInThisSubLevel,\n            title: config.levelKey,\n            subLevelTitle: `${config.levelKey} ${subLevel}`,\n            icon: config.icon,\n            nextReward: config.bonus.toString(),\n          };\n        }\n        \n        accumulatedRides += ridesInThisSubLevel;\n      }\n    }\n    \n    // Если превысил максимальный уровень\n    \n    const maxConfig = getLevelConfig(6, 3);\n    return {\n      level: 6,\n      subLevel: 3,\n      maxProgress: maxConfig.maxProgress,\n      title: maxConfig.levelKey,\n      subLevelTitle: `${maxConfig.levelKey} 3`,\n      icon: maxConfig.icon,\n      nextReward: maxConfig.bonus.toString(),\n    };\n  };\n\n  // Функция для увеличения прогресса на +1 при завершении поездки\n  const incrementProgress = useCallback(async () => {\n    // Увеличиваем общее количество поездок на 1\n    const currentTotalRides = getTotalRidesForLevel(driverLevel.currentLevel, driverLevel.currentSubLevel, driverLevel.currentProgress);\n    const newTotalRides = currentTotalRides + 1;\n    \n    // Рассчитываем новый уровень и подуровень\n    const newLevelInfo = calculateLevelAndSubLevel(newTotalRides);\n    \n    // Проверяем, изменился ли уровень или подуровень\n    const isLevelUp = newLevelInfo.level !== driverLevel.currentLevel || newLevelInfo.subLevel !== driverLevel.currentSubLevel;\n    \n    if (isLevelUp) {\n      // Получаем информацию о бонусе за завершенный уровень\n      const completedLevelConfig = getLevelConfig(driverLevel.currentLevel, driverLevel.currentSubLevel);\n      const bonusAmount = completedLevelConfig.bonus;\n      \n      // Сильный haptic feedback при повышении уровня\n      try {\n        await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n      } catch (error) {\n        // Игнорируем ошибки haptics\n      }\n      \n      // Обновляем уровень\n      const isNewVIP = newLevelInfo.level === 7 && !driverLevel.isVIP;\n      const updatedLevel: DriverLevel = {\n        currentLevel: newLevelInfo.level,\n        currentSubLevel: newLevelInfo.subLevel,\n        currentProgress: 0, // Прогресс обнуляется при смене подуровня\n        maxProgress: newLevelInfo.maxProgress,\n        title: newLevelInfo.title,\n        subLevelTitle: newLevelInfo.subLevelTitle,\n        icon: newLevelInfo.icon,\n        nextReward: newLevelInfo.nextReward,\n        isRewardAvailable: false,\n        isVIP: newLevelInfo.level === 7,\n        vipDaysOnline: driverLevel.vipDaysOnline,\n        vipDaysRequired: VIP_CONFIG.minDaysPerMonth,\n        vipStartDate: isNewVIP ? new Date().toISOString() : driverLevel.vipStartDate,\n        vipLevel: isNewVIP ? 1 : driverLevel.vipLevel,\n      };\n      \n      await saveLevelProgress(updatedLevel);\n      \n      // Возвращаем информацию о бонусе для начисления в основном экране\n      return { \n        hasLevelUp: true,\n        bonusAmount: bonusAmount,\n        completedLevel: driverLevel.currentLevel,\n        completedSubLevel: driverLevel.currentSubLevel\n      };\n    } else {\n      // Обычный прогресс в рамках текущего подуровня\n      const newProgress = driverLevel.currentProgress + 1;\n      \n      // Обновляем прогресс без начисления бонуса\n      const updatedLevel: DriverLevel = {\n        ...driverLevel,\n        currentProgress: newProgress,\n      };\n      \n      await saveLevelProgress(updatedLevel);\n      \n      // Возвращаем undefined для обычного прогресса\n      return undefined;\n    }\n  }, [driverLevel, addEarnings]);\n\n  // Функция для обновления VIP уровня на основе выполненных периодов\n  const updateVIPLevel = useCallback(async (qualifiedDaysInPeriods: number[]) => {\n    if (!driverLevel.isVIP || !driverLevel.vipStartDate) {\n      return;\n    }\n\n    const newVipLevel = calculateVIPLevel(driverLevel.vipStartDate, qualifiedDaysInPeriods);\n    \n    if (newVipLevel !== driverLevel.vipLevel) {\n      const updatedLevel: DriverLevel = {\n        ...driverLevel,\n        vipLevel: newVipLevel,\n        subLevelTitle: `VIP ${newVipLevel}`,\n      };\n      \n      await saveLevelProgress(updatedLevel);\n      \n    }\n  }, [driverLevel, calculateVIPLevel]);\n\n  // Функция для добавления нескольких поездок (для тестирования)\n  const addRides = useCallback(async (count: number) => {\n    for (let i = 0; i < count; i++) {\n      await incrementProgress();\n    }\n  }, [incrementProgress]);\n\n  return {\n    driverLevel,\n    incrementProgress,\n    activateVIPLevel,\n    updateVIPLevel,\n    addRides,\n    resetProgress,\n    getTotalRidesForLevel,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/hooks/useEarningsState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/hooks/useEarningsStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/hooks/useVIPTimeTracking.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DriverStatsService' is defined but never used.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":26},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'getNextLocalMidnightDate'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [vipTimeData, isVIP, getNextLocalMidnightDate]","fix":{"range":[3293,3313],"text":"[vipTimeData, isVIP, getNextLocalMidnightDate]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadVIPTimeData' and 'performDayCheck'. Either include them or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadVIPTimeData, performDayCheck]","fix":{"range":[3666,3668],"text":"[loadVIPTimeData, performDayCheck]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'addEarnings', 'getNextLocalMidnightDate', and 'resetEarnings'. Either include them or remove the dependency array.","line":265,"column":8,"nodeType":"ArrayExpression","endLine":265,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [addEarnings, getNextLocalMidnightDate, isVIP, resetEarnings, vipTimeData]","fix":{"range":[11053,11073],"text":"[addEarnings, getNextLocalMidnightDate, isVIP, resetEarnings, vipTimeData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'saveVIPTimeData' function makes the dependencies of useCallback Hook (at line 580) change on every render. To fix this, wrap the definition of 'saveVIPTimeData' in its own useCallback() Hook.","line":323,"column":9,"nodeType":"VariableDeclarator","endLine":329,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'saveVIPTimeData' in its own useCallback() Hook.","fix":{"range":[13201,13409],"text":"useCallback(async (data: VIPTimeData) => {\n    try {\n      await AsyncStorage.setItem(VIP_TIME_KEY, JSON.stringify(data));\n    } catch (error) {\n      console.error('Ошибка при сохранении VIP времени:', error);\n    }\n  })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'saveVIPTimeData' function makes the dependencies of useCallback Hook (at line 604) change on every render. To fix this, wrap the definition of 'saveVIPTimeData' in its own useCallback() Hook.","line":323,"column":9,"nodeType":"VariableDeclarator","endLine":329,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'saveVIPTimeData' in its own useCallback() Hook.","fix":{"range":[13201,13409],"text":"useCallback(async (data: VIPTimeData) => {\n    try {\n      await AsyncStorage.setItem(VIP_TIME_KEY, JSON.stringify(data));\n    } catch (error) {\n      console.error('Ошибка при сохранении VIP времени:', error);\n    }\n  })"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'saveDayStats' is assigned a value but never used.","line":350,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":350,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'getNextLocalMidnightDate'. Either include it or remove the dependency array.","line":380,"column":6,"nodeType":"ArrayExpression","endLine":380,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [getNextLocalMidnightDate, isVIP, vipTimeData]","fix":{"range":[15133,15153],"text":"[getNextLocalMidnightDate, isVIP, vipTimeData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'updateTrigger'. Either exclude it or remove the dependency array.","line":412,"column":6,"nodeType":"ArrayExpression","endLine":412,"endColumn":105,"suggestions":[{"desc":"Update the dependencies array to be: [vipTimeData.isCurrentlyOnline, vipTimeData.lastOnlineTime, vipTimeData.hoursOnline]","fix":{"range":[16367,16466],"text":"[vipTimeData.isCurrentlyOnline, vipTimeData.lastOnlineTime, vipTimeData.hoursOnline]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'isVIP'. Either exclude it or remove the dependency array.","line":477,"column":6,"nodeType":"ArrayExpression","endLine":477,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [vipTimeData]","fix":{"range":[18575,18595],"text":"[vipTimeData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'isVIP'. Either exclude it or remove the dependency array.","line":534,"column":6,"nodeType":"ArrayExpression","endLine":534,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [vipTimeData, addEarnings]","fix":{"range":[20762,20795],"text":"[vipTimeData, addEarnings]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { VIP_CONFIG, calculateMonthlyVIPBonus } from '../types/levels.config';\nimport { useBalanceContext } from '../../../context/BalanceContext';\nimport DriverStatusService from '../../../services/DriverStatusService';\nimport DriverStatsService from '../../../services/DriverStatsService';\n\nconst VIP_TIME_KEY = '@driver_vip_time_tracking';\nconst DAILY_STATS_KEY = '@driver_daily_stats';\n\ninterface VIPTimeData {\n  currentDay: string; // YYYY-MM-DD\n  currentMonth: string; // YYYY-MM (для совместимости)\n  hoursOnline: number; // Накопленные часы за текущий день\n  ridesToday: number; // Количество поездок за текущий день\n  qualifiedDaysThisMonth: number; // Кол-во VIP-дней (>=10ч онлайн и >=3 поездки) за текущий период\n  consecutiveQualifiedMonths: number; // Кол-во 30-дневных периодов подряд с >=20 VIP-днями\n  lastOnlineTime: number | null;\n  isCurrentlyOnline: boolean;\n  vipCycleStartDate: string | null; // Дата начала VIP статуса (YYYY-MM-DD)\n  periodStartDate: string | null; // Дата начала текущего 30-дневного периода (YYYY-MM-DD)\n  qualifiedDaysHistory: number[]; // История квалифицированных дней по 30-дневным периодам\n}\n\ninterface DailyStats {\n  [date: string]: {\n    hoursOnline: number;\n    ridesCount: number;\n    earnings: number;\n    isQualified: boolean;\n  };\n}\n\nconst MIN_HOURS_PER_DAY = 10;\n\nexport const useVIPTimeTracking = (isVIP: boolean) => {\n  const { addEarnings, resetEarnings } = useBalanceContext();\n  // Добавляем состояние для принудительного обновления\n  const [updateTrigger, setUpdateTrigger] = useState(0);\n  // Состояние для диалога окончания дня\n  const [dayEndModalVisible, setDayEndModalVisible] = useState(false);\n  \n  // Функция для получения локальной даты в формате YYYY-MM-DD\n  const getLocalDateString = (date: Date = new Date()) => {\n    return date.getFullYear() + '-' + \n           String(date.getMonth() + 1).padStart(2, '0') + '-' + \n           String(date.getDate()).padStart(2, '0');\n  };\n\n  const [vipTimeData, setVipTimeData] = useState<VIPTimeData>({\n    currentDay: getLocalDateString(),\n    currentMonth: getLocalDateString().slice(0, 7),\n    hoursOnline: 0,\n    ridesToday: 0,\n    qualifiedDaysThisMonth: 0,\n    consecutiveQualifiedMonths: 0,\n    lastOnlineTime: null,\n    isCurrentlyOnline: false,\n    vipCycleStartDate: null,\n    periodStartDate: null,\n    qualifiedDaysHistory: [],\n  });\n\n  // Подписка на изменения статуса через DriverStatusService\n  useEffect(() => {\n    const unsub = DriverStatusService.subscribe((online) => {\n      // Принудительно обновляем состояние при изменении статуса\n      setUpdateTrigger(prev => prev + 1);\n      \n      // Принудительно обновляем VIP данные при изменении статуса\n      if (online && !vipTimeData.isCurrentlyOnline) {\n        const now = Date.now();\n        const newData: VIPTimeData = {\n          ...vipTimeData,\n          isCurrentlyOnline: true,\n          lastOnlineTime: now,\n          periodStartDate: isVIP ? (vipTimeData.periodStartDate ?? getNextLocalMidnightDate()) : vipTimeData.periodStartDate,\n        };\n        setVipTimeData(newData);\n        saveVIPTimeData(newData);\n      }\n    });\n    return () => {\n      unsub();\n    };\n  }, [vipTimeData, isVIP]);\n\n  // Загружаем данные при инициализации (всегда), чтобы таймер не сбрасывался при рестарте\n  useEffect(() => {\n    loadVIPTimeData();\n    // Принудительно проверяем день при загрузке\n    setTimeout(() => {\n      performDayCheck().catch(error => {\n        console.error('Ошибка при принудительной проверке дня:', error);\n      });\n    }, 1000);\n  }, []);\n\n  // Инициализируем старт 30-дневного периода только при первом включении онлайн, если VIP и период ещё не установлен\n  // useEffect удален - период устанавливается только в startOnlineTime\n\n  // Вспомогательная: следующая локальная полуночь как YYYY-MM-DD\n  const getNextLocalMidnightDate = () => {\n    const d = new Date();\n    d.setHours(24, 0, 0, 0);\n    return getLocalDateString(d);\n  };\n\n  // Проверка смены дня (для всех уровней: сброс суток; VIP: ещё и квалификация/бонусы)\n  // ВАЖНО: В 00:00 автоматически отключается онлайн статус\n  const performDayCheck = useCallback(async () => {\n      const now = new Date();\n      // Используем локальную дату, а не UTC\n      const today = now.getFullYear() + '-' + \n                   String(now.getMonth() + 1).padStart(2, '0') + '-' + \n                   String(now.getDate()).padStart(2, '0');\n      const currentMonth = today.slice(0, 7);\n      \n      // Ежедневная проверка 360-дневного цикла: по истечении 360 дней от старта — полный сброс цикла\n      if (vipTimeData.vipCycleStartDate) {\n        const cycleStart = new Date(vipTimeData.vipCycleStartDate);\n        const msInDay = 24 * 60 * 60 * 1000;\n        const diffDays = Math.floor((now.getTime() - cycleStart.getTime()) / msInDay);\n        if (diffDays >= 360) {\n          const nextPeriodStart = getNextLocalMidnightDate();\n          const resetData: VIPTimeData = {\n            ...vipTimeData,\n            consecutiveQualifiedMonths: 0,\n            vipCycleStartDate: null,\n            qualifiedDaysHistory: [],\n            qualifiedDaysThisMonth: 0,\n            periodStartDate: nextPeriodStart,\n          };\n          setVipTimeData(resetData);\n          saveVIPTimeData(resetData);\n        }\n      }\n\n      if (today !== vipTimeData.currentDay) {\n        // Завершение суток: учитываем текущую онлайновую сессию до 23:59:59 предыдущего дня\n        let additionalHours = 0;\n        if (vipTimeData.isCurrentlyOnline && vipTimeData.lastOnlineTime) {\n          // Полночь предыдущего дня (начало текущего дня)\n          const midnight = new Date();\n          midnight.setHours(0, 0, 0, 0);\n          \n          // Если сессия началась вчера, считаем только время до полуночи\n          if (vipTimeData.lastOnlineTime < midnight.getTime()) {\n            const diffMs = midnight.getTime() - vipTimeData.lastOnlineTime;\n            additionalHours = diffMs / (1000 * 60 * 60);\n          }\n        }\n\n        const effectiveHours = vipTimeData.hoursOnline + additionalHours;\n        const isQualifiedDay = effectiveHours >= MIN_HOURS_PER_DAY && vipTimeData.ridesToday >= VIP_CONFIG.minRidesPerDay;\n        \n        // logs removed in production\n\n        // АВТОМАТИЧЕСКОЕ ОТКЛЮЧЕНИЕ ОНЛАЙН В 00:00\n        if (vipTimeData.isCurrentlyOnline) {\n          // Показываем диалог окончания дня\n          setDayEndModalVisible(true);\n          \n          // Сохраняем данные для обработки в диалоге\n          const previousDayEarnings = await resetEarnings();\n          const previousDayStats = {\n            date: vipTimeData.currentDay,\n            hoursOnline: vipTimeData.hoursOnline + additionalHours,\n            ridesCount: vipTimeData.ridesToday,\n            earnings: previousDayEarnings,\n            isQualified: isQualifiedDay,\n          };\n          \n          // TODO: Сохранить статистику дня в БД когда будет реализован метод saveDayStats\n          console.log('Статистика дня готова к сохранению:', previousDayStats);\n          \n          console.log(`[VIPTimeTracking] День завершен: ${vipTimeData.currentDay}, часы: ${previousDayStats.hoursOnline.toFixed(1)}, поездки: ${previousDayStats.ridesCount}, заработок: ${(previousDayEarnings || 0).toFixed(1)} AFc`);\n          \n          return; // Выходим из функции, диалог обработает дальнейшие действия\n        }\n\n        // Если онлайн уже был выключен, просто обновляем данные дня\n        const newData: VIPTimeData = {\n          ...vipTimeData,\n          currentDay: today,\n          hoursOnline: vipTimeData.hoursOnline + additionalHours,\n          ridesToday: 0, // Поездки сбрасываются каждый день\n          qualifiedDaysThisMonth: isVIP\n            ? vipTimeData.qualifiedDaysThisMonth + (isQualifiedDay ? 1 : 0)\n            : vipTimeData.qualifiedDaysThisMonth,\n        };\n\n        setVipTimeData(newData);\n        saveVIPTimeData(newData);\n      }\n      // Проверка завершения 30-дневного периода — только для VIP\n      if (isVIP && vipTimeData.periodStartDate) {\n        const periodStart = new Date(vipTimeData.periodStartDate);\n        const msInDay = 24 * 60 * 60 * 1000;\n        const diffDays = Math.floor((now.getTime() - periodStart.getTime()) / msInDay);\n        if (diffDays >= 30) {\n          const qualifiedDays = vipTimeData.qualifiedDaysThisMonth;\n          \n          // Добавляем период в историю текущего цикла\n          const newHistory = [...vipTimeData.qualifiedDaysHistory, qualifiedDays];\n\n          // Месячный бонус за период\n          const monthlyBonus = calculateMonthlyVIPBonus(qualifiedDays);\n          if (monthlyBonus > 0) {\n            addEarnings(monthlyBonus);\n          }\n\n          // Подсчитываем подряд идущие успешные периоды\n          const metMonthlyRequirement = qualifiedDays >= VIP_CONFIG.minDaysPerMonth;\n          let trailingQualified = 0;\n          for (let i = newHistory.length - 1; i >= 0; i -= 1) {\n            if (newHistory[i] >= VIP_CONFIG.minDaysPerMonth) trailingQualified += 1;\n            else break;\n          }\n\n          // Квартальные бонусы на 3/6/12-м успешном периоде\n          if (metMonthlyRequirement) {\n            if (trailingQualified === 3) {\n              addEarnings(VIP_CONFIG.quarterlyBonuses.months3);\n            } else if (trailingQualified === 6) {\n              addEarnings(VIP_CONFIG.quarterlyBonuses.months6);\n            } else if (trailingQualified === 12) {\n              addEarnings(VIP_CONFIG.quarterlyBonuses.months12);\n            }\n          }\n\n          const nextPeriodStart = getNextLocalMidnightDate();\n          // Решаем, нужно ли сбрасывать цикл: при провале месяца ИЛИ по завершении 12-го успешного месяца\n          const shouldResetCycle = (!metMonthlyRequirement) || (trailingQualified === 12);\n\n          const newData: VIPTimeData = shouldResetCycle\n            ? {\n                ...vipTimeData,\n                currentMonth, // для совместимости\n                qualifiedDaysThisMonth: 0,\n                qualifiedDaysHistory: [], // новый цикл\n                consecutiveQualifiedMonths: 0,\n                vipCycleStartDate: null,\n                periodStartDate: nextPeriodStart,\n              }\n            : {\n                ...vipTimeData,\n                currentMonth, // для совместимости\n                qualifiedDaysThisMonth: 0,\n                qualifiedDaysHistory: newHistory,\n                consecutiveQualifiedMonths: trailingQualified,\n                // Старт новой серии — ставим дату начала серии, если это первый успешный месяц\n                vipCycleStartDate:\n                  trailingQualified === 1\n                    ? new Date(vipTimeData.currentMonth + '-01T00:00:00').toISOString().split('T')[0]\n                    : vipTimeData.vipCycleStartDate,\n                periodStartDate: nextPeriodStart,\n              };\n          setVipTimeData(newData);\n          saveVIPTimeData(newData);\n          \n          // logs removed in production\n        }\n      }\n    }, [isVIP, vipTimeData]);\n\n  // Таймер: проверяем каждую минуту\n  useEffect(() => {\n    const interval = setInterval(() => {\n      performDayCheck().catch(error => {\n        console.error('Ошибка при проверке дня:', error);\n      });\n    }, 60000);\n    return () => clearInterval(interval);\n  }, [performDayCheck]);\n\n  // Обновляем состояние каждую секунду когда онлайн для корректного отображения таймера\n  useEffect(() => {\n    if (!vipTimeData.isCurrentlyOnline) return;\n    \n    const interval = setInterval(() => {\n      // Принудительно обновляем состояние для пересчета getCurrentHoursOnline\n      setVipTimeData(prev => ({ ...prev }));\n    }, 1000);\n    \n    return () => clearInterval(interval);\n  }, [vipTimeData.isCurrentlyOnline, updateTrigger]); // Добавляем updateTrigger в зависимости\n\n  const loadVIPTimeData = async () => {\n    try {\n      const saved = await AsyncStorage.getItem(VIP_TIME_KEY);\n      if (saved) {\n        const parsed: VIPTimeData = JSON.parse(saved);\n        // Кламп значений от мусора/старых версий\n        parsed.qualifiedDaysThisMonth = Math.max(0, Math.min(30, parsed.qualifiedDaysThisMonth || 0));\n        parsed.hoursOnline = Math.max(0, parsed.hoursOnline || 0);\n        parsed.ridesToday = Math.max(0, parsed.ridesToday || 0);\n        // Обеспечиваем совместимость с новыми полями\n        parsed.qualifiedDaysHistory = parsed.qualifiedDaysHistory || [];\n        setVipTimeData(parsed);\n      } else {\n        const initialData: VIPTimeData = {\n          currentDay: getLocalDateString(),\n          currentMonth: getLocalDateString().slice(0, 7),\n          hoursOnline: 0,\n          ridesToday: 0,\n          qualifiedDaysThisMonth: 0,\n          consecutiveQualifiedMonths: 0,\n          lastOnlineTime: null,\n          isCurrentlyOnline: false,\n          vipCycleStartDate: null,\n          periodStartDate: null,\n          qualifiedDaysHistory: [],\n        };\n        setVipTimeData(initialData);\n        await AsyncStorage.setItem(VIP_TIME_KEY, JSON.stringify(initialData));\n      }\n    } catch (error) {\n      console.error('Ошибка при загрузке VIP времени:', error);\n    }\n  };\n\n  const saveVIPTimeData = async (data: VIPTimeData) => {\n    try {\n      await AsyncStorage.setItem(VIP_TIME_KEY, JSON.stringify(data));\n    } catch (error) {\n      console.error('Ошибка при сохранении VIP времени:', error);\n    }\n  };\n\n  // Функции для работы с дневной статистикой\n  const loadDailyStats = async (): Promise<DailyStats> => {\n    try {\n      const saved = await AsyncStorage.getItem(DAILY_STATS_KEY);\n      return saved ? JSON.parse(saved) : {};\n    } catch (error) {\n      console.error('Ошибка при загрузке дневной статистики:', error);\n      return {};\n    }\n  };\n\n  const saveDailyStats = async (stats: DailyStats) => {\n    try {\n      await AsyncStorage.setItem(DAILY_STATS_KEY, JSON.stringify(stats));\n    } catch (error) {\n      console.error('Ошибка при сохранении дневной статистики:', error);\n    }\n  };\n\n  const saveDayStats = async (date: string, hoursOnline: number, ridesCount: number, earnings: number = 0) => {\n    const stats = await loadDailyStats();\n    const isQualified = hoursOnline >= MIN_HOURS_PER_DAY && ridesCount >= VIP_CONFIG.minRidesPerDay;\n    \n    stats[date] = {\n      hoursOnline,\n      ridesCount,\n      earnings,\n      isQualified,\n    };\n    \n    await saveDailyStats(stats);\n  };\n\n  const startOnlineTime = useCallback(() => {\n    const now = Date.now();\n    const newData: VIPTimeData = {\n      ...vipTimeData,\n      isCurrentlyOnline: true,\n      lastOnlineTime: now,\n      // Инициализируем старт периода в 00:00 следующего дня после первого включения онлайн\n      periodStartDate: isVIP ? (vipTimeData.periodStartDate ?? getNextLocalMidnightDate()) : vipTimeData.periodStartDate,\n    };\n    \n    setVipTimeData(newData);\n    saveVIPTimeData(newData);\n    // Дублируем статус в AsyncStorage, чтобы не терялся при рестарте\n    AsyncStorage.setItem('@driver_online_status', 'true').catch(() => {});\n    // Уведомляем DriverStatusService о изменении статуса\n    DriverStatusService.setOnline(true);\n  }, [isVIP, vipTimeData]);\n\n  const stopOnlineTime = useCallback(() => {\n    if (!vipTimeData.isCurrentlyOnline || !vipTimeData.lastOnlineTime) return;\n    \n    const now = Date.now();\n    const hoursDiff = (now - vipTimeData.lastOnlineTime) / (1000 * 60 * 60);\n    \n    const newData: VIPTimeData = {\n      ...vipTimeData,\n      isCurrentlyOnline: false,\n      hoursOnline: vipTimeData.hoursOnline + hoursDiff,\n      lastOnlineTime: null,\n    };\n    \n    setVipTimeData(newData);\n    saveVIPTimeData(newData);\n    // Дублируем статус в AsyncStorage, чтобы не терялся при рестарте\n    AsyncStorage.setItem('@driver_online_status', 'false').catch(() => {});\n    // Уведомляем DriverStatusService о изменении статуса\n    DriverStatusService.setOnline(false);\n  }, [vipTimeData]);\n\n  const getCurrentHoursOnline = useCallback(() => {\n    const now = Date.now();\n    // Если сессия активна — считаем до текущего момента\n    if (vipTimeData.isCurrentlyOnline && vipTimeData.lastOnlineTime) {\n      const currentSessionHours = (now - vipTimeData.lastOnlineTime) / (1000 * 60 * 60);\n      return vipTimeData.hoursOnline + currentSessionHours;\n    }\n    // Если сессия не активна — возвращаем накопленное\n    return vipTimeData.hoursOnline;\n  }, [vipTimeData.isCurrentlyOnline, vipTimeData.lastOnlineTime, vipTimeData.hoursOnline, updateTrigger]); // Добавляем updateTrigger\n\n  const resetVIPTimeData = useCallback(async () => {\n    const resetData: VIPTimeData = {\n      currentDay: getLocalDateString(),\n      currentMonth: getLocalDateString().slice(0, 7),\n      hoursOnline: 0,\n      ridesToday: 0,\n      qualifiedDaysThisMonth: 0,\n      consecutiveQualifiedMonths: 0,\n      lastOnlineTime: null,\n      isCurrentlyOnline: false,\n      vipCycleStartDate: null,\n      periodStartDate: null,\n      qualifiedDaysHistory: [],\n    };\n    \n    setVipTimeData(resetData);\n    await saveVIPTimeData(resetData);\n  }, []);\n\n  // Регистрируем завершенную поездку для учёта VIP-дня\n  const registerRide = useCallback(async () => {\n    if (!isVIP) return;\n    const newData: VIPTimeData = {\n      ...vipTimeData,\n      ridesToday: vipTimeData.ridesToday + 1,\n    };\n    setVipTimeData(newData);\n    await saveVIPTimeData(newData);\n  }, [isVIP, vipTimeData]);\n\n  // Ручное добавление часов онлайн (для тестирования)\n  const addManualOnlineHours = useCallback(async (hours: number) => {\n    if (!isVIP || hours <= 0) return;\n    const newData: VIPTimeData = {\n      ...vipTimeData,\n      hoursOnline: vipTimeData.hoursOnline + hours,\n      isCurrentlyOnline: true,\n      lastOnlineTime: Date.now(),\n    };\n    setVipTimeData(newData);\n    await saveVIPTimeData(newData);\n  }, [isVIP, vipTimeData]);\n\n  // Симуляция смены дня (для тестирования)\n  const simulateDayChange = useCallback(async () => {\n    const isQualified = vipTimeData.hoursOnline >= MIN_HOURS_PER_DAY && vipTimeData.ridesToday >= VIP_CONFIG.minRidesPerDay;\n    \n    const nextDay = new Date();\n    nextDay.setDate(nextDay.getDate() + 1);\n    \n    const newData: VIPTimeData = {\n      ...vipTimeData,\n      currentDay: getLocalDateString(nextDay),\n      hoursOnline: 0,\n      ridesToday: 0,\n      qualifiedDaysThisMonth: vipTimeData.qualifiedDaysThisMonth + (isQualified ? 1 : 0),\n      lastOnlineTime: null,\n      isCurrentlyOnline: false,\n    };\n    \n    setVipTimeData(newData);\n    await saveVIPTimeData(newData);\n    return { isQualified, newQualifiedDays: newData.qualifiedDaysThisMonth };\n  }, [isVIP, vipTimeData]);\n\n  // Симуляция смены месяца (для тестирования)\n  const simulateMonthChange = useCallback(async () => {\n    const qualifiedDays = vipTimeData.qualifiedDaysThisMonth;\n    \n    // Рассчитываем месячный бонус\n    let monthlyBonus = 0;\n    if (qualifiedDays >= 30) monthlyBonus = VIP_CONFIG.monthlyBonuses.days30;\n    else if (qualifiedDays >= 25) monthlyBonus = VIP_CONFIG.monthlyBonuses.days25;\n    else if (qualifiedDays >= 20) monthlyBonus = VIP_CONFIG.monthlyBonuses.days20;\n    \n    // Обновляем счетчик последовательных месяцев\n    const metMonthlyRequirement = qualifiedDays >= 20;\n    const newConsecutive = metMonthlyRequirement ? vipTimeData.consecutiveQualifiedMonths + 1 : 0;\n    \n    // Рассчитываем квартальный бонус\n    let quarterlyBonus = 0;\n    if (metMonthlyRequirement) {\n      if (newConsecutive === 3) quarterlyBonus = VIP_CONFIG.quarterlyBonuses.months3;\n      else if (newConsecutive === 6) quarterlyBonus = VIP_CONFIG.quarterlyBonuses.months6;\n      else if (newConsecutive === 12) quarterlyBonus = VIP_CONFIG.quarterlyBonuses.months12;\n    }\n    \n    // Начисляем бонусы\n    if (monthlyBonus > 0) {\n      await addEarnings(monthlyBonus);\n    }\n    \n    if (quarterlyBonus > 0) {\n      await addEarnings(quarterlyBonus);\n    }\n    \n    // Обновление даты начала цикла\n    let newVipCycleStartDate = vipTimeData.vipCycleStartDate;\n    if (metMonthlyRequirement) {\n      if (newConsecutive === 1) {\n        // Старт новой серии: считаем, что закончился первый успешный месяц\n        const prevMonthDate = new Date(vipTimeData.currentMonth + '-01T00:00:00');\n        newVipCycleStartDate = prevMonthDate.toISOString().split('T')[0];\n      }\n    } else {\n      newVipCycleStartDate = null;\n    }\n\n    const newData: VIPTimeData = {\n      ...vipTimeData,\n      currentMonth: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().slice(0, 7),\n      qualifiedDaysThisMonth: 0,\n      consecutiveQualifiedMonths: newConsecutive,\n      vipCycleStartDate: newVipCycleStartDate,\n    };\n    \n    setVipTimeData(newData);\n    await saveVIPTimeData(newData);\n    \n    return { monthlyBonus, quarterlyBonus, consecutiveMonths: newConsecutive };\n  }, [isVIP, vipTimeData, addEarnings]);\n\n  // Функция для получения истории квалифицированных дней для расчета VIP уровня\n  const getQualifiedDaysHistory = useCallback((): number[] => {\n    return vipTimeData.qualifiedDaysHistory;\n  }, [vipTimeData.qualifiedDaysHistory]);\n\n  // Проверка квалификации текущего дня (для отладки)\n  const checkCurrentDayQualification = useCallback(() => {\n    const currentHours = getCurrentHoursOnline();\n    const ridesCount = vipTimeData.ridesToday;\n    const isQualified = currentHours >= MIN_HOURS_PER_DAY && ridesCount >= VIP_CONFIG.minRidesPerDay;\n    \n    // logs removed in production\n    \n    return {\n      hours: currentHours,\n      rides: ridesCount,\n      isQualified,\n      day: vipTimeData.currentDay\n    };\n  }, [vipTimeData, getCurrentHoursOnline]);\n\n  // Обработчики диалога окончания дня\n  const handleDayEndConfirm = useCallback(() => {\n    setDayEndModalVisible(false);\n    \n    // Обновляем данные для нового дня\n    const today = getLocalDateString();\n    const newData: VIPTimeData = {\n      ...vipTimeData,\n      currentDay: today,\n      hoursOnline: 0,\n      ridesToday: 0,\n      isCurrentlyOnline: true, // Включаем онлайн\n      lastOnlineTime: Date.now(),\n    };\n    \n    setVipTimeData(newData);\n    saveVIPTimeData(newData);\n    \n    // Уведомляем DriverStatusService\n    DriverStatusService.setOnline(true);\n    AsyncStorage.setItem('@driver_online_status', 'true').catch(() => {});\n    \n    console.log('[VIPTimeTracking] Водитель продолжил работу в новом дне');\n  }, [vipTimeData, saveVIPTimeData]);\n\n  const handleDayEndCancel = useCallback(() => {\n    setDayEndModalVisible(false);\n    \n    // Обновляем данные для нового дня (офлайн)\n    const today = getLocalDateString();\n    const newData: VIPTimeData = {\n      ...vipTimeData,\n      currentDay: today,\n      hoursOnline: 0,\n      ridesToday: 0,\n      isCurrentlyOnline: false, // Оставляем офлайн\n      lastOnlineTime: null,\n    };\n    \n    setVipTimeData(newData);\n    saveVIPTimeData(newData);\n    \n    // Уведомляем DriverStatusService\n    DriverStatusService.setOnline(false);\n    AsyncStorage.setItem('@driver_online_status', 'false').catch(() => {});\n    \n    console.log('[VIPTimeTracking] Водитель завершил работу на день');\n  }, [vipTimeData, saveVIPTimeData]);\n\n  return {\n    vipTimeData,\n    startOnlineTime,\n    stopOnlineTime,\n    getCurrentHoursOnline,\n    resetVIPTimeData,\n    registerRide,\n    addManualOnlineHours,\n    simulateDayChange,\n    simulateMonthChange,\n    getQualifiedDaysHistory,\n    checkCurrentDayQualification,\n    // Для тестов/отладки: форсированная проверка смены дня\n    forceDayCheck: useCallback(async () => {\n      await performDayCheck();\n    }, [performDayCheck]),\n    // Диалог окончания дня\n    dayEndModalVisible,\n    handleDayEndConfirm,\n    handleDayEndCancel,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/types/earnings.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[530,533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[530,533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type PeriodType = 'today' | 'week' | 'month' | 'year';\n\nexport interface EarningsData {\n  total: string;\n}\n\nexport interface QuickStats {\n  totalTrips: number;\n  totalEarnings: string;\n  averageRating: number;\n  onlineHours: number;\n}\n\nexport interface Ride {\n  id: string;\n  from: string;\n  to: string;\n  time: string;\n  earnings: string;\n  rating: number;\n}\n\nexport interface EarningsState {\n  selectedPeriod: PeriodType;\n  filterExpanded: boolean;\n  isOnline: boolean;\n  statusModalVisible: boolean;\n  filterExpandAnim: any; // Animated.Value\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/types/earningsStats.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EarningsScreen/types/levels.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/EmptyDriversState.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[204,207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[204,207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useI18n } from '../hooks/useI18n';\n\ntype EmptyDriversStateProps = {\n  styles: any;\n  isDark: boolean;\n  loading: boolean;\n};\n\nconst EmptyDriversState: React.FC<EmptyDriversStateProps> = ({ styles, isDark, loading }) => {\n  const { t } = useI18n();\n  return (\n    <View style={styles.emptyState}>\n      <Ionicons name=\"people-outline\" size={64} color={isDark ? '#6B7280' : '#9CA3AF'} />\n      <Text style={styles.emptyStateTitle}>\n        {loading ? t('client.driversScreen.empty.loadingDrivers') : t('client.driversScreen.empty.noDrivers')}\n      </Text>\n      {!loading && <Text style={styles.emptyStateSubtitle}>{t('client.driversScreen.empty.willAppear')}</Text>}\n    </View>\n  );\n};\n\nexport default React.memo(EmptyDriversState);\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/ErrorDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/FixDriveAddressInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getAddressLabel' is assigned a value but never used.","line":104,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":122,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../context/ThemeContext';\nimport { useLanguage } from '../context/LanguageContext';\nimport { getCurrentColors } from '../constants/colors';\nimport { createFixDriveAddressInputStyles } from '../styles/components/FixDriveAddressInput.styles';\n\ninterface AddressPoint {\n  id: string;\n  type: 'from' | 'to' | 'stop';\n  address: string;\n  placeholder: string;\n}\n\ninterface FixDriveAddressInputProps {\n  onAddressesChange: (addresses: AddressPoint[]) => void;\n}\n\nconst FixDriveAddressInput: React.FC<FixDriveAddressInputProps> = ({\n  onAddressesChange,\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useLanguage();\n  const colors = getCurrentColors(isDark);\n  const styles = createFixDriveAddressInputStyles(isDark);\n\n  const [addresses, setAddresses] = useState<AddressPoint[]>([\n    {\n      id: 'from',\n      type: 'from',\n      address: '',\n      placeholder: t('common.fixDrive.address.fromPlaceholder')\n    },\n    {\n      id: 'to',\n      type: 'to',\n      address: '',\n      placeholder: t('common.fixDrive.address.toPlaceholder')\n    }\n  ]);\n\n  const handleAddressChange = (id: string, text: string) => {\n    const updatedAddresses = addresses.map(addr => \n      addr.id === id ? { ...addr, address: text } : addr\n    );\n    setAddresses(updatedAddresses);\n    onAddressesChange(updatedAddresses);\n  };\n\n  const addStop = () => {\n    const currentStops = addresses.filter(addr => addr.type === 'stop');\n    if (currentStops.length >= 2) {\n      return; // Максимум 2 остановки\n    }\n    \n    const stopId = `stop-${Date.now()}`;\n    const newStop: AddressPoint = {\n      id: stopId,\n      type: 'stop',\n      address: '',\n      placeholder: t('common.fixDrive.address.stopPlaceholder')\n    };\n    // Вставляем остановку между \"Откуда\" и \"Куда\"\n    const fromAddress = addresses.find(addr => addr.type === 'from');\n    const toAddress = addresses.find(addr => addr.type === 'to');\n    \n    if (fromAddress && toAddress) {\n      const updatedAddresses = [\n        fromAddress,\n        newStop,\n        ...addresses.filter(addr => addr.type === 'stop'),\n        toAddress\n      ];\n      setAddresses(updatedAddresses);\n      onAddressesChange(updatedAddresses);\n    }\n  };\n\n  const removeStop = (id: string) => {\n    const updatedAddresses = addresses.filter(addr => addr.id !== id);\n    setAddresses(updatedAddresses);\n    onAddressesChange(updatedAddresses);\n  };\n\n\n\n  const selectFromMap = (id: string) => {\n    // Здесь будет логика выбора адреса из карты\n    console.log('Select from map for:', id);\n  };\n\n  const getAddressIcon = (type: 'from' | 'to' | 'stop') => {\n    switch (type) {\n      case 'from':\n        return { name: 'ellipse' as const, color: '#4CAF50' };\n      case 'to':\n        return { name: 'ellipse' as const, color: '#9CA3AF' };\n      case 'stop':\n        return { name: 'ellipse' as const, color: '#3B82F6' };\n    }\n  };\n\n  const getAddressLabel = (type: 'from' | 'to' | 'stop') => {\n    switch (type) {\n      case 'from':\n        return t('common.fixDrive.address.from');\n      case 'to':\n        return t('common.fixDrive.address.to');\n      case 'stop':\n        return 'Остановка';\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>\n        Адрес\n      </Text>\n\n      <View>\n        {addresses.map((address, index) => (\n          <View key={address.id} style={styles.addressContainer}>\n            {/* Контейнер с полем ввода */}\n            <View style={styles.addressInputContainer}>\n              {/* Иконка внутри контейнера */}\n              <View style={styles.iconContainer}>\n                <Ionicons \n                  name={getAddressIcon(address.type).name} \n                  size={16} \n                  color={getAddressIcon(address.type).color} \n                />\n              </View>\n\n              <TextInput\n                style={styles.textInput}\n                placeholder={address.placeholder}\n                placeholderTextColor={colors.textSecondary}\n                value={address.address}\n                onChangeText={(text) => handleAddressChange(address.id, text)}\n              />\n              \n\n\n              {/* Кнопки действий внутри контейнера */}\n              <View style={styles.actionsContainer}>\n              </View>\n            </View>\n\n            {/* Иконка карты за пределами контейнера */}\n            <TouchableOpacity \n              style={styles.mapButton}\n              onPress={() => {\n                if (address.type === 'to') {\n                  addStop();\n                } else if (address.type === 'stop') {\n                  removeStop(address.id);\n                } else {\n                  selectFromMap(address.id);\n                }\n              }}\n            >\n              <Ionicons \n                name={address.type === 'from' ? \"chevron-down\" : address.type === 'to' ? \"add\" : \"close\"} \n                size={16} \n                color={\n                  address.type === 'to' && addresses.filter(addr => addr.type === 'stop').length >= 2 \n                    ? colors.textSecondary \n                    : colors.primary\n                } \n              />\n            </TouchableOpacity>\n          </View>\n        ))}\n      </View>\n\n      {/* Дополнительный контейнер */}\n      <View style={styles.additionalContainer}>\n        <Text style={styles.additionalText}>\n          Дополнительный контейнер\n        </Text>\n      </View>\n\n    </View>\n  );\n};\n\nexport default FixDriveAddressInput;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/FixDriveDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/FixDriveMapInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ScrollView' is defined but never used.","line":2,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1125,1128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1125,1128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'routePoints' is assigned a value but never used.","line":64,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setRoutePoints' is assigned a value but never used.","line":64,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showAddressList' is assigned a value but never used.","line":66,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setShowAddressList' is assigned a value but never used.","line":66,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'activeAddressId' is assigned a value but never used.","line":67,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setActiveAddressId' is assigned a value but never used.","line":67,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":97,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":97,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addStop' is assigned a value but never used.","line":152,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":152,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'clearAllPoints' is assigned a value but never used.","line":212,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":212,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":435,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":435,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'pointColor' is assigned a value but never used.","line":437,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":437,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'statusIcon' is assigned a value but never used.","line":438,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":438,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useCallback, useEffect, memo } from 'react';\nimport { View, Text, TouchableOpacity, Alert, ScrollView } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../context/ThemeContext';\nimport { useLanguage } from '../context/LanguageContext';\nimport { getCurrentColors } from '../constants/colors';\nimport MapViewComponent from './MapView';\nimport AddressAutocomplete from './AddressAutocomplete';\nimport { MapLocation, RoutePoint } from './MapView/types/map.types';\n\ninterface AddressPoint {\n  id: string;\n  type: 'from' | 'to' | 'stop';\n  address: string;\n  coordinate?: MapLocation;\n  coordinates?: MapLocation; // Для совместимости с данными сессии\n  placeholder: string;\n}\n\ninterface FixDriveMapInputProps {\n  onAddressesChange: (addresses: AddressPoint[]) => void;\n  initialAddresses?: AddressPoint[];\n}\n\nconst FixDriveMapInput: React.FC<FixDriveMapInputProps> = ({\n  onAddressesChange,\n  initialAddresses,\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useLanguage();\n  const colors = getCurrentColors(isDark);\n  const mapRef = useRef<any>(null);\n\n  const [addresses, setAddresses] = useState<AddressPoint[]>(() => {\n    // Если есть восстановленные адреса, используем их\n    if (initialAddresses && initialAddresses.length > 0) {\n      return initialAddresses.map(addr => ({\n        ...addr,\n        // Маппинг координат из сессии в компонент\n        coordinate: addr.coordinates || addr.coordinate,\n        placeholder: addr.type === 'from' ? t('common.fixDrive.address.fromPlaceholder') :\n                   addr.type === 'to' ? t('common.fixDrive.address.toPlaceholder') :\n                   t('common.fixDrive.address.stopPlaceholder')\n      }));\n    }\n    \n    // Иначе используем пустые адреса\n    return [\n      {\n        id: 'from',\n        type: 'from',\n        address: '',\n        placeholder: t('common.fixDrive.address.fromPlaceholder')\n      },\n      {\n        id: 'to',\n        type: 'to',\n        address: '',\n        placeholder: t('common.fixDrive.address.toPlaceholder')\n      }\n    ];\n  });\n\n  const [routePoints, setRoutePoints] = useState<RoutePoint[]>([]);\n  const [isMapMode, setIsMapMode] = useState(true);\n  const [showAddressList, setShowAddressList] = useState(false);\n  const [activeAddressId, setActiveAddressId] = useState<string | null>(null);\n  const [addressValidation, setAddressValidation] = useState<{ [key: string]: boolean }>({});\n  const [isExpandButtonPressed, setIsExpandButtonPressed] = useState(false);\n  const [isMapExpanded, setIsMapExpanded] = useState(false);\n\n  // Обновляем адреса при изменении initialAddresses\n  useEffect(() => {\n    if (initialAddresses && initialAddresses.length > 0) {\n      const updatedAddresses = initialAddresses.map(addr => ({\n        ...addr,\n        // Маппинг координат из сессии в компонент\n        coordinate: addr.coordinates || addr.coordinate,\n        placeholder: addr.type === 'from' ? t('common.fixDrive.address.fromPlaceholder') :\n                   addr.type === 'to' ? t('common.fixDrive.address.toPlaceholder') :\n                   t('common.fixDrive.address.stopPlaceholder')\n      }));\n      setAddresses(updatedAddresses);\n      console.log('Addresses restored in FixDriveMapInput:', updatedAddresses);\n      console.log('Coordinates mapping:', updatedAddresses.map(addr => ({\n        id: addr.id,\n        type: addr.type,\n        coordinate: addr.coordinate,\n        coordinates: addr.coordinates\n      })));\n    }\n  }, [initialAddresses, t]);\n\n  // Преобразуем адреса в точки маршрута для карты с жесткой привязкой цветов\n  const mapRoutePoints = addresses\n    .filter(addr => addr.coordinate)\n    .map((addr, index) => {\n      // Жесткая привязка цветов к типам адресов\n      let color: string;\n      switch (addr.type) {\n        case 'from':\n          color = 'green'; // Зеленая булавка ВСЕГДА для \"откуда\"\n          break;\n        case 'to':\n          color = 'blue';  // Синяя булавка ВСЕГДА для \"куда\"\n          break;\n        case 'stop':\n          color = 'gray';  // Серая булавка ВСЕГДА для остановок\n          break;\n        default:\n          color = 'gray';\n      }\n\n      return {\n        id: addr.id,\n        coordinate: addr.coordinate!,\n        type: addr.type === 'from' ? 'start' as const : \n              addr.type === 'to' ? 'end' as const : 'waypoint' as const,\n        color: color,\n      };\n    });\n\n  // Логируем обновления mapRoutePoints\n  useEffect(() => {\n    console.log('Map route points updated:', mapRoutePoints);\n  }, [mapRoutePoints]);\n\n  const handleMapPress = useCallback((location: MapLocation) => {\n    // Находим первую пустую точку для заполнения\n    const emptyPoint = addresses.find(addr => !addr.coordinate);\n    if (!emptyPoint) {\n      Alert.alert('Ошибка', 'Все точки маршрута уже выбраны');\n      return;\n    }\n\n    // Обновляем адрес с координатами\n    const updatedAddresses = addresses.map(addr => \n      addr.id === emptyPoint.id \n        ? { \n          ...addr, \n          coordinate: location, \n          coordinates: location, // Сохраняем в обоих форматах\n          address: `Выбрано на карте (${location.latitude.toFixed(4)}, ${location.longitude.toFixed(4)})` \n        }\n        : addr\n    );\n    \n    setAddresses(updatedAddresses);\n    onAddressesChange(updatedAddresses);\n  }, [addresses, onAddressesChange]);\n\n  const addStop = () => {\n    const currentStops = addresses.filter(addr => addr.type === 'stop');\n    if (currentStops.length >= 2) {\n      Alert.alert('Ограничение', 'Максимум 2 остановки');\n      return;\n    }\n    \n    const stopId = `stop-${Date.now()}`;\n    const newStop: AddressPoint = {\n      id: stopId,\n      type: 'stop',\n      address: '',\n      placeholder: t('common.fixDrive.address.stopPlaceholder')\n    };\n    \n    // Вставляем остановку между \"Откуда\" и \"Куда\"\n    const fromAddress = addresses.find(addr => addr.type === 'from');\n    const toAddress = addresses.find(addr => addr.type === 'to');\n    \n    if (fromAddress && toAddress) {\n      const updatedAddresses = [\n        fromAddress,\n        newStop,\n        ...addresses.filter(addr => addr.type === 'stop'),\n        toAddress\n      ];\n      setAddresses(updatedAddresses);\n      onAddressesChange(updatedAddresses);\n    }\n  };\n\n  const removeStop = (id: string) => {\n    // Находим адрес для удаления\n    const addressToRemove = addresses.find(addr => addr.id === id);\n    \n    // Удаляем адрес из массива\n    const updatedAddresses = addresses.filter(addr => addr.id !== id);\n    setAddresses(updatedAddresses);\n    onAddressesChange(updatedAddresses);\n    \n    // Очищаем валидацию для удаленного адреса\n    setAddressValidation(prev => {\n      const newValidation = { ...prev };\n      delete newValidation[id];\n      return newValidation;\n    });\n    \n    console.log('Address removed:', id, 'Type:', addressToRemove?.type);\n    console.log('Updated addresses:', updatedAddresses);\n    console.log('Map route points will be:', updatedAddresses.filter(addr => addr.coordinate));\n    \n    // Логируем привязку булавок\n    const remainingRoutePoints = updatedAddresses.filter(addr => addr.coordinate);\n    console.log('Remaining route points:', remainingRoutePoints.map(point => ({\n      id: point.id,\n      type: point.type,\n      coordinate: point.coordinate\n    })));\n  };\n\n  const clearAllPoints = () => {\n    const clearedAddresses = addresses.map(addr => ({\n      ...addr,\n      address: '',\n      coordinate: undefined,\n      coordinates: undefined\n    }));\n    setAddresses(clearedAddresses);\n    onAddressesChange(clearedAddresses);\n    \n    // Очищаем всю валидацию\n    setAddressValidation({});\n    \n    console.log('All points cleared');\n    console.log('Cleared addresses:', clearedAddresses);\n  };\n\n  const toggleMapMode = () => {\n    setIsMapMode(!isMapMode);\n  };\n\n  const handleExpandButtonPress = () => {\n    setIsExpandButtonPressed(!isExpandButtonPressed);\n    setIsMapExpanded(!isMapExpanded);\n  };\n\n  const handleAddressChange = (id: string, text: string) => {\n    const updatedAddresses = addresses.map(addr => \n      addr.id === id ? { ...addr, address: text } : addr\n    );\n    setAddresses(updatedAddresses);\n    onAddressesChange(updatedAddresses);\n  };\n\n  const handleAddressSelect = (id: string, address: string, coordinates: MapLocation) => {\n    const updatedAddresses = addresses.map(addr => \n      addr.id === id ? { \n        ...addr, \n        address, \n        coordinate: coordinates,\n        coordinates: coordinates // Сохраняем в обоих форматах для совместимости\n      } : addr\n    );\n    setAddresses(updatedAddresses);\n    onAddressesChange(updatedAddresses);\n    console.log('Address selected:', id, 'coordinates:', coordinates);\n  };\n\n  const handleValidationChange = (id: string, isValid: boolean) => {\n    setAddressValidation(prev => ({\n      ...prev,\n      [id]: isValid\n    }));\n  };\n\n  const getPointStatus = (address: AddressPoint) => {\n    if (address.coordinate) {\n      return 'selected';\n    }\n    if (address.type === 'from') {\n      return 'next';\n    }\n    const fromPoint = addresses.find(addr => addr.type === 'from');\n    if (fromPoint?.coordinate && address.type === 'to') {\n      return 'next';\n    }\n    if (fromPoint?.coordinate && address.type === 'stop') {\n      return 'next';\n    }\n    return 'waiting';\n  };\n\n  const getPointColor = (type: string) => {\n    switch (type) {\n      case 'from': return colors.success; // зеленый для \"откуда\"\n      case 'to': return colors.primary; // синий для \"куда\"\n      case 'stop': return colors.textSecondary; // серый для остановок\n      default: return colors.textSecondary;\n    }\n  };\n\n  const getStatusIcon = (status: string, type: string) => {\n    switch (status) {\n      case 'selected': return 'checkmark-circle';\n      case 'next': return type === 'from' ? 'location' : type === 'to' ? 'flag' : 'ellipse';\n      case 'waiting': return 'ellipse-outline';\n      default: return 'ellipse-outline';\n    }\n  };\n\n  const getBorderColor = (status: string, type: string, addressId: string) => {\n    // Для текстового режима проверяем валидацию\n    if (!isMapMode) {\n      const isValid = addressValidation[addressId];\n      if (isValid) {\n        switch (type) {\n          case 'from': return colors.success; // зеленый для \"откуда\"\n          case 'to': return colors.primary; // синий для \"куда\"\n          case 'stop': return colors.textSecondary; // серый для остановок\n          default: return colors.border;\n        }\n      }\n      return colors.border;\n    }\n    \n    // Для режима карты используем старую логику\n    if (status !== 'selected') {\n      return colors.border;\n    }\n    \n    switch (type) {\n      case 'from': return colors.success; // зеленый для \"откуда\"\n      case 'to': return colors.primary; // синий для \"куда\"\n      case 'stop': return colors.textSecondary; // серый для остановок\n      default: return colors.border;\n    }\n  };\n\n  return (\n    <View style={{ marginTop: 10 }}>\n      <View style={{ \n        flexDirection: 'row', \n        alignItems: 'center', \n        justifyContent: 'space-between',\n        marginBottom: 12 \n      }}>\n        <Text style={{ \n          fontSize: 16, \n          fontWeight: '500', \n          color: colors.text\n        }}>\n          {t('common.fixDrive.address.selectFromMap')}\n        </Text>\n        \n        {!isMapMode && (\n          <TouchableOpacity \n            style={{ \n              backgroundColor: colors.primary,\n              borderRadius: 20,\n              padding: 8,\n              shadowColor: '#000',\n              shadowOffset: { width: 0, height: 2 },\n              shadowOpacity: 0.1,\n              shadowRadius: 4,\n              elevation: 3\n            }}\n            onPress={toggleMapMode}\n          >\n            <Ionicons name=\"map\" size={16} color=\"#FFFFFF\" />\n          </TouchableOpacity>\n        )}\n      </View>\n\n      {/* Карта */}\n      {isMapMode && (\n        <View style={{ \n          height: isMapExpanded ? 600 : 200, \n          borderRadius: 8, \n          overflow: 'hidden',\n          borderWidth: 1,\n          borderColor: colors.border,\n          marginBottom: 12,\n          position: 'relative'\n        }}>\n          {isMapMode && (\n            <MapViewComponent\n              ref={mapRef}\n              initialLocation={{ latitude: 40.3777, longitude: 49.8920 }}\n              onLocationSelect={handleMapPress}\n              routePoints={mapRoutePoints}\n              showTrafficMock={false}\n            />\n          )}\n          \n          {/* Кнопка переключения режима в правом верхнем углу */}\n          <TouchableOpacity \n            style={{ \n              position: 'absolute',\n              top: 8,\n              right: 8,\n              backgroundColor: colors.primary,\n              borderRadius: 20,\n              padding: 8,\n              shadowColor: '#000',\n              shadowOffset: { width: 0, height: 2 },\n              shadowOpacity: 0.1,\n              shadowRadius: 4,\n              elevation: 3\n            }}\n            onPress={toggleMapMode}\n          >\n            <Ionicons name=\"text\" size={16} color=\"#FFFFFF\" />\n          </TouchableOpacity>\n          \n          {/* Кнопка раскрытия в правом нижнем углу */}\n          <TouchableOpacity \n            style={{ \n              position: 'absolute',\n              bottom: 8,\n              right: 8,\n              backgroundColor: colors.primary,\n              borderRadius: 20,\n              padding: 8,\n              shadowColor: '#000',\n              shadowOffset: { width: 0, height: 2 },\n              shadowOpacity: 0.1,\n              shadowRadius: 4,\n              elevation: 3\n            }}\n            onPress={handleExpandButtonPress}\n            activeOpacity={0.7}\n          >\n            <Ionicons \n              name={isExpandButtonPressed ? \"contract\" : \"expand\"} \n              size={16} \n              color=\"#FFFFFF\" \n            />\n          </TouchableOpacity>\n        </View>\n      )}\n\n      {/* Список точек (оставляем только верхний) */}\n      <View style={{ marginBottom: 12 }}>\n        {addresses.slice(0, 1).map((address, index) => {\n          const status = getPointStatus(address);\n          const pointColor = getPointColor(address.type);\n          const statusIcon = getStatusIcon(status, address.type);\n          const borderColor = getBorderColor(status, address.type, address.id);\n\n          return (\n            <View key={address.id} style={{ \n              flexDirection: 'row', \n              alignItems: 'center',\n              paddingVertical: 8,\n              paddingHorizontal: 12,\n              backgroundColor: colors.surface,\n              borderRadius: 8,\n              marginBottom: 8,\n              borderWidth: 1,\n              borderColor: borderColor\n            }}>\n              {/* Отключаем выпадающий список */}\n              <View style={{ marginRight: 12 }}>\n                <Ionicons \n                  name=\"chevron-down\" \n                  size={20} \n                  color={colors.textSecondary} \n                />\n              </View>\n              \n              <View style={{ flex: 1 }}>\n                <Text style={{ \n                  fontSize: 14, \n                  fontWeight: '500', \n                  color: colors.text \n                }}>\n                  {address.type === 'from' ? t('common.fixDrive.address.from') :\n                   address.type === 'to' ? t('common.fixDrive.address.to') :\n                   t('common.fixDrive.address.stopPlaceholder')}\n                </Text>\n                \n                {isMapMode ? (\n                  <Text style={{ \n                    fontSize: 12, \n                    color: address.address ? colors.text : colors.textSecondary \n                  }}>\n                    {address.address || address.placeholder}\n                  </Text>\n                ) : (\n                  <AddressAutocomplete\n                    value={address.address}\n                    onChangeText={(text) => handleAddressChange(address.id, text)}\n                    onAddressSelect={(addressText, coordinates) => \n                      handleAddressSelect(address.id, addressText, coordinates)\n                    }\n                    onValidationChange={(isValid) => \n                      handleValidationChange(address.id, isValid)\n                    }\n                    type={address.type}\n                    placeholder={\n                      (address.placeholder && t(address.placeholder)) ||\n                      t(`components:common.autocomplete.placeholder.${address.type}`)\n                    }\n                  />\n                )}\n              </View>\n\n              {/* Кнопки действий */}\n              <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-end' }}>\n                {/* Кнопка очистки адреса - показывается только когда есть данные */}\n                {address.address && (\n                  <TouchableOpacity \n                    style={{ padding: 8, marginRight: 4 }}\n                    onPress={() => {\n                      const updatedAddresses = addresses.map(addr => \n                        addr.id === address.id \n                          ? { ...addr, address: '', coordinate: undefined, coordinates: undefined }\n                          : addr\n                      );\n                      setAddresses(updatedAddresses);\n                      onAddressesChange(updatedAddresses.slice(0, 1));\n                      \n                      // Очищаем валидацию для очищенного адреса\n                      setAddressValidation(prev => {\n                        const newValidation = { ...prev };\n                        delete newValidation[address.id];\n                        return newValidation;\n                      });\n                      \n                      console.log('Address cleared:', address.id, 'Type:', address.type);\n                    }}\n                  >\n                    <Ionicons name=\"close-circle\" size={16} color={colors.error} />\n                  </TouchableOpacity>\n                )}\n\n\n\n                {/* Кнопка добавления остановок/второго адреса скрыта */}\n                \n                {address.type === 'stop' && (\n                  <TouchableOpacity \n                    style={{ padding: 8 }}\n                    onPress={() => removeStop(address.id)}\n                  >\n                    <Ionicons name=\"close\" size={16} color={colors.error} />\n                  </TouchableOpacity>\n                )}\n              </View>\n\n              {/* Выпадающий список отключен */}\n            </View>\n          );\n        })}\n      </View>\n\n\n\n\n\n\n    </View>\n  );\n};\n\nexport default memo(FixDriveMapInput);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/GoogleIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/LanguageButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/LanguageSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Dimensions' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from 'react';\nimport { \n  View, \n  Text, \n  TouchableOpacity, \n  Modal, \n  ScrollView, \n  Animated, \n  Dimensions,\n  StatusBar \n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useLanguage } from '../context/LanguageContext';\nimport { useTheme } from '../context/ThemeContext';\nimport { colors } from '../constants/colors';\nimport { SupportedLanguage } from '../i18n';\nimport { LanguageSelectorStyles } from '../styles/components/LanguageSelector.styles';\n\ninterface LanguageSelectorProps {\n  visible: boolean;\n  onClose: () => void;\n}\n\nconst LanguageSelector: React.FC<LanguageSelectorProps> = ({ visible, onClose }) => {\n  const { t, setLanguage, language, languageOptions, isLoading } = useLanguage();\n  const { isDark } = useTheme();\n  const currentColors = isDark ? colors.dark : colors.light;\n  \n  // Animation values\n  const fadeAnim = useRef(new Animated.Value(0)).current;\n  const scaleAnim = useRef(new Animated.Value(0.8)).current;\n  const slideAnim = useRef(new Animated.Value(50)).current;\n\n  useEffect(() => {\n    if (visible) {\n      // Show animation\n      Animated.parallel([\n        Animated.timing(fadeAnim, {\n          toValue: 1,\n          duration: 300,\n          useNativeDriver: true,\n        }),\n        Animated.spring(scaleAnim, {\n          toValue: 1,\n          tension: 100,\n          friction: 8,\n          useNativeDriver: true,\n        }),\n        Animated.timing(slideAnim, {\n          toValue: 0,\n          duration: 300,\n          useNativeDriver: true,\n        }),\n      ]).start();\n    } else {\n      // Hide animation\n      Animated.parallel([\n        Animated.timing(fadeAnim, {\n          toValue: 0,\n          duration: 200,\n          useNativeDriver: true,\n        }),\n        Animated.timing(scaleAnim, {\n          toValue: 0.8,\n          duration: 200,\n          useNativeDriver: true,\n        }),\n        Animated.timing(slideAnim, {\n          toValue: 50,\n          duration: 200,\n          useNativeDriver: true,\n        }),\n      ]).start();\n    }\n  }, [visible, fadeAnim, scaleAnim, slideAnim]);\n\n  const handleLanguageSelect = async (selectedLanguage: string) => {\n    try {\n      await setLanguage(selectedLanguage as SupportedLanguage);\n      onClose();\n    } catch (error) {\n      console.warn('Language change error:', error);\n    }\n  };\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const styles = {\n    modalOverlay: {\n      ...LanguageSelectorStyles.modalOverlay,\n    },\n    modalContent: {\n      ...LanguageSelectorStyles.modalContent,\n      backgroundColor: currentColors.background,\n    },\n    header: {\n      ...LanguageSelectorStyles.header,\n      borderBottomColor: currentColors.border + '40',\n    },\n    title: {\n      ...LanguageSelectorStyles.title,\n      color: currentColors.primary,\n    },\n    closeButton: {\n      ...LanguageSelectorStyles.closeButton,\n      backgroundColor: currentColors.surface,\n    },\n    languageList: {\n      ...LanguageSelectorStyles.languageList,\n    },\n    languageItem: {\n      ...LanguageSelectorStyles.languageItem,\n      backgroundColor: currentColors.surface,\n    },\n    languageItemSelected: {\n      ...LanguageSelectorStyles.languageItemSelected,\n      backgroundColor: currentColors.primary + '15',\n      borderColor: currentColors.primary,\n      shadowColor: currentColors.primary,\n    },\n    flagContainer: {\n      ...LanguageSelectorStyles.flagContainer,\n      backgroundColor: currentColors.background,\n    },\n    flag: {\n      ...LanguageSelectorStyles.flag,\n    },\n    languageInfo: {\n      ...LanguageSelectorStyles.languageInfo,\n    },\n    languageName: {\n      ...LanguageSelectorStyles.languageName,\n      color: currentColors.text,\n    },\n    languageNative: {\n      ...LanguageSelectorStyles.languageNative,\n      color: currentColors.textSecondary,\n    },\n    languageNameSelected: {\n      ...LanguageSelectorStyles.languageNameSelected,\n      color: currentColors.primary,\n    },\n    checkIcon: {\n      ...LanguageSelectorStyles.checkIcon,\n      backgroundColor: currentColors.primary,\n    },\n    loadingContainer: {\n      ...LanguageSelectorStyles.loadingContainer,\n    },\n    loadingText: {\n      ...LanguageSelectorStyles.loadingText,\n      color: currentColors.textSecondary,\n    },\n  };\n\n  return (\n    <Modal\n      visible={visible}\n      transparent\n      animationType=\"none\"\n      onRequestClose={handleClose}\n      statusBarTranslucent\n    >\n      <StatusBar backgroundColor=\"rgba(0, 0, 0, 0.6)\" barStyle={isDark ? 'light-content' : 'dark-content'} />\n      \n      <Animated.View \n        style={[\n          styles.modalOverlay,\n          LanguageSelectorStyles.animatedOverlay,\n          { opacity: fadeAnim }\n        ]}\n      >\n        <Animated.View \n          style={[\n            styles.modalContent,\n            LanguageSelectorStyles.animatedContent,\n            {\n              transform: [\n                { scale: scaleAnim },\n                { translateY: slideAnim }\n              ]\n            }\n          ]}\n        >\n          <View style={styles.header}>\n            <Text style={styles.title}>{t('common.selectLanguage')}</Text>\n            <TouchableOpacity \n              style={styles.closeButton} \n              onPress={handleClose}\n              activeOpacity={0.7}\n            >\n              <Ionicons \n                name=\"close\" \n                size={20} \n                color={currentColors.text} \n              />\n            </TouchableOpacity>\n          </View>\n          \n          {isLoading ? (\n            <View style={styles.loadingContainer}>\n              <Ionicons name=\"refresh\" size={32} color={currentColors.primary} />\n              <Text style={styles.loadingText}>{t('common.loading')}</Text>\n            </View>\n          ) : (\n            <ScrollView \n              style={styles.languageList} \n              showsVerticalScrollIndicator={false}\n              contentContainerStyle={LanguageSelectorStyles.scrollViewContent}\n            >\n              {languageOptions.map((lang) => (\n                <TouchableOpacity\n                  key={lang.code}\n                  style={[\n                    styles.languageItem,\n                    language === lang.code && styles.languageItemSelected\n                  ]}\n                  onPress={() => handleLanguageSelect(lang.code)}\n                  activeOpacity={0.7}\n                >\n                  <View style={styles.flagContainer}>\n                    <Text style={styles.flag}>{lang.flag}</Text>\n                  </View>\n                  \n                  <View style={styles.languageInfo}>\n                    <Text style={[\n                      styles.languageName,\n                      language === lang.code && styles.languageNameSelected\n                    ]}>\n                      {lang.name}\n                    </Text>\n                    <Text style={styles.languageNative}>\n                      {lang.native}\n                    </Text>\n                  </View>\n                  \n                  {language === lang.code && (\n                    <View style={styles.checkIcon}>\n                      <Ionicons \n                        name=\"checkmark\" \n                        size={16} \n                        color=\"#FFFFFF\"\n                      />\n                    </View>\n                  )}\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n          )}\n        </Animated.View>\n      </Animated.View>\n    </Modal>\n  );\n};\n\nexport default LanguageSelector; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/LoadingFooter.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[153,156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[153,156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { useI18n } from '../hooks/useI18n';\n\ntype LoadingFooterProps = {\n  styles: any;\n};\n\nconst LoadingFooter: React.FC<LoadingFooterProps> = ({ styles }) => {\n  const { t } = useI18n();\n  return (\n    <View style={styles.loadingFooter}>\n      <Text style={styles.loadingText}>{t('client.driversScreen.loadingMore')}</Text>\n    </View>\n  );\n};\n\nexport default React.memo(LoadingFooter);\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/MapView/components/MapControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/MapView/components/MapMarkers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/MapView/hooks/useDirections.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ENV_CONFIG' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'decoded' is assigned a value but never used.","line":58,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2983,2986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2983,2986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'distanceMeters' is assigned a value but never used.","line":60,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3130,3133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3130,3133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reorderedIndices' is assigned a value but never used.","line":62,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4049,4052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4049,4052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4374,4377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4374,4377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5080,5083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5080,5083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5519,5522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5519,5522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5671,5674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5671,5674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5964,5967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5964,5967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'points'. Either include it or remove the dependency array.","line":115,"column":6,"nodeType":"ArrayExpression","endLine":115,"endColumn":119,"suggestions":[{"desc":"Update the dependencies array to be: [hasEnough, plannedArrivalAtMs, allowOptimizeWhenLate, tollsSpeedupThresholdMin, enabled, points]","fix":{"range":[6135,6248],"text":"[hasEnough, plannedArrivalAtMs, allowOptimizeWhenLate, tollsSpeedupThresholdMin, enabled, points]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":115,"column":18,"nodeType":"CallExpression","endLine":115,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useMemo, useState } from 'react';\nimport polyline from '@mapbox/polyline';\nimport { RoutePoint } from '../types/map.types';\nimport { ENV_CONFIG } from '../../../config/environment';\n\ninterface DirectionsResult {\n  coordinates: Array<{ latitude: number; longitude: number }>;\n  durationInTrafficSec: number;\n  distanceMeters: number;\n  reorderedIndices?: number[]; // mapping from provided waypoints to optimized order\n}\n\nconst buildDirectionsUrl = (\n  points: RoutePoint[],\n  opts: { optimize: boolean; avoidTolls: boolean; avoidHighways: boolean }\n) => {\n  const apiKey = process.env.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY || '';\n  const origin = `${points[0].coordinate.latitude},${points[0].coordinate.longitude}`;\n  const destination = `${points[points.length - 1].coordinate.latitude},${points[points.length - 1].coordinate.longitude}`;\n  const rawWaypoints = points.slice(1, -1).map(p => `${p.coordinate.latitude},${p.coordinate.longitude}`);\n  const waypointPrefix = opts.optimize && rawWaypoints.length > 0 ? 'optimize:true|' : '';\n  const waypoints = rawWaypoints.length > 0 ? `&waypoints=${encodeURIComponent(waypointPrefix + rawWaypoints.join('|'))}` : '';\n  const avoid = [opts.avoidTolls ? 'tolls' : null, opts.avoidHighways ? 'highways' : null].filter(Boolean).join('|');\n  const avoidParam = avoid ? `&avoid=${avoid}` : '';\n  const departure = `&departure_time=now`;\n  const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${origin}&destination=${destination}${waypoints}&mode=driving${departure}&traffic_model=best_guess${avoidParam}&key=${apiKey}`;\n  return url;\n};\n\nexport const useDirections = (\n  points: RoutePoint[] | undefined,\n  plannedArrivalAtMs?: number,\n  allowOptimizeWhenLate = true,\n  tollsSpeedupThresholdMin = 5,\n  enabled: boolean = true,\n) => {\n  const [route, setRoute] = useState<DirectionsResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const hasEnough = useMemo(() => {\n    return Boolean(points && points.length >= 2 && points.every(p => typeof p.coordinate?.latitude === 'number' && typeof p.coordinate?.longitude === 'number'));\n  }, [points]);\n\n  useEffect(() => {\n    const fetchDirections = async () => {\n      if (!hasEnough) { setRoute(null); return; }\n      if (!enabled) { return; }\n      setLoading(true);\n      setError(null);\n      try {\n        // 1) Без платных, без оптимизации\n        let url = buildDirectionsUrl(points!, { optimize: false, avoidTolls: true, avoidHighways: true });\n        let resp = await fetch(url);\n        let data = await resp.json();\n        if (data.status !== 'OK' || !data.routes?.length) throw new Error(data.status || 'Directions failed');\n        let best = data.routes[0];\n        const decoded = polyline.decode(best.overview_polyline.points).map((p: number[]) => ({ latitude: p[0], longitude: p[1] }));\n        const durationInTrafficSec = best.legs.reduce((acc: number, leg: any) => acc + (leg.duration_in_traffic?.value ?? leg.duration?.value ?? 0), 0);\n        const distanceMeters = best.legs.reduce((acc: number, leg: any) => acc + (leg.distance?.value ?? 0), 0);\n        let reorderedIndices: number[] | undefined = undefined;\n        if (best.waypoint_order) reorderedIndices = best.waypoint_order as number[];\n\n        // Проверка на опоздание\n        const nowMs = Date.now();\n        const etaMs = nowMs + durationInTrafficSec * 1000;\n        const isLate = plannedArrivalAtMs ? etaMs > plannedArrivalAtMs : false;\n\n        // Если опаздываем — пробуем optimize:true\n        if (allowOptimizeWhenLate && (isLate || (best.waypoint_order?.length > 0))) {\n          const urlOpt = buildDirectionsUrl(points!, { optimize: true, avoidTolls: true, avoidHighways: true });\n          const respOpt = await fetch(urlOpt);\n          const dataOpt = await respOpt.json();\n          if (dataOpt.status === 'OK' && dataOpt.routes?.length) {\n            const cand = dataOpt.routes[0];\n            const dur = cand.legs.reduce((acc: number, leg: any) => acc + (leg.duration_in_traffic?.value ?? leg.duration?.value ?? 0), 0);\n            if (dur < durationInTrafficSec) {\n              best = cand;\n            }\n          }\n        }\n\n        // Если всё ещё опаздываем — разрешаем платные/трассы\n        const recomputeDurationSec = best.legs.reduce((acc: number, leg: any) => acc + (leg.duration_in_traffic?.value ?? leg.duration?.value ?? 0), 0);\n        const etaAfterOptMs = nowMs + recomputeDurationSec * 1000;\n        const stillLate = plannedArrivalAtMs ? etaAfterOptMs > plannedArrivalAtMs : false;\n        if (stillLate) {\n          // Разрешаем платные\n          const urlTolls = buildDirectionsUrl(points!, { optimize: true, avoidTolls: false, avoidHighways: false });\n          const respTolls = await fetch(urlTolls);\n          const dataTolls = await respTolls.json();\n          if (dataTolls.status === 'OK' && dataTolls.routes?.length) {\n            const bestTolls = dataTolls.routes[0];\n            const durTolls = bestTolls.legs.reduce((acc: number, leg: any) => acc + (leg.duration_in_traffic?.value ?? leg.duration?.value ?? 0), 0);\n            if (durTolls + tollsSpeedupThresholdMin * 60 <= recomputeDurationSec) {\n              best = bestTolls;\n            }\n          }\n        }\n\n        const finalDecoded = polyline.decode(best.overview_polyline.points).map((p: number[]) => ({ latitude: p[0], longitude: p[1] }));\n        const finalDurationSec = best.legs.reduce((acc: number, leg: any) => acc + (leg.duration_in_traffic?.value ?? leg.duration?.value ?? 0), 0);\n        const finalDistanceMeters = best.legs.reduce((acc: number, leg: any) => acc + (leg.distance?.value ?? 0), 0);\n        const finalOrder = best.waypoint_order as number[] | undefined;\n\n        setRoute({ coordinates: finalDecoded, durationInTrafficSec: finalDurationSec, distanceMeters: finalDistanceMeters, reorderedIndices: finalOrder });\n      } catch (e: any) {\n        setError(e?.message || 'Directions error');\n        setRoute(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDirections();\n  }, [hasEnough, JSON.stringify(points), plannedArrivalAtMs, allowOptimizeWhenLate, tollsSpeedupThresholdMin, enabled]);\n\n  return { route, loading, error };\n};\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/MapView/hooks/useMapLocation.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initialLocation'. Either include it or remove the dependency array.","line":25,"column":6,"nodeType":"ArrayExpression","endLine":25,"endColumn":61,"suggestions":[{"desc":"Update the dependencies array to be: [initialLocation, initialLocation.latitude, initialLocation.longitude]","fix":{"range":[845,900],"text":"[initialLocation, initialLocation.latitude, initialLocation.longitude]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { MapLocation, MapRegion } from '../types/map.types';\nimport { MapService } from '../../../services/MapService';\n\nexport const useMapLocation = (initialLocation?: MapLocation) => {\n  const [region, setRegion] = useState<MapRegion>({\n    latitude: initialLocation?.latitude || 40.3777,\n    longitude: initialLocation?.longitude || 49.8920,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421,\n  });\n\n  // Обновление региона при изменении initialLocation\n  useEffect(() => {\n    if (initialLocation && initialLocation.latitude && initialLocation.longitude) {\n      const newRegion = {\n        latitude: initialLocation.latitude,\n        longitude: initialLocation.longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421,\n      };\n      \n      setRegion(newRegion);\n    }\n  }, [initialLocation?.latitude, initialLocation?.longitude]); // Используем конкретные значения вместо объекта\n\n  useEffect(() => {\n    const initializeMap = async () => {\n      try {\n        const location = await MapService.getCurrentLocation();\n        if (location) {\n          setRegion({\n            latitude: location.latitude,\n            longitude: location.longitude,\n            latitudeDelta: 0.0922,\n            longitudeDelta: 0.0421,\n          });\n        }\n      } catch (error) {\n        console.error('Error getting current location:', error);\n      }\n    };\n\n    if (!initialLocation) {\n      initializeMap();\n    }\n  }, [initialLocation]);\n\n  const updateRegion = (newRegion: Partial<MapRegion>) => {\n    setRegion(prev => ({ ...prev, ...newRegion }));\n  };\n\n  return {\n    region,\n    updateRegion,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/MapView/hooks/useMapMarkers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/MapView/hooks/useMapZoom.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/MapView/hooks/useOsrmDirections.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2392,2395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2392,2395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'points'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [hasEnough, points]","fix":{"range":[2545,2580],"text":"[hasEnough, points]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":59,"column":18,"nodeType":"CallExpression","endLine":59,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useMemo, useState } from 'react';\nimport { RoutePoint } from '../types/map.types';\n\ninterface OsrmResult {\n  coordinates: Array<{ latitude: number; longitude: number }>;\n  durationSec: number;\n  distanceMeters: number;\n}\n\nconst osrmPolylineDecode = (str: string) => {\n  // Простая декодировка polyline5 (OSRM совместима) — чтобы не тянуть внешнюю зависимость\n  let index = 0, lat = 0, lng = 0, coordinates: Array<{ latitude: number; longitude: number }> = [];\n  while (index < str.length) {\n    let b, shift = 0, result = 0;\n    do { b = str.charCodeAt(index++) - 63; result |= (b & 0x1f) << shift; shift += 5; } while (b >= 0x20);\n    const dlat = (result & 1) ? ~(result >> 1) : (result >> 1);\n    lat += dlat;\n    shift = 0; result = 0;\n    do { b = str.charCodeAt(index++) - 63; result |= (b & 0x1f) << shift; shift += 5; } while (b >= 0x20);\n    const dlng = (result & 1) ? ~(result >> 1) : (result >> 1);\n    lng += dlng;\n    coordinates.push({ latitude: lat / 1e5, longitude: lng / 1e5 });\n  }\n  return coordinates;\n};\n\nexport const useOsrmDirections = (points: RoutePoint[] | undefined) => {\n  const [route, setRoute] = useState<OsrmResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const hasEnough = useMemo(() => {\n    return Boolean(points && points.length >= 2 && points.every(p => typeof p.coordinate?.latitude === 'number' && typeof p.coordinate?.longitude === 'number'));\n  }, [points]);\n\n  useEffect(() => {\n    const run = async () => {\n      if (!hasEnough) { setRoute(null); return; }\n      setLoading(true);\n      setError(null);\n      try {\n        const coords = (points as RoutePoint[]).map(p => `${p.coordinate.longitude},${p.coordinate.latitude}`).join(';');\n        const steps = false; // достаточно overview\n        const url = `https://router.project-osrm.org/route/v1/driving/${coords}?overview=full&geometries=polyline${steps ? '&steps=true' : ''}`;\n        const resp = await fetch(url);\n        const data = await resp.json();\n        if (data.code !== 'Ok' || !data.routes?.length) throw new Error('OSRM failed');\n        const best = data.routes[0];\n        const decoded = osrmPolylineDecode(best.geometry);\n        setRoute({ coordinates: decoded, durationSec: Math.round(best.duration), distanceMeters: Math.round(best.distance) });\n      } catch (e: any) {\n        setError(e?.message || 'OSRM error');\n        setRoute(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    run();\n  }, [hasEnough, JSON.stringify(points)]);\n\n  return { route, loading, error };\n};\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/MapView/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RoutePoint' is defined but never used.","line":11,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showTrafficMock' is assigned a value but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":35,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1486,1489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1486,1489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2603,2606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2603,2606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3851,3854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3851,3854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3928,3931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3928,3931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4882,4885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4882,4885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'updateRegion'. Either include it or remove the dependency array.","line":171,"column":6,"nodeType":"ArrayExpression","endLine":171,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [initialLocation, updateRegion]","fix":{"range":[6398,6415],"text":"[initialLocation, updateRegion]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useCallback, forwardRef, useImperativeHandle, useMemo, memo } from 'react';\nimport { View, Animated } from 'react-native';\nimport MapView, { PROVIDER_GOOGLE, Polyline } from 'react-native-maps';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { createMapViewStyles } from '../../styles/components/MapView.styles';\nimport DriverModal from '../DriverModal';\n\n// Импорты из новой структуры\nimport { MapViewComponentProps, MapRef, RoutePoint } from './types/map.types';\nimport { useMapZoom } from './hooks/useMapZoom';\nimport { useMapMarkers } from './hooks/useMapMarkers';\nimport { useMapLocation } from './hooks/useMapLocation';\nimport MapControls from './components/MapControls';\nimport MapMarkersComponent from './components/MapMarkers';\nimport { useDirections } from './hooks/useDirections';\nimport { useOsrmDirections } from './hooks/useOsrmDirections';\n\nconst MapViewComponent = forwardRef<MapRef, MapViewComponentProps>(({ \n  initialLocation,\n  onLocationSelect,\n  onDriverVisibilityToggle,\n  markers = [],\n  role = 'client',\n  clientLocationActive = false,\n  isDriverModalVisible = false,\n  onDriverModalClose,\n  mapType = 'standard',\n  routePoints = [],\n  showTrafficMock = true,\n}, ref) => {\n  const mapRef = useRef<MapView>(null);\n  const { isDark } = useTheme();\n  const { user } = useAuth();\n  const navigation = useNavigation<any>();\n  const styles = createMapViewStyles(isDark);\n  \n  const plannedArrivalAtMs = useMemo(() => {\n    const end = routePoints && routePoints[routePoints.length - 1];\n    return end?.plannedArrivalAtMs;\n  }, [routePoints]);\n\n  const googleKey = (process.env.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY || '').trim();\n  const useGoogle = Boolean(googleKey);\n  const { route: gRoute } = useDirections(routePoints, plannedArrivalAtMs, true, 5, useGoogle);\n  const { route: oRoute } = useOsrmDirections(!useGoogle ? routePoints : undefined);\n  const routeCoordinates = (useGoogle ? gRoute?.coordinates : oRoute?.coordinates) ?? [];\n  const fallbackRouteCoordinates = useMemo(() => {\n    if (!routePoints || routePoints.length < 2) return [] as { latitude: number; longitude: number }[];\n    return routePoints.map(p => ({ latitude: p.coordinate.latitude, longitude: p.coordinate.longitude }));\n  }, [routePoints]);\n  const effectiveRouteCoordinates = routeCoordinates.length >= 2 ? routeCoordinates : fallbackRouteCoordinates;\n\n  const routeMarkers = useMemo(() => {\n    if (!routePoints || routePoints.length === 0) return [] as any[];\n    return routePoints.map((p, idx) => {\n      const isFirst = idx === 0;\n      const isLast = idx === routePoints.length - 1;\n      const type: 'start' | 'waypoint' | 'end' = isFirst ? 'start' : (isLast ? 'end' : 'waypoint');\n      const label = String.fromCharCode(65 + idx);\n      return {\n        id: `route_${p.id}`,\n        coordinate: p.coordinate,\n        title: label,\n        description: type,\n        type,\n        label,\n      };\n    });\n  }, [routePoints]);\n\n  // Используем созданные хуки\n  const { handleZoomIn, handleZoomOut } = useMapZoom(mapRef);\n  const { region, updateRegion } = useMapLocation(initialLocation);\n  const { mapMarkers, clientMarker, refreshMapMarkers, handleMarkerPress } = useMapMarkers(\n    markers,\n    role,\n    clientLocationActive,\n    initialLocation,\n    onDriverVisibilityToggle\n  );\n\n  const selectedDriverId = useMemo(() => {\n    if (!isDriverModalVisible) {\n      return null;\n    }\n    const driverMarker = markers.find((marker) => marker.type === 'driver');\n    return driverMarker?.id ?? null;\n  }, [isDriverModalVisible, markers]);\n\n  // Экспортируем методы карты через ref\n  useImperativeHandle(ref, () => ({\n    getCamera: () => mapRef.current?.getCamera(),\n    animateCamera: (camera: any) => mapRef.current?.animateCamera(camera),\n    animateToRegion: (region: any, duration?: number) => mapRef.current?.animateToRegion(region, duration),\n    zoomIn: handleZoomIn,\n    zoomOut: handleZoomOut,\n  }));\n\n  // Анимации для кнопок (оставляем как есть, так как это UI логика)\n  const buttonAnimations = useMemo(() => [\n    new Animated.Value(0),\n    new Animated.Value(0),\n    new Animated.Value(0),\n    new Animated.Value(0),\n    new Animated.Value(0),\n    new Animated.Value(0),\n  ], []);\n\n  const handleMapPress = useCallback((event: { nativeEvent: { coordinate: { latitude: number; longitude: number } } }) => {\n    const { latitude, longitude } = event.nativeEvent.coordinate;\n    const location = { latitude, longitude };\n    \n    if (onLocationSelect) {\n      onLocationSelect(location);\n    }\n  }, [onLocationSelect]);\n\n  const handleDriverModalClose = useCallback(() => {\n    if (onDriverModalClose) {\n      onDriverModalClose();\n    }\n  }, [onDriverModalClose]);\n\n  const handleChatPress = useCallback((driver: any) => {\n    try {\n      // Закрываем модалку водителя\n      handleDriverModalClose();\n      \n      // Для обеих ролей используем одинаковую навигацию к стеку чатов\n      navigation.navigate('Chat');\n      \n      setTimeout(() => {\n        // Навигируем к конкретному чату внутри стека\n        navigation.navigate('Chat', {\n          screen: 'ChatConversation',\n          params: {\n            driverId: driver.id,\n            driverName: `${driver.first_name} ${driver.last_name}`,\n            driverCar: `${driver.vehicle_brand} ${driver.vehicle_model}`,\n            driverNumber: driver.phone_number,\n            driverRating: driver.rating.toString(),\n            driverStatus: driver.isAvailable ? 'online' : 'offline'\n          }\n        });\n      }, 100);\n    } catch (error) {\n      console.warn('Chat navigation failed, falling back to Chat tab:', error);\n      navigation.navigate('Chat');\n    }\n  }, [navigation, handleDriverModalClose]);\n\n  // Плавная анимация центрирования карты при изменении initialLocation\n  React.useEffect(() => {\n    if (initialLocation && initialLocation.latitude && initialLocation.longitude) {\n      const newRegion = {\n        latitude: initialLocation.latitude,\n        longitude: initialLocation.longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421,\n      };\n      \n      updateRegion(newRegion);\n      \n      // Плавная анимация центрирования карты\n      if (mapRef.current) {\n        mapRef.current.animateToRegion(newRegion, 500);\n      }\n    }\n  }, [initialLocation]); // Убираем updateRegion из зависимостей\n\n  return (\n    <View style={styles.container}>\n      <MapView\n        ref={mapRef}\n        style={styles.map}\n        provider={PROVIDER_GOOGLE}\n        region={region}\n        onPress={handleMapPress}\n        showsUserLocation={true}\n        showsMyLocationButton={false}\n        showsCompass={false}\n        showsScale={false}\n        showsTraffic={true}\n        showsBuildings={false}\n        showsIndoors={false}\n        showsIndoorLevelPicker={false}\n        showsPointsOfInterest={false}\n        mapType={mapType}\n        customMapStyle={isDark && mapType === 'standard' ? [\n          {\n            \"elementType\": \"geometry\",\n            \"stylers\": [{ \"color\": \"#242f3e\" }]\n          },\n          {\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#746855\" }]\n          },\n          {\n            \"elementType\": \"labels.text.stroke\",\n            \"stylers\": [{ \"color\": \"#242f3e\" }]\n          },\n          {\n            \"featureType\": \"administrative.locality\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#d59563\" }]\n          },\n          {\n            \"featureType\": \"poi\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#d59563\" }]\n          },\n          {\n            \"featureType\": \"poi.park\",\n            \"elementType\": \"geometry\",\n            \"stylers\": [{ \"color\": \"#263c3f\" }]\n          },\n          {\n            \"featureType\": \"poi.park\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#6b9a76\" }]\n          },\n          {\n            \"featureType\": \"road\",\n            \"elementType\": \"geometry\",\n            \"stylers\": [{ \"color\": \"#38414e\" }]\n          },\n          {\n            \"featureType\": \"road\",\n            \"elementType\": \"geometry.stroke\",\n            \"stylers\": [{ \"color\": \"#212a37\" }]\n          },\n          {\n            \"featureType\": \"road\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#9ca5b3\" }]\n          },\n          {\n            \"featureType\": \"road.highway\",\n            \"elementType\": \"geometry\",\n            \"stylers\": [{ \"color\": \"#746855\" }]\n          },\n          {\n            \"featureType\": \"road.highway\",\n            \"elementType\": \"geometry.stroke\",\n            \"stylers\": [{ \"color\": \"#1f2835\" }]\n          },\n          {\n            \"featureType\": \"road.highway\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#f3d19c\" }]\n          },\n          {\n            \"featureType\": \"transit\",\n            \"elementType\": \"geometry\",\n            \"stylers\": [{ \"color\": \"#2f3948\" }]\n          },\n          {\n            \"featureType\": \"transit.station\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#d59563\" }]\n          },\n          {\n            \"featureType\": \"water\",\n            \"elementType\": \"geometry\",\n            \"stylers\": [{ \"color\": \"#17263c\" }]\n          },\n          {\n            \"featureType\": \"water\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#515c6d\" }]\n          },\n          {\n            \"featureType\": \"water\",\n            \"elementType\": \"labels.text.stroke\",\n            \"stylers\": [{ \"color\": \"#17263c\" }]\n          }\n        ] : undefined}\n        userLocationPriority=\"high\"\n        userLocationUpdateInterval={5000}\n        userLocationFastestInterval={2000}\n        followsUserLocation={true}\n        toolbarEnabled={true}\n        zoomEnabled={true}\n        rotateEnabled={true}\n        scrollEnabled={true}\n        pitchEnabled={true}\n        minZoomLevel={5}\n        maxZoomLevel={20}\n        loadingEnabled={true}\n        loadingIndicatorColor=\"#666666\"\n        loadingBackgroundColor=\"#ffffff\"\n        moveOnMarkerPress={true}\n        liteMode={false}\n        mapPadding={{ top: 0, right: 0, bottom: 0, left: 0 }}\n      >\n        {effectiveRouteCoordinates.length >= 2 && (\n          <Polyline\n            coordinates={effectiveRouteCoordinates}\n            strokeColor={isDark ? '#60A5FA' : '#3B82F6'}\n            strokeWidth={5}\n            lineCap=\"round\"\n            lineJoin=\"round\"\n            geodesic\n          />\n        )}\n\n        {/* Трафик показывается системно showsTraffic. Доп. красный дэш — больше не нужен */}\n\n        <MapMarkersComponent\n          markers={[...mapMarkers, ...routeMarkers]}\n          clientMarker={clientMarker}\n          onMarkerPress={handleMarkerPress}\n        />\n      </MapView>\n\n      {/* Модальное окно водителя */}\n      {selectedDriverId && (\n        <DriverModal\n          isVisible={isDriverModalVisible}\n          onClose={handleDriverModalClose}\n          onOverlayClose={handleDriverModalClose}\n          role={role}\n          onChat={handleChatPress}\n          driverId={selectedDriverId}\n        />\n      )}\n\n      {/* Дополнительные кнопки управления */}\n      <MapControls\n        buttonAnimations={buttonAnimations}\n        onRefresh={refreshMapMarkers}\n        onZoomIn={handleZoomIn}\n        onZoomOut={handleZoomOut}\n      />\n    </View>\n  );\n});\n\nMapViewComponent.displayName = 'MapViewComponent';\n\nexport default memo(MapViewComponent);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/MapView/types/map.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1028,1031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1028,1031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1060,1063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1060,1063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1102,1105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1102,1105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface MapLocation {\n  latitude: number;\n  longitude: number;\n}\n\nexport interface MapMarker {\n  id: string;\n  coordinate: MapLocation;\n  title: string;\n  description?: string;\n  type?: 'driver' | 'client' | 'destination' | 'start' | 'waypoint' | 'end';\n  label?: string;\n  colorHex?: string;\n  onPress?: (marker: MapMarker) => void;\n}\n\nexport interface RoutePoint {\n  id: string;\n  coordinate: MapLocation;\n  type: 'start' | 'waypoint' | 'end';\n  plannedArrivalAtMs?: number;\n}\n\nexport interface MapViewComponentProps {\n  initialLocation?: MapLocation;\n  onLocationSelect?: (location: MapLocation) => void;\n  showNearbyDrivers?: boolean;\n  onDriverVisibilityToggle?: (timestamp: number) => void;\n  role?: 'client' | 'driver';\n  clientLocationActive?: boolean;\n  isDriverModalVisible?: boolean;\n  onDriverModalClose?: () => void;\n  mapType?: 'standard' | 'satellite' | 'hybrid';\n  markers?: MapMarker[];\n  routePoints?: RoutePoint[];\n  showTrafficMock?: boolean;\n}\n\nexport interface MapRef {\n  getCamera: () => Promise<any>;\n  animateCamera: (camera: any) => void;\n  animateToRegion: (region: any, duration?: number) => void;\n  zoomIn: () => void;\n  zoomOut: () => void;\n}\n\nexport interface MapRegion {\n  latitude: number;\n  longitude: number;\n  latitudeDelta: number;\n  longitudeDelta: number;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/MastercardIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/NotificationsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/PasswordStrengthIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/PaymentHelpModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3443,3446],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3443,3446],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useCallback, useMemo } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, Modal, Animated } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { RulesModalStyles as styles, getRulesModalStyles } from '../styles/components/RulesModal.styles';\nimport { RulesSlidesStyles as slideStyles } from '../styles/components/RulesSlides.styles';\nimport { createSlideAnimation, slideAnimationConfig } from '../styles/animations';\nimport { useTheme } from '../context/ThemeContext';\nimport { useI18n } from '../hooks/useI18n';\n\ninterface PaymentHelpSlide {\n  id: number;\n  title: string;\n  icon: string;\n  content: string;\n  description: string;\n}\n\ninterface PaymentHelpModalProps {\n  visible: boolean;\n  onClose: () => void;\n}\n\nconst paymentSlides: PaymentHelpSlide[] = [\n  {\n    id: 1,\n    title: 'help.payment.paymentMethods.title',\n    icon: 'card',\n    content: 'help.payment.paymentMethods.content',\n    description: 'help.payment.paymentMethods.description',\n  },\n  {\n    id: 2,\n    title: 'help.payment.tariffCalculation.title',\n    icon: 'calculator',\n    content: 'help.payment.tariffCalculation.content',\n    description: 'help.payment.tariffCalculation.description',\n  },\n  {\n    id: 3,\n    title: 'help.payment.tariffPlans.title',\n    icon: 'pricetag',\n    content: 'help.payment.tariffPlans.content',\n    description: 'help.payment.tariffPlans.description',\n  },\n  {\n    id: 4,\n    title: 'help.payment.refund.title',\n    icon: 'refresh',\n    content: 'help.payment.refund.content',\n    description: 'help.payment.refund.description',\n  },\n];\n\nconst PaymentHelpModal: React.FC<PaymentHelpModalProps> = ({ visible, onClose }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const dynamicStyles = getRulesModalStyles(isDark);\n  const [activeSlide, setActiveSlide] = useState(0);\n  const slideAnim = useRef(new Animated.Value(0)).current;\n  const slides = useMemo(() => paymentSlides, []);\n\n  const openSlide = useCallback(\n    (slideIndex: number) => {\n      setActiveSlide(slideIndex);\n      Animated.spring(slideAnim, slideAnimationConfig.open).start();\n    },\n    [slideAnim]\n  );\n\n  const closeSlide = useCallback(() => {\n    Animated.spring(slideAnim, slideAnimationConfig.close).start(() => {\n      setActiveSlide(0);\n    });\n  }, [slideAnim]);\n\n  return (\n    <Modal visible={visible} animationType=\"slide\" presentationStyle=\"pageSheet\" onRequestClose={onClose}>\n      <View style={[styles.modalContainer, dynamicStyles.modalContainer]}>\n        <View style={[styles.modalHeader, dynamicStyles.modalHeader]}>\n          <TouchableOpacity onPress={onClose} style={styles.modalCloseButton}>\n            <Ionicons name=\"close\" size={24} color={isDark ? '#fff' : '#003366'} />\n          </TouchableOpacity>\n          <Text style={[styles.modalTitle, dynamicStyles.modalTitle]}>{t('help.paymentAndRates')}</Text>\n          <View style={styles.placeholder} />\n        </View>\n\n        <ScrollView style={styles.modalContent} showsVerticalScrollIndicator={false}>\n          {slides.map((slide, index) => (\n            <TouchableOpacity\n              key={slide.id}\n              style={[slideStyles.slideItem, dynamicStyles.slideItem]}\n              onPress={() => openSlide(index)}\n              activeOpacity={0.7}\n            >\n              <View style={[slideStyles.slideIcon, dynamicStyles.slideIcon]}>\n                <Ionicons name={slide.icon as any} size={24} color={isDark ? '#fff' : '#003366'} />\n              </View>\n              <View style={slideStyles.slideInfo}>\n                <Text style={[slideStyles.slideTitle, dynamicStyles.slideTitle]}>{t(slide.title)}</Text>\n                <Text style={[slideStyles.slideDescription, dynamicStyles.slideContent]}>{t(slide.description)}</Text>\n              </View>\n              <Ionicons name=\"chevron-forward\" size={20} color={isDark ? '#666' : '#ccc'} />\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n\n        <Animated.View\n          style={[slideStyles.slideOverlay, dynamicStyles.slideOverlay, createSlideAnimation(slideAnim)]}\n        >\n          {activeSlide >= 0 && (\n            <View style={slideStyles.slideContent}>\n              <View style={[slideStyles.slideHeader, dynamicStyles.slideHeader]}>\n                <TouchableOpacity onPress={closeSlide} style={slideStyles.backButton}>\n                  <Ionicons name=\"arrow-back\" size={24} color={isDark ? '#fff' : '#003366'} />\n                </TouchableOpacity>\n                <Text style={[slideStyles.slideHeaderTitle, dynamicStyles.slideHeaderTitle]}>\n                  {t(slides[activeSlide]?.title)}\n                </Text>\n                <View style={styles.placeholder} />\n              </View>\n              <ScrollView style={slideStyles.slideScroll}>\n                <Text style={[slideStyles.slideText, dynamicStyles.slideText]}>\n                  {t(slides[activeSlide]?.content)}\n                </Text>\n              </ScrollView>\n            </View>\n          )}\n        </Animated.View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default PaymentHelpModal; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/PaymentHistoryFilter.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fadeAnim' and 'visible'. Either include them or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fadeAnim, visible]","fix":{"range":[3423,3425],"text":"[fadeAnim, visible]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5972,5975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5972,5975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6066,6069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6066,6069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7691,7694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7691,7694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7787,7790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7787,7790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":242,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9430,9433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9430,9433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":245,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9525,9528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9525,9528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { View, Text, TouchableOpacity, Modal, ScrollView, Animated } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../context/ThemeContext';\nimport { useLanguage } from '../context/LanguageContext';\nimport { useAuth } from '../context/AuthContext';\nimport { PaymentHistoryFilterStyles as styles, getPaymentHistoryFilterStyles } from '../styles/components/PaymentHistoryFilter.styles';\n\nexport interface PaymentFilter {\n  type: 'all' | 'trip' | 'topup' | 'refund' | 'fee' | 'package_purchase' | 'subscription_renewal' | 'withdrawal' | 'earnings';\n  status: 'all' | 'completed' | 'pending' | 'failed';\n  dateRange: 'all' | 'today' | 'week' | 'month' | 'year';\n}\n\ninterface PaymentHistoryFilterProps {\n  visible: boolean;\n  onClose: () => void;\n  onApply: (filter: PaymentFilter) => void;\n  currentFilter: PaymentFilter;\n}\n\nconst PaymentHistoryFilter: React.FC<PaymentHistoryFilterProps> = ({\n  visible,\n  onClose,\n  onApply,\n  currentFilter\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useLanguage();\n  const { user } = useAuth();\n  const dynamicStyles = getPaymentHistoryFilterStyles(isDark);\n  const [filter, setFilter] = useState<PaymentFilter>(currentFilter);\n  \n  const slideAnim = useRef(new Animated.Value(300)).current;\n  const fadeAnim = useRef(new Animated.Value(0)).current;\n\n  const isDriver = user?.role === 'driver';\n\n  const paymentTypes = [\n    { key: 'all', label: t('client.paymentHistory.filter.allTypes'), icon: 'list' },\n    { key: 'trip', label: t('client.paymentHistory.filter.trips'), icon: 'car' },\n    { key: 'topup', label: t('client.paymentHistory.filter.topups'), icon: 'add-circle' },\n    { key: 'refund', label: t('client.paymentHistory.filter.refunds'), icon: 'refresh-circle' },\n    { key: 'fee', label: t('client.paymentHistory.filter.fees'), icon: 'card' },\n    { key: 'package_purchase', label: t('client.paymentHistory.filter.packages'), icon: 'cube' },\n    { key: 'subscription_renewal', label: t('client.paymentHistory.filter.subscriptions'), icon: 'refresh' },\n    ...(isDriver ? [\n      { key: 'withdrawal', label: t('driver.balance.transactions.withdrawal'), icon: 'cash' },\n      { key: 'earnings', label: t('driver.balance.transactions.earnings'), icon: 'trending-up' },\n    ] : []),\n  ];\n\n  const statuses = [\n    { key: 'all', label: t('client.paymentHistory.filter.allStatuses'), icon: 'checkmark-circle' },\n    { key: 'completed', label: t('client.paymentHistory.status.completed'), icon: 'checkmark-circle' },\n    { key: 'pending', label: t('client.paymentHistory.status.pending'), icon: 'time' },\n    { key: 'failed', label: t('client.paymentHistory.status.failed'), icon: 'close-circle' }\n  ];\n\n  const dateRanges = [\n    { key: 'all', label: t('client.paymentHistory.filter.allTime'), icon: 'calendar' },\n    { key: 'today', label: t('client.paymentHistory.filter.today'), icon: 'today' },\n    { key: 'week', label: t('client.paymentHistory.filter.thisWeek'), icon: 'calendar-outline' },\n    { key: 'month', label: t('client.paymentHistory.filter.thisMonth'), icon: 'calendar' },\n    { key: 'year', label: t('client.paymentHistory.filter.thisYear'), icon: 'calendar' }\n  ];\n\n  const handleApply = () => {\n    onApply(filter);\n    onClose();\n  };\n\n  // Инициализация анимации\n  useEffect(() => {\n    if (visible) {\n      fadeAnim.setValue(1);\n    }\n  }, []);\n\n  // Анимация появления/скрытия\n  useEffect(() => {\n    if (visible) {\n      // Затемнение появляется сразу\n      fadeAnim.setValue(1);\n      // Модальное окно слайдится снизу вверх\n      Animated.spring(slideAnim, {\n        toValue: 0,\n        useNativeDriver: true,\n        tension: 60,\n        friction: 10,\n      }).start();\n    } else {\n      // Модальное окно слайдится сверху вниз\n      Animated.timing(slideAnim, {\n        toValue: 300,\n        duration: 250,\n        useNativeDriver: true,\n      }).start(() => {\n        fadeAnim.setValue(0);\n      });\n    }\n  }, [visible, fadeAnim, slideAnim]);\n\n  const handleReset = () => {\n    const resetFilter: PaymentFilter = {\n      type: 'all',\n      status: 'all',\n      dateRange: 'all'\n    };\n    setFilter(resetFilter);\n    onApply(resetFilter);\n    onClose();\n  };\n\n  return (\n    <Modal\n      visible={visible}\n      animationType=\"none\"\n      transparent={true}\n      onRequestClose={onClose}\n    >\n      <Animated.View style={[styles.overlay, { opacity: fadeAnim }]}>\n        <TouchableOpacity \n          style={styles.overlayTouchable} \n          activeOpacity={1} \n          onPress={onClose}\n        />\n        <Animated.View style={[\n          styles.modalContainer, \n          dynamicStyles.modalContainer, \n          styles.animatedModalContainer,\n          { transform: [{ translateY: slideAnim }] }\n        ]}>\n          <View style={styles.header}>\n            <Text style={[styles.title, dynamicStyles.title]}>\n              {t('client.paymentHistory.filter.title')}\n            </Text>\n            <TouchableOpacity onPress={onClose} style={styles.closeButton}>\n              <Ionicons name=\"close\" size={24} color={dynamicStyles.title.color} />\n            </TouchableOpacity>\n          </View>\n\n          <ScrollView showsVerticalScrollIndicator={false}>\n            {/* Тип платежа */}\n            <View style={styles.section}>\n              <Text style={[styles.sectionTitle, dynamicStyles.sectionTitle]}>\n                {t('client.paymentHistory.filter.paymentType')}\n              </Text>\n              {paymentTypes.map((type) => (\n                <TouchableOpacity\n                  key={type.key}\n                  style={[\n                    styles.optionContainer,\n                    filter.type === type.key \n                      ? [styles.optionContainerSelected, dynamicStyles.optionContainerSelected]\n                      : styles.optionContainerUnselected\n                  ]}\n                  onPress={() => setFilter({ ...filter, type: type.key as any })}\n                >\n                  <Ionicons \n                    name={type.icon as any} \n                    size={20} \n                    color={filter.type === type.key ? dynamicStyles.optionTextSelected.color : '#888'} \n                    style={styles.optionIcon}\n                  />\n                  <Text style={[\n                    styles.optionText,\n                    filter.type === type.key \n                      ? dynamicStyles.optionTextSelected\n                      : dynamicStyles.optionTextUnselected\n                  ]}>\n                    {type.label}\n                  </Text>\n                  {filter.type === type.key && (\n                    <Ionicons \n                      name=\"checkmark\" \n                      size={20} \n                      color={dynamicStyles.optionTextSelected.color} \n                      style={styles.checkmark}\n                    />\n                  )}\n                </TouchableOpacity>\n              ))}\n            </View>\n\n            {/* Статус */}\n            <View style={styles.section}>\n              <Text style={[styles.sectionTitle, dynamicStyles.sectionTitle]}>\n                {t('client.paymentHistory.filter.status')}\n              </Text>\n              {statuses.map((status) => (\n                <TouchableOpacity\n                  key={status.key}\n                  style={[\n                    styles.optionContainer,\n                    filter.status === status.key \n                      ? [styles.optionContainerSelected, dynamicStyles.optionContainerSelected]\n                      : styles.optionContainerUnselected\n                  ]}\n                  onPress={() => setFilter({ ...filter, status: status.key as any })}\n                >\n                  <Ionicons \n                    name={status.icon as any} \n                    size={20} \n                    color={filter.status === status.key ? dynamicStyles.optionTextSelected.color : '#888'} \n                    style={styles.optionIcon}\n                  />\n                  <Text style={[\n                    styles.optionText,\n                    filter.status === status.key \n                      ? dynamicStyles.optionTextSelected\n                      : dynamicStyles.optionTextUnselected\n                  ]}>\n                    {status.label}\n                  </Text>\n                  {filter.status === status.key && (\n                    <Ionicons \n                      name=\"checkmark\" \n                      size={20} \n                      color={dynamicStyles.optionTextSelected.color} \n                      style={styles.checkmark}\n                    />\n                  )}\n                </TouchableOpacity>\n              ))}\n            </View>\n\n            {/* Период */}\n            <View style={styles.section}>\n              <Text style={[styles.sectionTitle, dynamicStyles.sectionTitle]}>\n                {t('client.paymentHistory.filter.period')}\n              </Text>\n              {dateRanges.map((range) => (\n                <TouchableOpacity\n                  key={range.key}\n                  style={[\n                    styles.optionContainer,\n                    filter.dateRange === range.key \n                      ? [styles.optionContainerSelected, dynamicStyles.optionContainerSelected]\n                      : styles.optionContainerUnselected\n                  ]}\n                  onPress={() => setFilter({ ...filter, dateRange: range.key as any })}\n                >\n                  <Ionicons \n                    name={range.icon as any} \n                    size={20} \n                    color={filter.dateRange === range.key ? dynamicStyles.optionTextSelected.color : '#888'} \n                    style={styles.optionIcon}\n                  />\n                  <Text style={[\n                    styles.optionText,\n                    filter.dateRange === range.key \n                      ? dynamicStyles.optionTextSelected\n                      : dynamicStyles.optionTextUnselected\n                  ]}>\n                    {range.label}\n                  </Text>\n                  {filter.dateRange === range.key && (\n                    <Ionicons \n                      name=\"checkmark\" \n                      size={20} \n                      color={dynamicStyles.optionTextSelected.color} \n                      style={styles.checkmark}\n                    />\n                  )}\n                </TouchableOpacity>\n              ))}\n            </View>\n          </ScrollView>\n\n          {/* Кнопки */}\n          <View style={styles.buttonsContainer}>\n            <TouchableOpacity\n              style={[styles.resetButton, dynamicStyles.resetButton]}\n              onPress={handleReset}\n            >\n              <Text style={[styles.resetButtonText, dynamicStyles.resetButtonText]}>\n                {t('client.paymentHistory.filter.reset')}\n              </Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={[styles.applyButton, dynamicStyles.applyButton]}\n              onPress={handleApply}\n            >\n              <Text style={[styles.applyButtonText, dynamicStyles.applyButtonText]}>\n                {t('client.paymentHistory.filter.apply')}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </Animated.View>\n      </Animated.View>\n    </Modal>\n  );\n};\n\nexport default PaymentHistoryFilter; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/PhotoUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/ReturnTripCheckbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/RulesModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3330,3333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3330,3333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useCallback, useMemo } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, Modal, Animated } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { RulesModalStyles as styles, getRulesModalStyles } from '../styles/components/RulesModal.styles';\nimport { RulesSlidesStyles as slideStyles } from '../styles/components/RulesSlides.styles';\nimport { createSlideAnimation, slideAnimationConfig } from '../styles/animations';\nimport { useTheme } from '../context/ThemeContext';\nimport { useI18n } from '../hooks/useI18n';\n\ninterface RuleSlide {\n  id: number;\n  title: string;\n  icon: string;\n  content: string;\n  description: string;\n}\n\ninterface RulesModalProps {\n  visible: boolean;\n  onClose: () => void;\n}\n\nconst rulesSlides: RuleSlide[] = [\n  {\n    id: 1,\n    title: 'help.rules.booking.title',\n    icon: 'document-text',\n    content: 'help.rules.booking.content',\n    description: 'help.rules.booking.description',\n  },\n  {\n    id: 2,\n    title: 'help.rules.payment.title',\n    icon: 'card',\n    content: 'help.rules.payment.content',\n    description: 'help.rules.payment.description',\n  },\n  {\n    id: 3,\n    title: 'help.rules.safety.title',\n    icon: 'shield-checkmark',\n    content: 'help.rules.safety.content',\n    description: 'help.rules.safety.description',\n  },\n  {\n    id: 4,\n    title: 'help.rules.support.title',\n    icon: 'chatbubbles',\n    content: 'help.rules.support.content',\n    description: 'help.rules.support.description',\n  },\n];\n\nconst RulesModal: React.FC<RulesModalProps> = ({ visible, onClose }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const dynamicStyles = getRulesModalStyles(isDark);\n  const [activeSlide, setActiveSlide] = useState(0);\n  const slideAnim = useRef(new Animated.Value(0)).current;\n  const slides = useMemo(() => rulesSlides, []);\n\n  const openSlide = useCallback(\n    (slideIndex: number) => {\n      setActiveSlide(slideIndex);\n      Animated.spring(slideAnim, slideAnimationConfig.open).start();\n    },\n    [slideAnim]\n  );\n\n  const closeSlide = useCallback(() => {\n    Animated.spring(slideAnim, slideAnimationConfig.close).start(() => {\n      setActiveSlide(0);\n    });\n  }, [slideAnim]);\n\n  return (\n    <Modal visible={visible} animationType=\"slide\" presentationStyle=\"pageSheet\" onRequestClose={onClose}>\n      <View style={[styles.modalContainer, dynamicStyles.modalContainer]}>\n        <View style={[styles.modalHeader, dynamicStyles.modalHeader]}>\n          <TouchableOpacity onPress={onClose} style={styles.modalCloseButton}>\n            <Ionicons name=\"close\" size={24} color={isDark ? '#fff' : '#003366'} />\n          </TouchableOpacity>\n          <Text style={[styles.modalTitle, dynamicStyles.modalTitle]}>{t('help.rulesTitle')}</Text>\n          <View style={styles.placeholder} />\n        </View>\n\n        <ScrollView style={styles.modalContent} showsVerticalScrollIndicator={false}>\n          {slides.map((slide, index) => (\n            <TouchableOpacity\n              key={slide.id}\n              style={[slideStyles.slideItem, dynamicStyles.slideItem]}\n              onPress={() => openSlide(index)}\n              activeOpacity={0.7}\n            >\n              <View style={[slideStyles.slideIcon, dynamicStyles.slideIcon]}>\n                <Ionicons name={slide.icon as any} size={24} color={isDark ? '#fff' : '#003366'} />\n              </View>\n              <View style={slideStyles.slideInfo}>\n                <Text style={[slideStyles.slideTitle, dynamicStyles.slideTitle]}>{t(slide.title)}</Text>\n                <Text style={[slideStyles.slideDescription, dynamicStyles.slideContent]}>{t(slide.description)}</Text>\n              </View>\n              <Ionicons name=\"chevron-forward\" size={20} color={isDark ? '#666' : '#ccc'} />\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n\n        <Animated.View\n          style={[slideStyles.slideOverlay, dynamicStyles.slideOverlay, createSlideAnimation(slideAnim)]}\n        >\n          {activeSlide >= 0 && (\n            <View style={slideStyles.slideContent}>\n              <View style={[slideStyles.slideHeader, dynamicStyles.slideHeader]}>\n                <TouchableOpacity onPress={closeSlide} style={slideStyles.backButton}>\n                  <Ionicons name=\"arrow-back\" size={24} color={isDark ? '#fff' : '#003366'} />\n                </TouchableOpacity>\n                <Text style={[slideStyles.slideHeaderTitle, dynamicStyles.slideHeaderTitle]}>\n                  {t(slides[activeSlide]?.title)}\n                </Text>\n                <View style={styles.placeholder} />\n              </View>\n              <ScrollView style={slideStyles.slideScroll}>\n                <Text style={[slideStyles.slideText, dynamicStyles.slideText]}>\n                  {t(slides[activeSlide]?.content)}\n                </Text>\n              </ScrollView>\n            </View>\n          )}\n        </Animated.View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default RulesModal;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/SafetyHelpModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3435,3438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3435,3438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useCallback, useMemo } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, Modal, Animated } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { RulesModalStyles as styles, getRulesModalStyles } from '../styles/components/RulesModal.styles';\nimport { RulesSlidesStyles as slideStyles } from '../styles/components/RulesSlides.styles';\nimport { createSlideAnimation, slideAnimationConfig } from '../styles/animations';\nimport { useTheme } from '../context/ThemeContext';\nimport { useI18n } from '../hooks/useI18n';\n\ninterface SafetyHelpSlide {\n  id: number;\n  title: string;\n  icon: string;\n  content: string;\n  description: string;\n}\n\ninterface SafetyHelpModalProps {\n  visible: boolean;\n  onClose: () => void;\n}\n\nconst safetySlides: SafetyHelpSlide[] = [\n  {\n    id: 1,\n    title: 'help.safety.driverCheck.title',\n    icon: 'shield-checkmark',\n    content: 'help.safety.driverCheck.content',\n    description: 'help.safety.driverCheck.description',\n  },\n  {\n    id: 2,\n    title: 'help.safety.routeTracking.title',\n    icon: 'location',\n    content: 'help.safety.routeTracking.content',\n    description: 'help.safety.routeTracking.description',\n  },\n  {\n    id: 3,\n    title: 'help.safety.emergencyButton.title',\n    icon: 'warning',\n    content: 'help.safety.emergencyButton.content',\n    description: 'help.safety.emergencyButton.description',\n  },\n  {\n    id: 4,\n    title: 'help.safety.ratingSystem.title',\n    icon: 'star',\n    content: 'help.safety.ratingSystem.content',\n    description: 'help.safety.ratingSystem.description',\n  },\n];\n\nconst SafetyHelpModal: React.FC<SafetyHelpModalProps> = ({ visible, onClose }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const dynamicStyles = getRulesModalStyles(isDark);\n  const [activeSlide, setActiveSlide] = useState(0);\n  const slideAnim = useRef(new Animated.Value(0)).current;\n  const slides = useMemo(() => safetySlides, []);\n\n  const openSlide = useCallback(\n    (slideIndex: number) => {\n      setActiveSlide(slideIndex);\n      Animated.spring(slideAnim, slideAnimationConfig.open).start();\n    },\n    [slideAnim]\n  );\n\n  const closeSlide = useCallback(() => {\n    Animated.spring(slideAnim, slideAnimationConfig.close).start(() => {\n      setActiveSlide(0);\n    });\n  }, [slideAnim]);\n\n  return (\n    <Modal visible={visible} animationType=\"slide\" presentationStyle=\"pageSheet\" onRequestClose={onClose}>\n      <View style={[styles.modalContainer, dynamicStyles.modalContainer]}>\n        <View style={[styles.modalHeader, dynamicStyles.modalHeader]}>\n          <TouchableOpacity onPress={onClose} style={styles.modalCloseButton}>\n            <Ionicons name=\"close\" size={24} color={isDark ? '#fff' : '#003366'} />\n          </TouchableOpacity>\n          <Text style={[styles.modalTitle, dynamicStyles.modalTitle]}>{t('help.safetyTitle')}</Text>\n          <View style={styles.placeholder} />\n        </View>\n\n        <ScrollView style={styles.modalContent} showsVerticalScrollIndicator={false}>\n          {slides.map((slide, index) => (\n            <TouchableOpacity\n              key={slide.id}\n              style={[slideStyles.slideItem, dynamicStyles.slideItem]}\n              onPress={() => openSlide(index)}\n              activeOpacity={0.7}\n            >\n              <View style={[slideStyles.slideIcon, dynamicStyles.slideIcon]}>\n                <Ionicons name={slide.icon as any} size={24} color={isDark ? '#fff' : '#003366'} />\n              </View>\n              <View style={slideStyles.slideInfo}>\n                <Text style={[slideStyles.slideTitle, dynamicStyles.slideTitle]}>{t(slide.title)}</Text>\n                <Text style={[slideStyles.slideDescription, dynamicStyles.slideContent]}>{t(slide.description)}</Text>\n              </View>\n              <Ionicons name=\"chevron-forward\" size={20} color={isDark ? '#666' : '#ccc'} />\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n\n        <Animated.View\n          style={[slideStyles.slideOverlay, dynamicStyles.slideOverlay, createSlideAnimation(slideAnim)]}\n        >\n          {activeSlide >= 0 && (\n            <View style={slideStyles.slideContent}>\n              <View style={[slideStyles.slideHeader, dynamicStyles.slideHeader]}>\n                <TouchableOpacity onPress={closeSlide} style={slideStyles.backButton}>\n                  <Ionicons name=\"arrow-back\" size={24} color={isDark ? '#fff' : '#003366'} />\n                </TouchableOpacity>\n                <Text style={[slideStyles.slideHeaderTitle, dynamicStyles.slideHeaderTitle]}>\n                  {t(slides[activeSlide]?.title)}\n                </Text>\n                <View style={styles.placeholder} />\n              </View>\n              <ScrollView style={slideStyles.slideScroll}>\n                <Text style={[slideStyles.slideText, dynamicStyles.slideText]}>\n                  {t(slides[activeSlide]?.content)}\n                </Text>\n              </ScrollView>\n            </View>\n          )}\n        </Animated.View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default SafetyHelpModal; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/Select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/SocialAuthButtons.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Text' is defined but never used.","line":2,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MaterialCommunityIcons' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":17,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, TouchableOpacity, Text } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { SocialAuthService } from '../services/SocialAuthService';\nimport { SocialAuthButtonsStyles } from '../styles/components/SocialAuthButtons.styles';\nimport { useI18n } from '../hooks/useI18n';\nimport GoogleIcon from './GoogleIcon';\n\ninterface SocialAuthButtonsProps {\n  onPress?: (provider: 'google' | 'facebook' | 'apple') => Promise<void>;\n  onSuccess?: (user: Record<string, unknown>) => void;\n  onError?: (error: string) => void;\n}\n\nexport default function SocialAuthButtons({ onPress, onSuccess, onError }: SocialAuthButtonsProps) {\n  const { t } = useI18n();\n  const handleGoogleSignIn = async () => {\n    if (onPress) {\n      await onPress('google');\n      return;\n    }\n    \n    try {\n      const result = await SocialAuthService.signInWithGoogle();\n      if (result.success) {\n        onSuccess?.(result.user as unknown as Record<string, unknown>);\n      } else {\n        onError?.(result.error || 'Ошибка входа через Google');\n      }\n    } catch {\n      onError?.('Ошибка входа через Google');\n    }\n  };\n\n  const handleFacebookSignIn = async () => {\n    if (onPress) {\n      await onPress('facebook');\n      return;\n    }\n    \n    try {\n      const result = await SocialAuthService.signInWithFacebook();\n      if (result.success) {\n        onSuccess?.(result.user as unknown as Record<string, unknown>);\n      } else {\n        onError?.(result.error || 'Ошибка входа через Facebook');\n      }\n    } catch {\n      onError?.('Ошибка входа через Facebook');\n    }\n  };\n\n  const handleAppleSignIn = async () => {\n    if (onPress) {\n      await onPress('apple');\n      return;\n    }\n    \n    try {\n      const result = await SocialAuthService.signInWithApple();\n      if (result.success) {\n        onSuccess?.(result.user as unknown as Record<string, unknown>);\n      } else {\n        onError?.(result.error || 'Ошибка входа через Apple');\n      }\n    } catch {\n      onError?.('Ошибка входа через Apple');\n    }\n  };\n\n  return (\n    <View style={SocialAuthButtonsStyles.container}> \n      <TouchableOpacity\n        style={SocialAuthButtonsStyles.googleButton}\n        onPress={handleGoogleSignIn}\n      >\n        <GoogleIcon size={28} />\n      </TouchableOpacity>\n\n      <TouchableOpacity\n        style={SocialAuthButtonsStyles.facebookButton}\n        onPress={handleFacebookSignIn}\n      >\n        <Ionicons name=\"logo-facebook\" size={28} color=\"#fff\" />\n      </TouchableOpacity>\n\n      <TouchableOpacity\n        style={SocialAuthButtonsStyles.appleButton}\n        onPress={handleAppleSignIn}\n      >\n        <Ionicons name=\"logo-apple\" size={28} color=\"#fff\" />\n      </TouchableOpacity>\n    </View>\n  );\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/TimePicker.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1294,1297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1294,1297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatDisplayTime' is assigned a value but never used.","line":59,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, Platform, Modal } from 'react-native';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../context/ThemeContext';\nimport { getCurrentColors } from '../constants/colors';\nimport { StyleSheet } from 'react-native';\n\ninterface TimePickerProps {\n  value?: string; // формат \"HH:mm\"\n  onChange: (time: string) => void;\n  onClear?: () => void; // функция для очистки времени\n  placeholder?: string;\n  indicatorColor?: string;\n  title?: string;\n  dayLabel?: string; // отдельно день недели после тире\n}\n\nconst TimePicker: React.FC<TimePickerProps> = ({\n  value,\n  onChange,\n  onClear,\n  placeholder = 'Выберите время',\n  indicatorColor,\n  title,\n  dayLabel\n}) => {\n  const { isDark } = useTheme();\n  const colors = getCurrentColors(isDark);\n  const [showPicker, setShowPicker] = useState(false);\n  const [currentTime, setCurrentTime] = useState(() => {\n    if (value) {\n      const [hours, minutes] = value.split(':');\n      const date = new Date();\n      date.setHours(parseInt(hours, 10));\n      date.setMinutes(parseInt(minutes, 10));\n      return date;\n    }\n    return new Date();\n  });\n\n  const handleTimeChange = (event: any, selectedTime?: Date) => {\n    // На Android закрываем только при нажатии \"ОК\"\n    if (Platform.OS === 'android') {\n      if (event.type === 'set' && selectedTime) {\n        setShowPicker(false);\n        setCurrentTime(selectedTime);\n        const hours = selectedTime.getHours().toString().padStart(2, '0');\n        const minutes = selectedTime.getMinutes().toString().padStart(2, '0');\n        onChange(`${hours}:${minutes}`);\n      }\n    } \n    // На iOS обновляем время без закрытия модалки\n    else if (selectedTime) {\n      setCurrentTime(selectedTime);\n    }\n  };\n\n  const formatDisplayTime = (timeString?: string) => {\n    if (!timeString) return title || placeholder;\n    return timeString;\n  };\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        onPress={() => setShowPicker(true)}\n        style={[\n          styles.button,\n          {\n            backgroundColor: isDark ? colors.surface : colors.background,\n            borderColor: colors.border,\n            borderWidth: 1\n          }\n        ]}\n      >\n        <View style={styles.buttonContent}>\n          {indicatorColor && (\n            <>\n              <View style={[styles.indicator, { backgroundColor: indicatorColor }]} />\n              <Text style={[styles.dash, { color: colors.text }]}>—</Text>\n            </>\n          )}\n          {dayLabel && (\n            <Text style={[styles.dayLabel, { color: colors.text }]}>\n              {dayLabel}\n            </Text>\n          )}\n          <Text style={[\n            styles.timeText,\n            { color: value ? colors.text : colors.textSecondary }\n          ]}>\n            {value || placeholder}\n          </Text>\n        </View>\n        \n        {/* Крестик для удаления - показываем только когда есть значение */}\n        {value && onClear && (\n          <TouchableOpacity\n            style={styles.clearButton}\n            onPress={(e) => {\n              e.stopPropagation(); // Предотвращаем открытие picker'а\n              onClear();\n            }}\n            hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}\n          >\n            <Ionicons \n              name=\"close-circle\" \n              size={18} \n              color={colors.textSecondary} \n            />\n          </TouchableOpacity>\n        )}\n        <Ionicons \n          name=\"time-outline\" \n          size={20} \n          color={colors.text} \n        />\n      </TouchableOpacity>\n\n      {showPicker && (\n        Platform.OS === 'ios' ? (\n          <Modal\n            transparent={true}\n            animationType=\"fade\"\n            visible={showPicker}\n            onRequestClose={() => {}}\n          >\n            <View style={styles.modalOverlay} onTouchEnd={(e) => e.stopPropagation()}>\n              <View style={[\n                styles.modalContent,\n                { backgroundColor: isDark ? colors.surface : colors.background }\n              ]}>\n                <View style={styles.modalHeader}>\n                  <TouchableOpacity onPress={() => setShowPicker(false)}>\n                    <Text style={[styles.modalButtonText, { color: colors.primary }]}>\n                      Отмена\n                    </Text>\n                  </TouchableOpacity>\n                  <Text style={[styles.modalTitle, { color: colors.text }]}>\n                    Выберите время\n                  </Text>\n                  <TouchableOpacity onPress={() => {\n                    setShowPicker(false);\n                    const hours = currentTime.getHours().toString().padStart(2, '0');\n                    const minutes = currentTime.getMinutes().toString().padStart(2, '0');\n                    onChange(`${hours}:${minutes}`);\n                  }}>\n                    <Text style={[styles.modalButtonText, { color: colors.primary }]}>\n                      Готово\n                    </Text>\n                  </TouchableOpacity>\n                </View>\n                <DateTimePicker\n                  value={currentTime}\n                  mode=\"time\"\n                  display=\"spinner\"\n                  onChange={handleTimeChange}\n                  textColor={colors.text}\n                  style={{ width: '100%', alignSelf: 'center' }}\n                />\n              </View>\n            </View>\n          </Modal>\n        ) : (\n          <DateTimePicker\n            value={currentTime}\n            mode=\"time\"\n            display=\"default\"\n            onChange={handleTimeChange}\n          />\n        )\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n  },\n  button: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 12,\n    borderRadius: 8,\n  },\n  buttonContent: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  indicator: {\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n    marginRight: 8,\n  },\n  dash: {\n    fontSize: 16,\n    marginRight: 8,\n  },\n  dayLabel: {\n    fontSize: 15,\n    marginRight: 8,\n  },\n  timeText: {\n    fontSize: 15,\n  },\n  clearButton: {\n    marginRight: 8,\n    padding: 2,\n    alignSelf: 'center',\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    pointerEvents: 'auto',\n  },\n  modalContent: {\n    borderRadius: 16,\n    paddingBottom: Platform.OS === 'ios' ? 20 : 0,\n    width: '90%',\n    backgroundColor: '#fff',\n    alignSelf: 'center',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderBottomColor: 'rgba(0, 0, 0, 0.1)',\n  },\n  modalTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  modalButtonText: {\n    fontSize: 16,\n  },\n});\n\nexport default TimePicker;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/ToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/TripsFilter.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fadeAnim' and 'visible'. Either include them or remove the dependency array.","line":42,"column":6,"nodeType":"ArrayExpression","endLine":42,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fadeAnim, visible]","fix":{"range":[1283,1285],"text":"[fadeAnim, visible]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4686,4689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4686,4689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4782,4785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4782,4785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6416,6419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6416,6419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6511,6514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6511,6514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { View, Text, TouchableOpacity, Modal, ScrollView, Animated } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../context/ThemeContext';\nimport { useI18n } from '../hooks/useI18n';\nimport { TripsFilterStyles as styles, getTripsFilterStyles } from '../styles/components/TripsFilter.styles';\n\nexport interface TripFilter {\n  status: 'all' | 'completed' | 'cancelled' | 'scheduled';\n  dateRange: 'all' | 'today' | 'week' | 'month' | 'year';\n}\n\ninterface TripsFilterProps {\n  visible: boolean;\n  onClose: () => void;\n  onApply: (filter: TripFilter) => void;\n  currentFilter: TripFilter;\n}\n\nconst TripsFilter: React.FC<TripsFilterProps> = ({\n  visible,\n  onClose,\n  onApply,\n  currentFilter\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const dynamicStyles = getTripsFilterStyles(isDark);\n  const [filter, setFilter] = useState<TripFilter>({\n    status: currentFilter.status,\n    dateRange: currentFilter.dateRange\n  });\n  \n  const slideAnim = useRef(new Animated.Value(300)).current;\n  const fadeAnim = useRef(new Animated.Value(0)).current;\n  \n  // Инициализация анимации\n  useEffect(() => {\n    if (visible) {\n      fadeAnim.setValue(1);\n    }\n  }, []);\n\n\n\n  const statuses = [\n    { key: 'all', label: t('client.trips.filter.allStatuses'), icon: 'checkmark-circle' },\n    { key: 'completed', label: t('client.trips.status.completed'), icon: 'checkmark-circle' },\n    { key: 'cancelled', label: t('client.trips.status.cancelled'), icon: 'close-circle' },\n    { key: 'scheduled', label: t('client.trips.status.scheduled'), icon: 'time' }\n  ];\n\n  const dateRanges = [\n    { key: 'all', label: t('client.trips.filter.allTime'), icon: 'calendar' },\n    { key: 'today', label: t('client.trips.filter.today'), icon: 'today' },\n    { key: 'week', label: t('client.trips.filter.thisWeek'), icon: 'calendar-outline' },\n    { key: 'month', label: t('client.trips.filter.thisMonth'), icon: 'calendar' },\n    { key: 'year', label: t('client.trips.filter.thisYear'), icon: 'calendar' }\n  ];\n\n  const handleApply = () => {\n    onApply(filter);\n    onClose();\n  };\n\n  // Анимация появления/скрытия\n  useEffect(() => {\n    if (visible) {\n      // Затемнение появляется сразу\n      fadeAnim.setValue(1);\n      // Модальное окно слайдится снизу вверх\n      Animated.spring(slideAnim, {\n        toValue: 0,\n        useNativeDriver: true,\n        tension: 60,\n        friction: 10,\n      }).start();\n    } else {\n      // Модальное окно слайдится сверху вниз\n      Animated.timing(slideAnim, {\n        toValue: 300,\n        duration: 250,\n        useNativeDriver: true,\n      }).start(() => {\n        fadeAnim.setValue(0);\n      });\n    }\n  }, [visible, fadeAnim, slideAnim]);\n\n  const handleReset = () => {\n    const resetFilter: TripFilter = {\n      status: 'all',\n      dateRange: 'all'\n    };\n    setFilter(resetFilter);\n    onApply(resetFilter);\n    onClose();\n  };\n\n  return (\n    <Modal\n      visible={visible}\n      animationType=\"none\"\n      transparent={true}\n      onRequestClose={onClose}\n    >\n      <Animated.View style={[styles.overlay, { opacity: fadeAnim }]}>\n        <TouchableOpacity \n          style={styles.overlayTouchable} \n          activeOpacity={1} \n          onPress={onClose}\n        />\n        <Animated.View style={[\n          styles.modalContainer, \n          dynamicStyles.modalContainer, \n          styles.animatedModalContainer,\n          { transform: [{ translateY: slideAnim }] }\n        ]}>\n          <View style={styles.header}>\n            <Text style={[styles.title, dynamicStyles.title]}>\n              {t('client.trips.filter.title')}\n            </Text>\n            <TouchableOpacity onPress={onClose} style={styles.closeButton}>\n              <Ionicons name=\"close\" size={24} color={dynamicStyles.title.color} />\n            </TouchableOpacity>\n          </View>\n\n          <ScrollView showsVerticalScrollIndicator={false}>\n            {/* Статус */}\n            <View style={styles.section}>\n              <Text style={[styles.sectionTitle, dynamicStyles.sectionTitle]}>\n                {t('client.trips.filter.status')}\n              </Text>\n              {statuses.map((status) => (\n                <TouchableOpacity\n                  key={status.key}\n                  style={[\n                    styles.optionContainer,\n                    filter.status === status.key \n                      ? [styles.optionContainerSelected, dynamicStyles.optionContainerSelected]\n                      : styles.optionContainerUnselected\n                  ]}\n                  onPress={() => setFilter({ ...filter, status: status.key as any })}\n                >\n                  <Ionicons \n                    name={status.icon as any} \n                    size={20} \n                    color={filter.status === status.key ? dynamicStyles.optionTextSelected.color : '#888'} \n                    style={styles.optionIcon}\n                  />\n                  <Text style={[\n                    styles.optionText,\n                    filter.status === status.key \n                      ? dynamicStyles.optionTextSelected\n                      : dynamicStyles.optionTextUnselected\n                  ]}>\n                    {status.label}\n                  </Text>\n                  {filter.status === status.key && (\n                    <Ionicons \n                      name=\"checkmark\" \n                      size={20} \n                      color={dynamicStyles.optionTextSelected.color} \n                      style={styles.checkmark}\n                    />\n                  )}\n                </TouchableOpacity>\n              ))}\n            </View>\n\n            {/* Период */}\n            <View style={styles.section}>\n              <Text style={[styles.sectionTitle, dynamicStyles.sectionTitle]}>\n                {t('client.trips.filter.period')}\n              </Text>\n              {dateRanges.map((range) => (\n                <TouchableOpacity\n                  key={range.key}\n                  style={[\n                    styles.optionContainer,\n                    filter.dateRange === range.key \n                      ? [styles.optionContainerSelected, dynamicStyles.optionContainerSelected]\n                      : styles.optionContainerUnselected\n                  ]}\n                  onPress={() => setFilter({ ...filter, dateRange: range.key as any })}\n                >\n                  <Ionicons \n                    name={range.icon as any} \n                    size={20} \n                    color={filter.dateRange === range.key ? dynamicStyles.optionTextSelected.color : '#888'} \n                    style={styles.optionIcon}\n                  />\n                  <Text style={[\n                    styles.optionText,\n                    filter.dateRange === range.key \n                      ? dynamicStyles.optionTextSelected\n                      : dynamicStyles.optionTextUnselected\n                  ]}>\n                    {range.label}\n                  </Text>\n                  {filter.dateRange === range.key && (\n                    <Ionicons \n                      name=\"checkmark\" \n                      size={20} \n                      color={dynamicStyles.optionTextSelected.color} \n                      style={styles.checkmark}\n                    />\n                  )}\n                </TouchableOpacity>\n              ))}\n            </View>\n          </ScrollView>\n\n          {/* Кнопки */}\n          <View style={styles.buttonsContainer}>\n            <TouchableOpacity\n              style={[styles.resetButton, dynamicStyles.resetButton]}\n              onPress={handleReset}\n            >\n              <Text style={[styles.resetButtonText, dynamicStyles.resetButtonText]}>\n                {t('client.trips.filter.reset')}\n              </Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={[styles.applyButton, dynamicStyles.applyButton]}\n              onPress={handleApply}\n            >\n              <Text style={[styles.applyButtonText, dynamicStyles.applyButtonText]}>\n                {t('client.trips.filter.apply')}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </Animated.View>\n      </Animated.View>\n    </Modal>\n  );\n};\n\nexport default TripsFilter; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/VipPackages.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentPeriod' is defined but never used.","line":53,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, Animated, Easing } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useTheme } from '../context/ThemeContext';\nimport { useI18n } from '../hooks/useI18n';\nimport { colors } from '../constants/colors';\nimport { VipPackagesStyles, getVipPackagesColors, getPackageCardColors } from '../styles/components/VipPackages.styles';\n// getPremiumPackages removed - using hardcoded packages\nconst getPremiumPackages = () => [\n  {\n    id: 'basic',\n    name: 'Basic Package',\n    price: 9.99,\n    period: 'month',\n    features: ['Feature 1', 'Feature 2'],\n    icon: 'star-outline'\n  },\n  {\n    id: 'premium',\n    name: 'Premium Package', \n    price: 19.99,\n    period: 'month',\n    features: ['Feature 1', 'Feature 2', 'Feature 3'],\n    icon: 'star'\n  }\n];\nimport { \n  PACKAGE_FEATURE_ICONS, \n  CAROUSEL_CONFIG, \n  ANIMATION_CONFIG, \n  DISCOUNT_GRADIENT, \n  ICON_SIZES, \n  COLORS,\n  PackageFeature,\n  getPackageFeatures\n} from '../constants/vipPackages';\nimport { formatPackagePrice, getPackageColor } from '../utils/packageVisuals';\n\ninterface VipPackagesProps {\n  onSelectPackage: (packageId: string, price: number, period: 'month' | 'year') => void;\n  selectedPackage?: string;\n  currentPackage?: string;\n  currentPeriod?: 'month' | 'year';\n  selectedPeriod?: 'month' | 'year';\n  onPeriodChange?: (period: 'month' | 'year') => void;\n  isSubscriptionActive?: boolean;\n}\n\nconst VipPackages: React.FC<VipPackagesProps> = ({ \n  onSelectPackage, \n  currentPackage, \n  currentPeriod,\n  selectedPeriod: externalSelectedPeriod, \n  onPeriodChange,\n  isSubscriptionActive = true\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const currentColors = isDark ? colors.dark : colors.light;\n  const dynamicStyles = getVipPackagesColors(isDark);\n  const [selectedPeriod, setSelectedPeriod] = useState<'month' | 'year'>(externalSelectedPeriod || 'month');\n  // Удаляем неиспользуемую переменную currentIndex\n\n  // Один Animated.Value для плавного перехода\n  const periodAnim = useRef(new Animated.Value(0)).current;\n\n  useEffect(() => {\n    Animated.timing(periodAnim, {\n      toValue: selectedPeriod === 'year' ? 1 : 0,\n      duration: ANIMATION_CONFIG.PERIOD_SWITCH_DURATION,\n      easing: Easing.inOut(Easing.ease),\n      useNativeDriver: false,\n    }).start();\n    \n    // Уведомляем родительский компонент об изменении периода\n    if (onPeriodChange) {\n      onPeriodChange(selectedPeriod);\n    }\n  }, [selectedPeriod, onPeriodChange, periodAnim]);\n\n  const packages = getPremiumPackages();\n\n  // Функции для каждого пакета\n  const packageFeatures = getPackageFeatures(t);\n\n  // Функция для отображения значения функции\n  const renderFeatureValue = (value: string | boolean, isHighlighted: boolean = false) => {\n    if (typeof value === 'boolean') {\n      return value ? (\n        <View style={VipPackagesStyles.iconContainer}>\n          <Ionicons \n            name=\"checkmark-circle\" \n            size={ICON_SIZES.CHECKMARK} \n            color={isHighlighted ? (currentColors.primary || '#3B82F6') : (COLORS.SUCCESS || '#10B981')} \n          />\n        </View>\n      ) : (\n        <View style={[VipPackagesStyles.iconContainer, VipPackagesStyles.crossContainer]}>\n          <View style={VipPackagesStyles.crossCircle}>\n            <Ionicons \n              name=\"close\" \n              size={ICON_SIZES.CLOSE} \n              color={COLORS.ERROR || '#EF4444'} \n            />\n          </View>\n        </View>\n      );\n    }\n    \n    return (\n      <Text style={[\n        VipPackagesStyles.featureValue,\n        { color: isHighlighted ? (currentColors.primary || '#3B82F6') : (currentColors.textSecondary || '#6B7280') }\n      ]}>\n        {value}\n      </Text>\n    );\n  };\n\n  // Функция для получения иконки функции по индексу\n  const getFeatureIcon = (featureIndex: number) => {\n    return PACKAGE_FEATURE_ICONS[featureIndex] || { name: 'ellipse-outline', color: '#6B7280' };\n  };\n\n  // Функция для получения значения функции по ID пакета\n  const getFeatureValue = (feature: PackageFeature, packageId: string) => {\n    // Убираем суффикс периода из ID\n    const basePackageId = packageId.replace(/_month$|_year$/, '');\n    \n    switch (basePackageId) {\n      case 'free': return feature.free;\n      case 'plus': return feature.plus;\n      case 'premium': return feature.premium;\n      case 'premiumPlus': return feature.premiumPlus;\n      default: return feature.free || false;\n    }\n  };\n\n  // Функция для определения активного пакета с учетом периода\n  const isPackageActive = (packageId: string) => {\n    // Бесплатный пакет активен всегда (и в месячном, и в годовом периоде)\n    if (packageId === 'free') {\n      const isActive = currentPackage === 'free';\n      \n      return isActive;\n    }\n    \n    // Убираем суффикс периода из packageId для сравнения\n    const basePackageId = packageId.replace(/_month$|_year$/, '');\n    \n    // Для платных пакетов проверяем базовое название пакета\n    // Галочка и бордер для активного пакета независимо от периода\n    const isActive = currentPackage === basePackageId && isSubscriptionActive;\n    \n    return isActive;\n  };\n\n  return (\n    <View style={VipPackagesStyles.container}>\n      {/* Период подписки */}\n      <View style={[VipPackagesStyles.periodSwitchContainer, dynamicStyles.periodSwitchContainer]}>\n        <TouchableOpacity\n          style={VipPackagesStyles.periodButtonWrapLeft}\n          onPress={() => setSelectedPeriod('month')}\n          activeOpacity={0.9}\n        >\n          <Animated.View\n            style={[\n              VipPackagesStyles.periodButton,\n              selectedPeriod !== 'month' && VipPackagesStyles.periodButtonInactive,\n              selectedPeriod === 'month' && {\n                backgroundColor: currentColors.primary,\n                shadowOpacity: 0.08,\n                elevation: 2,\n              },\n            ]}\n          >\n            <Text style={[\n              VipPackagesStyles.periodButtonText,\n              { color: selectedPeriod === 'month' ? '#fff' : currentColors.text },\n            ]}>\n              {t('premium.periods.month')}\n            </Text>\n          </Animated.View>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={VipPackagesStyles.periodButtonWrapRight}\n          onPress={() => setSelectedPeriod('year')}\n          activeOpacity={0.9}\n        >\n          <Animated.View\n            style={[\n              VipPackagesStyles.periodButton,\n              selectedPeriod !== 'year' && VipPackagesStyles.periodButtonInactive,\n              selectedPeriod === 'year' && {\n                backgroundColor: currentColors.primary,\n                shadowOpacity: 0.08,\n                elevation: 2,\n              },\n            ]}\n          >\n            <View style={VipPackagesStyles.yearButtonContent}>\n              <Text style={[\n                VipPackagesStyles.periodButtonText,\n                { color: selectedPeriod === 'year' ? '#fff' : currentColors.text },\n              ]}>\n                {t('premium.periods.year')}\n              </Text>\n              {selectedPeriod === 'year' && (\n                <LinearGradient\n                  colors={DISCOUNT_GRADIENT.COLORS}\n                  start={DISCOUNT_GRADIENT.START}\n                  end={DISCOUNT_GRADIENT.END}\n                  style={VipPackagesStyles.yearDiscountBadge}\n                >\n                  <Text style={VipPackagesStyles.yearDiscountText}>\n                    -25%\n                  </Text>\n                </LinearGradient>\n              )}\n            </View>\n          </Animated.View>\n        </TouchableOpacity>\n      </View>\n\n      {/* Пакеты */}\n      <View style={VipPackagesStyles.carouselContainer}>\n        <ScrollView \n          horizontal \n          showsHorizontalScrollIndicator={false}\n          contentContainerStyle={VipPackagesStyles.carouselContent}\n          snapToInterval={CAROUSEL_CONFIG.CARD_WIDTH + 20}\n          decelerationRate={0}\n          snapToAlignment=\"center\"\n          pagingEnabled={false}\n          onMomentumScrollEnd={() => {\n            // Обработка окончания прокрутки карусели\n            // Можно добавить логику для отслеживания текущего индекса\n          }}\n        >\n          {/* Отступ слева для центрирования первого элемента */}\n          <View style={{ width: 10 }} />\n          \n          {packages.map((pkg, index) => (\n            <React.Fragment key={pkg.id}>\n              <TouchableOpacity\n                style={[\n                  VipPackagesStyles.packageCard, \n                  getPackageCardColors(pkg.id, isDark),\n                  isPackageActive(pkg.id) && VipPackagesStyles.selectedPackageCard,\n                ]}\n                onPress={() => onSelectPackage(pkg.id, pkg.price, selectedPeriod)}\n                activeOpacity={0.8}\n              >\n                <View style={VipPackagesStyles.packageHeader}>\n                  <View style={{ flexDirection: 'row', alignItems: 'center', flex: 1 }}>\n                    <Ionicons \n                      name={pkg.icon as keyof typeof Ionicons.glyphMap} \n                      size={28} \n                      color={getPackageColor(pkg.id)} \n                      style={{ marginRight: 10 }}\n                    />\n                    <Text style={[VipPackagesStyles.packageTitle, dynamicStyles.packageTitle]}>\n                      {pkg.name}\n                    </Text>\n                  </View>\n                  {isPackageActive(pkg.id) && (\n                    <View style={VipPackagesStyles.selectedIndicator}>\n                      <Ionicons name=\"checkmark-circle\" size={ICON_SIZES.SELECTED_INDICATOR} color={COLORS.PRIMARY || '#3B82F6'} />\n                    </View>\n                  )}\n                </View>\n\n                <View style={VipPackagesStyles.featuresContainer}>\n                  {packageFeatures.map((feature, featureIndex) => {\n                    const featureIcon = getFeatureIcon(featureIndex);\n                    const isLastRow = featureIndex === packageFeatures.length - 1;\n                    return (\n                      <View key={featureIndex} style={[\n                        VipPackagesStyles.featureRow,\n                        isLastRow && { borderBottomWidth: 0 }\n                      ]}>\n                        <View style={VipPackagesStyles.featureNameContainer}>\n                          <View style={[VipPackagesStyles.iconWrapper, { backgroundColor: (featureIcon.color || '#6B7280') + '15' }]}>\n                            <Ionicons \n                              name={(featureIcon.name as keyof typeof Ionicons.glyphMap) || 'ellipse-outline'} \n                              size={ICON_SIZES.FEATURE_ICON} \n                              color={featureIcon.color || '#6B7280'} \n                            />\n                          </View>\n                          <Text style={[VipPackagesStyles.featureName, { color: currentColors.textSecondary || '#6B7280' }]}>\n                            {feature.name}\n                          </Text>\n                        </View>\n                        <View style={VipPackagesStyles.featureValueContainer}>\n                          {renderFeatureValue(\n                            getFeatureValue(feature, pkg.id), \n                            pkg.id !== 'free'\n                          )}\n                        </View>\n                      </View>\n                    );\n                  })}\n                </View>\n\n                <View style={[VipPackagesStyles.priceButton, dynamicStyles.priceButton]}>\n                  <View style={VipPackagesStyles.priceContainer}>\n                    <Text style={VipPackagesStyles.priceText}>\n                      {pkg.price === 0 ? t('premium.packages.free') : formatPackagePrice(pkg.price)}\n                    </Text>\n                  </View>\n                </View>\n              </TouchableOpacity>\n              \n              {/* Отступ между пакетами */}\n              {index < packages.length - 1 && <View style={{ width: 22 }} />}\n            </React.Fragment>\n          ))}\n        \n        {/* Отступ справа для центрирования последнего элемента */}\n        <View style={{ width: 10 }} />\n        \n        </ScrollView>\n        \n\n      </View>\n    </View>\n  );\n};\n\nexport default VipPackages; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/VisaIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/address/AddressForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/address/AddressMapModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/address/AddressValidationIndicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[403,406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[403,406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[418,421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[418,421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[433,436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[433,436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[453,456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[453,456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[475,478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[475,478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[497,500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[497,500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[523,526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[523,526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity, ActivityIndicator } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\ninterface AddressValidationIndicatorProps {\n  status: 'idle' | 'checking' | 'valid' | 'invalid';\n  onRetry?: () => void;\n  messages: {\n    checking: string;\n    valid: string;\n    invalid: string;\n    retry: string;\n  };\n  styles: {\n    container: any;\n    item: any;\n    text: any;\n    textValid: any;\n    textInvalid: any;\n    retryButton: any;\n    retryButtonText: any;\n  };\n}\n\nconst AddressValidationIndicator: React.FC<AddressValidationIndicatorProps> = ({\n  status,\n  onRetry,\n  messages,\n  styles,\n}) => {\n  if (status === 'idle') {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      {status === 'checking' && (\n        <View style={styles.item}>\n          <ActivityIndicator size=\"small\" color=\"#2196f3\" />\n          <Text style={styles.text}>{messages.checking}</Text>\n        </View>\n      )}\n      {status === 'valid' && (\n        <View style={styles.item}>\n          <Ionicons name=\"checkmark-circle\" size={16} color=\"#4caf50\" />\n          <Text style={[styles.text, styles.textValid]}>{messages.valid}</Text>\n        </View>\n      )}\n      {status === 'invalid' && (\n        <>\n          <View style={styles.item}>\n            <Ionicons name=\"close-circle\" size={16} color=\"#f44336\" />\n            <Text style={[styles.text, styles.textInvalid]}>{messages.invalid}</Text>\n          </View>\n          {onRetry && (\n            <TouchableOpacity style={styles.retryButton} onPress={onRetry}>\n              <Text style={styles.retryButtonText}>{messages.retry}</Text>\n            </TouchableOpacity>\n          )}\n        </>\n      )}\n    </View>\n  );\n};\n\nexport default AddressValidationIndicator;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/driver/DriverInfoBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'role' is assigned a value but never used.","line":16,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":60}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { createDriverInfoBarStyles } from '../../styles/components/driver/DriverInfoBar.styles';\n\nexport type DriverInfoBarProps = {\n  role?: 'client' | 'driver';\n  schedule: string;\n  price: string;\n  distance: string;\n  timeOrChildType: string;\n  onPress?: () => void;\n};\n\nconst DriverInfoBar: React.FC<DriverInfoBarProps> = ({ role = 'client', schedule, price, distance, timeOrChildType, onPress }) => {\n  const { isDark } = useTheme();\n  const styles = createDriverInfoBarStyles(isDark);\n  return (\n    <TouchableOpacity style={styles.driverInfoBar} onPress={onPress} activeOpacity={onPress ? 0.7 : 1}>\n      <View style={styles.scheduleInfo}>\n        <Ionicons name=\"calendar-outline\" size={16} color=\"#9CA3AF\" />\n        <Text style={styles.scheduleText}>{schedule}</Text>\n      </View>\n      <View style={styles.priceInfo}>\n        <Ionicons name=\"pricetag-outline\" size={16} color=\"#9CA3AF\" />\n        <Text style={styles.priceText}>{price}</Text>\n      </View>\n      <View style={styles.distanceInfo}>\n        <Ionicons name=\"location\" size={16} color=\"#9CA3AF\" />\n        <Text style={styles.distanceText}>{distance}</Text>\n      </View>\n      <View style={styles.timeInfo}>\n        <Ionicons name=\"football\" size={16} color=\"#9CA3AF\" />\n        <Text style={styles.timeText}>{timeOrChildType}</Text>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport default React.memo(DriverInfoBar);","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/driver/DriverListItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[699,702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[699,702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[769,772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[769,772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[842,845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[842,845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[898,901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[898,901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[951,954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[951,954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3085,3088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3085,3088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3097,3100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3097,3100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4745,4748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4745,4748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4757,4760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4757,4760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":167,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5710,5713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5710,5713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { View, Text, TouchableOpacity, Animated, Easing, Pressable, Linking, Modal } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useI18n } from '../../hooks/useI18n';\nimport { Driver } from '../../types/driver';\nimport { DriverTrip } from '../../services/DriverService';\n\nexport type DriverListItemProps = {\n  driver: Driver & {\n    isFavorite?: boolean;\n    isPaused?: boolean;\n    schedule?: string;\n    price?: string;\n    distance?: string;\n    time?: string;\n    childName?: string;\n    childAge?: number;\n    childType?: string;\n    trips?: DriverTrip[];\n  };\n  isDark: boolean;\n  styles: any;\n  actionWidth: number;\n  SwipeableComponent: React.ComponentType<any>;\n  role?: 'client' | 'driver';\n  swipeRefSetter?: (id: string, ref: any) => void;\n  onSwipeableWillOpen?: (id: string, ref: any) => void;\n  onSwipeableClose?: (id: string, ref: any) => void;\n  onToggleFavorite: (driverId: string) => void;\n  onDelete: (driverId: string) => void;\n  onChat: (driver: Driver) => void;\n  onTogglePause?: (driverId: string) => void;\n};\n\nconst DriverListItem: React.FC<DriverListItemProps> = ({\n  driver,\n  isDark,\n  styles,\n  actionWidth,\n  SwipeableComponent,\n  swipeRefSetter,\n  onSwipeableWillOpen,\n  onSwipeableClose,\n  onToggleFavorite,\n  onDelete,\n  onChat,\n  onTogglePause,\n  role = 'client',\n}) => {\n  const { t } = useI18n();\n\n  const [isExpanded, setIsExpanded] = useState(false);\n  const expandAnim = useRef(new Animated.Value(0)).current;\n\n  const [isCallSheetOpen, setCallSheetOpen] = useState(false);\n  const callAnim = useRef(new Animated.Value(0)).current;\n\n  const toggleExpanded = useCallback(() => {\n    const toValue = isExpanded ? 0 : 1;\n    setIsExpanded(!isExpanded);\n    Animated.timing(expandAnim, {\n      toValue,\n      duration: 300,\n      useNativeDriver: false,\n    }).start();\n  }, [isExpanded, expandAnim]);\n\n  const openCallSheet = useCallback(() => {\n    setCallSheetOpen(true);\n    Animated.timing(callAnim, {\n      toValue: 1,\n      duration: 220,\n      easing: Easing.out(Easing.quad),\n      useNativeDriver: true,\n    }).start();\n  }, [callAnim]);\n\n  const closeCallSheet = useCallback(() => {\n    Animated.timing(callAnim, {\n      toValue: 0,\n      duration: 180,\n      easing: Easing.in(Easing.quad),\n      useNativeDriver: true,\n    }).start(() => setCallSheetOpen(false));\n  }, [callAnim]);\n\n  const handleNetworkCall = useCallback(() => {\n    try {\n      Linking.openURL(`tel:${driver.phone_number}`);\n    } finally {\n      closeCallSheet();\n    }\n  }, [closeCallSheet, driver.phone_number]);\n\n  const handleInternetCall = useCallback(() => {\n    closeCallSheet();\n    // Сообщение реализовано в родителе ранее, здесь оставляем только закрытие\n  }, [closeCallSheet]);\n\n  const handlePausePress = useCallback(() => {\n    if (onTogglePause) {\n      onTogglePause(driver.id);\n    }\n  }, [onTogglePause, driver.id]);\n\n  const driverTrips = useMemo<DriverTrip[]>(() => driver.trips ?? [], [driver.trips]);\n\n  const renderLeftActions = (progress: any, dragX: any) => {\n    const scale = dragX.interpolate({ inputRange: [0, actionWidth], outputRange: [0, 1], extrapolate: 'clamp' });\n    const opacity = dragX.interpolate({ inputRange: [0, actionWidth * 0.6, actionWidth], outputRange: [0, 0.6, 1], extrapolate: 'clamp' });\n    return (\n      <View style={[styles.swipeActionsLeft]}>\n        <View style={styles.swipeActionsLeftColumn}>\n          <Animated.View style={{ transform: [{ scale }], opacity }}>\n            <TouchableOpacity\n              style={[styles.swipeAction, styles.pauseAction, styles.swipeActionInnerLeft]}\n              onPress={handlePausePress}\n              accessibilityRole=\"button\"\n              accessibilityLabel={driver.isPaused ? \"resume\" : \"pause\"}\n              hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}\n              activeOpacity={0.85}\n            >\n              <Ionicons name={driver.isPaused ? \"play\" : \"pause\"} size={28} color=\"#fff\" />\n            </TouchableOpacity>\n          </Animated.View>\n          <Animated.View style={{ transform: [{ scale }], opacity }}>\n            <TouchableOpacity\n              style={[styles.swipeAction, styles.favoriteAction, styles.swipeActionInnerLeft]}\n              onPress={() => onToggleFavorite(driver.id)}\n              accessibilityRole=\"button\"\n              accessibilityLabel=\"bookmark\"\n              hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}\n              activeOpacity={0.85}\n            >\n              <Ionicons name=\"bookmark\" size={28} color=\"#fff\" />\n            </TouchableOpacity>\n          </Animated.View>\n        </View>\n      </View>\n    );\n  };\n\n  const renderRightActions = (progress: any, dragX: any) => {\n    const scale = dragX.interpolate({ inputRange: [-actionWidth, 0], outputRange: [1, 0], extrapolate: 'clamp' });\n    const opacity = dragX.interpolate({ inputRange: [-actionWidth, -actionWidth * 0.6, 0], outputRange: [1, 0.6, 0], extrapolate: 'clamp' });\n    return (\n      <View style={[styles.swipeActionsRight]}>\n        <Animated.View style={{ transform: [{ scale }], opacity }}>\n          <TouchableOpacity\n            style={[styles.swipeAction, styles.deleteAction, styles.swipeActionInnerRight]}\n            onPress={() => onDelete(driver.id)}\n            accessibilityRole=\"button\"\n            accessibilityLabel=\"delete\"\n            hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}\n            activeOpacity={0.85}\n          >\n            <Ionicons name=\"trash\" size={28} color=\"#fff\" />\n          </TouchableOpacity>\n        </Animated.View>\n      </View>\n    );\n  };\n\n  return (\n    <>\n    <SwipeableComponent\n      ref={(ref: any) => swipeRefSetter?.(driver.id, ref)}\n      renderLeftActions={renderLeftActions}\n      renderRightActions={renderRightActions}\n      leftThreshold={80}\n      rightThreshold={80}\n      friction={1.5}\n      overshootLeft={false}\n      overshootRight={false}\n      onSwipeableWillOpen={() => onSwipeableWillOpen?.(driver.id, null)}\n      onSwipeableClose={() => onSwipeableClose?.(driver.id, null)}\n    >\n      <View style={[styles.driverItem, driver.isPaused && styles.driverItemPaused]}>\n        {driver.isPaused && (\n          <View style={styles.pauseOverlay}>\n            <View style={styles.pauseIconLarge}>\n              <Ionicons name=\"pause\" size={32} color=\"#000\" />\n            </View>\n          </View>\n        )}\n        <TouchableOpacity style={styles.driverHeader} onPress={toggleExpanded} activeOpacity={0.7}>\n          <View style={styles.avatarContainer}>\n            <View style={styles.avatar}>\n              <Ionicons name=\"person\" size={32} color=\"#FFFFFF\" />\n            </View>\n            <View style={styles.onlineIndicator} />\n          </View>\n          <View style={styles.driverMainInfo}>\n            <View style={styles.nameRatingRow}>\n              <View style={styles.nameContainer}>\n                <Text style={styles.driverName}>{`${driver.first_name} ${driver.last_name}`}</Text>\n                <Ionicons name=\"diamond\" size={16} color=\"#9CA3AF\" style={styles.premiumIcon} />\n                {driver.isFavorite && (\n                  <Ionicons name=\"bookmark\" size={14} color={isDark ? '#F9FAFB' : '#111827'} style={styles.favoriteIcon} />\n                )}\n                {driver.isPaused && (\n                  <Ionicons name=\"pause\" size={14} color=\"#9CA3AF\" style={styles.pauseIcon} />\n                )}\n              </View>\n              <Text style={styles.ratingText}>{driver.rating.toFixed(1)}</Text>\n            </View>\n            <View style={styles.vehicleExpandRow}>\n              <View style={styles.vehicleInfoContainer}>\n                {role === 'driver' && (\n                  <Ionicons name=\"football\" size={16} color=\"#9CA3AF\" style={styles.childIcon} />\n                )}\n                <Text style={styles.vehicleInfo}>\n                  {role === 'driver' \n                    ? `${driver.childName ?? ''} • ${driver.childAge ?? ''} лет`\n                    : `${driver.vehicle_brand} ${driver.vehicle_model} • ${driver.vehicle_number}`\n                  }\n                </Text>\n              </View>\n              <Animated.View\n                style={{\n                  transform: [\n                    {\n                      rotate: expandAnim.interpolate({ inputRange: [0, 1], outputRange: ['0deg', '180deg'] }),\n                    },\n                  ],\n                }}\n              >\n                <Ionicons name=\"chevron-down\" size={16} color={isDark ? '#9CA3AF' : '#6B7280'} />\n              </Animated.View>\n            </View>\n          </View>\n        </TouchableOpacity>\n\n        <View style={styles.driverInfoBar}>\n          <View style={styles.scheduleInfo}>\n            <Ionicons name=\"calendar-outline\" size={16} color=\"#9CA3AF\" />\n            <Text style={styles.scheduleText}>{driver.schedule ?? ''}</Text>\n          </View>\n          <View style={styles.priceInfo}>\n            <Ionicons \n              name={role === 'driver' ? \"wallet\" : \"pricetag-outline\"} \n              size={16} \n              color=\"#9CA3AF\" \n            />\n            <Text style={styles.priceText}>{driver.price ?? ''}</Text>\n          </View>\n          <View style={styles.distanceInfo}>\n            <Ionicons name=\"location\" size={16} color=\"#9CA3AF\" />\n            <Text style={styles.distanceText}>{driver.distance ?? ''}</Text>\n          </View>\n          <View style={styles.timeInfo}>\n            <Ionicons \n              name={role === 'driver' ? \"time\" : \"football\"} \n              size={16} \n              color=\"#9CA3AF\" \n            />\n            <Text style={styles.timeText}>\n              {role === 'driver' \n                ? driver.time ?? ''\n                : driver.childType ?? ''\n              }\n            </Text>\n          </View>\n        </View>\n\n        <Animated.View\n          style={[\n            styles.expandableContent,\n            {\n              maxHeight: expandAnim.interpolate({ inputRange: [0, 1], outputRange: [0, 300] }),\n              opacity: expandAnim.interpolate({ inputRange: [0, 0.3, 1], outputRange: [0, 0, 1] }),\n            },\n          ]}\n        >\n          <View style={styles.tripsContainer}>\n            {driverTrips.map((trip, index) => (\n              <React.Fragment key={`trip-${driver.id}-${index}`}>\n                <View style={styles.tripItem}>\n                  <View\n                    style={[\n                      styles.tripDot,\n                      trip.dotStyle === 'blue' && styles.tripDotBlue,\n                      trip.dotStyle === 'location' && styles.tripDotLocation,\n                    ]}\n                  />\n                  <Text style={styles.tripText}>{trip.text}</Text>\n                  <Text style={styles.tripTime}>{trip.time}</Text>\n                </View>\n              </React.Fragment>\n            ))}\n          </View>\n\n          <View style={styles.bottomBorder} />\n\n          <View style={styles.buttonsContainer}>\n            <TouchableOpacity style={styles.leftButton} onPress={() => onChat(driver)}>\n              <View style={styles.buttonContent}>\n                <Ionicons name=\"chatbubble-outline\" size={18} color=\"#FFFFFF\" />\n                <Text style={styles.leftButtonText}>\n                  {t('client.driversScreen.actions.chat')}\n                </Text>\n              </View>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.rightButton} onPress={openCallSheet}>\n              <View style={styles.rightButtonContent}>\n                <Ionicons name=\"call-outline\" size={18} color={isDark ? '#F9FAFB' : '#111827'} />\n                <Text style={styles.rightButtonText}>\n                  {role === 'driver' ? t('driver.chat.call') : t('client.driversScreen.actions.call')}\n                </Text>\n              </View>\n            </TouchableOpacity>\n          </View>\n        </Animated.View>\n      </View>\n\n    </SwipeableComponent>\n    \n    {/* Модалка как Modal для правильного позиционирования поверх всего экрана */}\n    <Modal\n      visible={isCallSheetOpen}\n      transparent={true}\n      animationType=\"none\"\n      onRequestClose={closeCallSheet}\n    >\n      <View style={styles.callSheetOverlay}>\n        <Pressable style={styles.callSheetBackdrop} onPress={closeCallSheet} />\n        <Animated.View\n          style={[\n            styles.callSheetContainer,\n            {\n              transform: [\n                {\n                  translateY: callAnim.interpolate({ inputRange: [0, 1], outputRange: [300, 0] }),\n                },\n              ],\n            },\n          ]}\n        >\n          <TouchableOpacity style={styles.callSheetClose} onPress={closeCallSheet} accessibilityLabel={t('common.close')}>\n            <Ionicons name=\"close\" size={22} color={isDark ? '#F9FAFB' : '#111827'} />\n          </TouchableOpacity>\n          <View style={styles.callSheetHandle} />\n          <Text style={styles.callSheetTitle}>\n            {t('client.driversScreen.call.callTitle', { firstName: driver.first_name, lastName: driver.last_name })}\n          </Text>\n          <TouchableOpacity style={styles.callSheetOption} onPress={handleInternetCall}>\n            <Ionicons name=\"wifi\" size={24} color={isDark ? '#F9FAFB' : '#111827'} />\n            <Text style={styles.callSheetOptionText}>{t('client.driversScreen.call.internetCall')}</Text>\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.callSheetOption} onPress={handleNetworkCall}>\n            <Ionicons name=\"call\" size={24} color={isDark ? '#F9FAFB' : '#111827'} />\n            <Text style={styles.callSheetOptionText}>\n              {t('client.driversScreen.call.networkCallWithNumber', { phone: driver.phone_number })}\n            </Text>\n          </TouchableOpacity>\n        </Animated.View>\n      </View>\n    </Modal>\n    </>\n  );\n};\n\nexport default React.memo(DriverListItem);\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/driver/DriverModalHeader.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Driver' is defined but never used.","line":5,"column":6,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[343,346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[343,346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[389,392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[389,392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { View, Text, Image } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\ntype Driver = {\n  first_name?: string;\n  last_name?: string;\n  vehicle_brand?: string;\n  vehicle_model?: string;\n  vehicle_number?: string;\n};\n\nexport type DriverModalHeaderProps = {\n  styles: any;\n  role?: 'client' | 'driver';\n  driver?: any;\n  childName?: string;\n  childAge?: string;\n  slideProgress?: number;\n  isPaused?: boolean;\n  pauseStartTime?: number | null;\n  formatTime?: (seconds: number) => string;\n  // Новые пропсы для таймера в статусе 2\n  buttonColorState?: number;\n  isTripTimerActive?: boolean;\n  tripStartTime?: number | null;\n};\n\nconst DriverModalHeader: React.FC<DriverModalHeaderProps> = ({ \n  styles, \n  role = 'client', \n  driver, \n  childName, \n  childAge, \n  slideProgress = 0,\n  isPaused = false,\n  pauseStartTime = null,\n  formatTime = () => '00:00',\n  buttonColorState = 0,\n  isTripTimerActive = false,\n  tripStartTime = null\n}) => {\n  const [elapsedSeconds, setElapsedSeconds] = useState(0);\n  const [tripElapsedSeconds, setTripElapsedSeconds] = useState(0);\n\n  // Обновление таймера каждую секунду при паузе (статус 4)\n  useEffect(() => {\n    if (isPaused && pauseStartTime === 0) {\n      const interval = setInterval(() => {\n        setElapsedSeconds(prev => prev + 1);\n      }, 1000);\n      return () => clearInterval(interval);\n    } else if (!isPaused) {\n      setElapsedSeconds(0); // сбрасываем при выходе из паузы\n    }\n  }, [isPaused, pauseStartTime]);\n\n  // Обновление таймера каждую секунду при активной поездке (статус 2)\n  useEffect(() => {\n    if (isTripTimerActive && tripStartTime === 0) {\n      const interval = setInterval(() => {\n        setTripElapsedSeconds(prev => prev + 1);\n      }, 1000);\n      return () => clearInterval(interval);\n    } else if (!isTripTimerActive) {\n      setTripElapsedSeconds(0); // сбрасываем при остановке таймера\n    }\n  }, [isTripTimerActive, tripStartTime]);\n\n  return (\n    <View style={styles.avatarAndInfoRow}>\n      {/* Таймер при паузе (статус 4) */}\n      {isPaused && role === 'driver' ? (\n        <View style={[\n          styles.timerContainer,\n          {\n            opacity: Math.max(0, 1 - Math.abs(slideProgress) / 50),\n          }\n        ]}>\n          <Text style={styles.timerText}>{formatTime(elapsedSeconds)}</Text>\n        </View>\n      ) : (\n        <>\n          {/* Таймер при активной поездке (статус 2) */}\n          {isTripTimerActive && buttonColorState === 2 && role === 'driver' ? (\n            <View style={[\n              styles.timerContainer,\n              {\n                opacity: Math.max(0, 1 - Math.abs(slideProgress) / 50),\n              }\n            ]}>\n              <Text style={styles.timerText}>{formatTime(tripElapsedSeconds)}</Text>\n            </View>\n          ) : (\n            <>\n              <View style={[\n                styles.avatarContainer,\n                {\n                  opacity: Math.max(0, 1 - Math.abs(slideProgress) / 50),\n                }\n              ]}>\n                <View style={styles.avatar}>\n                  <Ionicons name=\"person\" size={32} color=\"#FFFFFF\" />\n                </View>\n                <View style={styles.onlineIndicator} />\n              </View>\n              <View style={[\n                styles.driverMainInfo,\n                {\n                  opacity: Math.max(0, 1 - Math.abs(slideProgress) / 50),\n                }\n              ]}>\n                <View style={styles.nameContainer}>\n                  <Text style={styles.driverName}>{`${driver?.first_name ?? ''} ${driver?.last_name ?? ''}`}</Text>\n                  <Ionicons name=\"diamond\" size={16} color=\"#9CA3AF\" style={styles.premiumIcon} />\n                </View>\n                <View style={styles.vehicleExpandRow}>\n                  <View style={styles.vehicleInfoContainer}>\n                    {role === 'driver' && (\n                      <Ionicons name=\"football\" size={16} color=\"#9CA3AF\" style={styles.childIcon} />\n                    )}\n                    <Text style={styles.vehicleInfo}>\n                      {role === 'driver'\n                        ? `${childName ?? ''} • ${childAge ?? ''} лет`\n                        : `${driver?.vehicle_brand ?? ''} ${driver?.vehicle_model ?? ''} • ${driver?.vehicle_number ?? ''}`}\n                    </Text>\n                  </View>\n                </View>\n              </View>\n            </>\n          )}\n        </>\n      )}\n      \n      {/* Фото машины для клиентской роли */}\n      {role === 'client' && driver?.vehicle_brand && driver?.vehicle_model && (\n        <View style={styles.vehiclePhotoContainer}>\n          <Image \n            source={require('../../../assets/vehicles/toyota-camry.jpg')} \n            style={styles.vehiclePhoto}\n            resizeMode=\"contain\"\n          />\n        </View>\n      )}\n      \n      {/* FixDrive текст для водительской роли */}\n      {role === 'driver' && (\n        <View style={[\n          styles.fixDriveContainer,\n          {\n            opacity: Math.max(0, (Math.abs(slideProgress) - 40) / 20), // плавное появление после 40\n          }\n        ]}>\n          <Text style={styles.fixDriveText}>FixDrive</Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport default React.memo(DriverModalHeader);\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/driver/DriverPersonalInfoSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[676,679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[676,679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { View, Text, TouchableOpacity, TextInput } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useLanguage } from '../../context/LanguageContext';\nimport DatePicker from '../DatePicker';\nimport { DriverPersonalInfoSectionStyles as styles, getDriverPersonalInfoSectionColors } from '../../styles/components/driver/DriverPersonalInfoSection.styles';\n\ninterface DriverPersonalInfoSectionProps {\n  formData: {\n    firstName: string;\n    lastName: string;\n    phone: string;\n    email: string;\n    birthDate: string;\n  };\n  setFormData: (data: any) => void;\n  isEditing: boolean;\n  verificationStatus: {\n    email: boolean;\n    phone: boolean;\n  };\n  isVerifying: {\n    email: boolean;\n    phone: boolean;\n  };\n  onVerifyEmail: () => void;\n  onVerifyPhone: () => void;\n  onResetVerification: (type: 'email' | 'phone') => void;\n}\n\nconst DriverPersonalInfoSection: React.FC<DriverPersonalInfoSectionProps> = ({\n  formData,\n  setFormData,\n  isEditing,\n  verificationStatus,\n  isVerifying,\n  onVerifyEmail,\n  onVerifyPhone,\n  onResetVerification,\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useLanguage();\n  const dynamicStyles = getDriverPersonalInfoSectionColors(isDark);\n\n  return (\n    <View style={styles.section}>\n      <Text style={[styles.sectionTitle, dynamicStyles.sectionTitle]}>\n        {t('profile.personalInfo')}\n      </Text>\n      \n      {/* Имя */}\n      <View style={[styles.infoRow, dynamicStyles.infoRow, isEditing && styles.infoRowEditing]}>\n        <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('profile.firstName')}:</Text>\n        {isEditing ? (\n          <TextInput\n            style={[styles.infoValue, dynamicStyles.infoValue, styles.infoInput]}\n            value={formData.firstName}\n            onChangeText={(text) => setFormData({...formData, firstName: text})}\n            placeholder={t('profile.firstNamePlaceholder')}\n            placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n          />\n        ) : (\n          <Text style={[styles.infoValue, dynamicStyles.infoValue]}>{formData.firstName}</Text>\n        )}\n      </View>\n\n      {/* Фамилия */}\n      <View style={[styles.infoRow, dynamicStyles.infoRow, isEditing && styles.infoRowEditing]}>\n        <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('profile.lastName')}:</Text>\n        {isEditing ? (\n          <TextInput\n            style={[styles.infoValue, dynamicStyles.infoValue, styles.infoInput]}\n            value={formData.lastName}\n            onChangeText={(text) => setFormData({...formData, lastName: text})}\n            placeholder={t('profile.lastNamePlaceholder')}\n            placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n          />\n        ) : (\n          <Text style={[styles.infoValue, dynamicStyles.infoValue]}>{formData.lastName}</Text>\n        )}\n      </View>\n\n      {/* Телефон */}\n      <View style={[styles.infoRow, dynamicStyles.infoRow, isEditing && styles.infoRowEditing]}>\n        <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('profile.phone')}:</Text>\n        <View style={styles.infoValueContainer}>\n          {isEditing ? (\n            <TextInput\n              style={[styles.infoValue, dynamicStyles.infoValue, styles.infoInput]}\n              value={formData.phone}\n              onChangeText={(text) => {\n                setFormData({...formData, phone: text});\n                // Сбрасываем верификацию при изменении номера\n                if (verificationStatus.phone && text !== formData.phone) {\n                  onResetVerification('phone');\n                }\n              }}\n              placeholder={t('profile.phonePlaceholder')}\n              placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n              keyboardType=\"phone-pad\"\n            />\n          ) : (\n            <Text style={[styles.infoValue, dynamicStyles.infoValue]}>{formData.phone}</Text>\n          )}\n          {verificationStatus.phone ? (\n            // Если верифицирован - показываем галочку (некликабельную)\n            <View style={styles.verifyButton}>\n              <Ionicons \n                name=\"checkmark-circle\" \n                size={20} \n                color=\"#4CAF50\" \n              />\n            </View>\n          ) : (\n            // Если не верифицирован - показываем кликабельный щит\n            <TouchableOpacity\n              style={styles.verifyButton}\n              onPress={onVerifyPhone}\n              disabled={isVerifying.phone}\n            >\n              <Ionicons \n                name=\"shield-checkmark-outline\" \n                size={20} \n                color={isDark ? '#3B82F6' : '#083198'} \n              />\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n\n      {/* Email */}\n      <View style={[styles.infoRow, dynamicStyles.infoRow, isEditing && styles.infoRowEditing]}>\n        <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('profile.email')}:</Text>\n        <View style={styles.infoValueContainer}>\n          {isEditing ? (\n            <TextInput\n              style={[styles.infoValue, dynamicStyles.infoValue, styles.infoInput]}\n              value={formData.email}\n              onChangeText={(text) => {\n                setFormData({...formData, email: text});\n                // Сбрасываем верификацию при изменении email\n                if (verificationStatus.email && text !== formData.email) {\n                  onResetVerification('email');\n                }\n              }}\n              placeholder={t('profile.emailPlaceholder')}\n              placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n              keyboardType=\"email-address\"\n            />\n          ) : (\n            <Text style={[styles.infoValue, dynamicStyles.infoValue]}>{formData.email}</Text>\n          )}\n          {verificationStatus.email ? (\n            // Если верифицирован - показываем галочку (некликабельную)\n            <View style={styles.verifyButton}>\n              <Ionicons \n                name=\"checkmark-circle\" \n                size={20} \n                color=\"#4CAF50\" \n              />\n            </View>\n          ) : (\n            // Если не верифицирован - показываем кликабельный щит\n            <TouchableOpacity\n              style={styles.verifyButton}\n              onPress={onVerifyEmail}\n              disabled={isVerifying.email}\n            >\n              <Ionicons \n                name=\"shield-checkmark-outline\" \n                size={20} \n                color={isDark ? '#3B82F6' : '#083198'} \n              />\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n\n      {/* Дата рождения */}\n      <View style={[styles.infoRow, dynamicStyles.infoRow, isEditing && styles.infoRowEditing]}>\n        <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('profile.birthDate')}:</Text>\n        <DatePicker\n          value={formData.birthDate}\n          onChange={(date) => setFormData({...formData, birthDate: date})}\n          placeholder={t('profile.birthDatePlaceholder')}\n          inline={isEditing}\n          readOnly={!isEditing}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default DriverPersonalInfoSection; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/driver/DriverProfileAvatarSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3132,3135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3132,3135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, Image, Animated, Modal } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { useDriverAvatar } from '../../hooks/driver/DriverUseAvatar';\nimport { usePackage } from '../../context/PackageContext';\nimport { DriverProfileAvatarSectionStyles as styles, getDriverProfileAvatarSectionColors } from '../../styles/components/driver/DriverProfileAvatarSection.styles';\nimport { getPackageIcon, getPackageColor } from '../../utils/packageVisuals';\n\ninterface DriverProfileAvatarSectionProps {\n  userName: string;\n  userSurname: string;\n  onCirclePress: () => void;\n  rotateAnim: Animated.Value;\n}\n\nconst DriverProfileAvatarSection: React.FC<DriverProfileAvatarSectionProps> = ({\n  userName,\n  userSurname,\n  onCirclePress,\n  rotateAnim,\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { avatarUri, loading, showAvatarOptions } = useDriverAvatar();\n  const { currentPackage } = usePackage();\n  const dynamicStyles = getDriverProfileAvatarSectionColors(isDark);\n  const [showAvatarModal, setShowAvatarModal] = useState(false);\n  const [forceUpdate, setForceUpdate] = useState(0);\n\n  // Принудительно перерендериваем компонент при изменении пакета\n  useEffect(() => {\n    setForceUpdate(prev => prev + 1);\n  }, [currentPackage]);\n\n  const handleAvatarPress = () => {\n    if (avatarUri) {\n      setShowAvatarModal(true);\n    }\n  };\n\n  const closeAvatarModal = () => {\n    setShowAvatarModal(false);\n  };\n\n\n\n  return (\n    <View style={styles.avatarSection}>\n      <View style={[styles.profileNameBox, dynamicStyles.profileNameBox]}>\n        <TouchableOpacity \n          style={styles.avatar}\n          onPress={handleAvatarPress}\n          disabled={!avatarUri}\n        >\n          {avatarUri ? (\n            <Image source={{ uri: avatarUri }} style={styles.avatarImage} />\n          ) : (\n            <Ionicons \n              name=\"person-circle-outline\" \n              size={60} \n              color=\"#FFFFFF\" \n            />\n          )}\n          <TouchableOpacity \n            style={[styles.addPhotoButton, loading && { opacity: 0.5 }]}\n            onPress={showAvatarOptions}\n            disabled={loading}\n            accessibilityLabel={avatarUri ? t('profile.changePhoto') : t('profile.addPhoto')}\n          >\n            {loading ? (\n              <Ionicons name=\"hourglass-outline\" size={12} color=\"#083198\" />\n            ) : (\n              <Ionicons name={avatarUri ? \"camera\" : \"add\"} size={12} color=\"#083198\" />\n            )}\n          </TouchableOpacity>\n        </TouchableOpacity>\n        <View style={styles.nameAndIconContainer}>\n          <Text \n            style={[styles.profileName, dynamicStyles.profileName]}\n            numberOfLines={1}\n            ellipsizeMode=\"tail\"\n          >\n            {userName} {userSurname}\n          </Text>\n          <View style={styles.packageIconContainer}>\n            <Ionicons \n              name={getPackageIcon(currentPackage) as any} \n              size={20} \n              color={getPackageColor(currentPackage)} \n              key={`package-icon-${currentPackage}-${forceUpdate}`}\n              style={{ opacity: getPackageIcon(currentPackage) ? 1 : 0.5 }}\n            />\n          </View>\n        </View>\n        <TouchableOpacity \n          style={[styles.rightCircle, dynamicStyles.rightCircle]}\n          onPress={onCirclePress}\n          activeOpacity={0.7}\n        >\n          <Animated.View\n            style={{\n              alignItems: 'center',\n              justifyContent: 'center',\n              transform: [{\n                rotate: rotateAnim.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: ['0deg', '180deg']\n                })\n              }]\n            }}\n          >\n            <Ionicons name=\"sync\" size={20} color={isDark ? '#9CA3AF' : '#666666'} />\n          </Animated.View>\n        </TouchableOpacity>\n      </View>\n\n      {/* Модальное окно для просмотра аватара */}\n      <Modal\n        visible={showAvatarModal}\n        transparent={true}\n        animationType=\"fade\"\n        onRequestClose={closeAvatarModal}\n      >\n        <View style={styles.avatarModalOverlay}>\n          <TouchableOpacity \n            style={styles.avatarModalBackground} \n            onPress={closeAvatarModal}\n            activeOpacity={1}\n          >\n            <TouchableOpacity \n              style={styles.avatarModalContent}\n              onPress={() => {}} // Предотвращаем закрытие при нажатии на фото\n              activeOpacity={1}\n            >\n              <Image \n                source={{ uri: avatarUri }} \n                style={styles.avatarModalImage}\n                resizeMode=\"contain\"\n              />\n            </TouchableOpacity>\n          </TouchableOpacity>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nexport default DriverProfileAvatarSection; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/driver/DriverProfileHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/driver/DriverTripDialogs.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[249,252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[249,252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12641,12644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12641,12644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Modal, TouchableOpacity, Text, View, TextInput } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { t } from '../../i18n';\n\nexport type DriverTripDialogsProps = {\n  styles: any;\n  clientName: string;\n  // Start trip\n  showStart: boolean;\n  onStartCancel: () => void;\n  onStartOk: () => void;\n  // Waiting\n  showWaiting: boolean;\n  onWaitingCancel: () => void;\n  onWaitingOk: () => void;\n  // Empty dialog\n  showEmpty: boolean;\n  onEmptyCancel: () => void;\n  onEmptyOk: () => void;\n  // Cancel dialog\n  showCancel: boolean;\n  onCancelCancel: () => void;\n  onCancelOk: () => void;\n  // End trip\n  showEnd: boolean;\n  onEndCancel: () => void;\n  onEndOk: () => void;\n  // Emergency long press\n  showEmergency: boolean;\n  onEmergencyStop: () => void;\n  onEmergencyEnd: () => void;\n  onEmergencyClose: () => void;\n  // Stop dialog\n  showStop: boolean;\n  onStopCancel: () => void;\n  onStopOk: () => void;\n  // Force end dialog\n  showForceEnd: boolean;\n  onForceEndCancel: () => void;\n  onForceEndOk: () => void;\n  // Continue dialog\n  showContinue: boolean;\n  onContinueCancel: () => void;\n  onContinueOk: () => void;\n  // Rating dialog\n  showRating: boolean;\n  onRatingCancel: () => void;\n  onRatingSubmit: (rating: number, comment: string) => void;\n  emergencyActionsUsed?: boolean;\n  emergencyActionType?: 'stop' | 'end' | null;\n};\n\nconst DriverTripDialogs: React.FC<DriverTripDialogsProps> = ({\n  styles,\n  clientName,\n  showStart,\n  onStartCancel,\n  onStartOk,\n  showWaiting,\n  onWaitingCancel,\n  onWaitingOk,\n  showEmpty,\n  onEmptyCancel,\n  onEmptyOk,\n  showCancel,\n  onCancelCancel,\n  onCancelOk,\n  showEnd,\n  onEndCancel,\n  onEndOk,\n  showEmergency,\n  onEmergencyStop,\n  onEmergencyEnd,\n  onEmergencyClose,\n  showStop,\n  onStopCancel,\n  onStopOk,\n  showForceEnd,\n  onForceEndCancel,\n  onForceEndOk,\n  showContinue,\n  onContinueCancel,\n  onContinueOk,\n  showRating,\n  onRatingCancel,\n  onRatingSubmit,\n  emergencyActionsUsed = false,\n  emergencyActionType = null,\n}) => {\n  return (\n    <>\n      {/* Start trip */}\n      <Modal visible={showStart} transparent animationType=\"fade\">\n        <TouchableOpacity style={styles.dialogOverlay} activeOpacity={1} onPress={onStartCancel}>\n          <TouchableOpacity style={styles.dialogContainer} activeOpacity={1} onPress={(e) => e.stopPropagation()}>\n            <Text style={styles.dialogTitle}>{t('driver.tripDialogs.startTrip.title')}</Text>\n            <Text style={styles.dialogText}>{t('driver.tripDialogs.startTrip.message', { clientName })}</Text>\n            <View style={styles.dialogButtonsContainer}>\n              <TouchableOpacity style={styles.dialogCancelButton} onPress={onStartCancel}>\n                <Text style={styles.dialogCancelButtonText}>{t('driver.tripDialogs.buttons.cancelAction')}</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.dialogOkButton} onPress={onStartOk}>\n                <Text style={styles.dialogOkButtonText}>{t('driver.tripDialogs.buttons.okAction')}</Text>\n              </TouchableOpacity>\n            </View>\n          </TouchableOpacity>\n        </TouchableOpacity>\n      </Modal>\n\n      {/* Waiting */}\n      <Modal visible={showWaiting} transparent animationType=\"fade\">\n        <TouchableOpacity style={styles.dialogOverlay} activeOpacity={1} onPress={onWaitingCancel}>\n          <TouchableOpacity style={styles.dialogContainer} activeOpacity={1} onPress={(e) => e.stopPropagation()}>\n            <Text style={styles.dialogTitle}>{t('driver.tripDialogs.waiting.title')}</Text>\n            <Text style={styles.dialogText}>{t('driver.tripDialogs.waiting.message', { clientName })}</Text>\n            <View style={styles.dialogButtonsContainer}>\n              <TouchableOpacity style={styles.dialogCancelButton} onPress={onWaitingCancel}>\n                <Text style={styles.dialogCancelButtonText}>{t('driver.tripDialogs.buttons.cancelAction')}</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.dialogOkButton} onPress={onWaitingOk}>\n                <Text style={styles.dialogOkButtonText}>{t('driver.tripDialogs.buttons.okAction')}</Text>\n              </TouchableOpacity>\n            </View>\n          </TouchableOpacity>\n        </TouchableOpacity>\n      </Modal>\n\n      {/* Begin trip dialog */}\n      <Modal visible={showEmpty} transparent animationType=\"fade\">\n        <TouchableOpacity style={styles.dialogOverlay} activeOpacity={1} onPress={onEmptyCancel}>\n          <TouchableOpacity style={styles.dialogContainer} activeOpacity={1} onPress={(e) => e.stopPropagation()}>\n            <Text style={styles.dialogTitle}>{t('driver.tripDialogs.beginTrip.title')}</Text>\n            <Text style={styles.dialogText}>{t('driver.tripDialogs.beginTrip.message', { clientName })}</Text>\n            <View style={styles.dialogButtonsContainer}>\n              <TouchableOpacity style={styles.dialogCancelButton} onPress={onEmptyCancel}>\n                <Text style={styles.dialogCancelButtonText}>{t('driver.tripDialogs.buttons.cancelAction')}</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.dialogOkButton} onPress={onEmptyOk}>\n                <Text style={styles.dialogOkButtonText}>{t('driver.tripDialogs.buttons.okAction')}</Text>\n              </TouchableOpacity>\n            </View>\n          </TouchableOpacity>\n        </TouchableOpacity>\n      </Modal>\n\n      {/* Cancel trip dialog */}\n      <Modal visible={showCancel} transparent animationType=\"fade\">\n        <TouchableOpacity style={styles.dialogOverlay} activeOpacity={1} onPress={onCancelCancel}>\n          <TouchableOpacity style={styles.dialogContainer} activeOpacity={1} onPress={(e) => e.stopPropagation()}>\n            <Text style={styles.dialogTitle}>{t('driver.tripDialogs.cancelTrip.title')}</Text>\n            <Text style={styles.dialogText}>{t('driver.tripDialogs.cancelTrip.message', { clientName })}</Text>\n            <View style={styles.dialogButtonsContainer}>\n              <TouchableOpacity style={styles.dialogCancelButton} onPress={onCancelCancel}>\n                <Text style={styles.dialogCancelButtonText}>{t('driver.tripDialogs.buttons.cancelAction')}</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.dialogOkButton} onPress={onCancelOk}>\n                <Text style={styles.dialogOkButtonText}>{t('driver.tripDialogs.buttons.okAction')}</Text>\n              </TouchableOpacity>\n            </View>\n          </TouchableOpacity>\n        </TouchableOpacity>\n      </Modal>\n\n      {/* End trip */}\n      <Modal visible={showEnd} transparent animationType=\"fade\">\n        <TouchableOpacity style={styles.dialogOverlay} activeOpacity={1} onPress={onEndCancel}>\n          <TouchableOpacity style={styles.dialogContainer} activeOpacity={1} onPress={(e) => e.stopPropagation()}>\n            <Text style={styles.dialogTitle}>{t('driver.tripDialogs.endTrip.title')}</Text>\n            <Text style={styles.dialogText}>{t('driver.tripDialogs.endTrip.message', { clientName })}</Text>\n            <View style={styles.dialogButtonsContainer}>\n              <TouchableOpacity style={styles.dialogCancelButton} onPress={onEndCancel}>\n                <Text style={styles.dialogCancelButtonText}>{t('driver.tripDialogs.buttons.cancelAction')}</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.dialogOkButton} onPress={onEndOk}>\n                <Text style={styles.dialogOkButtonText}>{t('driver.tripDialogs.buttons.okAction')}</Text>\n              </TouchableOpacity>\n            </View>\n          </TouchableOpacity>\n        </TouchableOpacity>\n      </Modal>\n\n      {/* Emergency long press */}\n      <Modal visible={showEmergency} transparent animationType=\"fade\">\n        <TouchableOpacity style={styles.dialogOverlay} activeOpacity={1} onPress={onEmergencyClose}>\n          <TouchableOpacity style={styles.dialogContainer} activeOpacity={1} onPress={(e) => e.stopPropagation()}>\n            <Text style={styles.dialogTitle}>{t('driver.tripDialogs.emergency.title')}</Text>\n            <Text style={styles.dialogText}>{t('driver.tripDialogs.emergency.message')}</Text>\n            <View style={styles.dialogButtonsContainer}>\n              <TouchableOpacity style={styles.emergencyStopButton} onPress={onEmergencyStop}>\n                <Text style={styles.emergencyButtonText}>{t('driver.tripDialogs.emergency.stop')}</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.emergencyEndButton} onPress={onEmergencyEnd}>\n                <Text style={styles.emergencyButtonText}>{t('driver.tripDialogs.emergency.end')}</Text>\n              </TouchableOpacity>\n            </View>\n          </TouchableOpacity>\n        </TouchableOpacity>\n      </Modal>\n\n      {/* Stop dialog */}\n      <Modal visible={showStop} transparent animationType=\"fade\">\n        <TouchableOpacity style={styles.dialogOverlay} activeOpacity={1} onPress={onStopCancel}>\n          <TouchableOpacity style={styles.dialogContainer} activeOpacity={1} onPress={(e) => e.stopPropagation()}>\n            <Text style={styles.dialogTitle}>{t('driver.tripDialogs.stopTrip.title')}</Text>\n            <Text style={styles.dialogText}>{t('driver.tripDialogs.stopTrip.message')}</Text>\n            <View style={styles.dialogButtonsContainer}>\n              <TouchableOpacity style={styles.dialogCancelButton} onPress={onStopCancel}>\n                <Text style={styles.dialogCancelButtonText}>{t('driver.tripDialogs.buttons.cancelAction')}</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.dialogOkButton} onPress={onStopOk}>\n                <Text style={styles.dialogOkButtonText}>{t('driver.tripDialogs.buttons.okAction')}</Text>\n              </TouchableOpacity>\n            </View>\n          </TouchableOpacity>\n        </TouchableOpacity>\n      </Modal>\n\n      {/* Force end dialog */}\n      <Modal visible={showForceEnd} transparent animationType=\"fade\">\n        <TouchableOpacity style={styles.dialogOverlay} activeOpacity={1} onPress={onForceEndCancel}>\n          <TouchableOpacity style={styles.dialogContainer} activeOpacity={1} onPress={(e) => e.stopPropagation()}>\n            <Text style={styles.dialogTitle}>{t('driver.tripDialogs.forceEndTrip.title')}</Text>\n            <Text style={styles.dialogText}>{t('driver.tripDialogs.forceEndTrip.message')}</Text>\n            <View style={styles.dialogButtonsContainer}>\n              <TouchableOpacity style={styles.dialogCancelButton} onPress={onForceEndCancel}>\n                <Text style={styles.dialogCancelButtonText}>{t('driver.tripDialogs.buttons.cancelAction')}</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.dialogOkButton} onPress={onForceEndOk}>\n                <Text style={styles.dialogOkButtonText}>{t('driver.tripDialogs.buttons.okAction')}</Text>\n              </TouchableOpacity>\n            </View>\n          </TouchableOpacity>\n        </TouchableOpacity>\n      </Modal>\n\n      {/* Continue dialog */}\n      <Modal visible={showContinue} transparent animationType=\"fade\">\n        <TouchableOpacity style={styles.dialogOverlay} activeOpacity={1} onPress={onContinueCancel}>\n          <TouchableOpacity style={styles.dialogContainer} activeOpacity={1} onPress={(e) => e.stopPropagation()}>\n            <Text style={styles.dialogTitle}>{t('driver.tripDialogs.continueTrip.title')}</Text>\n            <Text style={styles.dialogText}>{t('driver.tripDialogs.continueTrip.message')}</Text>\n            <View style={styles.dialogButtonsContainer}>\n              <TouchableOpacity style={styles.dialogCancelButton} onPress={onContinueCancel}>\n                <Text style={styles.dialogCancelButtonText}>{t('driver.tripDialogs.buttons.cancelAction')}</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.dialogOkButton} onPress={onContinueOk}>\n                <Text style={styles.dialogOkButtonText}>{t('driver.tripDialogs.buttons.okAction')}</Text>\n              </TouchableOpacity>\n            </View>\n          </TouchableOpacity>\n        </TouchableOpacity>\n      </Modal>\n\n      {/* Rating dialog */}\n      <RatingDialog\n        visible={showRating}\n        onCancel={onRatingCancel}\n        onSubmit={onRatingSubmit}\n        styles={styles}\n        emergencyActionsUsed={emergencyActionsUsed}\n        emergencyActionType={emergencyActionType}\n      />\n    </>\n  );\n};\n\n// Rating Dialog Component\nconst RatingDialog: React.FC<{\n  visible: boolean;\n  onCancel: () => void;\n  onSubmit: (rating: number, comment: string) => void;\n  styles: any;\n  emergencyActionsUsed?: boolean;\n  emergencyActionType?: 'stop' | 'end' | null;\n}> = ({ visible, onCancel, onSubmit, styles, emergencyActionsUsed = false, emergencyActionType = null }) => {\n  const [rating, setRating] = useState(5);\n  const [comment, setComment] = useState('');\n\n  const handleSubmit = () => {\n    // Если были использованы экстренные действия, комментарий обязателен\n    if (emergencyActionsUsed && !comment.trim()) {\n      return; // Не отправляем, если комментарий пустой\n    }\n    onSubmit(rating, comment);\n    setRating(5);\n    setComment('');\n  };\n\n  const handleCancel = () => {\n    onCancel();\n    setRating(5);\n    setComment('');\n  };\n\n  return (\n    <Modal visible={visible} transparent animationType=\"fade\">\n      <TouchableOpacity style={styles.dialogOverlay} activeOpacity={1} onPress={() => {}}>\n        <View style={styles.ratingDialogContainer}>\n          <Text style={styles.dialogTitle}>{t('common.rating.title')}</Text>\n          <Text style={styles.dialogText}>{t('common.rating.message')}</Text>\n          \n          {/* Rating Stars */}\n          <View style={styles.ratingContainer}>\n            {[1, 2, 3, 4, 5].map((star) => (\n              <TouchableOpacity\n                key={star}\n                style={styles.starButton}\n                onPress={() => setRating(star)}\n              >\n                <Ionicons\n                  name={star <= rating ? \"star\" : \"star-outline\"}\n                  size={28}\n                  color={star <= rating ? \"#FFD700\" : \"#D1D5DB\"}\n                />\n              </TouchableOpacity>\n            ))}\n          </View>\n          \n          {/* Comment Input */}\n          <View style={styles.commentContainer}>\n            <Text style={styles.commentLabel}>\n              {emergencyActionsUsed ? t('common.rating.commentRequired') : t('common.rating.commentLabel')}\n            </Text>\n            <TextInput\n              style={styles.commentInput}\n              value={comment}\n              onChangeText={setComment}\n              placeholder={\n                emergencyActionsUsed \n                  ? (emergencyActionType === 'stop' \n                      ? t('common.rating.commentStopPlaceholder')\n                      : t('common.rating.commentEndPlaceholder'))\n                  : t('common.rating.commentPlaceholder')\n              }\n              placeholderTextColor=\"#9CA3AF\"\n              multiline\n              numberOfLines={4}\n              textAlignVertical=\"top\"\n            />\n          </View>\n          \n          <View style={styles.dialogButtonsContainer}>\n            <TouchableOpacity style={styles.dialogCancelButton} onPress={handleCancel}>\n              <Text style={styles.dialogCancelButtonText}>{t('driver.tripDialogs.buttons.cancelAction')}</Text>\n            </TouchableOpacity>\n            <TouchableOpacity \n              style={[\n                styles.dialogOkButton,\n                emergencyActionsUsed && !comment.trim() && { opacity: 0.5 }\n              ]} \n              onPress={handleSubmit}\n              disabled={emergencyActionsUsed && !comment.trim()}\n            >\n              <Text style={styles.dialogOkButtonText}>{t('common.rating.submit')}</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </TouchableOpacity>\n    </Modal>\n  );\n};\n\nexport default React.memo(DriverTripDialogs);\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/driver/DriverTrips.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[223,226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[223,226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text } from 'react-native';\n\nexport type DriverTrip = {\n  text: string;\n  time: string;\n  dotStyle?: 'default' | 'blue' | 'location';\n};\n\nexport type DriverTripsProps = {\n  styles: any;\n  driverId: string | undefined;\n  trips: DriverTrip[];\n};\n\nconst DriverTrips: React.FC<DriverTripsProps> = ({ styles, driverId, trips }) => {\n  return (\n    <View style={styles.tripsContainer}>\n      {trips.map((trip, index) => (\n        <React.Fragment key={`trip-${driverId ?? 'driver'}-${index}`}>\n          <View style={styles.tripItem}>\n            <View\n              style={[\n                styles.tripDot,\n                trip.dotStyle === 'blue' && styles.tripDotBlue,\n                trip.dotStyle === 'location' && styles.tripDotLocation,\n              ]}\n            />\n            <Text style={styles.tripText}>{trip.text}</Text>\n            <Text style={styles.tripTime}>{trip.time}</Text>\n          </View>\n        </React.Fragment>\n      ))}\n    </View>\n  );\n};\n\nexport default React.memo(DriverTrips);\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/driver/DriverVipSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dynamicStyles' is assigned a value but never used.","line":16,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { DriverVipSectionStyles as styles, getDriverVipSectionColors } from '../../styles/components/driver/DriverVipSection.styles';\n\ninterface DriverVipSectionProps {\n  onVipPress?: () => void;\n}\n\nconst DriverVipSection: React.FC<DriverVipSectionProps> = ({ onVipPress }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const dynamicStyles = getDriverVipSectionColors(isDark);\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        style={styles.vipButtonContainer}\n        onPress={onVipPress}\n        activeOpacity={0.8}\n      >\n        <LinearGradient\n          colors={['#FFD700', '#FFA500', '#FF8C00', '#FFD700']}\n          start={{ x: 0, y: 0 }}\n          end={{ x: 1, y: 1 }}\n          style={styles.vipButton}\n        >\n          <Ionicons name=\"diamond\" size={16} color=\"#fff\" style={styles.buttonIcon} />\n          <Text style={[styles.vipButtonText, { color: '#fff' }]}>{t('profile.becomePremium')}</Text>\n        </LinearGradient>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default DriverVipSection; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/driver/VehicleIdCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentColors' is assigned a value but never used.","line":28,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, Image } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { VehicleIdCardStyles as styles, getVehicleIdCardColors } from '../../styles/components/driver/VehicleIdCard.styles';\n\ninterface VehicleIdCardProps {\n  vehicleNumber: string;\n  brand: string;\n  model: string;\n  year: string;\n  mileage: string;\n  isVerified?: boolean; // Статус верификации автомобиля\n}\n\nconst VehicleIdCard: React.FC<VehicleIdCardProps> = ({\n  vehicleNumber,\n  brand,\n  model,\n  year,\n  mileage,\n  isVerified = false, // По умолчанию не верифицирован\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const dynamicStyles = getVehicleIdCardColors(isDark);\n  const currentColors = isDark ? { primary: '#3B82F6' } : { primary: '#083198' };\n\n  // Определяем иконку и цвет в зависимости от статуса верификации\n  const getVerificationIcon = () => {\n    if (isVerified) {\n      return {\n        name: 'shield-checkmark' as const,\n        color: '#10B981', // Зеленый цвет для верифицированного\n      };\n    } else {\n      return {\n        name: 'time-outline' as const,\n        color: '#fff', // Белый цвет для ожидания\n      };\n    }\n  };\n\n  const verificationIcon = getVerificationIcon();\n\n  // Функция для получения фото автомобиля\n  const getVehicleImage = () => {\n    // Здесь будет логика для получения фото в зависимости от марки и модели\n    // Пока используем заглушку\n    return require('../../../assets/vehicles/toyota-camry.jpg');\n  };\n\n  return (\n    <View style={[styles.card, dynamicStyles.card]}>\n      {/* Заголовок FixDrive */}\n      <View style={[styles.header, dynamicStyles.header]}>\n        <Ionicons \n          name={verificationIcon.name}\n          size={16} \n          color={verificationIcon.color}\n          style={styles.headerIcon}\n        />\n        <Text style={styles.headerText}>FixDrive</Text>\n      </View>\n      \n      {/* Основной контент */}\n      <View style={styles.content}>\n        {/* Фото автомобиля слева */}\n        <View style={styles.photoContainer}>\n          <Image \n            source={getVehicleImage()} \n            style={styles.vehiclePhoto}\n            resizeMode=\"cover\"\n          />\n        </View>\n        \n        {/* Данные справа */}\n        <View style={styles.dataContainer}>\n          <View style={[styles.dataRow, dynamicStyles.dataRow]}>\n            <Text style={[styles.dataLabel, dynamicStyles.dataLabel]}>{t('profile.vehicles.vehicleLabels.number')}</Text>\n            <Text style={[styles.dataValue, dynamicStyles.dataValue]}>{vehicleNumber}</Text>\n          </View>\n          \n          <View style={[styles.dataRow, dynamicStyles.dataRow]}>\n            <Text style={[styles.dataLabel, dynamicStyles.dataLabel]}>{t('profile.vehicles.vehicleLabels.brand')}</Text>\n            <Text style={[styles.dataValue, dynamicStyles.dataValue]}>{brand}</Text>\n          </View>\n          \n          <View style={[styles.dataRow, dynamicStyles.dataRow]}>\n            <Text style={[styles.dataLabel, dynamicStyles.dataLabel]}>{t('profile.vehicles.vehicleLabels.model')}</Text>\n            <Text style={[styles.dataValue, dynamicStyles.dataValue]}>{model}</Text>\n          </View>\n          \n          <View style={[styles.dataRow, dynamicStyles.dataRow]}>\n            <Text style={[styles.dataLabel, dynamicStyles.dataLabel]}>{t('profile.vehicles.vehicleLabels.year')}</Text>\n            <Text style={[styles.dataValue, dynamicStyles.dataValue]}>{year}</Text>\n          </View>\n          \n          <View style={[styles.dataRow, dynamicStyles.dataRow]}>\n            <Text style={[styles.dataLabel, dynamicStyles.dataLabel]}>{t('profile.vehicles.vehicleLabels.mileage')}</Text>\n            <Text style={[styles.dataValue, dynamicStyles.dataValue]}>{mileage}</Text>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nexport default VehicleIdCard;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/profile/AddFamilyModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isVerifyingPhone' is assigned a value but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleVerifyPhone' is assigned a value but never used.","line":134,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":134,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getPhoneVerificationIcon' is assigned a value but never used.","line":143,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":143,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getPhoneVerificationColor' is assigned a value but never used.","line":153,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":153,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, TextInput, ScrollView, KeyboardAvoidingView, Platform } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useLanguage } from '../../context/LanguageContext';\nimport DatePicker from '../DatePicker';\nimport { AddFamilyModalStyles as styles, getAddFamilyModalColors } from '../../styles/components/profile/AddFamilyModal.styles';\n\ninterface NewFamilyMember {\n  name: string;\n  surname: string;\n  type: string;\n  age: string;\n  phone: string;\n}\n\ninterface AddFamilyModalProps {\n  visible: boolean;\n  newFamilyMember: NewFamilyMember;\n  setNewFamilyMember: (member: NewFamilyMember) => void;\n  onClose: () => void;\n  onAdd: () => void;\n  onVerifyPhone?: () => void;\n  phoneVerificationStatus?: boolean;\n  isVerifyingPhone?: boolean;\n}\n\nconst AddFamilyModal: React.FC<AddFamilyModalProps> = ({\n  visible,\n  newFamilyMember,\n  setNewFamilyMember,\n  onClose,\n  onAdd,\n  onVerifyPhone,\n  isVerifyingPhone = false,\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useLanguage();\n  const dynamicStyles = getAddFamilyModalColors(isDark);\n  const [showTypeDropdown, setShowTypeDropdown] = useState(false);\n  const [datePickerTouched, setDatePickerTouched] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<{[key: string]: boolean}>({});\n  const [localPhoneVerificationStatus, setLocalPhoneVerificationStatus] = useState(false);\n\n  // Сбрасываем локальный статус верификации при открытии модального окна\n  useEffect(() => {\n    if (visible) {\n      setLocalPhoneVerificationStatus(false);\n    }\n  }, [visible]);\n\n  if (!visible) return null;\n\n  // Функция валидации\n  const validateForm = () => {\n    const errors: {[key: string]: boolean} = {};\n    \n    // Проверяем обязательные поля\n    if (!newFamilyMember.name.trim()) {\n      errors.name = true;\n    }\n    if (!newFamilyMember.surname.trim()) {\n      errors.surname = true;\n    }\n    if (!newFamilyMember.type || !newFamilyMember.type.trim()) {\n      errors.type = true;\n    }\n    if (!datePickerTouched) {\n      errors.age = true;\n    }\n    \n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  // Функция проверки валидности формы для стилизации кнопки\n  const isFormValid = () => {\n    return newFamilyMember.name.trim() && \n           newFamilyMember.surname.trim() && \n           (newFamilyMember.type && newFamilyMember.type.trim()) && \n           datePickerTouched;\n  };\n\n  // Обработчик добавления члена семьи\n  const handleAdd = () => {\n    if (validateForm()) {\n      onAdd();\n    }\n  };\n\n  // Обработчик изменения даты\n  const handleDateChange = (date: string) => {\n    setNewFamilyMember({...newFamilyMember, age: date});\n    setDatePickerTouched(true);\n    // Убираем ошибку валидации для даты\n    if (validationErrors.age) {\n      setValidationErrors(prev => ({...prev, age: false}));\n    }\n  };\n\n  // Обработчики изменения текстовых полей\n  const handleNameChange = (text: string) => {\n    setNewFamilyMember({...newFamilyMember, name: text});\n    if (validationErrors.name && text.trim()) {\n      setValidationErrors(prev => ({...prev, name: false}));\n    }\n  };\n\n  const handleSurnameChange = (text: string) => {\n    setNewFamilyMember({...newFamilyMember, surname: text});\n    if (validationErrors.surname && text.trim()) {\n      setValidationErrors(prev => ({...prev, surname: false}));\n    }\n  };\n\n  const handleTypeChange = (type: string) => {\n    setNewFamilyMember({...newFamilyMember, type});\n    setShowTypeDropdown(false);\n    if (validationErrors.type) {\n      setValidationErrors(prev => ({...prev, type: false}));\n    }\n  };\n\n  // Обработчик изменения телефона\n  const handlePhoneChange = (text: string) => {\n    setNewFamilyMember({...newFamilyMember, phone: text});\n    // Сбрасываем локальный статус верификации при изменении телефона\n    if (localPhoneVerificationStatus) {\n      setLocalPhoneVerificationStatus(false);\n    }\n  };\n\n  // Обработчик верификации телефона\n  const handleVerifyPhone = () => {\n    if (onVerifyPhone) {\n      onVerifyPhone();\n      // Устанавливаем локальный статус верификации\n      setLocalPhoneVerificationStatus(true);\n    }\n  };\n\n  // Определяем, какую иконку показывать\n  const getPhoneVerificationIcon = () => {\n    // Если есть локальный статус верификации, показываем галочку\n    if (localPhoneVerificationStatus) {\n      return \"checkmark-circle\";\n    }\n    // Иначе показываем щит (по умолчанию)\n    return \"shield-checkmark-outline\";\n  };\n\n  // Определяем цвет иконки\n  const getPhoneVerificationColor = () => {\n    if (localPhoneVerificationStatus) {\n      return '#4CAF50'; // Зеленый для верифицированного\n    }\n    return isDark ? '#3B82F6' : '#083198'; // Синий для неверифицированного\n  };\n\n  const familyTypes = [\n    { key: 'husband', label: t('profile.familyTypes.husband') },\n    { key: 'wife', label: t('profile.familyTypes.wife') },\n    { key: 'son', label: t('profile.familyTypes.son') },\n    { key: 'daughter', label: t('profile.familyTypes.daughter') },\n    { key: 'mother', label: t('profile.familyTypes.mother') },\n    { key: 'father', label: t('profile.familyTypes.father') },\n    { key: 'grandmother', label: t('profile.familyTypes.grandmother') },\n    { key: 'grandfather', label: t('profile.familyTypes.grandfather') },\n    { key: 'brother', label: t('profile.familyTypes.brother') },\n    { key: 'sister', label: t('profile.familyTypes.sister') },\n    { key: 'uncle', label: t('profile.familyTypes.uncle') },\n    { key: 'aunt', label: t('profile.familyTypes.aunt') },\n    { key: 'cousin', label: t('profile.familyTypes.cousin') },\n    { key: 'nephew', label: t('profile.familyTypes.nephew') },\n    { key: 'niece', label: t('profile.familyTypes.niece') },\n    { key: 'stepfather', label: t('profile.familyTypes.stepfather') },\n    { key: 'stepmother', label: t('profile.familyTypes.stepmother') },\n    { key: 'stepson', label: t('profile.familyTypes.stepson') },\n    { key: 'stepdaughter', label: t('profile.familyTypes.stepdaughter') },\n    { key: 'other', label: t('profile.familyTypes.other') },\n  ];\n\n  return (\n    <View style={styles.modalOverlay}>\n      <KeyboardAvoidingView \n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        style={{ flex: 1 }}\n      >\n        <ScrollView \n          contentContainerStyle={styles.modalScrollContainer}\n          showsVerticalScrollIndicator={false}\n          keyboardShouldPersistTaps=\"handled\"\n        >\n          <View style={[styles.modalContent, dynamicStyles.modalContent]}>\n          <Text style={[styles.modalTitle, dynamicStyles.modalTitle]}>\n            {t('profile.addFamilyMember')}\n          </Text>\n          \n          {/* Имя */}\n          <View style={styles.modalInputContainer}>\n            <Text style={[styles.modalInputLabel, dynamicStyles.modalInputLabel]}>\n              {t('profile.firstName')} *\n            </Text>\n            <TextInput\n              style={[styles.modalInput, dynamicStyles.modalInput]}\n              value={newFamilyMember.name}\n              onChangeText={handleNameChange}\n              placeholder={t('profile.firstNamePlaceholder')}\n              placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n            />\n          </View>\n\n          {/* Фамилия */}\n          <View style={styles.modalInputContainer}>\n            <Text style={[styles.modalInputLabel, dynamicStyles.modalInputLabel]}>\n              {t('profile.lastName')} *\n            </Text>\n            <TextInput\n              style={[styles.modalInput, dynamicStyles.modalInput]}\n              value={newFamilyMember.surname}\n              onChangeText={handleSurnameChange}\n              placeholder={t('profile.lastNamePlaceholder')}\n              placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n            />\n          </View>\n\n          {/* Тип */}\n          <View style={[styles.modalInputContainer, styles.typeInputContainer]}>\n            <Text style={[styles.modalInputLabel, dynamicStyles.modalInputLabel]}>\n              {t('profile.familyType')} *\n            </Text>\n            <TouchableOpacity\n              style={[styles.modalSelectButton, dynamicStyles.modalSelectButton]}\n              onPress={() => setShowTypeDropdown(!showTypeDropdown)}\n            >\n              <Text style={[styles.modalSelectText, dynamicStyles.modalSelectText]}>\n                {newFamilyMember.type ? familyTypes.find(t => t.key === newFamilyMember.type)?.label : t('profile.familyTypePlaceholder')}\n              </Text>\n              <Ionicons \n                name={showTypeDropdown ? \"chevron-up\" : \"chevron-down\"} \n                size={16} \n                color={isDark ? '#9CA3AF' : '#666666'} \n              />\n            </TouchableOpacity>\n            \n            {/* Выпадающий список типов */}\n            {showTypeDropdown && (\n              <View style={[styles.typeDropdown, dynamicStyles.typeDropdown]}>\n                <ScrollView style={styles.typeDropdownScroll} showsVerticalScrollIndicator={false}>\n                  {familyTypes.map((type) => (\n                    <TouchableOpacity\n                      key={type.key}\n                      style={[\n                        styles.typeOption, \n                        dynamicStyles.typeOption,\n                        newFamilyMember.type === type.key && styles.typeOptionSelected,\n                        type.key === 'other' && styles.typeOptionLast\n                      ]}\n                      onPress={() => handleTypeChange(type.key)}\n                    >\n                      <Text style={[\n                        styles.typeOptionText, \n                        dynamicStyles.typeOptionText,\n                        newFamilyMember.type === type.key && styles.typeOptionTextSelected\n                      ]}>\n                        {type.label}\n                      </Text>\n                      {newFamilyMember.type === type.key && (\n                        <Ionicons name=\"checkmark\" size={16} color={isDark ? '#3B82F6' : '#083198'} />\n                      )}\n                    </TouchableOpacity>\n                  ))}\n                </ScrollView>\n              </View>\n            )}\n          </View>\n\n          {/* Дата рождения */}\n          <View style={styles.modalInputContainer}>\n            <Text style={[styles.modalInputLabel, dynamicStyles.modalInputLabel]}>\n              {t('profile.familyAge')} *\n            </Text>\n            <View style={[styles.modalInput, dynamicStyles.modalInput, { alignItems: 'flex-start' }]}>\n              <DatePicker\n                value={newFamilyMember.age}\n                onChange={handleDateChange}\n                placeholder={t('profile.familyAgePlaceholder')}\n                inline={true}\n                readOnly={false}\n              />\n            </View>\n          </View>\n\n          {/* Телефон */}\n          <View style={styles.modalInputContainer}>\n            <Text style={[styles.modalInputLabel, dynamicStyles.modalInputLabel]}>\n              {t('profile.phone')}\n            </Text>\n            <View style={[styles.modalInput, dynamicStyles.modalInput, { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }]}>\n              <TextInput\n                style={[dynamicStyles.modalInput, { flex: 1, borderWidth: 0, backgroundColor: 'transparent', padding: 0, margin: 0 }]}\n                value={newFamilyMember.phone}\n                onChangeText={handlePhoneChange}\n                placeholder={t('profile.phonePlaceholder')}\n                placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n                keyboardType=\"phone-pad\"\n              />\n            </View>\n          </View>\n\n          {/* Кнопки */}\n          <View style={styles.modalActions}>\n            <TouchableOpacity\n              style={[styles.modalCancelButton, dynamicStyles.modalCancelButton]}\n              onPress={onClose}\n            >\n              <Text style={[styles.modalCancelButtonText, dynamicStyles.modalCancelButtonText]}>\n                {t('common.cancel')}\n              </Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={[\n                styles.modalSaveButton, \n                dynamicStyles.modalSaveButton,\n                !isFormValid() && styles.modalSaveButtonDisabled\n              ]}\n              onPress={handleAdd}\n              disabled={!isFormValid()}\n            >\n              <Text style={[\n                styles.modalSaveButtonText, \n                dynamicStyles.modalSaveButtonText,\n                !isFormValid() && styles.modalSaveButtonTextDisabled\n              ]}>\n                {t('common.add')}\n              </Text>\n            </TouchableOpacity>\n          </View>\n                  </View>\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </View>\n  );\n};\n\nexport default AddFamilyModal; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/profile/FamilyMemberEditMode.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'phoneVerified' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { View, Text, TouchableOpacity, TextInput, Alert, ScrollView } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useLanguage } from '../../context/LanguageContext';\nimport DatePicker from '../DatePicker';\nimport { calculateAge } from '../../utils/profileHelpers';\nimport { createFamilyMemberItemStyles } from '../../styles/components/profile/FamilyMemberItem.styles';\nimport { FamilyMember } from '../../types/family';\n\ninterface FamilyMemberEditModeProps {\n  member: FamilyMember;\n  editingData: Partial<FamilyMember>;\n  phoneVerified: boolean;\n  onSave: (updatedData: Partial<FamilyMember>) => void;\n  onCancel: () => void;\n  onDelete: () => void;\n  onResetPhoneVerification: () => void;\n  setEditingData: (data: Partial<FamilyMember>) => void;\n}\n\nconst FamilyMemberEditMode: React.FC<FamilyMemberEditModeProps> = ({\n  member,\n  editingData,\n  phoneVerified,\n  onSave,\n  onCancel,\n  onDelete,\n  onResetPhoneVerification,\n  setEditingData,\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useLanguage();\n  const styles = createFamilyMemberItemStyles(isDark);\n  const [showTypeDropdown, setShowTypeDropdown] = useState(false);\n\n  // Локальное определение типов семьи с переводами\n  const familyTypes = [\n    { key: 'husband', label: t('profile.familyTypes.husband') },\n    { key: 'wife', label: t('profile.familyTypes.wife') },\n    { key: 'son', label: t('profile.familyTypes.son') },\n    { key: 'daughter', label: t('profile.familyTypes.daughter') },\n    { key: 'mother', label: t('profile.familyTypes.mother') },\n    { key: 'father', label: t('profile.familyTypes.father') },\n    { key: 'grandmother', label: t('profile.familyTypes.grandmother') },\n    { key: 'grandfather', label: t('profile.familyTypes.grandfather') },\n    { key: 'brother', label: t('profile.familyTypes.brother') },\n    { key: 'sister', label: t('profile.familyTypes.sister') },\n    { key: 'uncle', label: t('profile.familyTypes.uncle') },\n    { key: 'aunt', label: t('profile.familyTypes.aunt') },\n    { key: 'cousin', label: t('profile.familyTypes.cousin') },\n    { key: 'nephew', label: t('profile.familyTypes.nephew') },\n    { key: 'niece', label: t('profile.familyTypes.niece') },\n    { key: 'stepfather', label: t('profile.familyTypes.stepfather') },\n    { key: 'stepmother', label: t('profile.familyTypes.stepmother') },\n    { key: 'stepson', label: t('profile.familyTypes.stepson') },\n    { key: 'stepdaughter', label: t('profile.familyTypes.stepdaughter') },\n    { key: 'other', label: t('profile.familyTypes.other') },\n  ];\n\n  const hasChanges = () => {\n    return (\n      editingData.name !== member.name ||\n      editingData.surname !== member.surname ||\n      editingData.type !== member.type ||\n      editingData.birthDate !== member.birthDate ||\n      (editingData.phone || '') !== (member.phone || '')\n    );\n  };\n\n  const handleSave = () => {\n    if (hasChanges()) {\n      Alert.alert(\n        t('common.confirmation'),\n        t('profile.family.confirmSave'),\n        [\n          { text: t('common.cancel'), style: 'cancel' },\n          { \n            text: t('common.save'), \n            onPress: () => {\n              const updatedData = {\n                ...editingData,\n                age: calculateAge(editingData.birthDate || member.birthDate),\n                phone: editingData.phone?.trim() || undefined,\n              };\n              onSave(updatedData);\n            }\n          }\n        ]\n      );\n    } else {\n      onCancel();\n    }\n  };\n\n  const handleDelete = () => {\n    Alert.alert(\n      t('common.confirmation'),\n      t('profile.family.confirmDelete'),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        { text: t('common.delete'), style: 'destructive', onPress: onDelete }\n      ]\n    );\n  };\n\n  return (\n    <View>\n      {/* Имя */}\n      <View style={styles.fieldContainer}>\n        <Text style={styles.fieldLabel}>\n          {t('profile.firstName')}:\n        </Text>\n        <TextInput\n          style={styles.fieldInput}\n          value={editingData.name}\n          onChangeText={(text) => setEditingData({...editingData, name: text})}\n          placeholder={t('profile.firstNamePlaceholder')}\n          placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n        />\n      </View>\n\n      {/* Фамилия */}\n      <View style={styles.fieldContainer}>\n        <Text style={styles.fieldLabel}>\n          {t('profile.lastName')}:\n        </Text>\n        <TextInput\n          style={styles.fieldInput}\n          value={editingData.surname}\n          onChangeText={(text) => setEditingData({...editingData, surname: text})}\n          placeholder={t('profile.lastNamePlaceholder')}\n          placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n        />\n      </View>\n\n      {/* Тип члена семьи */}\n      <View style={styles.fieldContainer}>\n        <Text style={styles.fieldLabel}>\n          {t('profile.familyType')}:\n        </Text>\n        <View style={styles.typeDropdownContainer}>\n          <TouchableOpacity\n            style={styles.typeDropdownButton}\n            onPress={() => setShowTypeDropdown(!showTypeDropdown)}\n          >\n            <Text style={styles.typeDropdownText}>\n              {editingData.type ? familyTypes.find(t => t.key === editingData.type)?.label : t('profile.familyTypePlaceholder')}\n            </Text>\n            <Ionicons \n              name={showTypeDropdown ? \"chevron-up\" : \"chevron-down\"} \n              size={16} \n              color={isDark ? '#9CA3AF' : '#666666'} \n            />\n          </TouchableOpacity>\n          \n          {/* Выпадающий список типов */}\n          {showTypeDropdown && (\n            <View style={styles.typeDropdownList}>\n              <ScrollView style={{ maxHeight: 200 }} showsVerticalScrollIndicator={false}>\n                {familyTypes.map((type) => (\n                  <TouchableOpacity\n                    key={type.key}\n                    style={[\n                      styles.typeDropdownItem,\n                      type.key === 'other' && styles.typeDropdownItemLast,\n                      (editingData.type || member.type) === type.key && styles.typeDropdownItemSelected\n                    ]}\n                    onPress={() => {\n                      setEditingData({...editingData, type: type.key});\n                      setShowTypeDropdown(false);\n                    }}\n                  >\n                    <Text style={[\n                      styles.typeDropdownItemText,\n                      (editingData.type || member.type) === type.key && styles.typeDropdownItemTextSelected\n                    ]}>\n                      {type.label}\n                    </Text>\n                    {(editingData.type || member.type) === type.key && (\n                      <Ionicons name=\"checkmark\" size={16} color={isDark ? '#3B82F6' : '#083198'} />\n                    )}\n                  </TouchableOpacity>\n                ))}\n              </ScrollView>\n            </View>\n          )}\n        </View>\n      </View>\n\n      {/* Дата рождения */}\n      <View style={styles.fieldContainer}>\n        <Text style={styles.fieldLabel}>\n          {t('profile.birthDate')}:\n        </Text>\n        <View style={styles.fieldDisplay}>\n          <DatePicker\n            value={editingData.birthDate || member.birthDate}\n            onChange={(date) => setEditingData({...editingData, birthDate: date})}\n            placeholder={t('profile.birthDatePlaceholder')}\n            inline={true}\n            readOnly={false}\n          />\n        </View>\n      </View>\n\n      {/* Телефон */}\n      <View style={styles.lastFieldContainer}>\n        <Text style={styles.fieldLabel}>\n          {t('profile.phone')}:\n        </Text>\n        <View style={styles.phoneContainer}>\n          <TextInput\n            style={styles.phoneInput}\n            value={editingData.phone ?? ''}\n            onChangeText={(text) => {\n              setEditingData({...editingData, phone: text});\n              if (text !== (member.phone ?? '')) {\n                onResetPhoneVerification();\n              }\n            }}\n            placeholder={t('profile.phonePlaceholder')}\n            placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n            keyboardType=\"phone-pad\"\n            editable={true}\n            selectTextOnFocus={false}\n          />\n          {editingData.phone && (\n            <TouchableOpacity\n              style={styles.clearButton}\n              onPress={() => {\n                setEditingData({...editingData, phone: ''});\n                onResetPhoneVerification();\n              }}\n            >\n              <Ionicons name=\"close-circle\" size={16} color={isDark ? '#9CA3AF' : '#666666'} />\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n\n      {/* Кнопки действий */}\n      <View style={styles.actionButtonsContainer}>\n        <TouchableOpacity\n          style={styles.deleteButton}\n          onPress={handleDelete}\n        >\n          <Text style={styles.buttonText}>\n            {t('common.delete')}\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={styles.saveButton}\n          onPress={handleSave}\n        >\n          <Text style={styles.buttonText}>\n            {t('common.save')}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default FamilyMemberEditMode; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/profile/FamilyMemberItem.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'member.birthDate', 'member.name', 'member.phone', 'member.surname', 'member.type', and 'saveRef'. Either include them or remove the dependency array. If 'setEditingData' needs the current value of 'member.name', you can also switch to useReducer instead of useState and read 'member.name' in the reducer.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [isEditing, member.birthDate, member.id, member.name, member.phone, member.surname, member.type, saveRef]","fix":{"range":[1573,1595],"text":"[isEditing, member.birthDate, member.id, member.name, member.phone, member.surname, member.type, saveRef]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'saveRef'. Either include it or remove the dependency array.","line":69,"column":6,"nodeType":"ArrayExpression","endLine":69,"endColumn":56,"suggestions":[{"desc":"Update the dependencies array to be: [isEditing, editingData, member.birthDate, onSave, saveRef]","fix":{"range":[2069,2119],"text":"[isEditing, editingData, member.birthDate, onSave, saveRef]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, Alert } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { createFamilyMemberItemStyles } from '../../styles/components/profile/FamilyMemberItem.styles';\nimport { FamilyMemberItemProps, FamilyMember } from '../../types/family';\nimport { calculateAge } from '../../utils/profileHelpers';\nimport FamilyMemberEditMode from './FamilyMemberEditMode';\nimport FamilyMemberViewMode from './FamilyMemberViewMode';\n\n\n\nconst FamilyMemberItem: React.FC<FamilyMemberItemProps> = ({\n  member,\n  isExpanded,\n  isEditing,\n  phoneVerified,\n  onToggle,\n  onStartEditing,\n  onCancelEditing,\n  onSave,\n  onDelete,\n  onResetPhoneVerification,\n  onVerifyPhone,\n  saveRef,\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const styles = createFamilyMemberItemStyles(isDark);\n  \n  const [editingData, setEditingData] = useState<Partial<FamilyMember>>({\n    name: member.name,\n    surname: member.surname,\n    type: member.type,\n    birthDate: member.birthDate,\n    phone: member.phone ?? '',\n  });\n\n  React.useEffect(() => {\n    if (isEditing) {\n      setEditingData({\n        name: member.name,\n        surname: member.surname,\n        type: member.type,\n        birthDate: member.birthDate,\n        phone: member.phone ?? '',\n      });\n    } else {\n      // Очищаем функцию сохранения\n      if (saveRef?.current) {\n        saveRef.current = null;\n      }\n    }\n  }, [isEditing, member.id]); // Изменили зависимость с member на member.id\n\n  // Отдельный useEffect для установки функции сохранения с актуальными данными\n  React.useEffect(() => {\n    if (isEditing && saveRef?.current) {\n      saveRef.current = () => {\n        const updatedData = {\n          ...editingData,\n          age: calculateAge(editingData.birthDate || member.birthDate),\n          phone: editingData.phone?.trim() || undefined,\n        };\n        onSave(updatedData);\n      };\n    }\n  }, [isEditing, editingData, member.birthDate, onSave]); // Добавили editingData в зависимости\n\n  const hasChanges = () => {\n    const phoneChanged = (editingData.phone ?? '') !== (member.phone ?? '');\n    return (\n      editingData.name !== member.name ||\n      editingData.surname !== member.surname ||\n      editingData.type !== member.type ||\n      editingData.birthDate !== member.birthDate ||\n      phoneChanged\n    );\n  };\n\n  const handleToggle = () => {\n    if (isEditing && hasChanges()) {\n      // Показываем диалог подтверждения сохранения изменений\n      Alert.alert(\n        t('common.confirmation'),\n        t('profile.family.confirmSave'),\n        [\n          { \n            text: t('common.cancel'), \n            style: 'cancel',\n            onPress: () => {\n              // При отмене НЕ делаем ничего - остаемся в режиме редактирования\n              // НЕ закрываем блок, НЕ сбрасываем изменения\n            }\n          },\n          { \n            text: t('common.save'), \n            onPress: () => {\n              // Сохраняем изменения и закрываем\n              const updatedData = {\n                ...editingData,\n                age: calculateAge(editingData.birthDate || member.birthDate),\n                phone: editingData.phone?.trim() || undefined,\n              };\n              onSave(updatedData);\n              onToggle();\n            }\n          }\n        ]\n      );\n    } else if (isEditing && !hasChanges()) {\n      // Если в режиме редактирования, но нет изменений - сразу закрываем блок\n      onCancelEditing();\n      onToggle();\n    } else {\n      // Обычное переключение (открыть/закрыть блок)\n      onToggle();\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* Заголовок члена семьи */}\n      <TouchableOpacity \n        style={styles.headerContainer}\n        onPress={handleToggle}\n        activeOpacity={0.7}\n      >\n        <View style={styles.headerTextContainer}>\n          <Text style={styles.headerName}>\n            {member.name} {member.surname}\n          </Text>\n          <Text style={styles.headerSubtitle}>\n            {t(`profile.familyTypes.${member.type}`)} • {member.age} {t('profile.years')}\n          </Text>\n        </View>\n        <Ionicons \n          name=\"chevron-forward\" \n          size={20} \n          color={isDark ? '#9CA3AF' : '#666666'}\n          style={[styles.headerIcon, { transform: [{ rotate: isExpanded ? '90deg' : '0deg' }] }]}\n        />\n      </TouchableOpacity>\n      \n      {/* Расширенная информация */}\n      {isExpanded && (\n        <View style={styles.expandedContainer}>\n          {isEditing ? (\n            <FamilyMemberEditMode\n              member={member}\n              editingData={editingData}\n              phoneVerified={phoneVerified}\n              onSave={onSave}\n              onCancel={onCancelEditing}\n              onDelete={onDelete}\n              onResetPhoneVerification={onResetPhoneVerification}\n              setEditingData={setEditingData}\n            />\n          ) : (\n            <FamilyMemberViewMode\n              member={member}\n              phoneVerified={phoneVerified}\n              onStartEditing={onStartEditing}\n              onVerifyPhone={onVerifyPhone}\n            />\n          )}\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport default FamilyMemberItem; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/profile/FamilyMemberViewMode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/profile/FamilySection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ScrollView' is defined but never used.","line":2,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TextInput' is defined but never used.","line":2,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editingData' is assigned a value but never used.","line":56,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setEditingData' is assigned a value but never used.","line":56,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'saveRef' is assigned a value but never used.","line":59,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, TextInput } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport FamilyMemberItem from './FamilyMemberItem';\nimport { FamilySectionStyles as styles, getFamilySectionColors } from '../../styles/components/profile/FamilySection.styles';\n\ninterface FamilyMember {\n  id: string;\n  name: string;\n  surname: string;\n  type: string;\n  birthDate: string;\n  age: number;\n  phone?: string;\n  phoneVerified?: boolean;\n}\n\ninterface FamilySectionProps {\n  familyMembers: FamilyMember[];\n  expandedFamilyMember: string | null;\n  editingFamilyMember: string | null;\n  familyPhoneVerification: {[key: string]: boolean};\n  onToggleFamilyMember: (memberId: string) => void;\n  onOpenAddFamilyModal: () => void;\n  onStartEditing: (memberId: string) => void;\n  onCancelEditing: () => void;\n  onSaveMember: (memberId: string, updatedData: Partial<FamilyMember>) => void;\n  onDeleteMember: (memberId: string) => void;\n  onResetPhoneVerification: (memberId: string) => void;\n  onVerifyPhone: (memberId: string) => void;\n  saveFamilyRef?: React.RefObject<(() => void) | null>;\n}\n\nconst FamilySection: React.FC<FamilySectionProps> = ({\n  familyMembers,\n  expandedFamilyMember,\n  editingFamilyMember,\n  familyPhoneVerification,\n  onToggleFamilyMember,\n  onOpenAddFamilyModal,\n  onStartEditing,\n  onCancelEditing,\n  onSaveMember,\n  onDeleteMember,\n  onResetPhoneVerification,\n  onVerifyPhone,\n  saveFamilyRef,\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const dynamicStyles = getFamilySectionColors(isDark);\n  \n  // Состояние для редактируемых данных\n  const [editingData, setEditingData] = useState<{[key: string]: Partial<FamilyMember>}>({});\n  \n  // Ref для хранения функции сохранения\n  const saveRef = useRef<(() => void) | null>(null);\n\n  return (\n    <View style={styles.familySection}>\n      <View style={styles.sectionHeader}>\n        <Text style={[styles.sectionTitle, dynamicStyles.sectionTitle]}>\n          {t('profile.familyInfo')}\n        </Text>\n        <TouchableOpacity \n          style={[styles.addIconButton, dynamicStyles.addIconButton]}\n          onPress={onOpenAddFamilyModal}\n        >\n          <Ionicons name=\"add\" size={20} color={isDark ? '#3B82F6' : '#083198'} />\n        </TouchableOpacity>\n      </View>\n      \n      {familyMembers.map((member) => (\n        <FamilyMemberItem\n          key={member.id}\n          member={member}\n          isExpanded={expandedFamilyMember === member.id}\n          isEditing={editingFamilyMember === member.id}\n          phoneVerified={familyPhoneVerification[member.id] || member.phoneVerified || false}\n          onToggle={() => onToggleFamilyMember(member.id)}\n          onStartEditing={() => onStartEditing(member.id)}\n          onCancelEditing={onCancelEditing}\n          onSave={(updatedData) => onSaveMember(member.id, updatedData)}\n          onDelete={() => onDeleteMember(member.id)}\n          onResetPhoneVerification={() => onResetPhoneVerification(member.id)}\n          onVerifyPhone={() => onVerifyPhone(member.id)}\n          saveRef={saveFamilyRef}\n        />\n      ))}\n    </View>\n  );\n};\n\nexport default FamilySection; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/profile/PersonalInfoSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[653,656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[653,656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { View, Text, TouchableOpacity, TextInput } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useLanguage } from '../../context/LanguageContext';\nimport DatePicker from '../DatePicker';\nimport { PersonalInfoSectionStyles as styles, getPersonalInfoSectionColors } from '../../styles/components/profile/PersonalInfoSection.styles';\n\ninterface PersonalInfoSectionProps {\n  formData: {\n    firstName: string;\n    lastName: string;\n    phone: string;\n    email: string;\n    birthDate: string;\n  };\n  setFormData: (data: any) => void;\n  isEditing: boolean;\n  verificationStatus: {\n    email: boolean;\n    phone: boolean;\n  };\n  isVerifying: {\n    email: boolean;\n    phone: boolean;\n  };\n  onVerifyEmail: () => void;\n  onVerifyPhone: () => void;\n  onResetVerification: (type: 'email' | 'phone') => void;\n}\n\nconst PersonalInfoSection: React.FC<PersonalInfoSectionProps> = ({\n  formData,\n  setFormData,\n  isEditing,\n  verificationStatus,\n  isVerifying,\n  onVerifyEmail,\n  onVerifyPhone,\n  onResetVerification,\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useLanguage();\n  const dynamicStyles = getPersonalInfoSectionColors(isDark);\n\n  return (\n    <View style={styles.section}>\n      <Text style={[styles.sectionTitle, dynamicStyles.sectionTitle]}>\n        {t('profile.personalInfo')}\n      </Text>\n      \n      {/* Имя */}\n      <View style={[styles.infoRow, dynamicStyles.infoRow, isEditing && styles.infoRowEditing]}>\n        <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('profile.firstName')}:</Text>\n        {isEditing ? (\n          <TextInput\n            style={[styles.infoValue, dynamicStyles.infoValue, styles.infoInput]}\n            value={formData.firstName}\n            onChangeText={(text) => setFormData({...formData, firstName: text})}\n            placeholder={t('profile.firstNamePlaceholder')}\n            placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n          />\n        ) : (\n          <Text style={[styles.infoValue, dynamicStyles.infoValue]}>{formData.firstName}</Text>\n        )}\n      </View>\n\n      {/* Фамилия */}\n      <View style={[styles.infoRow, dynamicStyles.infoRow, isEditing && styles.infoRowEditing]}>\n        <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('profile.lastName')}:</Text>\n        {isEditing ? (\n          <TextInput\n            style={[styles.infoValue, dynamicStyles.infoValue, styles.infoInput]}\n            value={formData.lastName}\n            onChangeText={(text) => setFormData({...formData, lastName: text})}\n            placeholder={t('profile.lastNamePlaceholder')}\n            placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n          />\n        ) : (\n          <Text style={[styles.infoValue, dynamicStyles.infoValue]}>{formData.lastName}</Text>\n        )}\n      </View>\n\n      {/* Телефон */}\n      <View style={[styles.infoRow, dynamicStyles.infoRow, isEditing && styles.infoRowEditing]}>\n        <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('profile.phone')}:</Text>\n        <View style={styles.infoValueContainer}>\n          {isEditing ? (\n            <TextInput\n              style={[styles.infoValue, dynamicStyles.infoValue, styles.infoInput]}\n              value={formData.phone}\n              onChangeText={(text) => {\n                setFormData({...formData, phone: text});\n                // Сбрасываем верификацию при изменении номера\n                if (verificationStatus.phone && text !== formData.phone) {\n                  onResetVerification('phone');\n                }\n              }}\n              placeholder={t('profile.phonePlaceholder')}\n              placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n              keyboardType=\"phone-pad\"\n            />\n          ) : (\n            <Text style={[styles.infoValue, dynamicStyles.infoValue]}>{formData.phone}</Text>\n          )}\n          {verificationStatus.phone ? (\n            // Если верифицирован - показываем галочку (некликабельную)\n            <View style={styles.verifyButton}>\n              <Ionicons \n                name=\"checkmark-circle\" \n                size={20} \n                color=\"#4CAF50\" \n              />\n            </View>\n          ) : (\n            // Если не верифицирован - показываем кликабельный щит\n            <TouchableOpacity\n              style={styles.verifyButton}\n              onPress={onVerifyPhone}\n              disabled={isVerifying.phone}\n            >\n              <Ionicons \n                name=\"shield-checkmark-outline\" \n                size={20} \n                color={isDark ? '#3B82F6' : '#083198'} \n              />\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n\n      {/* Email */}\n      <View style={[styles.infoRow, dynamicStyles.infoRow, isEditing && styles.infoRowEditing]}>\n        <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('profile.email')}:</Text>\n        <View style={styles.infoValueContainer}>\n          {isEditing ? (\n            <TextInput\n              style={[styles.infoValue, dynamicStyles.infoValue, styles.infoInput]}\n              value={formData.email}\n              onChangeText={(text) => {\n                setFormData({...formData, email: text});\n                // Сбрасываем верификацию при изменении email\n                if (verificationStatus.email && text !== formData.email) {\n                  onResetVerification('email');\n                }\n              }}\n              placeholder={t('profile.emailPlaceholder')}\n              placeholderTextColor={isDark ? '#9CA3AF' : '#666666'}\n              keyboardType=\"email-address\"\n            />\n          ) : (\n            <Text style={[styles.infoValue, dynamicStyles.infoValue]}>{formData.email}</Text>\n          )}\n          {verificationStatus.email ? (\n            // Если верифицирован - показываем галочку (некликабельную)\n            <View style={styles.verifyButton}>\n              <Ionicons \n                name=\"checkmark-circle\" \n                size={20} \n                color=\"#4CAF50\" \n              />\n            </View>\n          ) : (\n            // Если не верифицирован - показываем кликабельный щит\n            <TouchableOpacity\n              style={styles.verifyButton}\n              onPress={onVerifyEmail}\n              disabled={isVerifying.email}\n            >\n              <Ionicons \n                name=\"shield-checkmark-outline\" \n                size={20} \n                color={isDark ? '#3B82F6' : '#083198'} \n              />\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n\n      {/* Дата рождения */}\n      <View style={[styles.infoRow, dynamicStyles.infoRow, isEditing && styles.infoRowEditing]}>\n        <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('profile.birthDate')}:</Text>\n        <DatePicker\n          value={formData.birthDate}\n          onChange={(date) => setFormData({...formData, birthDate: date})}\n          placeholder={t('profile.birthDatePlaceholder')}\n          inline={isEditing}\n          readOnly={!isEditing}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default PersonalInfoSection; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/profile/ProfileAvatarSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3066,3069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3066,3069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, Image, Animated, Modal } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { useAvatar } from '../../hooks/useAvatar';\nimport { usePackage } from '../../context/PackageContext';\nimport { ProfileAvatarSectionStyles as styles, getProfileAvatarSectionColors } from '../../styles/components/profile/ProfileAvatarSection.styles';\nimport { getPackageIcon, getPackageColor } from '../../utils/packageVisuals';\n\ninterface ProfileAvatarSectionProps {\n  userName: string;\n  userSurname: string;\n  onCirclePress: () => void;\n  rotateAnim: Animated.Value;\n}\n\nconst ProfileAvatarSection: React.FC<ProfileAvatarSectionProps> = ({\n  userName,\n  userSurname,\n  onCirclePress,\n  rotateAnim,\n}) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { avatarUri, loading, showAvatarOptions } = useAvatar();\n  const { currentPackage } = usePackage();\n  const dynamicStyles = getProfileAvatarSectionColors(isDark);\n  const [showAvatarModal, setShowAvatarModal] = useState(false);\n  const [forceUpdate, setForceUpdate] = useState(0);\n\n  // Принудительно перерендериваем компонент при изменении пакета\n  useEffect(() => {\n    setForceUpdate(prev => prev + 1);\n  }, [currentPackage]);\n\n  const handleAvatarPress = () => {\n    if (avatarUri) {\n      setShowAvatarModal(true);\n    }\n  };\n\n  const closeAvatarModal = () => {\n    setShowAvatarModal(false);\n  };\n\n\n\n  return (\n    <View style={styles.avatarSection}>\n      <View style={[styles.profileNameBox, dynamicStyles.profileNameBox]}>\n        <TouchableOpacity \n          style={styles.avatar}\n          onPress={handleAvatarPress}\n          disabled={!avatarUri}\n        >\n          {avatarUri ? (\n            <Image source={{ uri: avatarUri }} style={styles.avatarImage} />\n          ) : (\n            <Ionicons \n              name=\"person-circle-outline\" \n              size={60} \n              color=\"#FFFFFF\" \n            />\n          )}\n          <TouchableOpacity \n            style={[styles.addPhotoButton, loading && { opacity: 0.5 }]}\n            onPress={showAvatarOptions}\n            disabled={loading}\n            accessibilityLabel={avatarUri ? t('profile.changePhoto') : t('profile.addPhoto')}\n          >\n            {loading ? (\n              <Ionicons name=\"hourglass-outline\" size={12} color=\"#083198\" />\n            ) : (\n              <Ionicons name={avatarUri ? \"camera\" : \"add\"} size={12} color=\"#083198\" />\n            )}\n          </TouchableOpacity>\n        </TouchableOpacity>\n        <View style={styles.nameAndIconContainer}>\n          <Text \n            style={[styles.profileName, dynamicStyles.profileName]}\n            numberOfLines={1}\n            ellipsizeMode=\"tail\"\n          >\n            {userName} {userSurname}\n          </Text>\n          <View style={styles.packageIconContainer}>\n            <Ionicons \n              name={getPackageIcon(currentPackage) as any} \n              size={20} \n              color={getPackageColor(currentPackage)} \n              key={`package-icon-${currentPackage}-${forceUpdate}`}\n              style={{ opacity: getPackageIcon(currentPackage) ? 1 : 0.5 }}\n            />\n          </View>\n        </View>\n        <TouchableOpacity \n          style={[styles.rightCircle, dynamicStyles.rightCircle]}\n          onPress={onCirclePress}\n          activeOpacity={0.7}\n        >\n          <Animated.View\n            style={{\n              alignItems: 'center',\n              justifyContent: 'center',\n              transform: [{\n                rotate: rotateAnim.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: ['0deg', '180deg']\n                })\n              }]\n            }}\n          >\n            <Ionicons name=\"sync\" size={20} color={isDark ? '#9CA3AF' : '#666666'} />\n          </Animated.View>\n        </TouchableOpacity>\n      </View>\n\n      {/* Модальное окно для просмотра аватара */}\n      <Modal\n        visible={showAvatarModal}\n        transparent={true}\n        animationType=\"fade\"\n        onRequestClose={closeAvatarModal}\n      >\n        <View style={styles.avatarModalOverlay}>\n          <TouchableOpacity \n            style={styles.avatarModalBackground} \n            onPress={closeAvatarModal}\n            activeOpacity={1}\n          >\n            <TouchableOpacity \n              style={styles.avatarModalContent}\n              onPress={() => {}} // Предотвращаем закрытие при нажатии на фото\n              activeOpacity={1}\n            >\n              <Image \n                source={{ uri: avatarUri }} \n                style={styles.avatarModalImage}\n                resizeMode=\"contain\"\n              />\n            </TouchableOpacity>\n          </TouchableOpacity>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nexport default ProfileAvatarSection; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/profile/ProfileHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/components/profile/VipSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dynamicStyles' is assigned a value but never used.","line":16,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { VipSectionStyles as styles, getVipSectionColors } from '../../styles/components/profile/VipSection.styles';\n\ninterface VipSectionProps {\n  onVipPress?: () => void;\n}\n\nconst VipSection: React.FC<VipSectionProps> = ({ onVipPress }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const dynamicStyles = getVipSectionColors(isDark);\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        style={styles.vipButtonContainer}\n        onPress={onVipPress}\n        activeOpacity={0.8}\n      >\n        <LinearGradient\n          colors={['#FFD700', '#FFA500', '#FF8C00', '#FFD700']}\n          start={{ x: 0, y: 0 }}\n          end={{ x: 1, y: 1 }}\n          style={styles.vipButton}\n        >\n          <Ionicons name=\"diamond\" size={16} color=\"#fff\" style={styles.buttonIcon} />\n          <Text style={[styles.vipButtonText, { color: '#fff' }]}>{t('profile.becomePremium')}</Text>\n        </LinearGradient>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default VipSection; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/config/database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/config/environment.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useAuth' is assigned a value but never used.","line":102,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Конфигурация окружения для FixDrive\n\nexport const ENV_CONFIG = {\n  // API конфигурация\n  API: {\n    // Базовый URL для API\n    BASE_URL: __DEV__ \n      ? 'http://31.97.76.106:8080'  // Реальный сервер в разработке\n      : 'https://api.fixdrive.com', // Продакшен URL\n    \n    // Таймаут запросов (30 секунд)\n    TIMEOUT: 30000,\n    \n    // Заголовки по умолчанию\n    DEFAULT_HEADERS: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    },\n  },\n\n  // JWT конфигурация\n  JWT: {\n    // Секретный ключ (должен совпадать с бэкендом)\n    SECRET: 'default-secret-change-me',\n    \n    // Время жизни токенов (должно совпадать с бэкендом)\n    ACCESS_TOKEN_EXPIRY: 30 * 60, // 30 минут\n    REFRESH_TOKEN_EXPIRY: 30 * 24 * 60 * 60, // 30 дней\n  },\n\n  // Twilio конфигурация для OTP\n  TWILIO: {\n    ACCOUNT_SID: process.env.EXPO_PUBLIC_TWILIO_ACCOUNT_SID || '',\n    AUTH_TOKEN: process.env.EXPO_PUBLIC_TWILIO_AUTH_TOKEN || '',\n    FROM_PHONE: process.env.EXPO_PUBLIC_TWILIO_FROM_PHONE || '',\n  },\n\n  // Redis конфигурация (если нужно)\n  REDIS: {\n    HOST: process.env.EXPO_PUBLIC_REDIS_HOST || '31.97.76.106',\n    PORT: process.env.EXPO_PUBLIC_REDIS_PORT || '6379',\n    PASSWORD: process.env.EXPO_PUBLIC_REDIS_PASSWORD || '',\n    DB: 0,\n  },\n\n  // Stripe конфигурация\n  STRIPE: {\n    PUBLISHABLE_KEY: process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY || 'pk_test_...',\n    SECRET_KEY: process.env.EXPO_PUBLIC_STRIPE_SECRET_KEY || 'sk_test_...',\n  },\n\n  // Поддержка\n  SUPPORT: {\n    EMAIL: process.env.EXPO_PUBLIC_SUPPORT_EMAIL || 'support@fixdrive.com',\n    PHONE: process.env.EXPO_PUBLIC_SUPPORT_PHONE || '+994501234567',\n  },\n\n  // Карты\n  MAP: {\n    MAPTILER_API_KEY: process.env.EXPO_PUBLIC_MAPTILER_API_KEY || 'your_maptiler_key_here',\n  },\n\n  // Логирование\n  LOGGING: {\n    // Включить логирование API запросов\n    ENABLE_API_LOGS: __DEV__,\n    \n    // Включить логирование ошибок\n    ENABLE_ERROR_LOGS: true,\n    \n    // Маскировать чувствительные данные\n    MASK_SENSITIVE_DATA: true,\n  },\n};\n\n// Функция для логирования ошибок\nexport const logError = (error: Error | string, context?: string) => {\n  if (ENV_CONFIG.LOGGING.ENABLE_ERROR_LOGS) {\n    const timestamp = new Date().toISOString();\n    const errorMessage = error instanceof Error ? error.message : error;\n    console.error(`[${timestamp}] ${context ? `[${context}] ` : ''}${errorMessage}`);\n    \n    if (error instanceof Error && error.stack) {\n      console.error(error.stack);\n    }\n  }\n};\n\n// Утилиты для работы с конфигурацией\nexport const ConfigUtils = {\n  /**\n   * Получить полный URL для API эндпоинта\n   */\n  getApiUrl(endpoint: string): string {\n    return `${ENV_CONFIG.API.BASE_URL}${endpoint}`;\n  },\n\n  /**\n   * Получить заголовки для авторизованных запросов\n   */\n  async getAuthHeaders(): Promise<Record<string, string>> {\n    const { useAuth } = await import('../context/AuthContext');\n    // В реальном использовании нужно получить контекст\n    // Здесь возвращаем базовые заголовки\n    return {\n      ...ENV_CONFIG.API.DEFAULT_HEADERS,\n    };\n  },\n\n  /**\n   * Проверить, доступен ли сервер\n   */\n  async checkServerHealth(): Promise<boolean> {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000);\n      \n      const response = await fetch(this.getApiUrl('/health'), {\n        method: 'GET',\n        signal: controller.signal,\n      });\n      \n      clearTimeout(timeoutId);\n      return response.ok;\n    } catch (error) {\n      console.error('Server health check failed:', error);\n      return false;\n    }\n  },\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/config/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/constants/colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/constants/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/constants/tripPricing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/constants/vipPackages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/context/AuthContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/context/BalanceContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadBalance', 'loadEarnings', and 'loadTransactions'. Either include them or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadBalance, loadEarnings, loadTransactions, user]","fix":{"range":[1458,1464],"text":"[loadBalance, loadEarnings, loadTransactions, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { BalanceService, TransactionRecord } from '../services/BalanceService';\n\ninterface BalanceContextType {\n  balance: number;\n  earnings: number;\n  transactions: TransactionRecord[];\n  addEarnings: (amount: number) => Promise<{ newBalance: number; newEarnings: number }>;\n  topUpBalance: (amount: number) => Promise<boolean>;\n  withdrawBalance: (amount: number) => Promise<boolean>;\n  resetBalance: () => Promise<void>;\n  resetEarnings: () => Promise<number>;\n  loadBalance: () => Promise<void>;\n  loadEarnings: () => Promise<void>;\n}\n\nconst BalanceContext = createContext<BalanceContextType | undefined>(undefined);\n\nexport const useBalanceContext = () => {\n  const context = useContext(BalanceContext);\n  if (!context) {\n    throw new Error('useBalanceContext must be used within a BalanceProvider');\n  }\n  return context;\n};\n\ninterface BalanceProviderProps {\n  children: React.ReactNode;\n}\n\nexport const BalanceProvider: React.FC<BalanceProviderProps> = ({ children }) => {\n  const { user } = useAuth();\n  const [balance, setBalance] = useState(0);\n  const [earnings, setEarnings] = useState(0);\n  const [transactions, setTransactions] = useState<TransactionRecord[]>([]);\n\n  // Загружаем данные при инициализации\n  useEffect(() => {\n    if (user) {\n      loadBalance();\n      loadEarnings();\n      loadTransactions();\n    }\n  }, [user]);\n\n  const loadBalance = async () => {\n    if (!user) return;\n    try {\n      const data = await BalanceService.getBalance(user.id);\n      setBalance(data.balance);\n      const list = await BalanceService.getTransactions(user.id);\n      setTransactions(list);\n    } catch (error) {\n      console.error('Error loading balance:', error);\n      setBalance(0);\n    }\n  };\n\n  const loadEarnings = async () => {\n    // В DEV/минимальной версии earnings считаем агрегатом транзакций типа credit с пометкой 'earning'\n    if (!user) return;\n    try {\n      const list = await BalanceService.getTransactions(user.id);\n      setTransactions(list);\n      const total = list\n        .filter(t => t.type === 'credit' && /earning|заработ/gi.test(t.description || ''))\n        .reduce((acc, t) => acc + t.amount, 0);\n      setEarnings(total);\n    } catch (error) {\n      console.error('Error loading earnings:', error);\n      setEarnings(0);\n    }\n  };\n\n  const loadTransactions = async () => {\n    if (!user) return;\n    try {\n      const list = await BalanceService.getTransactions(user.id);\n      setTransactions(list);\n    } catch (error) {\n      console.error('Error loading transactions:', error);\n      setTransactions([]);\n    }\n  };\n\n  const addEarnings = async (amount: number) => {\n    if (!user) return { newBalance: balance, newEarnings: earnings };\n    await BalanceService.addTransaction(user.id, {\n      amount,\n      type: 'credit',\n      description: `earning ${amount}`,\n    });\n    const b = await BalanceService.getBalance(user.id);\n    const list = await BalanceService.getTransactions(user.id);\n    setBalance(b.balance);\n    setTransactions(list);\n    const total = list\n      .filter(t => t.type === 'credit' && /earning|заработ/gi.test(t.description || ''))\n      .reduce((acc, t) => acc + t.amount, 0);\n    setEarnings(total);\n    return { newBalance: b.balance, newEarnings: total };\n  };\n\n  // Stripe top-up flow (DEV: instant credit; PROD: backend orchestrates Stripe)\n  const topUpBalance = async (amount: number): Promise<boolean> => {\n    if (!user) return false;\n    try {\n      if (__DEV__) {\n        await BalanceService.addTransaction(user.id, {\n          amount,\n          type: 'credit',\n          description: `topup ${amount}`,\n        });\n      } else {\n        // Backend should create PaymentIntent and confirm; here we assume success\n        // await APIClient.post('/payments/stripe/topup', { userId: user.id, amount });\n      }\n      const b = await BalanceService.getBalance(user.id);\n      const list = await BalanceService.getTransactions(user.id);\n      setBalance(b.balance);\n      setTransactions(list);\n      return true;\n    } catch (e) {\n      console.error('Top-up error', e);\n      return false;\n    }\n  };\n\n  const withdrawBalance = async (amount: number): Promise<boolean> => {\n    if (!user) return false;\n    try {\n      // Represent withdrawal as debit transaction\n      await BalanceService.addTransaction(user.id, {\n        amount,\n        type: 'debit',\n        description: `withdrawal ${amount}`,\n      });\n      const b = await BalanceService.getBalance(user.id);\n      const list = await BalanceService.getTransactions(user.id);\n      setBalance(b.balance);\n      setTransactions(list);\n      return true;\n    } catch (e) {\n      console.error('Withdraw error', e);\n      return false;\n    }\n  };\n\n  const resetBalance = async () => {\n    try {\n      setBalance(0);\n      setEarnings(0);\n      setTransactions([]);\n      // В DEV можно очистить через перезапись ключей, но оставим минимально без IO\n    } catch (error) {\n      console.error('❌ Ошибка при сбросе баланса:', error);\n    }\n  };\n\n  const resetEarnings = async (): Promise<number> => {\n    try {\n      const old = earnings;\n      setEarnings(0);\n      return old;\n    } catch (error) {\n      console.error('❌ Ошибка при сбросе заработка:', error);\n      return earnings;\n    }\n  };\n\n  const value: BalanceContextType = {\n    balance,\n    earnings,\n    transactions,\n    addEarnings,\n    topUpBalance,\n    withdrawBalance,\n    resetBalance,\n    resetEarnings,\n    loadBalance,\n    loadEarnings,\n  };\n\n  return (\n    <BalanceContext.Provider value={value}>\n      {children}\n    </BalanceContext.Provider>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/context/LanguageContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'language' and 'updateKey'. Either exclude them or remove the dependency array.","line":103,"column":6,"nodeType":"ArrayExpression","endLine":103,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[3062,3083],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'updateKey'. Either exclude it or remove the dependency array.","line":114,"column":7,"nodeType":"ArrayExpression","endLine":114,"endColumn":79,"suggestions":[{"desc":"Update the dependencies array to be: [language, setLanguage, t, languageOptions, isLoading, error]","fix":{"range":[3314,3386],"text":"[language, setLanguage, t, languageOptions, isLoading, error]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';\nimport { \n  t as i18nT, \n  setLanguage as i18nSetLanguage, \n  getLanguage as i18nGetLanguage, \n  initializeLanguage as i18nInitializeLanguage,\n  addLanguageChangeListener,\n  removeLanguageChangeListener,\n  getLanguageOptions,\n  getLanguageInfo,\n  type SupportedLanguage \n} from '../i18n';\n\ninterface LanguageContextType {\n  language: SupportedLanguage;\n  setLanguage: (lang: SupportedLanguage) => Promise<void>;\n  t: typeof i18nT;\n  languageOptions: ReturnType<typeof getLanguageOptions>;\n  getLanguageInfo: typeof getLanguageInfo;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n\ninterface LanguageProviderProps {\n  children: React.ReactNode;\n}\n\nexport const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {\n  const [language, setLanguageState] = useState<SupportedLanguage>('ru');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [updateKey, setUpdateKey] = useState(0); // Force re-render\n\n  // Memoize language options to prevent unnecessary re-renders\n  const languageOptions = useMemo(() => getLanguageOptions(), []);\n\n  // Initialize language on mount\n  useEffect(() => {\n    initializeLanguage();\n  }, []);\n\n  // Listen for language changes from other parts of the app\n  useEffect(() => {\n    const handleLanguageChange = (newLanguage: SupportedLanguage) => {\n      setLanguageState(newLanguage);\n    };\n\n    addLanguageChangeListener(handleLanguageChange);\n\n    return () => {\n      removeLanguageChangeListener(handleLanguageChange);\n    };\n  }, []);\n\n  const initializeLanguage = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      await i18nInitializeLanguage();\n      const currentLanguage = await i18nGetLanguage();\n      setLanguageState(currentLanguage);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to initialize language';\n      setError(errorMessage);\n\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const setLanguage = useCallback(async (lang: SupportedLanguage) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      await i18nSetLanguage(lang);\n      setLanguageState(lang);\n      setUpdateKey(prev => prev + 1); // Force re-render\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to change language';\n      setError(errorMessage);\n\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Memoize translation function to prevent unnecessary re-renders\n  const t = useCallback((key: string, params?: Record<string, string | number>): string => {\n    return i18nT(key, params);\n  }, [language, updateKey]);\n\n  // Memoize context value to prevent unnecessary re-renders\n  const value = useMemo<LanguageContextType>(() => ({\n    language,\n    setLanguage,\n    t,\n    languageOptions,\n    getLanguageInfo,\n    isLoading,\n    error,\n  }), [language, setLanguage, t, languageOptions, isLoading, error, updateKey]);\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/context/LevelProgressContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[340,343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[340,343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, ReactNode } from 'react';\nimport { useEarningsLevel } from '../components/EarningsScreen/hooks/useEarningsLevel';\n\ninterface LevelUpResult {\n  hasLevelUp: boolean;\n  bonusAmount: number;\n  completedLevel: number;\n  completedSubLevel: number;\n}\n\ninterface LevelProgressContextType {\n  driverLevel: any;\n  incrementProgress: () => Promise<LevelUpResult | undefined>;\n  activateVIPLevel: () => Promise<void>;\n  addRides: (count: number) => Promise<void>;\n  resetProgress: () => Promise<void>;\n  getTotalRidesForLevel: (level: number, subLevel: number, progress: number) => number;\n  updateVIPLevel: (qualifiedDaysInPeriods: number[]) => Promise<void>;\n}\n\nconst LevelProgressContext = createContext<LevelProgressContextType | undefined>(undefined);\n\nexport const useLevelProgress = (): LevelProgressContextType => {\n  const context = useContext(LevelProgressContext);\n  if (!context) {\n    throw new Error('useLevelProgress must be used within a LevelProgressProvider');\n  }\n  return context;\n};\n\ninterface LevelProgressProviderProps {\n  children: ReactNode;\n}\n\nexport const LevelProgressProvider: React.FC<LevelProgressProviderProps> = ({ children }) => {\n  const { driverLevel, incrementProgress, activateVIPLevel, addRides, resetProgress, getTotalRidesForLevel, updateVIPLevel } = useEarningsLevel();\n\n  const value: LevelProgressContextType = {\n    driverLevel,\n    incrementProgress,\n    activateVIPLevel,\n    addRides,\n    resetProgress,\n    getTotalRidesForLevel,\n    updateVIPLevel,\n  };\n\n  return (\n    <LevelProgressContext.Provider value={value}>\n      {children}\n    </LevelProgressContext.Provider>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/context/PackageContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkDailyNotification' and 'processAutoRenewal'. Either include them or remove the dependency array.","line":85,"column":6,"nodeType":"ArrayExpression","endLine":85,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [checkDailyNotification, processAutoRenewal, subscription]","fix":{"range":[2897,2911],"text":"[checkDailyNotification, processAutoRenewal, subscription]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useBalance } from '../hooks/useBalance';\nimport { useI18n } from '../hooks/useI18n';\nimport { Alert } from 'react-native';\n\nexport type PackageType = 'free' | 'plus' | 'premium' | 'premiumPlus';\n\ninterface Subscription {\n  packageType: PackageType;\n  startDate: string;\n  autoRenew: boolean;\n  isActive: boolean;\n  nextBillingDate: string;\n  period: 'month' | 'year';\n  pendingExtension?: {\n    packageType: PackageType;\n    period: 'month' | 'year';\n    activationDate: string;\n    price: number;\n  };\n  pendingAutoRenewal?: {\n    price: number;\n    packageName: string;\n    lastNotificationDate?: string; // Дата последнего уведомления\n  };\n}\n\ninterface PackageContextType {\n  currentPackage: PackageType;\n  subscription: Subscription | null;\n  updatePackage: (newPackage: PackageType, period?: 'month' | 'year') => Promise<void>;\n  extendSubscription: (packageType: PackageType, period: 'month' | 'year', price: number) => Promise<void>;\n  cancelSubscription: () => Promise<void>;\n  toggleAutoRenew: () => Promise<void>;\n  processAutoRenewal: () => Promise<boolean>;\n  checkPendingAutoRenewal: () => Promise<boolean>;\n  getPackageIcon: (packageType?: PackageType) => string;\n  getPackageColor: (packageType?: PackageType) => string;\n  getPackagePrice: (packageType: PackageType, period?: 'month' | 'year') => number;\n}\n\nconst PackageContext = createContext<PackageContextType | undefined>(undefined);\n\nconst PACKAGE_KEY = 'user_package';\nconst SUBSCRIPTION_KEY = 'user_subscription';\n\nexport const PackageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [currentPackage, setCurrentPackage] = useState<PackageType>('free');\n  const [subscription, setSubscription] = useState<Subscription | null>(null);\n  const { t } = useI18n();\n  const balanceHook = useBalance();\n  const deductBalance = 'deductBalance' in balanceHook ? balanceHook.deductBalance : balanceHook.withdrawBalance;\n  \n  // Проверяем, что deductBalance является функцией\n  if (typeof deductBalance !== 'function') {\n    console.error('deductBalance is not a function:', typeof deductBalance);\n  }\n\n\n  // Загружаем сохраненный пакет и подписку при инициализации\n  useEffect(() => {\n\n    loadPackage();\n    loadSubscription();\n  }, []);\n\n  // Автоматическое слежение за датой истечения подписки\n  useEffect(() => {\n    if (!subscription || subscription.packageType === 'free') {\n      return;\n    }\n\n    // Проверяем сразу при загрузке\n    processAutoRenewal();\n    checkDailyNotification();\n\n    // Устанавливаем интервал для проверки каждые 6 часов\n    const interval = setInterval(() => {\n      processAutoRenewal();\n      checkDailyNotification();\n    }, 6 * 60 * 60 * 1000); // 6 часов\n\n    return () => clearInterval(interval);\n  }, [subscription]);\n\n  const loadPackage = async () => {\n    try {\n      const storedPackage = await AsyncStorage.getItem(PACKAGE_KEY);\n      \n      if (storedPackage) {\n        // Обрабатываем пакеты с суффиксами (_month, _year)\n        const basePackage = storedPackage.replace(/_month$|_year$/, '');\n        \n        if (['free', 'plus', 'premium', 'premiumPlus'].includes(basePackage)) {\n          setCurrentPackage(basePackage as PackageType);\n          \n          // Если сохраненный пакет содержит суффикс, исправляем его\n          if (storedPackage !== basePackage) {\n            await AsyncStorage.setItem(PACKAGE_KEY, basePackage);\n          }\n        } else {\n          setCurrentPackage('free');\n          // Очищаем неправильные данные\n          await AsyncStorage.removeItem(PACKAGE_KEY);\n        }\n      } else {\n        setCurrentPackage('free');\n      }\n    } catch (error) {\n      console.error('❌ Error loading package:', error);\n    }\n  };\n\n  const loadSubscription = async () => {\n    try {\n      const storedSubscription = await AsyncStorage.getItem(SUBSCRIPTION_KEY);\n      \n      if (storedSubscription) {\n        const parsedSubscription = JSON.parse(storedSubscription);\n        \n        // Исправляем формат packageType если он содержит суффикс\n        if (parsedSubscription.packageType && parsedSubscription.packageType.includes('_')) {\n          const basePackageType = parsedSubscription.packageType.replace(/_month$|_year$/, '');\n          if (['free', 'plus', 'premium', 'premiumPlus'].includes(basePackageType)) {\n            parsedSubscription.packageType = basePackageType;\n            // Сохраняем исправленную подписку\n            await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(parsedSubscription));\n          }\n        }\n        \n        setSubscription(parsedSubscription);\n      } else {\n        // No subscription found\n      }\n    } catch (error) {\n      console.error('❌ Error loading subscription:', error);\n    }\n  };\n\n  const updatePackage = async (newPackage: PackageType, period: 'month' | 'year' = 'month') => {\n    // Сохраняем текущий пакет для отката при ошибке\n    const previousPackage = currentPackage;\n    \n    try {\n      // Проверяем валидность пакета\n      if (!['free', 'plus', 'premium', 'premiumPlus'].includes(newPackage)) {\n        console.error('❌ Invalid package type:', newPackage);\n        return; // Прерываем обновление пакета\n      }\n\n      // Если это платный пакет, проверяем баланс и списываем средства\n      if (newPackage !== 'free') {\n        const price = getPackagePrice(newPackage, period);\n        \n        // Пытаемся списать средства\n        if (typeof deductBalance !== 'function') {\n          console.error('deductBalance is not a function');\n          return;\n        }\n        const success = await deductBalance(price, `${newPackage} package purchase`, newPackage);\n        \n        if (!success) {\n          // Если списание не удалось, показываем ошибку\n          Alert.alert(\n            t('package.insufficientFunds.title'),\n            t('package.insufficientFunds.message'),\n            [{ text: t('common.ok'), style: 'default' }]\n          );\n          return; // Прерываем обновление пакета\n        }\n        \n        console.log('✅ Balance deducted successfully:', price);\n      }\n      \n      // Сохраняем только базовое название пакета без суффикса\n      await AsyncStorage.setItem(PACKAGE_KEY, newPackage);\n      \n      setCurrentPackage(newPackage);\n      \n      // Если это платный пакет, создаем подписку\n      if (newPackage !== 'free') {\n        const now = new Date();\n        const daysInPeriod = period === 'year' ? 365 : 30;\n        const nextBilling = new Date(now.getTime() + daysInPeriod * 24 * 60 * 60 * 1000);\n        \n        const newSubscription: Subscription = {\n          packageType: newPackage,\n          startDate: now.toISOString(),\n          autoRenew: true, // По умолчанию включено\n          isActive: true,\n          nextBillingDate: nextBilling.toISOString(),\n          period: period,\n        };\n        \n        await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(newSubscription));\n        console.log('✅ Subscription saved to AsyncStorage:', newSubscription);\n        \n        setSubscription(newSubscription);\n        console.log('✅ Subscription state updated');\n      } else {\n        // Если выбран бесплатный пакет, отменяем подписку\n        await AsyncStorage.removeItem(SUBSCRIPTION_KEY);\n        console.log('✅ Subscription removed from AsyncStorage');\n        \n        setSubscription(null);\n        console.log('✅ Subscription state cleared');\n      }\n      \n      console.log('🎉 Package update completed successfully!');\n\n    } catch (error) {\n      console.error('❌ Error saving package:', error);\n      Alert.alert(\n        t('package.error.title'),\n        t('package.error.message'),\n        [{ text: t('common.ok'), style: 'default' }]\n      );\n      // При ошибке возвращаемся к предыдущему пакету\n      setCurrentPackage(previousPackage);\n      return;\n    }\n  };\n\n  const extendSubscription = async (packageType: PackageType, period: 'month' | 'year', price: number) => {\n    try {\n      // Сначала списываем средства\n      if (typeof deductBalance !== 'function') {\n        console.error('deductBalance is not a function');\n        return;\n      }\n      const success = await deductBalance(price, `${packageType} subscription extension`, packageType);\n      \n      if (!success) {\n        // Если списание не удалось, показываем ошибку\n        Alert.alert(\n          t('package.insufficientFunds.title'),\n          t('package.insufficientFunds.message'),\n          [{ text: t('common.ok'), style: 'default' }]\n        );\n        return; // Прерываем продление подписки\n      }\n      \n      console.log('✅ Balance deducted for subscription extension:', price);\n      \n      if (subscription) {\n        // Рассчитываем дату активации (следующий день после истечения текущей подписки)\n        const currentEndDate = new Date(subscription.nextBillingDate);\n        const activationDate = new Date(currentEndDate.getTime() + 24 * 60 * 60 * 1000); // +1 день\n        \n        const updatedSubscription: Subscription = {\n          ...subscription,\n          pendingExtension: {\n            packageType,\n            period,\n            activationDate: activationDate.toISOString(),\n            price,\n          },\n        };\n        \n        await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(updatedSubscription));\n        setSubscription(updatedSubscription);\n      }\n    } catch (error) {\n      console.error('Error extending subscription:', error);\n      Alert.alert(\n        t('package.error.title'),\n        t('package.error.message'),\n        [{ text: t('common.ok'), style: 'default' }]\n      );\n    }\n  };\n\n  const cancelSubscription = async () => {\n    try {\n      // Отменяем подписку и переходим на бесплатный пакет\n      await AsyncStorage.removeItem(SUBSCRIPTION_KEY);\n      setSubscription(null);\n      \n      // Устанавливаем бесплатный пакет\n      await AsyncStorage.setItem(PACKAGE_KEY, 'free');\n      setCurrentPackage('free');\n    } catch (error) {\n      console.error('Error canceling subscription:', error);\n    }\n  };\n\n  const toggleAutoRenew = async () => {\n    try {\n      if (subscription) {\n        const updatedSubscription = {\n          ...subscription,\n          autoRenew: !subscription.autoRenew,\n        };\n        \n        await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(updatedSubscription));\n        setSubscription(updatedSubscription);\n      }\n    } catch (error) {\n      console.error('Error toggling auto renew:', error);\n    }\n  };\n\n  const processAutoRenewal = async (): Promise<boolean> => {\n    try {\n      if (!subscription || !subscription.autoRenew || subscription.packageType === 'free') {\n        return;\n      }\n\n      const now = new Date();\n      const nextBillingDate = new Date(subscription.nextBillingDate);\n      \n      // Проверяем, истекла ли подписка\n      if (now >= nextBillingDate) {\n        const price = getPackagePrice(subscription.packageType, subscription.period);\n        \n        // Получаем название пакета для истории транзакций\n        const packageName = t(`premium.packages.${subscription.packageType}`);\n        \n        // Списываем средства с баланса\n        if (typeof deductBalance !== 'function') {\n          console.error('deductBalance is not a function');\n          return;\n        }\n        const success = await deductBalance(\n          price, \n          t('premium.autoRenewal.transactionDescription', { packageName }), \n          subscription.packageType\n        );\n        \n        if (success) {\n  \n          \n          // Рассчитываем новую дату биллинга\n          const daysInPeriod = subscription.period === 'year' ? 365 : 30;\n          const newNextBillingDate = new Date(nextBillingDate.getTime() + daysInPeriod * 24 * 60 * 60 * 1000);\n          \n          const updatedSubscription: Subscription = {\n            ...subscription,\n            nextBillingDate: newNextBillingDate.toISOString(),\n          };\n          \n          await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(updatedSubscription));\n          setSubscription(updatedSubscription);\n          \n          // Показываем уведомление об успешном автообновлении\n          Alert.alert(\n            t('premium.autoRenewal.success.title'),\n            t('premium.autoRenewal.success.message', { \n              packageName: t(`premium.packages.${subscription.packageType}`)\n            }),\n            [{ text: t('common.ok') }]\n          );\n          \n          return true;\n        } else {\n          // Недостаточно средств - сохраняем информацию о pending автообновлении\n          const updatedSubscription = {\n            ...subscription,\n            pendingAutoRenewal: {\n              price,\n              packageName: t(`premium.packages.${subscription.packageType}`),\n              lastNotificationDate: new Date().toISOString() // Сохраняем дату первого уведомления\n            }\n          };\n          \n          await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(updatedSubscription));\n          setSubscription(updatedSubscription);\n          \n          // Показываем уведомление пользователю\n          Alert.alert(\n            t('premium.autoRenewal.insufficientFunds.title'),\n            t('premium.autoRenewal.insufficientFunds.message', { \n              packageName: t(`premium.packages.${subscription.packageType}`),\n              price: price.toFixed(2)\n            }),\n            [\n              {\n                text: t('premium.autoRenewal.insufficientFunds.topUp'),\n                onPress: () => {\n                  // Здесь можно добавить навигацию к экрану пополнения баланса\n                }\n              },\n              {\n                text: t('common.ok'),\n                style: 'cancel'\n              }\n            ]\n          );\n          \n          return;\n        }\n      }\n      \n      return false;\n    } catch (error) {\n      console.log('Error processing auto renewal:', error);\n      return false;\n    }\n  };\n\n  // Проверка pending автообновления при пополнении баланса\n  const checkPendingAutoRenewal = async (): Promise<boolean> => {\n    try {\n      // Загружаем актуальные данные из AsyncStorage\n      const storedSubscription = await AsyncStorage.getItem(SUBSCRIPTION_KEY);\n      if (!storedSubscription) {\n        return;\n      }\n      \n      const currentSubscription = JSON.parse(storedSubscription);\n      if (!currentSubscription || !currentSubscription.pendingAutoRenewal) {\n        return;\n      }\n\n      const { price, packageName } = currentSubscription.pendingAutoRenewal;\n      \n      // Списываем средства с баланса\n      if (typeof deductBalance !== 'function') {\n        console.error('deductBalance is not a function');\n        return;\n      }\n      const success = await deductBalance(\n        price, \n        t('premium.autoRenewal.transactionDescription', { packageName }), \n        currentSubscription.packageType\n      );\n      \n      if (success) {\n        // Рассчитываем новую дату биллинга\n        const daysInPeriod = currentSubscription.period === 'year' ? 365 : 30;\n        const nextBillingDate = new Date(currentSubscription.nextBillingDate);\n        const newNextBillingDate = new Date(nextBillingDate.getTime() + daysInPeriod * 24 * 60 * 60 * 1000);\n        \n        const updatedSubscription: Subscription = {\n          ...currentSubscription,\n          nextBillingDate: newNextBillingDate.toISOString(),\n          pendingAutoRenewal: undefined, // Убираем pending\n        };\n        \n        await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(updatedSubscription));\n        setSubscription(updatedSubscription);\n        \n        // Показываем уведомление об успешном автообновлении\n        Alert.alert(\n          t('premium.autoRenewal.success.title'),\n          t('premium.autoRenewal.success.message', { packageName }),\n          [{ text: t('common.ok') }]\n        );\n        \n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.log('Error checking pending auto renewal:', error);\n      return false;\n    }\n  };\n\n  // Проверка ежедневных уведомлений о недостатке средств\n  const checkDailyNotification = async () => {\n    try {\n      if (!subscription || !subscription.pendingAutoRenewal) {\n        return;\n      }\n\n      const now = new Date();\n      const lastNotification = subscription.pendingAutoRenewal.lastNotificationDate \n        ? new Date(subscription.pendingAutoRenewal.lastNotificationDate)\n        : null;\n\n      // Проверяем, прошло ли 24 часа с последнего уведомления\n      const shouldShowNotification = !lastNotification || \n        (now.getTime() - lastNotification.getTime()) >= 24 * 60 * 60 * 1000;\n\n      if (shouldShowNotification) {\n        const { price, packageName } = subscription.pendingAutoRenewal;\n        \n        // Обновляем дату последнего уведомления\n        const updatedSubscription: Subscription = {\n          ...subscription,\n          pendingAutoRenewal: {\n            ...subscription.pendingAutoRenewal,\n            lastNotificationDate: now.toISOString(),\n          }\n        };\n        \n        await AsyncStorage.setItem(SUBSCRIPTION_KEY, JSON.stringify(updatedSubscription));\n        setSubscription(updatedSubscription);\n\n        // Показываем ежедневное уведомление\n        Alert.alert(\n          t('premium.autoRenewal.dailyReminder.title'),\n          t('premium.autoRenewal.dailyReminder.message', { \n            packageName,\n            price: price.toFixed(2)\n          }),\n          [\n            {\n              text: t('premium.autoRenewal.dailyReminder.topUp'),\n              onPress: () => {\n                // Здесь можно добавить навигацию к экрану пополнения баланса\n              }\n            },\n            {\n              text: t('premium.autoRenewal.dailyReminder.remindLater'),\n              style: 'cancel'\n            }\n          ]\n        );\n      }\n    } catch (error) {\n      console.log('Error checking daily notification:', error);\n    }\n  };\n\n  const getPackageIcon = (packageType: PackageType = currentPackage) => {\n    switch (packageType) {\n      case 'free': return 'person';\n      case 'plus': return 'add-circle';\n      case 'premium': return 'diamond';\n      case 'premiumPlus': return 'star';\n      default: return 'person';\n    }\n  };\n\n  const getPackageColor = (packageType: PackageType = currentPackage) => {\n    switch (packageType) {\n      case 'free': return '#666666';\n      case 'plus': return '#0066CC';\n      case 'premium': return '#FFD700';\n      case 'premiumPlus': return '#FF6B35';\n      default: return '#666666';\n    }\n  };\n\n  const getPackagePrice = (packageType: PackageType, period: 'month' | 'year' = 'month') => {\n    const monthlyPrices = {\n      free: 0,\n      plus: 99,\n      premium: 199,\n      premiumPlus: 299,\n    };\n    \n    const yearlyPrices = {\n      free: 0,\n      plus: 999,\n      premium: 1999,\n      premiumPlus: 2999,\n    };\n    \n    const prices = period === 'year' ? yearlyPrices : monthlyPrices;\n    \n    switch (packageType) {\n      case 'free': return prices.free;\n      case 'plus': return prices.plus;\n      case 'premium': return prices.premium;\n      case 'premiumPlus': return prices.premiumPlus;\n      default: return 0;\n    }\n  };\n\n  return (\n    <PackageContext.Provider value={{\n      currentPackage,\n      subscription,\n      updatePackage,\n      extendSubscription,\n      cancelSubscription,\n      toggleAutoRenew,\n      processAutoRenewal,\n      checkPendingAutoRenewal,\n      getPackageIcon,\n      getPackageColor,\n      getPackagePrice,\n    }}>\n      {children}\n    </PackageContext.Provider>\n  );\n};\n\nexport const usePackage = (): PackageContextType => {\n  const context = useContext(PackageContext);\n  if (context === undefined) {\n    throw new Error('usePackage must be used within a PackageProvider');\n  }\n  return context;\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/context/ProfileContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProfile'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfile, user]","fix":{"range":[1526,1532],"text":"[loadProfile, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2113,2116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2113,2116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2135,2138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2135,2138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2158,2161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2158,2161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2218,2221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2218,2221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2243,2246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2243,2246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2269,2272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2269,2272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { User, Client, Child, PaymentMethod } from '../types/user';\nimport { ProfileService } from '../services/ProfileService';\nimport { useAuth } from './AuthContext';\n\ninterface ProfileContextType {\n  profile: User | null;\n  updateProfile: (updates: Partial<User>) => Promise<boolean>;\n  addChild: (child: Omit<Child, 'id'>) => Promise<boolean>;\n  removeChild: (childId: string) => Promise<boolean>;\n  addPaymentMethod: (paymentMethod: Omit<PaymentMethod, 'id'>) => Promise<boolean>;\n  removePaymentMethod: (paymentMethodId: string) => Promise<boolean>;\n  loading: boolean;\n  loadProfile: () => Promise<void>;\n}\n\nexport const ProfileContext = createContext<ProfileContextType | undefined>(undefined);\n\nexport const useProfile = () => {\n  const context = useContext(ProfileContext);\n  if (!context) {\n    throw new Error('useProfile must be used within a ProfileProvider');\n  }\n  return context;\n};\n\ninterface ProfileProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ProfileProvider: React.FC<ProfileProviderProps> = ({ children }) => {\n  const { user } = useAuth();\n  const [profile, setProfile] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Загружаем профиль при изменении пользователя\n  useEffect(() => {\n    if (user) {\n      loadProfile(user.id);\n    } else {\n      setProfile(null);\n      setLoading(false);\n    }\n  }, [user]);\n\n  const loadProfile = async (userId: string) => {\n    try {\n      setLoading(true);\n      console.log('[ProfileContext] Loading profile for user:', userId);\n      \n      // Используем ProfileService (поддерживает DEV/PROD)\n      const loadedProfile = await ProfileService.getProfile(userId);\n      \n      if (loadedProfile) {\n        // Normalize/merge with current auth user to fill missing fields\n        const normalized: User = {\n          id: loadedProfile.id || user?.id || '',\n          email: loadedProfile.email || user?.email || '',\n          name: (loadedProfile as any).name || (user as any)?.name || (user as any)?.firstName || '',\n          surname: (loadedProfile as any).surname || (user as any)?.surname || (user as any)?.lastName || '',\n          role: loadedProfile.role || user?.role || 'client',\n          phone: loadedProfile.phone || user?.phone || '',\n          avatar: loadedProfile.avatar ?? null,\n          rating: loadedProfile.rating ?? 5,\n          address: loadedProfile.address || '',\n          createdAt: loadedProfile.createdAt || user?.createdAt || new Date().toISOString(),\n          birthDate: loadedProfile.birthDate || user?.birthDate,\n        } as User;\n\n        // If we filled any missing fields, persist back\n        const changed = JSON.stringify(loadedProfile) !== JSON.stringify(normalized);\n        if (changed) {\n          await AsyncStorage.setItem(`@profile_${userId}`, JSON.stringify(normalized));\n        }\n\n        setProfile(normalized);\n        console.log('[ProfileContext] ✅ Profile loaded');\n      } else {\n        // Если профиль не найден, создаем из данных user\n        if (user) {\n          const newProfile: User = {\n            ...user,\n            createdAt: user.createdAt || new Date().toISOString(),\n          };\n          \n          // Сохраняем профиль напрямую в AsyncStorage\n          await AsyncStorage.setItem(`@profile_${userId}`, JSON.stringify(newProfile));\n          setProfile(newProfile);\n          \n          console.log('[ProfileContext] ✅ Profile created from user data and saved');\n        }\n      }\n    } catch (error) {\n      console.warn('[ProfileContext] Profile load error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Публичный метод для загрузки профиля текущего пользователя\n  const loadProfilePublic = async (): Promise<void> => {\n    if (user?.id) {\n      await loadProfile(user.id);\n    }\n  };\n\n  const saveProfile = async (newProfile: User) => {\n    try {\n      await AsyncStorage.setItem('profile', JSON.stringify(newProfile));\n      setProfile(newProfile);\n      return true;\n    } catch (error) {\n      console.warn('Profile save error:', error);\n      return false;\n    }\n  };\n\n  const updateProfile = async (updates: Partial<User>): Promise<boolean> => {\n    if (!profile || !user) return false;\n    \n    try {\n      console.log('[ProfileContext] Updating profile...');\n      \n      // Используем ProfileService (поддерживает DEV/PROD)\n      const result = await ProfileService.updateProfile(user.id, updates);\n      \n      if (result.success && result.profile) {\n        setProfile(result.profile);\n        console.log('[ProfileContext] ✅ Profile updated');\n        return true;\n      }\n      \n      console.error('[ProfileContext] ❌ Profile update failed:', result.error);\n      return false;\n    } catch (error) {\n      console.error('[ProfileContext] Profile update error:', error);\n      return false;\n    }\n  };\n\n  const addChild = async (childData: Omit<Child, 'id'>): Promise<boolean> => {\n    if (!profile || profile.role !== 'client') return false;\n    \n    const clientProfile = profile as Client;\n    const newChild: Child = {\n      id: Date.now().toString(),\n      ...childData,\n    };\n    \n    const updatedChildren = [...(clientProfile.children || []), newChild];\n    const updatedProfile: Client = {\n      ...clientProfile,\n      children: updatedChildren,\n    };\n    \n    return await saveProfile(updatedProfile);\n  };\n\n  const removeChild = async (childId: string): Promise<boolean> => {\n    if (!profile || profile.role !== 'client') return false;\n    \n    const clientProfile = profile as Client;\n    const updatedChildren = clientProfile.children?.filter(child => child.id !== childId) || [];\n    const updatedProfile: Client = {\n      ...clientProfile,\n      children: updatedChildren,\n    };\n    \n    return await saveProfile(updatedProfile);\n  };\n\n  const addPaymentMethod = async (paymentData: Omit<PaymentMethod, 'id'>): Promise<boolean> => {\n    if (!profile || profile.role !== 'client') return false;\n    \n    const clientProfile = profile as Client;\n    const newPaymentMethod: PaymentMethod = {\n      id: Date.now().toString(),\n      ...paymentData,\n    };\n    \n    const updatedPaymentMethods = [...(clientProfile.paymentMethods || []), newPaymentMethod];\n    const updatedProfile: Client = {\n      ...clientProfile,\n      paymentMethods: updatedPaymentMethods,\n    };\n    \n    return await saveProfile(updatedProfile);\n  };\n\n  const removePaymentMethod = async (paymentMethodId: string): Promise<boolean> => {\n    if (!profile || profile.role !== 'client') return false;\n    \n    const clientProfile = profile as Client;\n    const updatedPaymentMethods = clientProfile.paymentMethods?.filter(\n      payment => payment.id !== paymentMethodId\n    ) || [];\n    const updatedProfile: Client = {\n      ...clientProfile,\n      paymentMethods: updatedPaymentMethods,\n    };\n    \n    return await saveProfile(updatedProfile);\n  };\n\n  const value = {\n    profile,\n    updateProfile,\n    addChild,\n    removeChild,\n    addPaymentMethod,\n    removePaymentMethod,\n    loading,\n    loadProfile: loadProfilePublic,\n  };\n\n  return (\n    <ProfileContext.Provider value={value}>\n      {children}\n    </ProfileContext.Provider>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/context/ThemeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/client/useClientBalance.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadBalance', 'loadCashback', and 'loadTransactions'. Either include them or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadBalance, loadCashback, loadTransactions]","fix":{"range":[1654,1656],"text":"[loadBalance, loadCashback, loadTransactions]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2341,2344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2341,2344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'saveCashback' is assigned a value but never used.","line":111,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'amount' is defined but never used.","line":191,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":191,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useUserStorageKey, STORAGE_KEYS } from '../../utils/storageKeys';\n\nexport interface ClientTransaction {\n  id: string;\n  type: 'balance_topup' | 'package_purchase' | 'trip_payment' | 'cashback';\n  amount: number;\n  description: string;\n  date: string;\n  translationKey?: string;\n  translationParams?: Record<string, string>;\n  packageType?: string;\n}\n\nexport interface ClientBalanceContextType {\n  balance: number;\n  transactions: ClientTransaction[];\n  cashback: number;\n  earnings?: number;\n  topUpBalance: (amount: number) => Promise<void>;\n  addEarnings?: (amount: number) => Promise<void>;\n  deductBalance: (amount: number, description: string, packageType?: string) => Promise<boolean>;\n  addTransaction: (transaction: Omit<ClientTransaction, 'id' | 'date'>) => Promise<void>;\n  getCashback: () => Promise<number>;\n  resetBalance?: () => Promise<void>;\n  loadEarnings?: () => Promise<void>;\n}\n\nexport const useClientBalance = (): ClientBalanceContextType => {\n  const [balance, setBalance] = useState<number>(50); // Начальный баланс\n  const [transactions, setTransactions] = useState<ClientTransaction[]>([]);\n  const [cashback, setCashback] = useState<number>(0);\n  \n  // Получаем ключи с изоляцией по пользователю\n  const balanceKey = useUserStorageKey(STORAGE_KEYS.CLIENT_BALANCE);\n  const transactionsKey = useUserStorageKey(STORAGE_KEYS.CLIENT_TRANSACTIONS);\n  const cashbackKey = useUserStorageKey(STORAGE_KEYS.CLIENT_CASHBACK);\n\n  useEffect(() => {\n    loadBalance();\n    loadTransactions();\n    loadCashback();\n  }, []);\n\n  const loadBalance = async () => {\n    try {\n      const storedBalance = await AsyncStorage.getItem(balanceKey);\n      if (storedBalance) {\n        setBalance(parseFloat(storedBalance));\n      }\n    } catch (error) {\n      console.error('Error loading client balance:', error);\n    }\n  };\n\n  const loadTransactions = async () => {\n    try {\n      const storedTransactions = await AsyncStorage.getItem(transactionsKey);\n      if (storedTransactions) {\n        const parsedTransactions = JSON.parse(storedTransactions);\n        \n        // Миграция: добавляем translationKey для старых транзакций пополнения\n        const migratedTransactions = parsedTransactions.map((transaction: any) => {\n          if (transaction.type === 'balance_topup' && !transaction.translationKey) {\n            return {\n              ...transaction,\n              translationKey: 'client.paymentHistory.transactions.topUp',\n              translationParams: { amount: Math.abs(transaction.amount).toString() }\n            };\n          }\n          return transaction;\n        });\n        \n        setTransactions(migratedTransactions);\n      }\n    } catch (error) {\n      console.error('Error loading client transactions:', error);\n    }\n  };\n\n  const loadCashback = async () => {\n    try {\n      const storedCashback = await AsyncStorage.getItem(cashbackKey);\n      if (storedCashback) {\n        setCashback(parseFloat(storedCashback));\n      }\n    } catch (error) {\n      console.error('Error loading client cashback:', error);\n    }\n  };\n\n  const saveBalance = async (newBalance: number) => {\n    try {\n      await AsyncStorage.setItem(balanceKey, newBalance.toString());\n      setBalance(newBalance);\n    } catch (error) {\n      console.error('Error saving client balance:', error);\n    }\n  };\n\n  const saveTransactions = async (newTransactions: ClientTransaction[]) => {\n    try {\n      await AsyncStorage.setItem(transactionsKey, JSON.stringify(newTransactions));\n      setTransactions(newTransactions);\n    } catch (error) {\n      console.error('Error saving client transactions:', error);\n    }\n  };\n\n  const saveCashback = async (newCashback: number) => {\n    try {\n      await AsyncStorage.setItem(cashbackKey, newCashback.toString());\n      setCashback(newCashback);\n    } catch (error) {\n      console.error('Error saving client cashback:', error);\n    }\n  };\n\n  const topUpBalance = async (amount: number) => {\n    const newBalance = balance + amount;\n    await saveBalance(newBalance);\n    \n    await addTransaction({\n      type: 'balance_topup',\n      amount: amount,\n      description: `Balance top-up ${amount} AFc`,\n      translationKey: 'client.paymentHistory.transactions.topUp',\n      translationParams: { amount: amount.toString() },\n    });\n  };\n\n  const deductBalance = async (amount: number, description: string, packageType?: string): Promise<boolean> => {\n    if (balance < amount) {\n      return false; // Insufficient funds\n    }\n\n    const newBalance = balance - amount;\n    await saveBalance(newBalance);\n    \n    await addTransaction({\n      type: 'package_purchase',\n      amount: -amount,\n      description,\n      packageType,\n    });\n\n    return true;\n  };\n\n  const addTransaction = async (transaction: Omit<ClientTransaction, 'id' | 'date'>) => {\n    const newTransaction: ClientTransaction = {\n      ...transaction,\n      id: Date.now().toString(),\n      date: new Date().toISOString(),\n    };\n\n    const newTransactions = [newTransaction, ...transactions];\n    await saveTransactions(newTransactions);\n  };\n\n  const getCashback = async (): Promise<number> => {\n    // Здесь можно добавить логику расчета cashback\n    // Пока возвращаем сохраненный cashback\n    return cashback;\n  };\n\n  const resetBalance = async () => {\n    try {\n      console.log('🔄 Сброс клиентского баланса...');\n      \n      // Обнуляем баланс\n      setBalance(0);\n      await AsyncStorage.setItem(balanceKey, '0');\n      \n      // Очищаем транзакции\n      setTransactions([]);\n      await AsyncStorage.setItem(transactionsKey, JSON.stringify([]));\n      \n      // Обнуляем cashback\n      setCashback(0);\n      await AsyncStorage.setItem(cashbackKey, '0');\n      \n      console.log('✅ Клиентский баланс успешно сброшен');\n    } catch (error) {\n      console.error('❌ Ошибка при сбросе клиентского баланса:', error);\n    }\n  };\n\n  // Dummy функция для совместимости с интерфейсом\n  const addEarnings = async (amount: number) => {\n    console.log('💵 Клиент не может зарабатывать, но функция добавлена для совместимости');\n  };\n\n  // Dummy функция для совместимости с интерфейсом\n  const loadEarnings = async () => {\n    console.log('💵 Клиент не может зарабатывать, но функция добавлена для совместимости');\n  };\n\n  return {\n    balance,\n    transactions,\n    cashback,\n    earnings: 0, // Клиенты не зарабатывают\n    topUpBalance,\n    addEarnings,\n    deductBalance,\n    addTransaction,\n    getCashback,\n    resetBalance,\n    loadEarnings,\n  };\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/client/useDriversList.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'debouncedQuery'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [debouncedQuery]","fix":{"range":[2444,2446],"text":"[debouncedQuery]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Driver } from '../../types/driver';\nimport DriverService from '../../services/DriverService';\n\nexport type UseDriversListResult = {\n  drivers: Driver[];\n  filteredDrivers: (Driver & { isFavorite?: boolean })[];\n  favorites: Set<string>;\n  loading: boolean;\n  loadingMore: boolean;\n  hasMore: boolean;\n  searchQuery: string;\n  setSearchQuery: (q: string) => void;\n  toggleFavorite: (driverId: string) => void;\n  restoreFavorites: (ids: string[]) => void;\n  loadMoreDrivers: () => Promise<void>;\n  handleRefresh: () => Promise<void>;\n  removeDriver: (driverId: string) => void;\n  removeDrivers: (ids: Set<string>) => void;\n};\n\nconst ITEMS_PER_PAGE = 10;\n\nexport const useDriversList = (): UseDriversListResult => {\n  const [drivers, setDrivers] = useState<Driver[]>([]);\n  const [favorites, setFavorites] = useState<Set<string>>(new Set());\n  const [searchQuery, setSearchQuery] = useState('');\n  const [debouncedQuery, setDebouncedQuery] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [loadingMore, setLoadingMore] = useState(false);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n\n  useEffect(() => {\n    const id = setTimeout(() => setDebouncedQuery(searchQuery.trim().toLowerCase()), 200);\n    return () => clearTimeout(id);\n  }, [searchQuery]);\n\n  const loadDrivers = useCallback(async (pageNumber = 1, isRefresh = false) => {\n    try {\n      if (pageNumber === 1) {\n        setLoading(true);\n        setPage(1);\n        setHasMore(true);\n      } else {\n        setLoadingMore(true);\n      }\n\n      const response = await DriverService.getDriversPaged({\n        page: pageNumber,\n        pageSize: ITEMS_PER_PAGE,\n        search: debouncedQuery || undefined,\n      });\n\n      if (response.success && response.data) {\n        const pageData = response.data.items;\n        if (pageNumber === 1 || isRefresh) {\n          setDrivers(pageData);\n        } else {\n          setDrivers(prev => [...prev, ...pageData]);\n        }\n        const total = response.data.total ?? 0;\n        const accumulated = (pageNumber) * ITEMS_PER_PAGE;\n        setHasMore(accumulated < total);\n        setPage(pageNumber);\n      } else {\n        // В случае ошибки не меняем список, только сбрасываем hasMore\n        setHasMore(false);\n      }\n    } finally {\n      setLoading(false);\n      setLoadingMore(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadDrivers(1, true);\n  }, [loadDrivers]);\n\n  const loadMoreDrivers = useCallback(async () => {\n    if (!loadingMore && hasMore) {\n      await loadDrivers(page + 1, false);\n    }\n  }, [hasMore, loadDrivers, loadingMore, page]);\n\n  const handleRefresh = useCallback(async () => {\n    await loadDrivers(1, true);\n  }, [loadDrivers]);\n\n  const filteredDrivers = useMemo(() => {\n    const query = debouncedQuery;\n    const list = !query\n      ? drivers\n      : drivers.filter((driver) => {\n          const firstName = driver.first_name?.toLowerCase() ?? '';\n          const lastName = driver.last_name?.toLowerCase() ?? '';\n          const brand = driver.vehicle_brand?.toLowerCase() ?? '';\n          const model = driver.vehicle_model?.toLowerCase() ?? '';\n          return (\n            firstName.includes(query) ||\n            lastName.includes(query) ||\n            brand.includes(query) ||\n            model.includes(query)\n          );\n        });\n    const sorted = [...list].sort((a, b) => {\n      const aFav = favorites.has(a.id);\n      const bFav = favorites.has(b.id);\n      if (aFav && !bFav) return -1;\n      if (!aFav && bFav) return 1;\n      return (b.rating ?? 0) - (a.rating ?? 0);\n    });\n    return sorted.map((driver) => ({\n      ...driver,\n      isFavorite: favorites.has(driver.id),\n    }));\n  }, [drivers, debouncedQuery, favorites]);\n\n  const toggleFavorite = useCallback((driverId: string) => {\n    setFavorites(prev => {\n      const next = new Set(prev);\n      if (next.has(driverId)) next.delete(driverId); else next.add(driverId);\n      return next;\n    });\n  }, []);\n\n  const restoreFavorites = useCallback((ids: string[]) => {\n    setFavorites(new Set(ids));\n  }, []);\n\n  const removeDriver = useCallback((driverId: string) => {\n    setDrivers(prev => prev.filter(d => d.id !== driverId));\n  }, []);\n\n  const removeDrivers = useCallback((ids: Set<string>) => {\n    if (!ids || ids.size === 0) return;\n    setDrivers(prev => prev.filter(d => !ids.has(d.id)));\n  }, []);\n\n  return {\n    drivers,\n    filteredDrivers,\n    favorites,\n    loading,\n    loadingMore,\n    hasMore,\n    searchQuery,\n    setSearchQuery,\n    toggleFavorite,\n    restoreFavorites,\n    loadMoreDrivers,\n    handleRefresh,\n    removeDriver,\n    removeDrivers,\n  };\n};\n\nexport default useDriversList;\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/driver/DriverUseAvatar.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAvatar'. Either include it or remove the dependency array.","line":17,"column":6,"nodeType":"ArrayExpression","endLine":17,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadAvatar]","fix":{"range":[598,600],"text":"[loadAvatar]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'userId'. Either include it or remove the dependency array.","line":30,"column":6,"nodeType":"ArrayExpression","endLine":30,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [userId]","fix":{"range":[949,951],"text":"[userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'userId'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: [t, userId]","fix":{"range":[1745,1748],"text":"[t, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'userId'. Either include it or remove the dependency array.","line":93,"column":6,"nodeType":"ArrayExpression","endLine":93,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: [t, userId]","fix":{"range":[2606,2609],"text":"[t, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'userId'. Either include it or remove the dependency array.","line":135,"column":6,"nodeType":"ArrayExpression","endLine":135,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: [t, userId]","fix":{"range":[3680,3683],"text":"[t, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { Alert } from 'react-native';\nimport { DriverAvatarService } from '../../services/driver/DriverAvatarService';\nimport { useI18n } from '../useI18n';\nimport { useAuth } from '../../context/AuthContext';\n\nexport const useDriverAvatar = () => {\n  const [avatarUri, setAvatarUri] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const { t } = useI18n();\n  const { user } = useAuth();\n  const userId = user?.id || '';\n\n  // Загружаем аватар при инициализации\n  useEffect(() => {\n    loadAvatar();\n  }, []);\n\n  const loadAvatar = useCallback(async () => {\n    try {\n      setLoading(true);\n      const avatar = await DriverAvatarService.getAvatar(userId);\n      const uri = avatar?.url || null;\n      setAvatarUri(uri);\n    } catch (error) {\n      console.error('Error loading driver avatar:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const takePhoto = useCallback(async () => {\n    try {\n      setLoading(true);\n      const uri = await DriverAvatarService.takePhoto();\n      \n      if (uri) {\n        const result = await DriverAvatarService.uploadAvatar(userId, uri);\n        if (result.success) {\n          setAvatarUri(uri);\n          Alert.alert(\n            t('profile.photoSuccess'),\n            t('profile.photoTakeSuccess')\n          );\n        } else {\n          Alert.alert(\n            t('profile.photoError'),\n            t('profile.photoSaveError')\n          );\n        }\n      }\n    } catch (error) {\n      console.error('Error taking driver photo:', error);\n      Alert.alert(\n        t('profile.photoError'),\n        t('profile.photoTakeError')\n      );\n    } finally {\n      setLoading(false);\n    }\n  }, [t]);\n\n  const pickFromGallery = useCallback(async () => {\n    try {\n      setLoading(true);\n      const uri = await DriverAvatarService.pickImageFromGallery();\n      \n      if (uri) {\n        const result = await DriverAvatarService.uploadAvatar(userId, uri);\n        const success = result.success;\n        if (success) {\n          setAvatarUri(uri);\n          Alert.alert(\n            t('profile.photoSuccess'),\n            t('profile.photoPickSuccess')\n          );\n        } else {\n          Alert.alert(\n            t('profile.photoError'),\n            t('profile.photoSaveError')\n          );\n        }\n      }\n    } catch (error) {\n      console.error('Error picking driver photo from gallery:', error);\n      Alert.alert(\n        t('profile.photoError'),\n        t('profile.photoPickError')\n      );\n    } finally {\n      setLoading(false);\n    }\n  }, [t]);\n\n  const deleteAvatar = useCallback(async () => {\n    const confirmDelete = async () => {\n      try {\n        setLoading(true);\n        const success = await DriverAvatarService.deleteAvatar(userId);\n        if (success) {\n          setAvatarUri(null);\n          Alert.alert(\n            t('profile.photoSuccess'),\n            t('profile.photoDeleteSuccess')\n          );\n        } else {\n          Alert.alert(\n            t('profile.photoError'),\n            t('profile.photoDeleteError')\n          );\n        }\n      } catch (error) {\n        console.error('Error deleting driver avatar:', error);\n        Alert.alert(\n          t('profile.photoError'),\n          t('profile.photoDeleteError')\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    Alert.alert(\n      t('profile.deletePhotoConfirm'),\n      t('profile.deletePhotoMessage'),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        {\n          text: t('common.delete'),\n          style: 'destructive',\n          onPress: confirmDelete\n        }\n      ]\n    );\n  }, [t]);\n\n  const showAvatarOptions = useCallback(() => {\n    if (avatarUri) {\n      Alert.alert(\n        t('profile.changePhoto'),\n        t('profile.changePhotoMessage'),\n        [\n          { text: t('common.cancel'), style: 'cancel' },\n          { text: t('profile.takePhoto'), onPress: takePhoto },\n          { text: t('profile.chooseFromGallery'), onPress: pickFromGallery },\n          { \n            text: t('profile.deletePhoto'), \n            style: 'destructive',\n            onPress: deleteAvatar\n          }\n        ]\n      );\n    } else {\n      Alert.alert(\n        t('profile.addPhoto'),\n        t('profile.addPhotoMessage'),\n        [\n          { text: t('common.cancel'), style: 'cancel' },\n          { text: t('profile.takePhoto'), onPress: takePhoto },\n          { text: t('profile.chooseFromGallery'), onPress: pickFromGallery }\n        ]\n      );\n    }\n  }, [avatarUri, takePhoto, pickFromGallery, deleteAvatar, t]);\n\n  return {\n    avatarUri,\n    loading,\n    takePhoto,\n    pickFromGallery,\n    deleteAvatar,\n    showAvatarOptions,\n    loadAvatar\n  };\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/driver/DriverUseProfile.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProfile'. Either include it or remove the dependency array.","line":141,"column":6,"nodeType":"ArrayExpression","endLine":141,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfile]","fix":{"range":[4127,4129],"text":"[loadProfile]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n// mockUsers removed - using hardcoded data\nimport { DriverAvatarService } from '../../services/driver/DriverAvatarService';\nimport { useAuth } from '../../context/AuthContext';\n\nexport interface UserProfile {\n  id: string;\n  name: string;\n  surname: string;\n  phone: string;\n  email: string;\n  birthDate: string;\n  rating: number;\n  address: string;\n  createdAt: string;\n  role: string;\n  avatar?: string;\n}\n\nexport const useDriverProfile = () => {\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n  const userId = user?.id || '';\n  const [error, setError] = useState<string | null>(null);\n\n  const loadProfile = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Сначала пытаемся загрузить сохраненные данные\n      const savedProfile = await AsyncStorage.getItem('driver_profile');\n      \n      if (savedProfile) {\n        const parsedProfile = JSON.parse(savedProfile);\n        \n        // Загружаем аватар из нового сервиса\n        const avatar = await DriverAvatarService.getAvatar(userId);\n        if (avatar?.url) {\n          parsedProfile.avatar = avatar.url;\n        }\n        \n        setProfile(parsedProfile);\n        setLoading(false);\n        return;\n      }\n      \n      // Если сохраненных данных нет, загружаем из моков\n      const user = {\n        id: '1',\n        name: 'John',\n        surname: 'Doe',\n        phone: '+1234567890',\n        email: 'john@example.com',\n        birthDate: '1990-01-01',\n        rating: 5,\n        address: '123 Main St',\n        createdAt: '2023-01-01',\n        avatar: null\n      };\n      \n      // Загружаем аватар из нового сервиса\n      const avatar = await DriverAvatarService.getAvatar(userId);\n      const avatarUri = avatar?.url || null;\n      \n      const userProfile: UserProfile = {\n        id: user.id,\n        name: user.name,\n        surname: user.surname,\n        phone: user.phone,\n        email: user.email,\n        birthDate: '1990-01-01',\n        rating: user.rating,\n        address: user.address,\n        createdAt: user.createdAt,\n        role: 'driver',\n        avatar: avatarUri || user.avatar,\n      };\n      \n      // Сохраняем начальные данные\n      await AsyncStorage.setItem('driver_profile', JSON.stringify(userProfile));\n      setProfile(userProfile);\n    } catch (err) {\n      setError('Не удалось загрузить профиль');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProfile = async (updatedData: Partial<UserProfile>) => {\n    try {\n      setError(null);\n      \n      // Обновляем локальное состояние\n      if (profile) {\n        const updatedProfile = {\n          ...profile,\n          ...updatedData\n        };\n        \n        // Сохраняем в AsyncStorage\n        await AsyncStorage.setItem('driver_profile', JSON.stringify(updatedProfile));\n        \n        // Обновляем состояние\n        setProfile(updatedProfile);\n        \n        // Обновляем данные в моках для совместимости\n        const user = {\n        id: '1',\n        name: 'John',\n        surname: 'Doe',\n        phone: '+1234567890',\n        email: 'john@example.com',\n        birthDate: '1990-01-01',\n        rating: 5,\n        address: '123 Main St',\n        createdAt: '2023-01-01',\n        avatar: null\n      };\n        if (updatedData.name !== undefined) user.name = updatedData.name;\n        if (updatedData.surname !== undefined) user.surname = updatedData.surname;\n        if (updatedData.phone !== undefined) user.phone = updatedData.phone;\n        if (updatedData.email !== undefined) user.email = updatedData.email;\n        if (updatedData.birthDate !== undefined) user.birthDate = updatedData.birthDate;\n        if (updatedData.avatar !== undefined) user.avatar = updatedData.avatar;\n        \n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      setError('Не удалось обновить профиль');\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    loadProfile();\n  }, []);\n\n  const clearProfile = async () => {\n    try {\n      await AsyncStorage.removeItem('driver_profile');\n      await DriverAvatarService.deleteAvatar(userId);\n      setProfile(null);\n    } catch (err) {\n      // Ошибка при очистке профиля\n    }\n  };\n\n  return {\n    profile,\n    loading,\n    error,\n    loadProfile,\n    updateProfile,\n    clearProfile\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/driver/useDriverBalance.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadBalance', 'loadEarnings', and 'loadTransactions'. Either include them or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadBalance, loadEarnings, loadTransactions]","fix":{"range":[1559,1561],"text":"[loadBalance, loadEarnings, loadTransactions]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'saveEarnings' is assigned a value but never used.","line":116,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useUserStorageKey, STORAGE_KEYS } from '../../utils/storageKeys';\n\nexport interface DriverTransaction {\n  id: string;\n  type: 'payment' | 'topup' | 'refund' | 'withdrawal';\n  amount: number;\n  description: string;\n  date: string;\n  translationKey?: string;\n  translationParams?: Record<string, string>;\n}\n\nexport interface DriverBalanceContextType {\n  balance: number;\n  transactions: DriverTransaction[];\n  earnings: number;\n  topUpBalance: (amount: number) => Promise<void>;\n  addEarnings: (amount: number) => Promise<void>;\n  withdrawBalance: (amount: number) => Promise<boolean>;\n  addTransaction: (transaction: Omit<DriverTransaction, 'id' | 'date'>) => Promise<void>;\n  getEarnings: () => Promise<number>;\n  loadBalance: () => Promise<void>;\n  loadEarnings: () => Promise<void>;\n  resetBalance: () => Promise<void>;\n}\n\nexport const useDriverBalance = (): DriverBalanceContextType => {\n  const [balance, setBalance] = useState<number>(0);\n  const [transactions, setTransactions] = useState<DriverTransaction[]>([]);\n  const [earnings, setEarnings] = useState<number>(0);\n  \n  // Получаем ключи с изоляцией по пользователю\n  const balanceKey = useUserStorageKey(STORAGE_KEYS.DRIVER_BALANCE);\n  const transactionsKey = useUserStorageKey(STORAGE_KEYS.DRIVER_TRANSACTIONS);\n  const earningsKey = useUserStorageKey(STORAGE_KEYS.DRIVER_EARNINGS);\n\n  useEffect(() => {\n    loadBalance();\n    loadTransactions();\n    loadEarnings();\n  }, []);\n\n  const loadBalance = async () => {\n    try {\n      // Загружаем сохраненный баланс\n      const savedBalance = await AsyncStorage.getItem(balanceKey);\n      if (savedBalance !== null) {\n        setBalance(parseFloat(savedBalance));\n      } else {\n        setBalance(0);\n      }\n    } catch (error) {\n      console.error('Error loading driver balance:', error);\n      setBalance(0);\n    }\n  };\n\n  const loadTransactions = async () => {\n    try {\n      // Загружаем сохраненные транзакции\n      const savedTransactions = await AsyncStorage.getItem(transactionsKey);\n      if (savedTransactions !== null) {\n        setTransactions(JSON.parse(savedTransactions));\n      } else {\n        setTransactions([]);\n      }\n    } catch (error) {\n      console.error('Error loading driver transactions:', error);\n      setTransactions([]);\n    }\n  };\n\n  const loadEarnings = async () => {\n    try {\n      console.log('🔄 loadEarnings вызван');\n      // Загружаем сохраненные заработки\n      const savedEarnings = await AsyncStorage.getItem(earningsKey);\n      console.log('🔄 Загруженные earnings из AsyncStorage:', savedEarnings);\n      console.log('🔄 Текущие earnings в состоянии:', earnings);\n      if (savedEarnings !== null) {\n        const parsedEarnings = parseFloat(savedEarnings);\n        console.log('🔄 Устанавливаем earnings:', parsedEarnings);\n        setEarnings(parsedEarnings);\n      } else {\n        console.log('🔄 Устанавливаем earnings: 0 (нет сохраненных)');\n        setEarnings(0);\n      }\n    } catch (error) {\n      console.error('Error loading driver earnings:', error);\n      setEarnings(0);\n    }\n  };\n\n  const saveBalance = async (newBalance: number) => {\n    try {\n      console.log('💾 saveBalance вызван с балансом:', newBalance);\n      await AsyncStorage.setItem(balanceKey, newBalance.toString());\n      setBalance(newBalance);\n      console.log('💾 Баланс обновлен в состоянии:', newBalance);\n    } catch (error) {\n      console.error('Error saving driver balance:', error);\n    }\n  };\n\n  const saveTransactions = async (newTransactions: DriverTransaction[]) => {\n    try {\n      await AsyncStorage.setItem(transactionsKey, JSON.stringify(newTransactions));\n      setTransactions(newTransactions);\n    } catch (error) {\n      console.error('Error saving driver transactions:', error);\n    }\n  };\n\n  const saveEarnings = async (newEarnings: number) => {\n    try {\n      await AsyncStorage.setItem(earningsKey, newEarnings.toString());\n      setEarnings(newEarnings);\n    } catch (error) {\n      console.error('Error saving driver earnings:', error);\n    }\n  };\n\n  const topUpBalance = async (amount: number) => {\n    console.log('💰 topUpBalance вызван с суммой:', amount);\n    console.log('💰 Текущий баланс:', balance);\n    console.log('💰 Тип amount:', typeof amount);\n    console.log('💰 Тип balance:', typeof balance);\n    \n    const newBalance = balance + amount;\n    console.log('💰 Новый баланс будет:', newBalance);\n    \n    // Сначала обновляем состояние\n    setBalance(newBalance);\n    console.log('💰 Баланс обновлен в состоянии:', newBalance);\n    \n    // Затем сохраняем в AsyncStorage\n    await AsyncStorage.setItem(balanceKey, newBalance.toString());\n    console.log('💰 Баланс сохранен в AsyncStorage');\n    \n    await addTransaction({\n      type: 'topup',\n      amount: amount,\n      description: `TopUp ${amount} AFc`,\n      translationKey: 'driver.balance.transactions.topup',\n      translationParams: { amount: amount.toString() },\n    });\n    \n    console.log('💰 Транзакция добавлена');\n    \n    // Принудительно перезагружаем баланс для синхронизации\n    setTimeout(() => {\n      loadBalance();\n    }, 100);\n  };\n\n  const addEarnings = async (amount: number) => {\n    console.log('💵 addEarnings вызван с суммой:', amount);\n    console.log('💵 Текущий баланс:', balance);\n    console.log('💵 Текущие заработки:', earnings);\n    \n    const newBalance = balance + amount;\n    const newEarnings = earnings + amount;\n    \n    console.log('💵 Новый баланс будет:', newBalance);\n    console.log('💵 Новые заработки будут:', newEarnings);\n    \n    // Обновляем состояние\n    setBalance(newBalance);\n    setEarnings(newEarnings);\n    \n    // Сохраняем в AsyncStorage\n    console.log('💾 Сохраняем в AsyncStorage - balance:', newBalance, 'earnings:', newEarnings);\n    await AsyncStorage.setItem(balanceKey, newBalance.toString());\n    await AsyncStorage.setItem(earningsKey, newEarnings.toString());\n    console.log('💾 Сохранено в AsyncStorage');\n    \n    await addTransaction({\n      type: 'payment',\n      amount: amount,\n      description: `Earnings ${amount} AFc`,\n      translationKey: 'driver.balance.transactions.earnings',\n      translationParams: { amount: amount.toString() },\n    });\n    \n    console.log('💵 Заработки добавлены');\n    console.log('💵 Состояние обновлено - баланс:', newBalance, 'earnings:', newEarnings);\n  };\n\n  const withdrawBalance = async (amount: number): Promise<boolean> => {\n    if (balance < amount) {\n      return false; // Insufficient funds\n    }\n\n    const newBalance = balance - amount;\n    await saveBalance(newBalance);\n    \n    await addTransaction({\n      type: 'withdrawal',\n      amount: -amount,\n      description: `Withdrawal ${amount} AFc`,\n      translationKey: 'driver.balance.transactions.withdrawal',\n      translationParams: { amount: amount.toString() },\n    });\n\n    return true;\n  };\n\n  const addTransaction = async (transaction: Omit<DriverTransaction, 'id' | 'date'>) => {\n    const newTransaction: DriverTransaction = {\n      ...transaction,\n      id: Date.now().toString(),\n      date: new Date().toISOString(),\n    };\n\n    const newTransactions = [newTransaction, ...transactions];\n    await saveTransactions(newTransactions);\n  };\n\n  const getEarnings = async (): Promise<number> => {\n    // Здесь можно добавить логику расчета заработков\n    // Пока возвращаем сохраненные заработки\n    return earnings;\n  };\n\n  const resetBalance = async () => {\n    try {\n      console.log('🔄 Сброс баланса...');\n      \n      // Обнуляем баланс\n      setBalance(0);\n      await AsyncStorage.setItem(balanceKey, '0');\n      \n      // Очищаем транзакции\n      setTransactions([]);\n      await AsyncStorage.setItem(transactionsKey, JSON.stringify([]));\n      \n      // Обнуляем заработки тоже\n      setEarnings(0);\n      await AsyncStorage.setItem(earningsKey, '0');\n      \n      console.log('✅ Баланс и earnings успешно сброшены');\n    } catch (error) {\n      console.error('❌ Ошибка при сбросе баланса:', error);\n    }\n  };\n\n  return {\n    balance,\n    transactions,\n    earnings,\n    topUpBalance,\n    addEarnings,\n    withdrawBalance,\n    addTransaction,\n    getEarnings,\n    loadBalance, // Экспортируем для принудительного обновления\n    loadEarnings, // Экспортируем для принудительного обновления\n    resetBalance,\n  };\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/driver/useDriverDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/driver/useDriverTripsData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/driver/useDriverVehicles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useAddresses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useAvatar.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAvatar'. Either include it or remove the dependency array.","line":17,"column":6,"nodeType":"ArrayExpression","endLine":17,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadAvatar]","fix":{"range":[566,568],"text":"[loadAvatar]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'userId'. Either include it or remove the dependency array.","line":30,"column":6,"nodeType":"ArrayExpression","endLine":30,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [userId]","fix":{"range":[904,906],"text":"[userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'userId'. Either include it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: [t, userId]","fix":{"range":[1714,1717],"text":"[t, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'userId'. Either include it or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: [t, userId]","fix":{"range":[2550,2553],"text":"[t, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'userId'. Either include it or remove the dependency array.","line":136,"column":6,"nodeType":"ArrayExpression","endLine":136,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: [t, userId]","fix":{"range":[3611,3614],"text":"[t, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { Alert } from 'react-native';\nimport { AvatarService } from '../services/AvatarService';\nimport { useI18n } from './useI18n';\nimport { useAuth } from '../context/AuthContext';\n\nexport const useAvatar = () => {\n  const [avatarUri, setAvatarUri] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const { t } = useI18n();\n  const { user } = useAuth();\n  const userId = user?.id || '';\n\n  // Загружаем аватар при инициализации\n  useEffect(() => {\n    loadAvatar();\n  }, []);\n\n  const loadAvatar = useCallback(async () => {\n    try {\n      setLoading(true);\n      const avatar = await AvatarService.getAvatar(userId);\n      const uri = avatar?.url || null;\n      setAvatarUri(uri);\n    } catch (error) {\n      console.error('Error loading avatar:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const takePhoto = useCallback(async () => {\n    try {\n      setLoading(true);\n      const uri = await AvatarService.takePhoto();\n      \n      if (uri) {\n        const result = await AvatarService.uploadAvatar(userId, uri);\n        const success = result.success;\n        if (success) {\n          setAvatarUri(uri);\n          Alert.alert(\n            t('profile.photoSuccess'),\n            t('profile.photoTakeSuccess')\n          );\n        } else {\n          Alert.alert(\n            t('profile.photoError'),\n            t('profile.photoSaveError')\n          );\n        }\n      }\n    } catch (error) {\n      console.error('Error taking photo:', error);\n      Alert.alert(\n        t('profile.photoError'),\n        t('profile.photoTakeError')\n      );\n    } finally {\n      setLoading(false);\n    }\n  }, [t]);\n\n  const pickFromGallery = useCallback(async () => {\n    try {\n      setLoading(true);\n      const uri = await AvatarService.pickImageFromGallery();\n      \n      if (uri) {\n        const result = await AvatarService.uploadAvatar(userId, uri);\n        const success = result.success;\n        if (success) {\n          setAvatarUri(uri);\n          Alert.alert(\n            t('profile.photoSuccess'),\n            t('profile.photoPickSuccess')\n          );\n        } else {\n          Alert.alert(\n            t('profile.photoError'),\n            t('profile.photoSaveError')\n          );\n        }\n      }\n    } catch (error) {\n      console.error('Error picking from gallery:', error);\n      Alert.alert(\n        t('profile.photoError'),\n        t('profile.photoPickError')\n      );\n    } finally {\n      setLoading(false);\n    }\n  }, [t]);\n\n  const deleteAvatar = useCallback(async () => {\n    const confirmDelete = async () => {\n      try {\n        setLoading(true);\n        const success = await AvatarService.deleteAvatar(userId);\n        if (success) {\n          setAvatarUri(null);\n          Alert.alert(\n            t('profile.photoSuccess'),\n            t('profile.photoDeleteSuccess')\n          );\n        } else {\n          Alert.alert(\n            t('profile.photoError'),\n            t('profile.photoDeleteError')\n          );\n        }\n      } catch (error) {\n        console.error('Error deleting avatar:', error);\n        Alert.alert(\n          t('profile.photoError'),\n          t('profile.photoDeleteError')\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    Alert.alert(\n      t('profile.deletePhotoConfirm'),\n      t('profile.deletePhotoMessage'),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        {\n          text: t('common.delete'),\n          style: 'destructive',\n          onPress: confirmDelete\n        }\n      ]\n    );\n  }, [t]);\n\n  const showAvatarOptions = useCallback(() => {\n    if (avatarUri) {\n      Alert.alert(\n        t('profile.changePhoto'),\n        t('profile.changePhotoMessage'),\n        [\n          { text: t('common.cancel'), style: 'cancel' },\n          { text: t('profile.takePhoto'), onPress: takePhoto },\n          { text: t('profile.chooseFromGallery'), onPress: pickFromGallery },\n          { \n            text: t('profile.deletePhoto'), \n            style: 'destructive',\n            onPress: deleteAvatar\n          }\n        ]\n      );\n    } else {\n      Alert.alert(\n        t('profile.addPhoto'),\n        t('profile.addPhotoMessage'),\n        [\n          { text: t('common.cancel'), style: 'cancel' },\n          { text: t('profile.takePhoto'), onPress: takePhoto },\n          { text: t('profile.chooseFromGallery'), onPress: pickFromGallery }\n        ]\n      );\n    }\n  }, [avatarUri, takePhoto, pickFromGallery, deleteAvatar, t]);\n\n  return {\n    avatarUri,\n    loading,\n    takePhoto,\n    pickFromGallery,\n    deleteAvatar,\n    showAvatarOptions,\n    loadAvatar\n  };\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useBalance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useCards.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCards'. Either include it or remove the dependency array.","line":19,"column":6,"nodeType":"ArrayExpression","endLine":19,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadCards]","fix":{"range":[696,698],"text":"[loadCards]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Card } from '../services/cardService';\nimport { CardService } from '../services/cardService';\nimport { useUserStorageKey, STORAGE_KEYS } from '../utils/storageKeys';\nimport { useAuth } from '../context/AuthContext';\n\nexport const useCards = () => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n  \n  // Получаем ключ с изоляцией по пользователю\n  const cardsKey = useUserStorageKey(STORAGE_KEYS.USER_CARDS);\n\n  // Загружаем карты при инициализации\n  useEffect(() => {\n    loadCards();\n  }, []);\n\n  const loadCards = async () => {\n    try {\n      setLoading(true);\n      \n      if (__DEV__) {\n        // DEV: загружаем из AsyncStorage\n        const savedCards = await AsyncStorage.getItem(cardsKey);\n        if (savedCards) {\n          setCards(JSON.parse(savedCards));\n        } else {\n          setCards([]);\n        }\n      } else {\n        // PROD: загружаем из API\n        if (user?.id) {\n          const apiCards = await CardService.getCards(user.id);\n          setCards(apiCards);\n        } else {\n          setCards([]);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading cards:', error);\n      setCards([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addCard = async (cardData: Omit<Card, 'id'>) => {\n    try {\n      if (__DEV__) {\n        // DEV: сохраняем в AsyncStorage\n        const newCard: Card = {\n          ...cardData,\n          id: Date.now().toString(),\n        };\n        \n        const updatedCards = [...cards, newCard];\n        setCards(updatedCards);\n        await AsyncStorage.setItem(cardsKey, JSON.stringify(updatedCards));\n        return true;\n      } else {\n        // PROD: отправляем в API\n        if (!user?.id) return false;\n        const newCard = await CardService.addCard(cardData, user.id);\n        if (newCard) {\n          setCards(prev => [...prev, newCard]);\n          return true;\n        }\n        return false;\n      }\n    } catch (error) {\n      console.error('Error adding card:', error);\n      return false;\n    }\n  };\n\n  const deleteCard = async (cardId: string) => {\n    try {\n      if (__DEV__) {\n        // DEV: удаляем из AsyncStorage\n        const updatedCards = cards.filter(card => card.id !== cardId);\n        setCards(updatedCards);\n        await AsyncStorage.setItem(cardsKey, JSON.stringify(updatedCards));\n        return true;\n      } else {\n        // PROD: удаляем через API\n        const success = await CardService.deleteCard(cardId);\n        if (success) {\n          setCards(prev => prev.filter(card => card.id !== cardId));\n          return true;\n        }\n        return false;\n      }\n    } catch (error) {\n      console.error('Error deleting card:', error);\n      return false;\n    }\n  };\n\n  return {\n    cards,\n    loading,\n    addCard,\n    deleteCard,\n    refreshCards: loadCards,\n  };\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useDevRegistration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useDriverStats.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'user?.id'. Either include it or remove the dependency array.","line":26,"column":6,"nodeType":"ArrayExpression","endLine":26,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [user?.id]","fix":{"range":[972,974],"text":"[user?.id]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'days' is defined but never used.","line":29,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'service' is assigned a value but never used.","line":34,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'service' is assigned a value but never used.","line":53,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'user?.id'. Either include it or remove the dependency array.","line":101,"column":6,"nodeType":"ArrayExpression","endLine":101,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [user?.id]","fix":{"range":[3326,3328],"text":"[user?.id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport DriverStatsService, { DayStats, PeriodStats } from '../services/DriverStatsService';\nimport { useAuth } from '../context/AuthContext';\n\nexport const useDriverStats = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  // Получение статистики за период\n  const getPeriodStats = useCallback(async (startDate: string, endDate: string): Promise<PeriodStats | null> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const service = DriverStatsService.getInstance();\n      const stats = await service.getPeriodStats(user?.id || '', 'month', startDate, endDate);\n      return stats;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Ошибка получения статистики';\n      setError(errorMessage);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Получение статистики за последние N дней\n  const getLastNDaysStats = useCallback(async (days: number): Promise<DayStats[]> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const service = DriverStatsService.getInstance();\n      // Метод не существует, возвращаем пустой массив\n      console.warn('getLastNDaysStats method not implemented');\n      return [];\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Ошибка получения статистики';\n      setError(errorMessage);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Получение статистики за текущий месяц\n  const getCurrentMonthStats = useCallback(async (): Promise<DayStats[]> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const service = DriverStatsService.getInstance();\n      // Метод не существует, возвращаем пустой массив\n      console.warn('getCurrentMonthStats method not implemented');\n      return [];\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Ошибка получения статистики';\n      setError(errorMessage);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Получение статистики за текущий год\n  const getCurrentYearStats = useCallback(async (): Promise<DayStats[]> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Метод не существует, возвращаем пустой массив\n      console.warn('getCurrentYearStats method not implemented');\n      return [];\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Ошибка получения статистики';\n      setError(errorMessage);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Получение статистики за конкретный день\n  const getDayStats = useCallback(async (date: string): Promise<DayStats | null> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Метод не существует как статический, используем экземпляр\n      const service = DriverStatsService.getInstance();\n      const stats = await service.getDayStats(user?.id || '', date);\n      return stats;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Ошибка получения статистики дня';\n      setError(errorMessage);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Получение статистики за сегодня\n  const getTodayStats = useCallback(async (): Promise<DayStats | null> => {\n    const today = new Date().toISOString().split('T')[0];\n    return getDayStats(today);\n  }, [getDayStats]);\n\n  // Получение статистики за вчера\n  const getYesterdayStats = useCallback(async (): Promise<DayStats | null> => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    const yesterdayStr = yesterday.toISOString().split('T')[0];\n    return getDayStats(yesterdayStr);\n  }, [getDayStats]);\n\n  // Получение статистики за неделю (последние 7 дней)\n  const getWeekStats = useCallback(async (): Promise<PeriodStats | null> => {\n    const endDate = new Date().toISOString().split('T')[0];\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 6);\n    const startDateStr = startDate.toISOString().split('T')[0];\n    \n    return getPeriodStats(startDateStr, endDate);\n  }, [getPeriodStats]);\n\n  // Получение статистики за месяц (последние 30 дней)\n  const getMonthStats = useCallback(async (): Promise<PeriodStats | null> => {\n    const endDate = new Date().toISOString().split('T')[0];\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 29);\n    const startDateStr = startDate.toISOString().split('T')[0];\n    \n    return getPeriodStats(startDateStr, endDate);\n  }, [getPeriodStats]);\n\n  // Очистка ошибки\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return {\n    loading,\n    error,\n    getPeriodStats,\n    getLastNDaysStats,\n    getCurrentMonthStats,\n    getCurrentYearStats,\n    getDayStats,\n    getTodayStats,\n    getYesterdayStats,\n    getWeekStats,\n    getMonthStats,\n    clearError,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useEarningsChartData.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'driverId'. Either include it or remove the dependency array.","line":104,"column":6,"nodeType":"ArrayExpression","endLine":104,"endColumn":54,"suggestions":[{"desc":"Update the dependencies array to be: [getCachedData, cacheKey, driverId, period, setCachedData]","fix":{"range":[3104,3152],"text":"[getCachedData, cacheKey, driverId, period, setCachedData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport DriverStatsService, { EarningsChartData } from '../services/DriverStatsService';\n\n// Кэш для данных графика\nconst chartDataCache = new Map<string, {\n  data: EarningsChartData;\n  timestamp: number;\n  ttl: number;\n}>();\n\n// TTL для кэша (5 минут)\nconst CACHE_TTL = 5 * 60 * 1000;\n\n// Дебаунс для запросов (300ms)\nconst DEBOUNCE_DELAY = 300;\n\nexport const useEarningsChartData = (driverId: string, period: 'today' | 'week' | 'month' | 'year') => {\n  const [chartData, setChartData] = useState<EarningsChartData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<number>(0);\n  \n  // Рефы для дебаунсинга и отмены запросов\n  const debounceRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  // Ключ кэша\n  const cacheKey = useMemo(() => `chart_${period}`, [period]);\n\n  // Проверка кэша\n  const getCachedData = useCallback((key: string): EarningsChartData | null => {\n    const cached = chartDataCache.get(key);\n    if (cached && Date.now() - cached.timestamp < cached.ttl) {\n      return cached.data;\n    }\n    // Удаляем устаревшие данные\n    if (cached) {\n      chartDataCache.delete(key);\n    }\n    return null;\n  }, []);\n\n  // Сохранение в кэш\n  const setCachedData = useCallback((key: string, data: EarningsChartData) => {\n    chartDataCache.set(key, {\n      data,\n      timestamp: Date.now(),\n      ttl: CACHE_TTL,\n    });\n  }, []);\n\n  // Очистка кэша\n  const clearCache = useCallback(() => {\n    chartDataCache.clear();\n  }, []);\n\n  // Оптимизированная загрузка данных\n  const loadChartData = useCallback(async (forceRefresh = false) => {\n    // Отменяем предыдущий запрос\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n\n    // Создаем новый AbortController\n    abortControllerRef.current = new AbortController();\n\n    // Проверяем кэш, если не принудительное обновление\n    if (!forceRefresh) {\n      const cachedData = getCachedData(cacheKey);\n      if (cachedData) {\n        setChartData(cachedData);\n        setLastUpdated(Date.now());\n        return;\n      }\n    }\n\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const service = DriverStatsService.getInstance();\n      const data = await service.getEarningsChartData(driverId, period);\n      \n      // Проверяем, не был ли запрос отменен\n      if (abortControllerRef.current?.signal.aborted) {\n        return;\n      }\n\n      setChartData(data);\n      setLastUpdated(Date.now());\n      setCachedData(cacheKey, data);\n    } catch (err) {\n      // Проверяем, не был ли запрос отменен\n      if (abortControllerRef.current?.signal.aborted) {\n        return;\n      }\n\n      const errorMessage = err instanceof Error ? err.message : 'Ошибка получения данных графика';\n      setError(errorMessage);\n      console.error('[useEarningsChartData] Ошибка:', errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [period, cacheKey, getCachedData, setCachedData]);\n\n  // Дебаунсированная загрузка\n  const debouncedLoadData = useCallback((forceRefresh = false) => {\n    if (debounceRef.current) {\n      clearTimeout(debounceRef.current);\n    }\n\n    debounceRef.current = setTimeout(() => {\n      loadChartData(forceRefresh);\n    }, DEBOUNCE_DELAY);\n  }, [loadChartData]);\n\n  // Загружаем данные при изменении периода\n  useEffect(() => {\n    debouncedLoadData();\n    \n    // Очистка при размонтировании\n    return () => {\n      if (debounceRef.current) {\n        clearTimeout(debounceRef.current);\n      }\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, [debouncedLoadData]);\n\n  // Функция для принудительного обновления данных\n  const refreshData = useCallback(() => {\n    debouncedLoadData(true);\n  }, [debouncedLoadData]);\n\n  // Функция для очистки кэша\n  const clearDataCache = useCallback(() => {\n    clearCache();\n    setChartData(null);\n    setLastUpdated(0);\n  }, [clearCache]);\n\n  // Проверка, нужно ли обновление данных\n  const needsRefresh = useMemo(() => {\n    const now = Date.now();\n    const timeSinceUpdate = now - lastUpdated;\n    return timeSinceUpdate > CACHE_TTL;\n  }, [lastUpdated]);\n\n  // Автоматическое обновление устаревших данных\n  useEffect(() => {\n    if (needsRefresh && !loading && chartData) {\n      debouncedLoadData(true);\n    }\n  }, [needsRefresh, loading, chartData, debouncedLoadData]);\n\n  return {\n    chartData,\n    loading,\n    error,\n    lastUpdated,\n    needsRefresh,\n    refreshData,\n    clearDataCache,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useErrorBoundary.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[139,142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[139,142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[375,378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[375,378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dependencies' is defined but never used.","line":44,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1094,1097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1094,1097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect } from 'react';\n\ninterface ErrorState {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: any;\n}\n\nexport const useErrorBoundary = () => {\n  const [errorState, setErrorState] = useState<ErrorState>({\n    hasError: false,\n    error: null,\n    errorInfo: null,\n  });\n\n  const handleError = useCallback((error: Error, errorInfo?: any) => {\n    console.error('[ErrorBoundary] Ошибка:', error, errorInfo);\n    \n    setErrorState({\n      hasError: true,\n      error,\n      errorInfo,\n    });\n\n    // Отправляем ошибку в систему мониторинга (если есть)\n    if (__DEV__) {\n      console.group('Error Details');\n      console.error('Error:', error);\n      console.error('Error Info:', errorInfo);\n      console.error('Stack:', error.stack);\n      console.groupEnd();\n    }\n  }, []);\n\n  const resetError = useCallback(() => {\n    setErrorState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    });\n  }, []);\n\n  // Автоматический сброс ошибки при изменении зависимостей\n  const resetErrorOnDependencyChange = useCallback((dependencies: any[]) => {\n    // Этот callback не должен содержать useEffect\n    // useEffect должен вызываться на верхнем уровне компонента\n    if (errorState.hasError) {\n      resetError();\n    }\n  }, [errorState.hasError, resetError]);\n\n  return {\n    errorState,\n    handleError,\n    resetError,\n    resetErrorOnDependencyChange,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useFamilyMembers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'STORAGE_KEYS' is defined but never used.","line":7,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":30,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'saveFamilyMembers'. Either include it or remove the dependency array.","line":243,"column":6,"nodeType":"ArrayExpression","endLine":243,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [familyMembers, saveFamilyMembers, t]","fix":{"range":[8179,8197],"text":"[familyMembers, saveFamilyMembers, t]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect } from 'react';\nimport { Alert } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { getDefaultDate, calculateAge } from '../utils/profileHelpers';\nimport { useI18n } from '../hooks/useI18n';\nimport { useAuth } from '../context/AuthContext';\nimport { useUserStorageKey, STORAGE_KEYS } from '../utils/storageKeys';\n\ninterface FamilyMember {\n  id: string;\n  name: string;\n  surname: string;\n  type: string;\n  birthDate: string;\n  age: number;\n  phone?: string;\n  phoneVerified?: boolean;\n}\n\ninterface NewFamilyMember {\n  name: string;\n  surname: string;\n  type: string;\n  age: string;\n  phone: string;\n}\n\nexport const useFamilyMembers = () => {\n  const { t } = useI18n();\n  const { user } = useAuth();\n  const [familyMembers, setFamilyMembers] = useState<FamilyMember[]>([]);\n  const [loading, setLoading] = useState(true);\n  \n  // Получаем ключ с изоляцией по пользователю\n  const familyMembersKey = useUserStorageKey('@family_members');\n\n  // Загружаем семейных членов из AsyncStorage\n  const loadFamilyMembers = useCallback(async () => {\n    try {\n      const savedMembers = await AsyncStorage.getItem(familyMembersKey);\n      if (savedMembers) {\n        setFamilyMembers(JSON.parse(savedMembers));\n      } else {\n        // Если сохраненных данных нет, начинаем с пустого массива\n        setFamilyMembers([]);\n      }\n    } catch (error) {\n      console.error('Error loading family members:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [familyMembersKey]);\n\n  // Сохраняем семейных членов в AsyncStorage\n  const saveFamilyMembers = useCallback(async (members: FamilyMember[]) => {\n    try {\n      await AsyncStorage.setItem(familyMembersKey, JSON.stringify(members));\n    } catch (error) {\n      console.error('Error saving family members:', error);\n    }\n  }, [familyMembersKey]);\n\n  // Загружаем данные при монтировании\n  useEffect(() => {\n    loadFamilyMembers();\n  }, [loadFamilyMembers]);\n\n  const [expandedFamilyMember, setExpandedFamilyMember] = useState<string | null>(null);\n  const [editingFamilyMember, setEditingFamilyMember] = useState<string | null>(null);\n  const [showAddFamilyModal, setShowAddFamilyModal] = useState(false);\n  const [familyPhoneVerification, setFamilyPhoneVerification] = useState<{[key: string]: boolean}>({});\n  const [familyPhoneVerifying, setFamilyPhoneVerifying] = useState<{[key: string]: boolean}>({});\n  \n  const [newFamilyMember, setNewFamilyMember] = useState<NewFamilyMember>({\n    name: '',\n    surname: '',\n    type: '',\n    age: getDefaultDate(),\n    phone: '',\n  });\n\n  // Обработчик изменения телефона с сбросом верификации\n  const handlePhoneChange = (phone: string) => {\n    setNewFamilyMember(prev => ({ ...prev, phone }));\n  };\n\n  const toggleFamilyMember = (memberId: string) => {\n    setExpandedFamilyMember(expandedFamilyMember === memberId ? null : memberId);\n  };\n\n  const openAddFamilyModal = () => {\n    setShowAddFamilyModal(true);\n  };\n\n  const closeAddFamilyModal = () => {\n    setShowAddFamilyModal(false);\n    setNewFamilyMember({\n      name: '',\n      surname: '',\n      type: '',\n      age: getDefaultDate(),\n      phone: '',\n    });\n  };\n\n  const addFamilyMember = () => {\n    // Проверяем, что обязательные поля заполнены\n    if (!newFamilyMember.name.trim() || !newFamilyMember.surname.trim()) {\n      Alert.alert(t('common.error'), t('profile.family.fillNameSurname'));\n      return;\n    }\n\n    // Создаем нового члена семьи\n    const newMember: FamilyMember = {\n      id: Date.now().toString(), // Простой способ генерации ID\n      name: newFamilyMember.name,\n      surname: newFamilyMember.surname,\n      type: newFamilyMember.type,\n      birthDate: newFamilyMember.age,\n      age: calculateAge(newFamilyMember.age), // Точный расчет возраста\n      phone: newFamilyMember.phone.trim() || undefined,\n      phoneVerified: false,\n    };\n\n    // Добавляем в список и сохраняем\n    const updatedMembers = [...familyMembers, newMember];\n    setFamilyMembers(updatedMembers);\n    saveFamilyMembers(updatedMembers);\n    \n    // Закрываем модальное окно\n    closeAddFamilyModal();\n    \n    Alert.alert(\n      t('common.success'),\n      t('profile.family.addMemberSuccess'),\n      [{ text: t('common.ok') }]\n    );\n  };\n\n  const startEditingFamilyMember = (memberId: string) => {\n    setEditingFamilyMember(memberId);\n  };\n\n  const cancelEditingFamilyMember = () => {\n    setEditingFamilyMember(null);\n  };\n\n  const saveFamilyMember = (memberId: string, updatedData: Partial<FamilyMember>) => {\n    const updatedMembers = familyMembers.map(member => \n      member.id === memberId ? { \n        ...member, \n        ...updatedData,\n        // Сбрасываем верификацию телефона, если номер изменился\n        phoneVerified: updatedData.phone !== member.phone ? false : member.phoneVerified\n      } : member\n    );\n    setFamilyMembers(updatedMembers);\n    saveFamilyMembers(updatedMembers);\n    setEditingFamilyMember(null);\n  };\n\n  const deleteFamilyMember = (memberId: string) => {\n    const updatedMembers = familyMembers.filter(member => member.id !== memberId);\n    setFamilyMembers(updatedMembers);\n    saveFamilyMembers(updatedMembers);\n    setExpandedFamilyMember(null);\n    setEditingFamilyMember(null);\n  };\n\n  const resetFamilyPhoneVerification = (memberId: string) => {\n    setFamilyPhoneVerification(prev => ({ ...prev, [memberId]: false }));\n    // Также сбрасываем статус в данных члена семьи\n    const updatedMembers = familyMembers.map(member => \n      member.id === memberId \n        ? { ...member, phoneVerified: false }\n        : member\n    );\n    setFamilyMembers(updatedMembers);\n    saveFamilyMembers(updatedMembers);\n  };\n\n  const verifyFamilyPhone = useCallback((memberId: string) => {\n    const member = familyMembers.find(m => m.id === memberId);\n    if (!member || !member.phone) {\n      Alert.alert(t('common.error'), t('profile.verificationModal.phoneNotSpecified'));\n      return;\n    }\n\n    const codeSentTitle = t('profile.verifyPhone.success.title');\n    const codeSentMessage = t('profile.verifyPhone.success.message');\n    const cancelText = t('common.cancel');\n    const verifyText = t('common.verify');\n    const successTitle = t('common.success');\n    const successMessage = t('profile.verifyPhone.phoneVerifiedSuccess');\n    const errorTitle = t('profile.verifyPhone.error.title');\n    const errorMessage = t('profile.verifyPhone.error.message');\n\n    // Сначала показываем \"Код отправлен\"\n    Alert.alert(\n      codeSentTitle,\n      codeSentMessage,\n      [\n        { text: cancelText, style: 'cancel' },\n        {\n          text: verifyText,\n          onPress: () => {\n            // Затем показываем поле ввода кода\n            Alert.prompt(\n              t('profile.verificationModal.enterCode'),\n              t('profile.verificationModal.enterSmsCode'),\n              [\n                { text: cancelText, style: 'cancel' },\n                {\n                  text: verifyText,\n                  onPress: async (code) => {\n                    if (code === '1234') {\n                      setFamilyPhoneVerifying(prev => ({ ...prev, [memberId]: true }));\n                      setTimeout(() => {\n                        setFamilyPhoneVerification(prev => ({ ...prev, [memberId]: true }));\n                        setFamilyPhoneVerifying(prev => ({ ...prev, [memberId]: false }));\n                        // Обновляем статус в данных члена семьи\n                        const updatedMembers = familyMembers.map(member => \n                          member.id === memberId \n                            ? { ...member, phoneVerified: true }\n                            : member\n                        );\n                        setFamilyMembers(updatedMembers);\n                        saveFamilyMembers(updatedMembers);\n                        Alert.alert(successTitle, successMessage);\n                      }, 1000);\n                    } else {\n                      Alert.alert(errorTitle, errorMessage);\n                    }\n                  }\n                }\n              ],\n              'plain-text'\n            );\n          }\n        }\n      ]\n    );\n  }, [familyMembers, t]);\n\n  return {\n    familyMembers,\n    expandedFamilyMember,\n    editingFamilyMember,\n    showAddFamilyModal,\n    newFamilyMember,\n    setNewFamilyMember,\n    handlePhoneChange,\n    familyPhoneVerification,\n    familyPhoneVerifying,\n    loading,\n    loadFamilyMembers,\n    toggleFamilyMember,\n    openAddFamilyModal,\n    closeAddFamilyModal,\n    addFamilyMember,\n    startEditingFamilyMember,\n    cancelEditingFamilyMember,\n    saveFamilyMember,\n    deleteFamilyMember,\n    verifyFamilyPhone,\n    resetFamilyPhoneVerification,\n  };\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useFixDriveFamilyMembers.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'user?.name', 'user?.phone', and 'user?.surname'. Either include them or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [user.id, profile, familyMembersKey, user?.name, user?.surname, user?.phone]","fix":{"range":[2183,2220],"text":"[user.id, profile, familyMembersKey, user?.name, user?.surname, user?.phone]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has missing dependencies: 'user?.name', 'user?.phone', and 'user?.surname'. Either include them or remove the dependency array.","line":101,"column":8,"nodeType":"ArrayExpression","endLine":101,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [familyMembersKey, profile?.name, profile?.surname, profile?.birthDate, profile?.phone, user?.name, user?.surname, user?.phone]","fix":{"range":[3853,3890],"text":"[familyMembersKey, profile?.name, profile?.surname, profile?.birthDate, profile?.phone, user?.name, user?.surname, user?.phone]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { FamilyMember } from '../types/family';\nimport { useAuth } from '../context/AuthContext';\nimport { useProfile } from './useProfile';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useUserStorageKey } from '../utils/storageKeys';\n\nexport const useFixDriveFamilyMembers = () => {\n  const { user } = useAuth();\n  const { profile } = useProfile();\n  const [familyMembers, setFamilyMembers] = useState<FamilyMember[]>([]);\n  const [loading, setLoading] = useState(true);\n  const familyMembersKey = useUserStorageKey('@family_members');\n\n  useEffect(() => {\n    const loadFamilyMembers = async () => {\n      try {\n        setLoading(true);\n        \n        // Загружаем данные напрямую из AsyncStorage с изоляцией по user.id\n        const savedMembers = await AsyncStorage.getItem(familyMembersKey);\n        \n        let members: FamilyMember[] = [];\n        \n        if (savedMembers) {\n          members = JSON.parse(savedMembers);\n        }\n        \n        // Создаем владельца аккаунта как участника семьи\n        const accountOwner: FamilyMember = {\n          id: 'account-owner',\n          name: profile?.name || user?.name || 'Пользователь',\n          surname: profile?.surname || user?.surname || '',\n          type: 'account_owner',\n          birthDate: profile?.birthDate || '1990-01-01',\n          age: 30, // Default age since User type doesn't have age property\n          phone: profile?.phone || user?.phone,\n          phoneVerified: false // Default since User type doesn't have phoneVerified property\n        };\n        \n        // Если есть добавленные участники семьи, добавляем владельца к ним\n        // Если нет - показываем только владельца\n        const allMembers = members.length > 0 \n          ? [accountOwner, ...members] \n          : [accountOwner];\n        setFamilyMembers(allMembers);\n      } catch (error) {\n        console.error('Error loading family members for FixDrive:', error);\n        setFamilyMembers([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadFamilyMembers();\n  }, [user?.id, profile, familyMembersKey]);\n\n  // Автоматически обновляем данные при фокусе на экране\n  useFocusEffect(\n    React.useCallback(() => {\n      const loadFamilyMembers = async () => {\n        try {\n          setLoading(true);\n          \n          // Загружаем данные напрямую из AsyncStorage с изоляцией по user.id\n          const savedMembers = await AsyncStorage.getItem(familyMembersKey);\n          \n          let members: FamilyMember[] = [];\n          \n          if (savedMembers) {\n            members = JSON.parse(savedMembers);\n          }\n          \n          // Создаем владельца аккаунта как участника семьи\n          const accountOwner: FamilyMember = {\n            id: 'account-owner',\n            name: profile?.name || user?.name || 'Пользователь',\n            surname: profile?.surname || user?.surname || '',\n            type: 'account_owner',\n            birthDate: profile?.birthDate || '1990-01-01',\n            age: 30, // Default age since User type doesn't have age property\n            phone: profile?.phone || user?.phone,\n            phoneVerified: false // Default since User type doesn't have phoneVerified property\n          };\n          \n          // Если есть добавленные участники семьи, добавляем владельца к ним\n          // Если нет - показываем только владельца\n          const allMembers = members.length > 0 \n            ? [accountOwner, ...members] \n            : [accountOwner];\n          setFamilyMembers(allMembers);\n        } catch (error) {\n          console.error('Error loading family members on focus:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      loadFamilyMembers();\n    }, [user?.id, profile, familyMembersKey])\n  );\n\n  // Функция для получения опций для dropdown\n  const getFamilyMemberOptions = () => {\n    return familyMembers.map(member => ({\n      key: member.id,\n      label: `${member.name} ${member.surname}`,\n      value: member.id,\n      member: member\n    }));\n  };\n\n  // Функция для получения участника по ID\n  const getFamilyMemberById = (id: string) => {\n    return familyMembers.find(member => member.id === id);\n  };\n\n  // Функция для принудительного обновления данных из AsyncStorage\n  const refreshFamilyMembers = async () => {\n    try {\n      const savedMembers = await AsyncStorage.getItem(familyMembersKey);\n      \n      if (savedMembers) {\n        const parsedMembers = JSON.parse(savedMembers);\n        \n        // Создаем владельца аккаунта\n        const accountOwner: FamilyMember = {\n          id: 'account-owner',\n          name: profile?.name || user?.name || 'Пользователь',\n          surname: profile?.surname || user?.surname || '',\n          type: 'account_owner',\n          birthDate: profile?.birthDate || '1990-01-01',\n          age: 30, // Default age since User type doesn't have age property\n          phone: profile?.phone || user?.phone,\n          phoneVerified: false // Default since User type doesn't have phoneVerified property\n        };\n        \n        const allMembers = parsedMembers.length > 0 \n          ? [accountOwner, ...parsedMembers] \n          : [accountOwner];\n        \n        setFamilyMembers(allMembers);\n      }\n    } catch (error) {\n      console.error('Error refreshing family members:', error);\n    }\n  };\n\n  return {\n    familyMembers,\n    loading,\n    getFamilyMemberOptions,\n    getFamilyMemberById,\n    refreshFamilyMembers\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useI18n.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getLanguageOptions' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport { useLanguage } from '../context/LanguageContext';\nimport { getLanguageOptions, getLanguageInfo, type SupportedLanguage, t as i18nT } from '../i18n';\n\nexport const useI18n = () => {\n  const { setLanguage, language, languageOptions, isLoading, error } = useLanguage();\n\n  const changeLanguage = useCallback(async (newLanguage: SupportedLanguage) => {\n    await setLanguage(newLanguage);\n  }, [setLanguage]);\n\n  const getCurrentLang = useCallback(() => {\n    return language;\n  }, [language]);\n\n  const getStoredLanguage = useCallback(async () => {\n    return language;\n  }, [language]);\n\n  const checkRTL = useCallback(() => {\n    return language === 'ar';\n  }, [language]);\n\n  return {\n    t: i18nT,\n    setLanguage: changeLanguage,\n    getCurrentLanguage: getCurrentLang,\n    getStoredLanguage,\n    isRTL: checkRTL,\n    language,\n    languageOptions,\n    isLoading,\n    error,\n    getLanguageInfo,\n    SUPPORTED_LANGUAGES: languageOptions,\n  };\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/usePersistentButtonState.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadButtonState'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [driverId, loadButtonState]","fix":{"range":[955,965],"text":"[driverId, loadButtonState]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'saveButtonState'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [buttonState, isLoaded, saveButtonState]","fix":{"range":[1084,1107],"text":"[buttonState, isLoaded, saveButtonState]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\ninterface ButtonState {\n  buttonColorState: number;\n  isPaused: boolean;\n  emergencyActionsUsed: boolean;\n  emergencyActionType: 'stop' | 'end' | null;\n  pauseStartTime: number | null;\n  // Новые состояния для таймера в статусе 2 (циан)\n  isTripTimerActive: boolean;\n  tripStartTime: number | null;\n}\n\nconst BUTTON_STATE_KEY = '@driver_modal_button_state';\n\nexport const usePersistentButtonState = (driverId: string) => {\n  const [buttonState, setButtonState] = useState<ButtonState>({\n    buttonColorState: 0,\n    isPaused: false,\n    emergencyActionsUsed: false,\n    emergencyActionType: null,\n    pauseStartTime: null,\n    isTripTimerActive: false,\n    tripStartTime: null,\n  });\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // Загружаем состояние при инициализации\n  useEffect(() => {\n    loadButtonState();\n  }, [driverId]);\n\n  // Сохраняем состояние при изменении\n  useEffect(() => {\n    if (isLoaded) {\n      saveButtonState();\n    }\n  }, [buttonState, isLoaded]);\n\n  const loadButtonState = async () => {\n    try {\n      const key = `${BUTTON_STATE_KEY}_${driverId}`;\n      const savedState = await AsyncStorage.getItem(key);\n      \n      if (savedState) {\n        const parsedState = JSON.parse(savedState);\n        setButtonState(parsedState);\n      }\n    } catch (error) {\n      console.error('Ошибка при загрузке состояния кнопки:', error);\n    } finally {\n      setIsLoaded(true);\n    }\n  };\n\n  const saveButtonState = async () => {\n    try {\n      const key = `${BUTTON_STATE_KEY}_${driverId}`;\n      await AsyncStorage.setItem(key, JSON.stringify(buttonState));\n    } catch (error) {\n      console.error('Ошибка при сохранении состояния кнопки:', error);\n    }\n  };\n\n  const updateButtonState = useCallback((updates: Partial<ButtonState>) => {\n    setButtonState(prev => ({ ...prev, ...updates }));\n  }, []);\n\n  const resetButtonState = async () => {\n    const newState = {\n      buttonColorState: 0,\n      isPaused: false,\n      emergencyActionsUsed: false,\n      emergencyActionType: null,\n      pauseStartTime: null,\n      isTripTimerActive: false,\n      tripStartTime: null,\n    };\n    \n    setButtonState(newState);\n    \n    try {\n      const key = `${BUTTON_STATE_KEY}_${driverId}`;\n      await AsyncStorage.removeItem(key);\n    } catch (error) {\n      console.error('Ошибка при сбросе состояния кнопки:', error);\n    }\n  };\n\n  return {\n    buttonState,\n    updateButtonState,\n    resetButtonState,\n    isLoaded,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useProfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useRole.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useSessionCleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/hooks/useVerification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/client/about/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/client/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/common/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/components/cards/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/driver/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/errors/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/help/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/login/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/navigation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/notifications/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/premium/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/profile/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/profile/theme/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/register/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/i18n/support/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/navigation/AuthNavigator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/navigation/ChatStack.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/navigation/ClientNavigator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Ionicons' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[996,999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[996,999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Ionicons } from '@expo/vector-icons';\nimport OrdersMapScreen from '../screens/common/OrdersMapScreen';\nimport DriversScreen from '../screens/client/DriversScreen';\nimport ChatStack from './ChatStack';\nimport ScheduleScreen from '../screens/common/ScheduleScreen';\nimport ClientProfileStack from './ClientProfileStack';\nimport { ClientStackParamList } from '../types/navigation';\nimport { useLanguage } from '../context/LanguageContext';\nimport { useTheme } from '../context/ThemeContext';\nimport TabBar from './TabBar';\n\nconst Stack = createStackNavigator<ClientStackParamList>();\n\n// Компонент для табов\nconst TabNavigator: React.FC = () => {\n  const { isDark } = useTheme();\n  const { createBottomTabNavigator } = require('@react-navigation/bottom-tabs');\n  const Tab = createBottomTabNavigator();\n\n  // Обёртка для TabBar, чтобы подписаться на смену языка\n  function TabBarWithLanguage(props: any) {\n    useLanguage();\n    return <TabBar {...props} />;\n  }\n\n  return (\n    <Tab.Navigator\n      id={undefined}\n      tabBar={(props) => <TabBarWithLanguage {...props} />}\n      screenOptions={{\n        headerShown: false,\n        tabBarStyle: {\n          backgroundColor: isDark ? '#181A20' : '#fff',\n          borderTopColor: isDark ? '#333' : '#e0e0e0',\n        },\n      }}\n    >\n      <Tab.Screen name=\"Map\" component={OrdersMapScreen} />\n      <Tab.Screen name=\"Drivers\" component={DriversScreen} />\n      <Tab.Screen name=\"Schedule\" component={ScheduleScreen} />\n      <Tab.Screen name=\"Chat\" component={ChatStack} />\n      <Tab.Screen \n        name=\"ClientProfile\" \n        component={ClientProfileStack}\n        options={{\n          tabBarStyle: { display: 'none' }, // Скрываем таббар для экрана профиля\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n\nconst ClientNavigator: React.FC = () => {\n  return (\n    // @ts-ignore\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"MainTabs\" component={TabNavigator} />\n\n    </Stack.Navigator>\n  );\n};\n\nexport default ClientNavigator;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/navigation/ClientProfileStack.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/navigation/DriverNavigator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Ionicons' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[731,734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[731,734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../context/ThemeContext';\nimport { useLanguage } from '../context/LanguageContext';\nimport TabBar from './TabBar';\n\n// Импорт экранов\nimport OrdersMapScreen from '../screens/common/OrdersMapScreen/index';\nimport DriversScreen from '../screens/client/DriversScreen';\nimport EarningsScreen from '../components/EarningsScreen';\nimport ChatStack from './ChatStack';\nimport DriverProfileStack from './driver/DriverProfileStack';\n\nconst Tab = createBottomTabNavigator();\n\n// Обёртка для TabBar, чтобы подписаться на смену языка\nfunction TabBarWithLanguage(props: any) {\n  useLanguage();\n  return <TabBar {...props} />;\n}\n\nconst DriverNavigator: React.FC = () => {\n  const { isDark } = useTheme();\n\n  return (\n    <Tab.Navigator\n      id={undefined}\n      tabBar={(props) => <TabBarWithLanguage {...props} />}\n      screenOptions={{\n        headerShown: false,\n        tabBarStyle: {\n          backgroundColor: isDark ? '#181A20' : '#fff',\n          borderTopColor: isDark ? '#333' : '#e0e0e0',\n        },\n      }}\n    >\n      <Tab.Screen \n        name=\"Map\" \n        component={OrdersMapScreen}\n      />\n      <Tab.Screen \n        name=\"Orders\" \n        component={DriversScreen}\n      />\n      <Tab.Screen \n        name=\"Earnings\" \n        component={EarningsScreen}\n      />\n      <Tab.Screen \n        name=\"Chat\" \n        component={ChatStack}\n      />\n      <Tab.Screen \n        name=\"Profile\" \n        component={DriverProfileStack}\n        options={{\n          tabBarStyle: { display: 'none' }, // Скрываем таббар для экрана профиля\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n\nexport default DriverNavigator;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/navigation/FixDriveStack.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/navigation/RootNavigator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/navigation/TabBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":17,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'language'. Either exclude it or remove the dependency array.","line":151,"column":6,"nodeType":"ArrayExpression","endLine":151,"endColumn":37,"suggestions":[{"desc":"Update the dependencies array to be: [currentTranslations]","fix":{"range":[3952,3983],"text":"[currentTranslations]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { View, TouchableOpacity, Text } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../context/ThemeContext';\nimport { useLanguage } from '../context/LanguageContext';\nimport { getCurrentColors } from '../constants/colors';\nimport { TabBarStyles as styles } from '../styles/navigation/TabBar.styles';\n\ninterface TabBarProps {\n  state: { routes: Array<{ key: string; name: string }>; index: number };\n  descriptors: Record<string, { options: { tabBarAccessibilityLabel?: string; tabBarTestID?: string } }>;\n  navigation: { emit: (event: { type: string; target: string; canPreventDefault?: boolean }) => { defaultPrevented?: boolean }; navigate: (name: string) => void };\n}\n\nconst TabBar: React.FC<TabBarProps> = ({ state, descriptors, navigation }) => {\n  const { isDark } = useTheme();\n  const { t, language } = useLanguage();\n  const currentColors = getCurrentColors(isDark);\n\n  // Temporary static translations for debugging\n  const staticTranslations = {\n    ru: {\n      map: 'Карта',\n      drivers: 'Водители',\n      schedule: 'Расписание',\n      chats: 'Чаты',\n      profile: 'Профиль',\n      orders: 'Заказы',\n      earnings: 'Заработок'\n    },\n    en: {\n      map: 'Map',\n      drivers: 'Drivers',\n      schedule: 'Schedule',\n      chats: 'Chats',\n      profile: 'Profile',\n      orders: 'Orders',\n      earnings: 'Earnings'\n    },\n    az: {\n      map: 'Xəritə',\n      drivers: 'Sürücülər',\n      schedule: 'Cədvəl',\n      chats: 'Söhbətlər',\n      profile: 'Profil',\n      orders: 'Sifarişlər',\n      earnings: 'Qazanc'\n    },\n    tr: {\n      map: 'Harita',\n      drivers: 'Sürücüler',\n      schedule: 'Program',\n      chats: 'Sohbetler',\n      profile: 'Profil',\n      orders: 'Siparişler',\n      earnings: 'Kazanç'\n    },\n    es: {\n      map: 'Mapa',\n      drivers: 'Conductores',\n      schedule: 'Horario',\n      chats: 'Chats',\n      profile: 'Perfil',\n      orders: 'Pedidos',\n      earnings: 'Ganancias'\n    },\n    fr: {\n      map: 'Carte',\n      drivers: 'Chauffeurs',\n      schedule: 'Planning',\n      chats: 'Chats',\n      profile: 'Profil',\n      orders: 'Commandes',\n      earnings: 'Gains'\n    },\n    de: {\n      map: 'Karte',\n      drivers: 'Fahrer',\n      schedule: 'Zeitplan',\n      chats: 'Chats',\n      profile: 'Profil',\n      orders: 'Aufträge',\n      earnings: 'Verdienst'\n    },\n    ar: {\n      map: 'الخريطة',\n      drivers: 'السائقين',\n      schedule: 'الجدول',\n      chats: 'الدردشات',\n      profile: 'الملف الشخصي',\n      orders: 'الطلبات',\n      earnings: 'الأرباح'\n    }\n  };\n\n  const currentTranslations = staticTranslations[language] || staticTranslations.ru;\n\n  const tabConfig = useMemo(() => [\n    // Клиентские табы\n    {\n      name: 'Map',\n      icon: 'map-outline',\n      activeIcon: 'map',\n      label: currentTranslations.map,\n    },\n    {\n      name: 'Drivers',\n      icon: 'people-outline',\n      activeIcon: 'people',\n      label: currentTranslations.drivers,\n    },\n    {\n      name: 'Schedule',\n      icon: 'add',\n      activeIcon: 'add',\n      label: currentTranslations.schedule,\n      isSpecial: true, // Специальная кнопка в круге\n    },\n    {\n      name: 'Chat',\n      icon: 'chatbubbles-outline',\n      activeIcon: 'chatbubbles',\n      label: currentTranslations.chats,\n    },\n    {\n      name: 'ClientProfile',\n      icon: 'person-outline',\n      activeIcon: 'person',\n      label: currentTranslations.profile,\n    },\n    // Водительские табы\n    {\n      name: 'Orders',\n      icon: 'list-outline',\n      activeIcon: 'list',\n      label: currentTranslations.orders,\n    },\n    {\n      name: 'Earnings',\n      icon: 'wallet-outline',\n      activeIcon: 'wallet',\n      label: currentTranslations.earnings,\n      isSpecial: true, // Специальная кнопка в круге\n    },\n    {\n      name: 'Profile',\n      icon: 'person-outline',\n      activeIcon: 'person',\n      label: currentTranslations.profile,\n    },\n  ], [language, currentTranslations]);\n\n  return (\n    <View style={[\n      styles.tabBar, \n      { \n        backgroundColor: currentColors.tabBar,\n        borderTopColor: currentColors.border \n      }\n    ]}> \n      {state.routes.map((route: { key: string; name: string }, index: number) => {\n        const { options } = descriptors[route.key];\n        const isFocused = state.index === index;\n        const tab = tabConfig.find(t => t.name === route.name);\n\n        const onPress = () => {\n          const event = navigation.emit({\n            type: 'tabPress',\n            target: route.key,\n            canPreventDefault: true,\n          });\n\n          if (!isFocused && !event.defaultPrevented) {\n            navigation.navigate(route.name);\n          }\n        };\n\n        const onLongPress = () => {\n          navigation.emit({\n            type: 'tabLongPress',\n            target: route.key,\n          });\n        };\n\n        // Проверяем, является ли это специальной кнопкой в круге\n        const isSpecialTab = tab?.isSpecial;\n\n        return (\n          <TouchableOpacity\n            key={route.key}\n            accessibilityRole=\"button\"\n            accessibilityState={isFocused ? { selected: true } : {}}\n            accessibilityLabel={options.tabBarAccessibilityLabel}\n            testID={options.tabBarTestID}\n            onPress={onPress}\n            onLongPress={onLongPress}\n            style={[styles.tabItem, isSpecialTab && styles.specialTabContainer]}\n          >\n            {isSpecialTab ? (\n              // Специальная кнопка в круге\n              <View style={[\n                styles.specialTabCircle,\n                {\n                  backgroundColor: isFocused ? currentColors.primary : currentColors.primary,\n                  shadowColor: isFocused ? currentColors.primary : currentColors.primary,\n                  borderColor: isFocused ? currentColors.primary : currentColors.primary,\n                }\n              ]}>\n                <Ionicons\n                  name={(isFocused ? tab?.activeIcon : tab?.icon) as keyof typeof Ionicons.glyphMap}\n                  size={30}\n                  color=\"#fff\"\n                  style={styles.specialTabIcon}\n                />\n              </View>\n            ) : (\n              // Обычная иконка\n              <Ionicons\n                name={(isFocused ? tab?.activeIcon : tab?.icon) as keyof typeof Ionicons.glyphMap}\n                size={24}\n                color={isFocused ? currentColors.primary : currentColors.textSecondary}\n              />\n            )}\n            \n            {!isSpecialTab && (\n              <Text style={[\n                styles.tabLabel,\n                { color: isFocused ? currentColors.primary : currentColors.textSecondary }\n              ]}>\n                {tab?.label}\n              </Text>\n            )}\n            \n            {isFocused && !isSpecialTab && (\n              <View style={[styles.tabIndicator, { backgroundColor: currentColors.primary }]} />\n            )}\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n};\n\nexport default TabBar;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/navigation/driver/DriverProfileStack.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/auth/ClientRegisterScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1311,1314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1311,1314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1660,1663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1660,1663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1758,1761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1758,1761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  SafeAreaView,\n  KeyboardAvoidingView,\n  Platform,\n  Alert,\n  StatusBar,\n  Modal,\n} from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport Ionicons from '@expo/vector-icons/Ionicons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTheme } from '../../context/ThemeContext';\nimport { createClientRegisterScreenStyles, getPlaceholderColor } from '../../styles/screens/ClientRegisterScreen.styles';\nimport PasswordStrengthIndicator from '../../components/PasswordStrengthIndicator';\nimport SocialAuthButtons from '../../components/SocialAuthButtons';\nimport DevRegistrationService from '../../services/DevRegistrationService';\n\nconst ClientRegisterScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { t } = useLanguage();\n  const { isDark } = useTheme();\n  \n  // Создаем стили с учетом текущей темы\n  const styles = createClientRegisterScreenStyles(isDark);\n\n  const [form, setForm] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    password: '',\n    confirmPassword: '',\n  });\n  const [errors, setErrors] = useState<any>({});\n  const [loading, setLoading] = useState(false);\n  const [agree, setAgree] = useState(false);\n  const [showTerms, setShowTerms] = useState(false);\n  const [showPrivacy, setShowPrivacy] = useState(false);\n\n  const handleChange = (field: string, value: string) => {\n    setForm((prev) => ({ ...prev, [field]: value }));\n    setErrors((prev: any) => ({ ...prev, [field]: undefined }));\n  };\n\n  const validate = () => {\n    const newErrors: any = {};\n    \n    // Основная информация\n    if (!form.firstName.trim()) newErrors.firstName = t('register.firstNameRequired');\n    if (!form.lastName.trim()) newErrors.lastName = t('register.lastNameRequired');\n    if (!form.email.trim()) newErrors.email = t('register.emailRequired');\n    else if (!/\\S+@\\S+\\.\\S+/.test(form.email)) newErrors.email = t('register.emailInvalid');\n    if (!form.phone.trim()) newErrors.phone = t('register.phoneRequired');\n    \n    // Пароль\n    if (!form.password) newErrors.password = t('register.passwordRequired');\n    else if (form.password.length < 8) newErrors.password = t('register.passwordShort');\n    else if (!/(?=.*[a-z])/.test(form.password)) newErrors.password = t('register.passwordLowercase');\n    else if (!/(?=.*[A-Z])/.test(form.password)) newErrors.password = t('register.passwordUppercase');\n    else if (!/(?=.*\\d)/.test(form.password)) newErrors.password = t('register.passwordNumbers');\n    else if (!/(?=.*[!@#$%^&*])/.test(form.password)) newErrors.password = t('register.passwordSpecial');\n    if (form.confirmPassword !== form.password) newErrors.confirmPassword = t('register.passwordsDontMatch');\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleRegister = async () => {\n    if (!validate()) return;\n    setLoading(true);\n    \n    try {\n      // ⚠️ DEV ONLY: Временная регистрация в AsyncStorage\n      if (__DEV__) {\n        console.log('[DEV] 🔧 Using DevRegistrationService for client registration');\n        \n        const user = await DevRegistrationService.saveClientRegistration({\n          email: form.email,\n          phone: form.phone,\n          password: form.password,\n          firstName: form.firstName,\n          lastName: form.lastName,\n        });\n        \n        console.log('[DEV] ✅ Client registered locally:', user.id);\n        \n        // Создаем профиль для нового пользователя\n        const profile = {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          phone: user.phone,\n          role: user.role,\n          createdAt: user.registeredAt,\n        };\n        await AsyncStorage.setItem(`@profile_${user.id}`, JSON.stringify(profile));\n        console.log('[DEV] 💾 Profile created for:', user.id);\n        \n        // Показываем статистику\n        await DevRegistrationService.logDevRegistrationStats();\n      } else {\n        // TODO: PROD: Отправить регистрацию на сервер\n        // await AuthService.registerClient(form);\n        console.log('[PROD] Sending client registration to server...');\n      }\n      \n      Alert.alert(\n        t('register.successTitle'), \n        __DEV__ \n          ? '✅ Клиент зарегистрирован локально (DEV режим)' \n          : t('register.successText')\n      );\n      \n      navigation.reset({ index: 0, routes: [{ name: 'Login' as never }] });\n    } catch (e) {\n      console.error('[ERROR] Client registration failed:', e);\n      Alert.alert(\n        t('register.errorTitle'), \n        e instanceof Error ? e.message : t('register.errorText')\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const agreeTermsRich = t('register.agreeTermsRich');\n  const termsMatch = agreeTermsRich.match(/<terms>(.*?)<\\/terms>/);\n  const privacyMatch = agreeTermsRich.match(/<privacy>(.*?)<\\/privacy>/);\n  const beforeTerms = agreeTermsRich.split('<terms>')[0];\n  const afterTerms = agreeTermsRich.split('<terms>')[1]?.split('</terms>')[1]?.split('<privacy>')[0] || '';\n  const afterPrivacy = agreeTermsRich.split('</privacy>')[1] || '';\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle={isDark ? \"light-content\" : \"dark-content\"} />\n    <KeyboardAvoidingView\n        style={{ flex: 1 }}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n    >\n        <ScrollView contentContainerStyle={styles.scrollContent} showsVerticalScrollIndicator={false}>\n          <View style={styles.header}>\n            <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n              <Ionicons name=\"arrow-back\" size={24} color={isDark ? \"#60A5FA\" : \"#23408E\"} />\n            </TouchableOpacity>\n            <Text style={styles.title}>{t('register.title')}</Text>\n            <Text style={styles.subtitle}>{t('register.subtitle')}</Text>\n        </View>\n\n          <View style={styles.form}>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.firstName')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput\n                style={styles.input}\n                value={form.firstName}\n                onChangeText={(v) => handleChange('firstName', v)}\n                placeholder={t('register.firstNamePlaceholder')}\n                placeholderTextColor={getPlaceholderColor(isDark)}\n                autoCapitalize=\"words\"\n              />\n              {errors.firstName && <Text style={styles.errorText}>{errors.firstName}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.lastName')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput\n                style={styles.input}\n                value={form.lastName}\n                onChangeText={(v) => handleChange('lastName', v)}\n                placeholder={t('register.lastNamePlaceholder')}\n                placeholderTextColor={getPlaceholderColor(isDark)}\n                autoCapitalize=\"words\"\n              />\n              {errors.lastName && <Text style={styles.errorText}>{errors.lastName}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.email')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput\n                style={styles.input}\n                value={form.email}\n                onChangeText={(v) => handleChange('email', v)}\n                placeholder={t('register.emailPlaceholder')}\n                placeholderTextColor={getPlaceholderColor(isDark)}\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n            />\n              {errors.email && <Text style={styles.errorText}>{errors.email}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.phone')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput\n                style={styles.input}\n                value={form.phone}\n                onChangeText={(v) => handleChange('phone', v)}\n                placeholder={t('register.phonePlaceholder')}\n                placeholderTextColor={getPlaceholderColor(isDark)}\n                keyboardType=\"phone-pad\"\n              />\n              {errors.phone && <Text style={styles.errorText}>{errors.phone}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.password')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput\n                style={styles.input}\n                value={form.password}\n                onChangeText={(v) => handleChange('password', v)}\n                placeholder={t('register.passwordPlaceholder')}\n                placeholderTextColor={getPlaceholderColor(isDark)}\n                secureTextEntry\n              />\n              {form.password && <PasswordStrengthIndicator value={form.password} showFeedback={true} />}\n              {errors.password && <Text style={styles.errorText}>{errors.password}</Text>}\n          </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.confirmPassword')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput\n                style={styles.input}\n                value={form.confirmPassword}\n                onChangeText={(v) => handleChange('confirmPassword', v)}\n                placeholder={t('register.confirmPasswordPlaceholder')}\n                placeholderTextColor={getPlaceholderColor(isDark)}\n                secureTextEntry\n              />\n              {errors.confirmPassword && <Text style={styles.errorText}>{errors.confirmPassword}</Text>}\n          </View>\n            {/* Чекбокс согласия */}\n            <View style={styles.checkboxContainer}>\n              <TouchableOpacity\n                onPress={() => setAgree(!agree)}\n                style={[styles.checkbox, agree && styles.checkboxChecked]}\n              >\n                {agree && <Ionicons name=\"checkmark\" size={18} color=\"#fff\" />}\n              </TouchableOpacity>\n              <Text style={styles.agreeText}>\n                {beforeTerms as React.ReactNode}\n                <Text style={styles.link} onPress={() => setShowTerms(true)}>{termsMatch ? termsMatch[1] : ''}</Text>\n                {afterTerms as React.ReactNode}\n                <Text style={styles.link} onPress={() => setShowPrivacy(true)}>{privacyMatch ? privacyMatch[1] : ''}</Text>\n                {afterPrivacy as React.ReactNode}\n              </Text>\n            </View>\n            <TouchableOpacity style={styles.registerButton} onPress={handleRegister} disabled={loading || !agree}>\n              <Text style={styles.registerButtonText}>{loading ? t('register.loading') : t('register.button')}</Text>\n            </TouchableOpacity>\n            <View style={styles.loginRow}>\n              <Text style={styles.alreadyRegisteredText}>{t('register.alreadyRegistered')}</Text>\n              <TouchableOpacity onPress={() => navigation.reset({ index: 0, routes: [{ name: 'Login' as never }] })}>\n                <Text style={styles.loginLinkSmall}>{t('register.loginLink')}</Text>\n                  </TouchableOpacity>\n                </View>\n          </View>\n\n          {/* Divider */}\n          <View style={{ flexDirection: 'row', alignItems: 'center', marginVertical: 24 }}>\n            <View style={{ flex: 1, height: 1, backgroundColor: '#E5E7EB' }} />\n            <Text style={{ marginHorizontal: 12, color: '#6B7280', fontSize: 16 }}>{t('login.or')}</Text>\n            <View style={{ flex: 1, height: 1, backgroundColor: '#E5E7EB' }} />\n          </View>\n          <SocialAuthButtons />\n      </ScrollView>\n    </KeyboardAvoidingView>\n    {/* Модалка для условий */}\n    <Modal visible={showTerms} transparent animationType=\"fade\" onRequestClose={() => setShowTerms(false)}>\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContent}>\n          <Text style={styles.modalTitle}>{t('register.agreeTermsRich').match(/<terms>(.*?)<\\/terms>/)?.[1] || t('register.terms')}</Text>\n          <ScrollView style={{ maxHeight: 300 }}>\n            <Text style={styles.modalText}>{t('register.termsText')}</Text>\n          </ScrollView>\n          <TouchableOpacity style={styles.modalCloseBtn} onPress={() => setShowTerms(false)}>\n            <Text style={styles.modalCloseText}>OK</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n    {/* Модалка для политики */}\n    <Modal visible={showPrivacy} transparent animationType=\"fade\" onRequestClose={() => setShowPrivacy(false)}>\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContent}>\n          <Text style={styles.modalTitle}>{t('register.agreeTermsRich').match(/<privacy>(.*?)<\\/privacy>/)?.[1] || t('register.privacy')}</Text>\n          <ScrollView style={{ maxHeight: 300 }}>\n            <Text style={styles.modalText}>{t('register.privacyText')}</Text>\n          </ScrollView>\n          <TouchableOpacity style={styles.modalCloseBtn} onPress={() => setShowPrivacy(false)}>\n            <Text style={styles.modalCloseText}>OK</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n    </SafeAreaView>\n  );\n};\n\nexport default ClientRegisterScreen;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/auth/DriverRegisterScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SocialAuthButtons' is defined but never used.","line":19,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1891,1894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1891,1894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2869,2872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2869,2872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3735,3738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3735,3738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3967,3970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3967,3970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4193,4196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4193,4196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4291,4294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4291,4294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":279,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14225,14228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14225,14228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18064,18067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18064,18067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  SafeAreaView,\n  KeyboardAvoidingView,\n  Platform,\n  Alert,\n  StatusBar,\n} from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTheme } from '../../context/ThemeContext';\nimport { createDriverRegisterScreenStyles, getPlaceholderColor } from '../../styles/screens/DriverRegisterScreen.styles';\nimport SocialAuthButtons from '../../components/SocialAuthButtons';\nimport Select from '../../components/Select';\nimport PasswordStrengthIndicator from '../../components/PasswordStrengthIndicator';\nimport PhotoUpload from '../../components/PhotoUpload';\nimport AgreementCheckbox from '../../components/AgreementCheckbox';\nimport vehicleSegments from '../../utils/vehicleSegments.json';\nimport { COUNTRIES_FULL } from '../../utils/countries';\nimport {\n  experienceOptions,\n  carBrands,\n  carModelsByBrand,\n  getYearOptions,\n  getTariffOptions,\n} from '../../utils/driverData';\nimport DevRegistrationService from '../../services/DevRegistrationService';\n\nconst DriverRegisterScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { t, isLoading } = useLanguage();\n  const { isDark } = useTheme();\n  \n  // Создаем стили с учетом текущей темы\n  const styles = createDriverRegisterScreenStyles(isDark);\n\n  const [form, setForm] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    password: '',\n    confirmPassword: '',\n    country: '',\n    licenseNumber: '',\n    licenseExpiry: '',\n    vehicleNumber: '',\n    experience: '',\n    carBrand: '',\n    carModel: '',\n    carYear: '',\n    carMileage: '',\n    tariff: '',\n  });\n  const [errors, setErrors] = useState<any>({});\n  const [loading, setLoading] = useState(false);\n  const [agree, setAgree] = useState(false);\n  const [brandOptions, setBrandOptions] = useState(carBrands);\n  const [modelOptions, setModelOptions] = useState<{ label: string; value: string; tariff?: string }[]>([]);\n  const [licensePhoto, setLicensePhoto] = useState<string | null>(null);\n  const [passportPhoto, setPassportPhoto] = useState<string | null>(null);\n  const [uploadingPhoto, setUploadingPhoto] = useState<'license' | 'passport' | null>(null);\n\n  useEffect(() => {\n    if (form.tariff) {\n      setBrandOptions(vehicleSegments[form.tariff]?.brands || carBrands);\n      setModelOptions([]);\n      setForm((prev) => ({ ...prev, carBrand: '', carModel: '' }));\n    }\n  }, [form.tariff]);\n\n  const tariffOptions = getTariffOptions(t);\n  const yearOptions = getYearOptions();\n\n  const handleChange = (field: string, value: string) => {\n    setForm((prev) => ({ ...prev, [field]: value }));\n    setErrors((prev: any) => ({ ...prev, [field]: undefined }));\n  };\n\n  const handleBrandChange = (brand: string) => {\n    setForm((prev) => ({ ...prev, carBrand: brand, carModel: '' }));\n    setModelOptions(vehicleSegments[form.tariff]?.models[brand] || []);\n  };\n  const handleModelChange = (model: string) => {\n    setForm((prev) => ({ ...prev, carModel: model }));\n    const selectedBrand = form.carBrand;\n    const found = (carModelsByBrand[selectedBrand] || []).find((m) => m.value === model);\n    if (found?.tariff) {\n      setForm((prev) => ({ ...prev, tariff: found.tariff }));\n    }\n  };\n  const handleTariffChange = (tariff: string) => {\n    setForm((prev) => ({ ...prev, tariff }));\n  };\n  const handleExperienceChange = (option: { label: string; value: string | number }) => {\n    setForm((prev) => ({ ...prev, experience: option.value.toString() }));\n    setErrors((prev: any) => ({ ...prev, experience: undefined }));\n  };\n  const handleCountryChange = (option: { label: string; value: string | number }) => {\n    setForm((prev) => ({ ...prev, country: option.value.toString() }));\n    setErrors((prev: any) => ({ ...prev, country: undefined }));\n  };\n  const handleYearChange = (option: { label: string; value: string | number }) => {\n    setForm((prev) => ({ ...prev, carYear: option.value.toString() }));\n    setErrors((prev: any) => ({ ...prev, carYear: undefined }));\n  };\n\n  const validate = () => {\n    const newErrors: any = {};\n    if (!form.firstName.trim()) newErrors.firstName = t('register.firstNameRequired');\n    if (!form.lastName.trim()) newErrors.lastName = t('register.lastNameRequired');\n    if (!form.email.trim()) newErrors.email = t('register.emailRequired');\n    else if (!/\\S+@\\S+\\.\\S+/.test(form.email)) newErrors.email = t('register.emailInvalid');\n    if (!form.phone.trim()) newErrors.phone = t('register.phoneRequired');\n    if (!form.password) newErrors.password = t('register.passwordRequired');\n    else if (form.password.length < 8) newErrors.password = t('register.passwordShort');\n    else if (!/(?=.*[a-z])/.test(form.password)) newErrors.password = t('register.passwordLowercase');\n    else if (!/(?=.*[A-Z])/.test(form.password)) newErrors.password = t('register.passwordUppercase');\n    else if (!/(?=.*\\d)/.test(form.password)) newErrors.password = t('register.passwordNumbers');\n    else if (!/(?=.*[!@#$%^&*])/.test(form.password)) newErrors.password = t('register.passwordSpecial');\n    if (form.confirmPassword !== form.password) newErrors.confirmPassword = t('register.passwordsDontMatch');\n    if (!form.country) newErrors.country = t('register.countryRequired');\n    if (!form.licenseNumber.trim()) newErrors.licenseNumber = t('register.licenseNumberRequired');\n    if (!form.licenseExpiry) newErrors.licenseExpiry = t('register.licenseExpiryRequired');\n    else if (form.licenseExpiry.length !== 10) newErrors.licenseExpiry = t('register.licenseExpiryInvalid');\n    if (!licensePhoto) newErrors.licensePhoto = t('register.licensePhotoRequired');\n    if (!passportPhoto) newErrors.passportPhoto = t('register.passportPhotoRequired');\n    if (!form.vehicleNumber.trim()) newErrors.vehicleNumber = t('register.vehicleNumberRequired');\n    if (!form.experience) newErrors.experience = t('register.experienceRequired');\n    if (!form.tariff) newErrors.tariff = t('register.tariffRequired');\n    if (!form.carBrand) newErrors.carBrand = t('register.carBrandRequired');\n    if (!form.carModel) newErrors.carModel = t('register.carModelRequired');\n    if (!form.carYear) newErrors.carYear = t('register.carYearRequired');\n    if (!form.carMileage.trim()) newErrors.carMileage = t('register.carMileageRequired');\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleRegister = async () => {\n    if (!validate()) return;\n    setLoading(true);\n    \n    try {\n      // ⚠️ DEV ONLY: Временная регистрация в AsyncStorage\n      if (__DEV__) {\n        console.log('[DEV] 🔧 Using DevRegistrationService for driver registration');\n        \n        const driver = await DevRegistrationService.saveDriverRegistration({\n          email: form.email,\n          phone: form.phone,\n          password: form.password,\n          firstName: form.firstName,\n          lastName: form.lastName,\n          country: form.country,\n          licenseNumber: form.licenseNumber,\n          licenseExpiry: form.licenseExpiry,\n          vehicleNumber: form.vehicleNumber,\n          experience: form.experience,\n          carBrand: form.carBrand,\n          carModel: form.carModel,\n          carYear: form.carYear,\n          carMileage: form.carMileage,\n          tariff: form.tariff,\n          licensePhoto: licensePhoto || undefined,\n          passportPhoto: passportPhoto || undefined,\n        });\n        \n        console.log('[DEV] ✅ Driver registered locally:', driver.id);\n        \n        // Создаем профиль для нового водителя\n        const profile = {\n          id: driver.id,\n          email: driver.email,\n          firstName: driver.firstName,\n          lastName: driver.lastName,\n          phone: driver.phone,\n          role: driver.role,\n          country: driver.country,\n          licenseNumber: driver.licenseNumber,\n          licenseExpiry: driver.licenseExpiry,\n          vehicleNumber: driver.vehicleNumber,\n          experience: driver.experience,\n          carBrand: driver.carBrand,\n          carModel: driver.carModel,\n          carYear: driver.carYear,\n          carMileage: driver.carMileage,\n          tariff: driver.tariff,\n          createdAt: driver.registeredAt,\n        };\n        await AsyncStorage.setItem(`@profile_${driver.id}`, JSON.stringify(profile));\n        console.log('[DEV] 💾 Profile created for:', driver.id);\n        \n        // Показываем статистику\n        await DevRegistrationService.logDevRegistrationStats();\n      } else {\n        // TODO: PROD: Отправить регистрацию на сервер\n        // await AuthService.registerDriver(form);\n        console.log('[PROD] Sending driver registration to server...');\n      }\n      \n      Alert.alert(\n        t('register.successTitle'), \n        __DEV__ \n          ? '✅ Водитель зарегистрирован локально (DEV режим)' \n          : t('register.successText')\n      );\n      \n      navigation.reset({ index: 0, routes: [{ name: 'Login' as never }] });\n    } catch (e) {\n      console.error('[ERROR] Driver registration failed:', e);\n      Alert.alert(\n        t('register.errorTitle'), \n        e instanceof Error ? e.message : t('register.errorText')\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (isLoading) return null;\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle={isDark ? \"light-content\" : \"dark-content\"} />\n      <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        <ScrollView contentContainerStyle={styles.scrollContent} showsVerticalScrollIndicator={false}>\n          <View style={styles.header}>\n            <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n              <Text style={{ color: isDark ? '#60A5FA' : '#23408E', fontSize: 24 }}>{'←'}</Text>\n            </TouchableOpacity>\n            <Text style={styles.title}>{t('register.titleDriver')}</Text>\n            <Text style={styles.subtitle}>{t('register.subtitle')}</Text>\n          </View>\n          <View style={styles.form}>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.firstName')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput style={styles.input} value={form.firstName} onChangeText={(v) => handleChange('firstName', v)} placeholder={t('register.firstNamePlaceholder')} placeholderTextColor={getPlaceholderColor(isDark)} autoCapitalize=\"words\" />\n              {errors.firstName && <Text style={styles.errorText}>{errors.firstName}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.lastName')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput style={styles.input} value={form.lastName} onChangeText={(v) => handleChange('lastName', v)} placeholder={t('register.lastNamePlaceholder')} placeholderTextColor={getPlaceholderColor(isDark)} autoCapitalize=\"words\" />\n              {errors.lastName && <Text style={styles.errorText}>{errors.lastName}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.email')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput style={styles.input} value={form.email} onChangeText={(v) => handleChange('email', v)} placeholder={t('register.emailPlaceholder')} placeholderTextColor={getPlaceholderColor(isDark)} keyboardType=\"email-address\" autoCapitalize=\"none\" />\n              {errors.email && <Text style={styles.errorText}>{errors.email}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.phone')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput style={styles.input} value={form.phone} onChangeText={(v) => handleChange('phone', v)} placeholder={t('register.phonePlaceholder')} placeholderTextColor={getPlaceholderColor(isDark)} keyboardType=\"phone-pad\" />\n              {errors.phone && <Text style={styles.errorText}>{errors.phone}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.countryOfIssue')} <Text style={styles.requiredStar}>*</Text></Text>\n              <Select value={form.country} onSelect={handleCountryChange} options={COUNTRIES_FULL.map(country => ({ label: country.name, value: country.code }))} placeholder={t('register.countryOfIssuePlaceholder')} searchable={true} />\n              {errors.country && <Text style={styles.errorText}>{errors.country}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.licenseNumber')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput style={styles.input} value={form.licenseNumber} onChangeText={(v) => handleChange('licenseNumber', v)} placeholder={t('register.licenseNumberPlaceholder')} placeholderTextColor={getPlaceholderColor(isDark)} autoCapitalize=\"characters\" textContentType=\"none\" autoComplete=\"off\" />\n              {errors.licenseNumber && <Text style={styles.errorText}>{errors.licenseNumber}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.licenseExpiry')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput style={styles.input} value={form.licenseExpiry} onChangeText={(v) => handleChange('licenseExpiry', v)} placeholder={t('register.licenseExpiryPlaceholder')} placeholderTextColor={getPlaceholderColor(isDark)} keyboardType=\"numbers-and-punctuation\" maxLength={10} textContentType=\"none\" autoComplete=\"off\" />\n              {errors.licenseExpiry && <Text style={styles.errorText}>{errors.licenseExpiry}</Text>}\n            </View>\n            <PhotoUpload\n              photo={licensePhoto}\n              onPhotoChange={(uri) => setLicensePhoto(uri)}\n              onError={(err) => setErrors((prev: any) => ({ ...prev, licensePhoto: err }))}\n              type=\"license\"\n              uploading={uploadingPhoto === 'license'}\n              onUploadingChange={(flag) => setUploadingPhoto(flag ? 'license' : null)}\n            />\n            {errors.licensePhoto && <Text style={styles.errorText}>{errors.licensePhoto}</Text>}\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.vehicleNumber')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput style={styles.input} value={form.vehicleNumber} onChangeText={(v) => handleChange('vehicleNumber', v)} placeholder={t('register.vehicleNumberPlaceholder')} placeholderTextColor={getPlaceholderColor(isDark)} autoCapitalize=\"characters\" />\n              {errors.vehicleNumber && <Text style={styles.errorText}>{errors.vehicleNumber}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.experience')} <Text style={styles.requiredStar}>*</Text></Text>\n              <Select value={form.experience} onSelect={handleExperienceChange} options={experienceOptions} placeholder={t('register.experienceRequired')} />\n              {errors.experience && <Text style={styles.errorText}>{errors.experience}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.tariff')} <Text style={styles.requiredStar}>*</Text></Text>\n              <Select value={form.tariff} onSelect={(option) => handleTariffChange(String(option.value))} options={tariffOptions} placeholder={t('register.tariffRequired')} />\n              {errors.tariff && <Text style={styles.errorText}>{errors.tariff}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.carBrand')} <Text style={styles.requiredStar}>*</Text></Text>\n              <Select value={form.carBrand} onSelect={(option) => handleBrandChange(String(option.value))} options={brandOptions} placeholder={t('register.carBrandRequired')} disabled={!form.tariff} />\n              {errors.carBrand && <Text style={styles.errorText}>{errors.carBrand}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.carModel')} <Text style={styles.requiredStar}>*</Text></Text>\n              <Select value={form.carModel} onSelect={(option) => handleModelChange(String(option.value))} options={modelOptions} placeholder={t('register.carModelRequired')} disabled={!form.carBrand} />\n              {errors.carModel && <Text style={styles.errorText}>{errors.carModel}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.carYear')} <Text style={styles.requiredStar}>*</Text></Text>\n              <Select value={form.carYear} onSelect={handleYearChange} options={yearOptions} placeholder={t('register.carYearRequired')} />\n              {errors.carYear && <Text style={styles.errorText}>{errors.carYear}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.carMileage')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput style={styles.input} value={form.carMileage} onChangeText={(v) => handleChange('carMileage', v)} placeholder={t('register.carMileagePlaceholder')} placeholderTextColor={getPlaceholderColor(isDark)} keyboardType=\"numeric\" />\n              {errors.carMileage && <Text style={styles.errorText}>{errors.carMileage}</Text>}\n            </View>\n            <PhotoUpload\n              photo={passportPhoto}\n              onPhotoChange={(uri) => setPassportPhoto(uri)}\n              onError={(err) => setErrors((prev: any) => ({ ...prev, passportPhoto: err }))}\n              type=\"passport\"\n              uploading={uploadingPhoto === 'passport'}\n              onUploadingChange={(flag) => setUploadingPhoto(flag ? 'passport' : null)}\n            />\n            {errors.passportPhoto && <Text style={styles.errorText}>{errors.passportPhoto}</Text>}\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.password')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput style={styles.input} value={form.password} onChangeText={(v) => handleChange('password', v)} placeholder={t('register.passwordPlaceholder')} placeholderTextColor={getPlaceholderColor(isDark)} secureTextEntry />\n              {form.password && <PasswordStrengthIndicator value={form.password} showFeedback={true} />}\n              {errors.password && <Text style={styles.errorText}>{errors.password}</Text>}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('register.confirmPassword')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput style={styles.input} value={form.confirmPassword} onChangeText={(v) => handleChange('confirmPassword', v)} placeholder={t('register.confirmPasswordPlaceholder')} placeholderTextColor={getPlaceholderColor(isDark)} secureTextEntry />\n              {errors.confirmPassword && <Text style={styles.errorText}>{errors.confirmPassword}</Text>}\n            </View>\n            <AgreementCheckbox agree={agree} onAgreeChange={setAgree} styles={styles} />\n            <TouchableOpacity style={styles.registerButton} onPress={handleRegister} disabled={loading || !agree}>\n              <Text style={styles.registerButtonText}>{loading ? t('register.loading') : t('register.button')}</Text>\n            </TouchableOpacity>\n            <View style={styles.loginRow}>\n              <Text style={styles.alreadyRegisteredText}>{t('register.alreadyRegistered')}</Text>\n              <TouchableOpacity onPress={() => navigation.reset({ index: 0, routes: [{ name: 'Login' as never }] })}>\n                <Text style={styles.loginLinkSmall}>{t('register.loginLink')}</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nexport default DriverRegisterScreen;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/auth/ForgotPasswordScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":68,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  SafeAreaView,\n  Linking,\n  StatusBar,\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { createForgotPasswordScreenStyles } from '../../styles/screens/ForgotPasswordScreen.styles';\nimport { useLanguage } from '../../context/LanguageContext';\nimport Button from '../../components/Button';\n\ninterface ForgotPasswordScreenProps {\n  navigation: {\n    goBack: () => void;\n  };\n}\n\nconst ForgotPasswordScreen: React.FC<ForgotPasswordScreenProps> = ({ navigation }) => {\n  const [email, setEmail] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const { isDark } = useTheme();\n  const { t } = useLanguage();\n  \n  // Создаем стили с учетом текущей темы\n  const styles = createForgotPasswordScreenStyles(isDark);\n\n  const handleSendResetEmail = async () => {\n    if (!email) {\n      Alert.alert(t('login.forgotPassword.errorTitle'), t('login.forgotPassword.errorEmpty'));\n      return;\n    }\n    if (!email.includes('@')) {\n      Alert.alert(t('login.forgotPassword.errorTitle'), t('login.forgotPassword.errorInvalid'));\n      return;\n    }\n    setIsLoading(true);\n    setTimeout(() => {\n      setIsLoading(false);\n      setIsSuccess(true);\n    }, 2000);\n  };\n\n  const handleBackToLogin = () => {\n    navigation.goBack();\n  };\n\n  const handleContactSupport = () => {\n    const phoneNumber = '+994516995513';\n    const whatsappUrl = `whatsapp://send?phone=${phoneNumber}&text=Здравствуйте! Мне нужна помощь с восстановлением пароля.`;\n    \n    Linking.canOpenURL(whatsappUrl).then(supported => {\n      if (supported) {\n        Linking.openURL(whatsappUrl);\n      } else {\n        const webUrl = `https://wa.me/${phoneNumber}?text=Здравствуйте! Мне нужна помощь с восстановлением пароля.`;\n        Linking.openURL(webUrl);\n      }\n    }).catch(err => {\n      Alert.alert('Ошибка', 'Не удалось открыть WhatsApp');\n    });\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle={isDark ? \"light-content\" : \"dark-content\"} />\n      \n      <KeyboardAvoidingView\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        style={{ flex: 1 }}\n      >\n        <ScrollView \n          contentContainerStyle={styles.content}\n          showsVerticalScrollIndicator={false}\n        >\n          {/* Header */}\n          <View style={styles.header}>\n            <Text style={styles.title}>\n              {t('login.forgotPassword.title')}\n            </Text>\n            <Text style={styles.subtitle}>\n              {t('login.forgotPassword.subtitle')}\n            </Text>\n          </View>\n\n          {!isSuccess ? (\n            /* Form */\n            <View style={styles.form}>\n              <View style={styles.inputContainer}>\n                <Text style={styles.label}>{t('login.forgotPassword.email')}</Text>\n                <TextInput\n                  style={styles.input}\n                  placeholder={t('login.forgotPassword.emailPlaceholder')}\n                  value={email}\n                  onChangeText={setEmail}\n                  keyboardType=\"email-address\"\n                  autoCapitalize=\"none\"\n                  placeholderTextColor={isDark ? '#6B7280' : '#999'}\n                />\n              </View>\n              \n              <Button\n                title={isLoading ? t('login.forgotPassword.sending') : t('login.forgotPassword.sendButton')}\n                onPress={handleSendResetEmail}\n                loading={isLoading}\n                disabled={isLoading}\n                style={styles.submitButton}\n              />\n            </View>\n          ) : (\n            /* Success Message */\n            <View style={styles.successContainer}>\n              <View style={styles.successIcon}>\n                <Ionicons name=\"checkmark\" size={40} color=\"#FFFFFF\" />\n              </View>\n              <Text style={styles.successTitle}>\n                {t('login.forgotPassword.successTitle')}\n              </Text>\n              <Text style={styles.successText}>\n                {t('login.forgotPassword.successText')}\n              </Text>\n            </View>\n          )}\n\n          {/* Back Button */}\n          <TouchableOpacity style={styles.backButton} onPress={handleBackToLogin}>\n            <Text style={styles.backButtonText}>\n              {t('login.forgotPassword.backToLogin')}\n            </Text>\n          </TouchableOpacity>\n\n          {/* Support Button */}\n          <TouchableOpacity\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'center',\n              backgroundColor: '#25D366',\n              borderRadius: 8,\n              paddingVertical: 12,\n              paddingHorizontal: 16,\n              marginTop: 20,\n              ...(isDark ? {\n                shadowColor: '#000',\n                shadowOffset: { width: 0, height: 2 },\n                shadowOpacity: 0.3,\n                shadowRadius: 4,\n                elevation: 4,\n              } : {\n                shadowColor: '#000',\n                shadowOffset: { width: 0, height: 2 },\n                shadowOpacity: 0.1,\n                shadowRadius: 4,\n                elevation: 3,\n              }),\n            }}\n            onPress={handleContactSupport}\n          >\n            <Ionicons \n              name=\"logo-whatsapp\" \n              size={20} \n              color=\"#FFFFFF\" \n              style={{ marginRight: 8 }}\n            />\n            <Text style={{\n              color: '#FFFFFF',\n              fontSize: 14,\n              fontWeight: '600',\n            }}>\n              Связаться с поддержкой\n            </Text>\n          </TouchableOpacity>\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nexport default ForgotPasswordScreen;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/auth/LoginScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Ionicons' is defined but never used.","line":24,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  View, \n  Text, \n  TouchableOpacity, \n  SafeAreaView,\n  ScrollView,\n  StatusBar,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  TextInput\n} from 'react-native';\n\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { AuthStackParamList } from '../../types/navigation';\nimport { useAuth } from '../../context/AuthContext';\nimport { createLoginScreenStyles } from '../../styles/screens/LoginScreen.styles';\nimport Button from '../../components/Button';\nimport SocialAuthButtons from '../../components/SocialAuthButtons';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTheme } from '../../context/ThemeContext';\nimport Ionicons from '@expo/vector-icons/Ionicons';\n\ntype NavigationProp = StackNavigationProp<AuthStackParamList, 'Login'>;\n\ninterface FormData {\n  email: string;\n  password: string;\n}\n\nconst LoginScreen: React.FC = () => {\n  const navigation = useNavigation<NavigationProp>();\n  const { login } = useAuth();\n  const { t } = useLanguage();\n  const { isDark } = useTheme();\n  \n  // Создаем стили с учетом текущей темы\n  const styles = createLoginScreenStyles(isDark);\n  \n  const [formData, setFormData] = useState<FormData>({\n    email: '',\n    password: '',\n  });\n\n  const [errors, setErrors] = useState<Partial<FormData>>({});\n  const [loading, setLoading] = useState(false);\n  const [showPassword] = useState(false);\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<FormData> = {};\n\n    if (!formData.email.trim()) {\n      newErrors.email = t('login.emailRequired');\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = t('login.emailInvalid');\n    }\n\n    if (!formData.password) {\n      newErrors.password = t('login.passwordRequired');\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleLogin = async () => {\n    if (!validateForm()) return;\n\n    setLoading(true);\n    try {\n      const success = await login(formData.email, formData.password);\n      \n      if (success) {\n        // Успешный вход - навигация происходит автоматически через AuthContext\n      } else {\n        Alert.alert(t('login.loginError'), t('login.invalidCredentials'));\n      }\n    } catch (error) {\n      Alert.alert(t('login.loginError'), t('login.loginErrorGeneric'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateFormData = (field: keyof FormData, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle={isDark ? \"light-content\" : \"dark-content\"} />\n      \n      <KeyboardAvoidingView \n        style={styles.keyboardAvoidingView}\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      >\n        <ScrollView \n          style={styles.scrollView}\n          showsVerticalScrollIndicator={false}\n          contentContainerStyle={styles.scrollContent}\n        >\n          {/* Header */}\n          <View style={styles.headerSpacer} />\n          <View style={styles.header}>\n            <Text style={styles.title}>\n              {t('login.title')}\n            </Text>\n            <Text style={styles.subtitle}>\n              {t('login.subtitle')}\n            </Text>\n          </View>\n\n          {/* Form */}\n          <View style={styles.form}>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('login.email')}</Text>\n              <TextInput\n                style={styles.input}\n              value={formData.email}\n              onChangeText={(text) => updateFormData('email', text)}\n              placeholder={t('login.emailPlaceholder')}\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n            />\n              {errors.email && (\n                <Text style={styles.errorText}>{errors.email}</Text>\n              )}\n            </View>\n            \n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>{t('login.password')}</Text>\n              <TextInput\n                style={styles.input}\n              value={formData.password}\n              onChangeText={(text) => updateFormData('password', text)}\n              secureTextEntry={!showPassword}\n            />\n              {errors.password && (\n                <Text style={styles.errorText}>{errors.password}</Text>\n              )}\n            </View>\n\n            {/* Кнопка Забыли пароль? */}\n            <TouchableOpacity \n              style={styles.forgotPassword}\n              onPress={() => navigation.navigate('ForgotPassword')}\n            >\n              <Text style={styles.registerLinkUnderlineDark}>\n                {t('login.forgotPassword.title')}\n              </Text>\n            </TouchableOpacity>\n\n            <Button\n              title={t('login.loginButton')}\n              onPress={handleLogin}\n              loading={loading}\n              disabled={loading}\n              style={styles.loginButton}\n            />\n          </View>\n\n          {/* Divider */}\n          <View style={styles.divider}>\n            <View style={styles.dividerLine} />\n            <Text style={styles.dividerText}>{t('login.or')}</Text>\n            <View style={styles.dividerLine} />\n          </View>\n\n          {/* Social Auth */}\n          <View style={styles.socialAuth}>\n            <SocialAuthButtons />\n          </View>\n\n          {/* Register Link */}\n          <View style={styles.registerSection}>\n            <Text style={styles.registerText}>{t('login.noAccount')} </Text>\n            <TouchableOpacity onPress={() => navigation.reset({ index: 0, routes: [{ name: 'RoleSelect' }] })}>\n              <Text style={styles.registerLinkUnderlineDark}>{t('login.registerLink')}</Text>\n            </TouchableOpacity>\n          </View>\n\n\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nexport default LoginScreen;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/auth/OTPVerificationScreen.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 't'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [phone, t]","fix":{"range":[1703,1710],"text":"[phone, t]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  TextInput,\n} from 'react-native';\nimport { RouteProp } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { AuthStackParamList } from '../../types/navigation';\nimport Button from '../../components/Button';\nimport { OTPService } from '../../services/OTPService';\nimport { OTPVerificationScreenStyles as styles } from '../../styles/screens/auth/OTPVerificationScreen.styles';\nimport { useI18n } from '../../hooks/useI18n';\n\ntype OTPVerificationScreenNavigationProp = StackNavigationProp<AuthStackParamList, 'OTPVerification'>;\ntype OTPVerificationScreenRouteProp = RouteProp<AuthStackParamList, 'OTPVerification'>;\n\ninterface OTPVerificationScreenProps {\n  navigation: OTPVerificationScreenNavigationProp;\n  route: OTPVerificationScreenRouteProp;\n}\n\nconst OTPVerificationScreen: React.FC<OTPVerificationScreenProps> = ({ navigation, route }) => {\n  const { phone, type } = route.params;\n  const { t } = useI18n();\n\n  const [otp, setOtp] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(60);\n  const [canResend, setCanResend] = useState(false);\n\n  const sendInitialOTP = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      await OTPService.sendOTP(phone);\n      setTimeLeft(60);\n      setCanResend(false);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to send OTP';\n      Alert.alert(t('common.error'), errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [phone]);\n\n  useEffect(() => {\n    sendInitialOTP();\n  }, [sendInitialOTP]);\n\n  useEffect(() => {\n    if (timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    } else {\n      setCanResend(true);\n    }\n  }, [timeLeft]);\n\n  const handleResendOTP = async () => {\n    if (!canResend) return;\n\n    try {\n      setIsLoading(true);\n      await OTPService.resendOTP(phone);\n      setTimeLeft(60);\n      setCanResend(false);\n              Alert.alert(t('common.success'), 'OTP has been resent to your phone');\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to resend OTP';\n      Alert.alert(t('common.error'), errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleVerifyOTP = async () => {\n    if (!otp.trim()) {\n      Alert.alert(t('common.error'), 'Please enter the OTP');\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const isValid = await OTPService.verifyOTP(phone, otp);\n\n      if (isValid) {\n        if (type === 'register') {\n          // Handle registration flow\n          Alert.alert(t('common.success'), 'Phone verified successfully');\n          // Navigate to complete registration\n        } else {\n          // Handle forgot password flow\n          Alert.alert(t('common.success'), 'OTP verified successfully');\n          // Navigate to reset password\n        }\n      } else {\n        Alert.alert(t('common.error'), 'Invalid OTP. Please try again.');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to verify OTP';\n      Alert.alert(t('common.error'), errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n    >\n      <View style={styles.scrollContent}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Verify Your Phone</Text>\n          <Text style={styles.subtitle}>\n            We&apos;ve sent a verification code to {phone}\n          </Text>\n        </View>\n\n        <View style={styles.otpContainer}>\n          <Text style={styles.otpLabel}>Enter OTP</Text>\n          <TextInput\n            value={otp}\n            onChangeText={setOtp}\n            keyboardType=\"numeric\"\n            maxLength={6}\n            placeholder=\"------\"\n            style={styles.otpInput}\n          />\n\n          <Button\n            title=\"Verify OTP\"\n            onPress={handleVerifyOTP}\n            loading={isLoading}\n            style={styles.verifyButton}\n          />\n\n          <View style={styles.resendContainer}>\n            <Text style={styles.resendText}>Didn&apos;t receive the code? </Text>\n            {canResend ? (\n              <TouchableOpacity onPress={handleResendOTP} disabled={isLoading}>\n                <Text style={styles.resendButtonText}>Resend</Text>\n              </TouchableOpacity>\n            ) : (\n              <Text style={styles.timerText}>\n                Resend in {formatTime(timeLeft)}\n              </Text>\n            )}\n          </View>\n        </View>\n\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n        >\n          <Text style={styles.changeNumberText}>Back to Login</Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n};\n\nexport default OTPVerificationScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/auth/RoleSelectScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useLanguage' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'i18n' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'language' is assigned a value but never used.","line":19,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toggleTheme' is assigned a value but never used.","line":20,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentColors' is assigned a value but never used.","line":27,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, ScrollView, TouchableOpacity, StyleSheet, Image } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { Ionicons } from '@expo/vector-icons';\nimport Button from '../../components/Button';\nimport { createRoleSelectScreenStyles } from '../../styles/screens/RoleSelectScreen.styles';\nimport { createThemeToggleStyles } from '../../styles/components/ThemeToggle.styles';\nimport LanguageSelector from '../../components/LanguageSelector';\nimport LanguageButton from '../../components/LanguageButton';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTheme } from '../../context/ThemeContext';\nimport { getCurrentColors } from '../../constants/colors';\nimport i18n from '../../i18n';\nimport { useI18n } from '../../hooks/useI18n';\n\nconst RoleSelectScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const [langModal, setLangModal] = React.useState(false);\n  const { t, language } = useI18n();\n  const { isDark, toggleTheme } = useTheme();\n  \n  // Создаем стили с учетом текущей темы\n  const styles = createRoleSelectScreenStyles(isDark);\n  const themeToggleStyles = createThemeToggleStyles(isDark);\n  \n  // Получаем текущие цвета\n  const currentColors = getCurrentColors(isDark);\n\n\n\n\n  const handleRoleSelect = (role: 'client' | 'driver') => {\n    if (role === 'client') {\n      navigation.navigate('ClientRegister' as never);\n    } else {\n      navigation.navigate('DriverRegister' as never);\n    }\n  };\n\n  const handleLogin = () => {\n    navigation.navigate('Login' as never);\n  };\n\n  return (\n    <View style={styles.container}>\n      <ScrollView \n        showsVerticalScrollIndicator={false}\n        contentContainerStyle={styles.contentContainer}\n      >\n        {/* Отступ сверху над иконкой */}\n        <View style={styles.spacerTop} />\n\n        {/* Логотип по центру */}\n        <View style={styles.headerLogo}>\n          <View style={styles.logoIconWrap}>\n            <Image \n              source={require('../../../assets/icon.png')}\n              style={{ width: 56, height: 56, borderRadius: 12 }}\n              resizeMode=\"contain\"\n            />\n          </View>\n          <Text style={styles.logoText}>FixDrive</Text>\n        </View>\n\n        {/* Отступ под иконкой/логотипом */}\n        <View style={styles.spacerLogoBottom} />\n\n\n\n        {/* Main Content (карточки) */}\n        \n\n        {/* Client Card */}\n        <View style={styles.card}>\n          <View style={styles.cardHeader}>\n            <View style={styles.cardIconWrap}>\n              <Ionicons name=\"person\" size={32} color=\"#10B981\" />\n            </View>\n            <Text style={styles.cardTitle}>\n              {t('common.roleSelect.clientTitle')}\n            </Text>\n            <Text style={styles.cardSubtitle}>\n              {t('common.roleSelect.clientSubtitle')}\n            </Text>\n          </View>\n          \n          <View style={styles.cardContent}>\n            <View style={styles.featureItem}>\n              <Ionicons name=\"shield-checkmark\" size={20} color=\"#10B981\" />\n              <Text style={styles.featureText}>\n                {t('common.roleSelect.clientSafe')}\n              </Text>\n            </View>\n            <View style={styles.featureItem}>\n              <Ionicons name=\"location\" size={20} color=\"#10B981\" />\n              <Text style={styles.featureText}>\n                {t('common.roleSelect.clientTracking')}\n              </Text>\n            </View>\n            <View style={styles.featureItem}>\n              <Ionicons name=\"card\" size={20} color=\"#10B981\" />\n              <Text style={styles.featureText}>\n                {t('common.roleSelect.clientPayment')}\n              </Text>\n            </View>\n          </View>\n\n          <Button\n            title={t('common.roleSelect.choose') || 'Выбрать'}\n            onPress={() => handleRoleSelect('client')}\n            style={StyleSheet.flatten([styles.chooseBtn, styles.chooseBtnClient])}\n            textStyle={styles.chooseBtnText}\n            icon=\"arrow-forward\"\n            iconPosition=\"right\"\n          />\n        </View>\n\n        {/* Driver Card */}\n        <View style={styles.card}>\n          <View style={styles.cardHeader}>\n            <View style={styles.cardIconWrap}>\n              <Ionicons name=\"car\" size={32} color=\"#3B82F6\" />\n            </View>\n            <Text style={styles.cardTitle}>\n              {t('common.roleSelect.driverTitle')}\n            </Text>\n            <Text style={styles.cardSubtitle}>\n              {t('common.roleSelect.driverSubtitle')}\n            </Text>\n          </View>\n          \n          <View style={styles.cardContent}>\n            <View style={styles.featureItem}>\n              <Ionicons name=\"time\" size={20} color=\"#3B82F6\" />\n              <Text style={styles.featureText}>\n                {t('common.roleSelect.driverFlexible')}\n              </Text>\n            </View>\n            <View style={styles.featureItem}>\n              <Ionicons name=\"cash\" size={20} color=\"#3B82F6\" />\n              <Text style={styles.featureText}>\n                {t('common.roleSelect.driverIncome')}\n              </Text>\n            </View>\n            <View style={styles.featureItem}>\n              <Ionicons name=\"call\" size={20} color=\"#3B82F6\" />\n              <Text style={styles.featureText}>\n                {t('common.roleSelect.driverSupport')}\n              </Text>\n            </View>\n          </View>\n\n          <Button\n            title={t('common.roleSelect.choose') || 'Выбрать'}\n            onPress={() => handleRoleSelect('driver')}\n            style={StyleSheet.flatten([styles.chooseBtn, styles.chooseBtnDriver])}\n            textStyle={styles.chooseBtnText}\n            icon=\"arrow-forward\"\n            iconPosition=\"right\"\n          />\n        </View>\n\n        {/* Login Link (inline, одна строка) */}\n        <View style={styles.loginRow}> \n          <Text style={styles.loginText}>\n            {t('common.roleSelect.alreadyAccount')}\n          </Text>\n          <TouchableOpacity onPress={handleLogin}>\n            <Text style={styles.loginLink}>\n              {t('common.roleSelect.login')}\n            </Text>\n          </TouchableOpacity>\n        </View>\n\n        {/* Отступ между Войти и LanguageButton */}\n        <View style={styles.spacerLoginLang} />\n\n        {/* Language and Theme Buttons Row */}\n        <View style={themeToggleStyles.container}>\n          <LanguageButton \n            onPress={() => setLangModal(true)}\n            size=\"small\"\n          />\n        </View>\n\n        {/* Пустое пространство снизу */}\n        <View style={styles.spacerBottom} />\n      </ScrollView>\n\n      {/* Language Selector Modal */}\n      <LanguageSelector \n        visible={langModal} \n        onClose={() => setLangModal(false)} \n      />\n    </View>\n  );\n};\n\nexport default RoleSelectScreen;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/client/AboutScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DriverStackParamList' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1000,1003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1000,1003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, Linking, Modal, Image } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { ClientScreenProps } from '../../types/navigation';\nimport { DriverStackParamList } from '../../types/driver/DriverNavigation';\nimport { AboutScreenStyles as styles, getAboutScreenColors } from '../../styles/screens/client/AboutScreen.styles';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { colors } from '../../constants/colors';\nimport { useAuth } from '../../context/AuthContext';\n\n/**\n * Экран информации о приложении\n * \n * TODO для интеграции с бэкендом:\n * 1. Заменить статичные данные на API вызовы\n * 2. Подключить AppInfoService для получения информации\n * 3. Добавить обработку ошибок и загрузки\n * 4. Реализовать проверку обновлений\n * 5. Подключить аналитику\n */\n\ntype AboutScreenProps = ClientScreenProps<'About'> | { navigation: any };\n\nconst AboutScreen: React.FC<AboutScreenProps> = ({ navigation }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { user } = useAuth();\n  const currentColors = isDark ? colors.dark : colors.light;\n  const dynamicStyles = getAboutScreenColors(isDark);\n  \n  const isDriver = user?.role === 'driver';\n  \n  // Условная логика для разных ролей\n  const getScreenTitle = () => {\n    return isDriver ? 'О приложении' : t('client.about.title');\n  };\n  const [showPrivacyModal, setShowPrivacyModal] = useState(false);\n  const [showTermsModal, setShowTermsModal] = useState(false);\n  \n  const appInfo = {\n    name: 'FixDrive',\n    version: '1.0.0',\n    build: '2025.07.01'\n  };\n\n  const handleOpenLink = (url: string) => {\n    Linking.openURL(url);\n  };\n\n  return (\n    <View style={[styles.container, dynamicStyles.container]}>\n      <View style={[styles.header, dynamicStyles.header]}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Ionicons name=\"arrow-back\" size={24} color={currentColors.primary} />\n        </TouchableOpacity>\n        <Text style={[styles.title, dynamicStyles.title]}>{getScreenTitle()}</Text>\n        <View style={styles.headerPlaceholder} />\n      </View>\n      \n      <ScrollView \n        style={styles.content} \n        contentContainerStyle={styles.contentContainer}\n        showsVerticalScrollIndicator={false}\n      >\n        <View style={styles.appInfo}>\n          <View style={[styles.appIcon, dynamicStyles.appIcon]}>\n            <Image \n              source={require('../../../assets/icon.png')} \n              style={styles.appLogo}\n              resizeMode=\"contain\"\n            />\n          </View>\n          <View style={styles.appTextContainer}>\n            <Text style={[styles.appName, dynamicStyles.appName]}>{appInfo.name}</Text>\n            <Text style={[styles.appVersion, dynamicStyles.appVersion]}>by Axivion LLC</Text>\n          </View>\n        </View>\n        \n        <View style={styles.infoSection}>\n          <Text style={[styles.sectionTitle, dynamicStyles.sectionTitle]}>{t('client.about.information')}</Text>\n          <View style={[styles.infoItem, dynamicStyles.infoItem]}>\n            <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('client.about.version')}</Text>\n            <Text style={[styles.infoValue, dynamicStyles.infoValue]}>{appInfo.version}</Text>\n          </View>\n          <View style={[styles.infoItem, dynamicStyles.infoItem]}>\n            <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('client.about.build')}</Text>\n            <Text style={[styles.infoValue, dynamicStyles.infoValue]}>{appInfo.build}</Text>\n          </View>\n          <View style={[styles.infoItem, dynamicStyles.infoItem]}>\n            <Text style={[styles.infoLabel, dynamicStyles.infoLabel]}>{t('client.about.developer')}</Text>\n            <Text style={[styles.infoValue, dynamicStyles.infoValue]}>FixDrive Team</Text>\n          </View>\n        </View>\n        \n        <View style={styles.linksSection}>\n          <Text style={[styles.sectionTitle, dynamicStyles.sectionTitle]}>{t('client.about.links')}</Text>\n          <TouchableOpacity \n            style={[styles.linkItem, dynamicStyles.linkItem]}\n            onPress={() => handleOpenLink('https://junago.net')}\n          >\n            <Ionicons name=\"globe\" size={24} color={currentColors.primary} />\n            <Text style={[styles.linkText, dynamicStyles.linkText]}>{t('client.about.website')}</Text>\n            <Ionicons name=\"open-outline\" size={20} color={currentColors.textSecondary} />\n          </TouchableOpacity>\n          <TouchableOpacity \n            style={[styles.linkItem, dynamicStyles.linkItem]}\n            onPress={() => handleOpenLink('mailto:junago@junago.net')}\n          >\n            <Ionicons name=\"mail\" size={24} color={currentColors.primary} />\n            <Text style={[styles.linkText, dynamicStyles.linkText]}>{t('client.about.support')}</Text>\n            <Ionicons name=\"open-outline\" size={20} color={currentColors.textSecondary} />\n          </TouchableOpacity>\n          <TouchableOpacity \n            style={[styles.linkItem, dynamicStyles.linkItem]}\n            onPress={() => setShowPrivacyModal(true)}\n          >\n            <Ionicons name=\"shield-checkmark\" size={24} color={currentColors.primary} />\n            <Text style={[styles.linkText, dynamicStyles.linkText]}>{t('client.about.privacy')}</Text>\n            <Ionicons name=\"open-outline\" size={20} color={currentColors.textSecondary} />\n          </TouchableOpacity>\n          <TouchableOpacity \n            style={[styles.linkItem, dynamicStyles.linkItem]}\n            onPress={() => setShowTermsModal(true)}\n          >\n            <Ionicons name=\"document-text\" size={24} color={currentColors.primary} />\n            <Text style={[styles.linkText, dynamicStyles.linkText]}>{t('client.about.terms')}</Text>\n            <Ionicons name=\"open-outline\" size={20} color={currentColors.textSecondary} />\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n      \n      {/* Модальное окно политики конфиденциальности */}\n      <Modal\n        visible={showPrivacyModal}\n        transparent\n        animationType=\"fade\"\n        onRequestClose={() => setShowPrivacyModal(false)}\n      >\n        <View style={styles.modalOverlay}>\n          <View style={[styles.modalContent, dynamicStyles.modalContent]}>\n            <View style={[styles.modalHeader, dynamicStyles.modalHeader]}>\n              <Text style={[styles.modalTitle, dynamicStyles.modalTitle]}>{t('client.about.privacy')}</Text>\n              <TouchableOpacity \n                onPress={() => setShowPrivacyModal(false)}\n                style={styles.modalCloseButton}\n              >\n                <Ionicons name=\"close\" size={24} color={currentColors.text} />\n              </TouchableOpacity>\n            </View>\n            <ScrollView style={styles.modalScrollView}>\n              <Text style={[styles.modalText, dynamicStyles.modalText]}>\n                {t('client.about.privacyText')}\n              </Text>\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Модальное окно условий использования */}\n      <Modal\n        visible={showTermsModal}\n        transparent\n        animationType=\"fade\"\n        onRequestClose={() => setShowTermsModal(false)}\n      >\n        <View style={styles.modalOverlay}>\n          <View style={[styles.modalContent, dynamicStyles.modalContent]}>\n            <View style={[styles.modalHeader, dynamicStyles.modalHeader]}>\n              <Text style={[styles.modalTitle, dynamicStyles.modalTitle]}>{t('client.about.terms')}</Text>\n              <TouchableOpacity \n                onPress={() => setShowTermsModal(false)}\n                style={styles.modalCloseButton}\n              >\n                <Ionicons name=\"close\" size={24} color={currentColors.text} />\n              </TouchableOpacity>\n            </View>\n            <ScrollView style={styles.modalScrollView}>\n              <Text style={[styles.modalText, dynamicStyles.modalText]}>\n                {t('client.about.termsText')}\n              </Text>\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nexport default AboutScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/client/AddressPickerScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'width' is assigned a value but never used.","line":17,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'height' is assigned a value but never used.","line":17,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'location' is assigned a value but never used.","line":24,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3319,3322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3319,3322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { \n  View, \n  Text, \n  TouchableOpacity, \n  Alert, \n  ActivityIndicator,\n  Dimensions,\n  StyleSheet\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport MapView, { Marker, PROVIDER_GOOGLE } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport { ClientScreenProps } from '../../types/navigation';\nimport MapService from '../../services/MapService';\n\nconst { width, height } = Dimensions.get('window');\n\nconst AddressPickerScreen: React.FC<ClientScreenProps<'AddressPicker'>> = ({ \n  navigation, \n  route \n}) => {\n  const { onAddressSelected } = route.params;\n  const [location, setLocation] = useState<Location.LocationObject | null>(null);\n  const [selectedLocation, setSelectedLocation] = useState<{\n    latitude: number;\n    longitude: number;\n  } | null>(null);\n  const [address, setAddress] = useState<string>('');\n  const [loading, setLoading] = useState(false);\n  const [locationError, setLocationError] = useState<string | null>(null);\n  const mapRef = useRef<MapView>(null);\n\n  useEffect(() => {\n    getCurrentLocation();\n  }, []);\n\n  const getCurrentLocation = async () => {\n    try {\n      setLoading(true);\n      setLocationError(null);\n      \n      // Используем улучшенный MapService с retry\n      const currentLocation = await MapService.getCurrentLocationWithRetry(3);\n      \n      setLocation({\n        coords: {\n          latitude: currentLocation.latitude,\n          longitude: currentLocation.longitude,\n          altitude: null,\n          accuracy: 10,\n          altitudeAccuracy: null,\n          heading: null,\n          speed: null,\n        },\n        timestamp: currentLocation.timestamp || Date.now(),\n      });\n      \n      setSelectedLocation({\n        latitude: currentLocation.latitude,\n        longitude: currentLocation.longitude,\n      });\n\n      setAddress(currentLocation.address || 'Адрес не найден');\n\n      // Центрируем карту на текущей локации\n      if (mapRef.current) {\n        mapRef.current.animateToRegion({\n          latitude: currentLocation.latitude,\n          longitude: currentLocation.longitude,\n          latitudeDelta: 0.01,\n          longitudeDelta: 0.01,\n        });\n      }\n\n    } catch (error) {\n      console.error('Ошибка получения локации:', error);\n      setLocationError('Не удалось получить местоположение. Проверьте настройки геолокации.');\n      \n      // Показываем дефолтную локацию\n      const defaultLocation = await MapService.getCurrentLocation();\n      setSelectedLocation({\n        latitude: defaultLocation.latitude,\n        longitude: defaultLocation.longitude,\n      });\n      setAddress(defaultLocation.address || 'Выберите адрес на карте');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getAddressFromCoordinates = async (latitude: number, longitude: number) => {\n    try {\n      setLoading(true);\n      \n      // Используем MapService для геокодинга\n      const locationData = await MapService.geocodeAddress(`${latitude}, ${longitude}`);\n      setAddress(locationData.address || 'Адрес не найден');\n      \n    } catch (error) {\n      console.warn('Ошибка получения адреса:', error);\n      setAddress('Адрес не найден');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleMapPress = async (event: any) => {\n    const { latitude, longitude } = event.nativeEvent.coordinate;\n    \n    setSelectedLocation({ latitude, longitude });\n    await getAddressFromCoordinates(latitude, longitude);\n  };\n\n  const handleConfirmAddress = () => {\n    if (selectedLocation && address) {\n      onAddressSelected(address, selectedLocation.latitude, selectedLocation.longitude);\n      navigation.goBack();\n    } else {\n      Alert.alert('Ошибка', 'Выберите местоположение на карте');\n    }\n  };\n\n  const handleRetryLocation = () => {\n    getCurrentLocation();\n  };\n\n  // Получаем начальный регион на основе локали устройства\n  const getInitialRegion = () => {\n    if (selectedLocation) {\n      return {\n        latitude: selectedLocation.latitude,\n        longitude: selectedLocation.longitude,\n        latitudeDelta: 0.01,\n        longitudeDelta: 0.01,\n      };\n    }\n    \n    // Дефолтный регион для Азербайджана\n    return {\n      latitude: 40.3777,\n      longitude: 49.8920,\n      latitudeDelta: 0.01,\n      longitudeDelta: 0.01,\n    };\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Ionicons name=\"arrow-back\" size={24} color=\"#003366\" />\n        </TouchableOpacity>\n        <Text style={styles.title}>Выберите адрес</Text>\n        <TouchableOpacity onPress={handleConfirmAddress} style={styles.confirmButton}>\n          <Text style={styles.confirmButtonText}>Готово</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.mapContainer}>\n        <MapView\n          ref={mapRef}\n          style={styles.map}\n          provider={PROVIDER_GOOGLE}\n          initialRegion={getInitialRegion()}\n          onPress={handleMapPress}\n          showsUserLocation={true}\n          showsMyLocationButton={true}\n          showsCompass={true}\n          showsScale={true}\n          showsTraffic={false}\n          showsBuildings={true}\n          showsIndoors={true}\n        >\n          {selectedLocation && (\n            <Marker\n              coordinate={selectedLocation}\n              title=\"Выбранный адрес\"\n              description={address}\n              pinColor=\"#003366\"\n            />\n          )}\n        </MapView>\n      </View>\n\n      {locationError && (\n        <View style={styles.errorContainer}>\n          <Ionicons name=\"warning-outline\" size={20} color=\"#ff6b6b\" />\n          <Text style={styles.errorText}>{locationError}</Text>\n          <TouchableOpacity onPress={handleRetryLocation} style={styles.retryButton}>\n            <Text style={styles.retryButtonText}>Повторить</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n\n      <View style={styles.addressContainer}>\n        {loading ? (\n          <View style={styles.loadingContainer}>\n            <ActivityIndicator size=\"small\" color=\"#003366\" />\n            <Text style={styles.loadingText}>Получение адреса...</Text>\n          </View>\n        ) : (\n          <>\n            <Text style={styles.addressLabel}>Выбранный адрес:</Text>\n            <Text style={styles.addressText}>{address || 'Нажмите на карту для выбора адреса'}</Text>\n          </>\n        )}\n      </View>\n\n      <View style={styles.instructions}>\n        <Ionicons name=\"information-circle-outline\" size={20} color=\"#666\" />\n        <Text style={styles.instructionsText}>\n          Нажмите на карту, чтобы выбрать адрес, или используйте текущее местоположение\n        </Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingTop: 60,\n    paddingBottom: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f0f0f0',\n    backgroundColor: '#fff',\n  },\n  backButton: {\n    padding: 8,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#003366',\n    flex: 1,\n    textAlign: 'center',\n  },\n  confirmButton: {\n    padding: 8,\n    backgroundColor: '#003366',\n    borderRadius: 8,\n    paddingHorizontal: 16,\n  },\n  confirmButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  mapContainer: {\n    flex: 1,\n  },\n  map: {\n    width: '100%',\n    height: '100%',\n  },\n  addressContainer: {\n    padding: 16,\n    backgroundColor: '#f9f9f9',\n    borderTopWidth: 1,\n    borderTopColor: '#e0e0e0',\n  },\n  loadingContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  loadingText: {\n    marginLeft: 8,\n    fontSize: 14,\n    color: '#666',\n  },\n  addressLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#003366',\n    marginBottom: 4,\n  },\n  addressText: {\n    fontSize: 16,\n    color: '#333',\n    lineHeight: 22,\n  },\n  instructions: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: '#fff',\n    borderTopWidth: 1,\n    borderTopColor: '#e0e0e0',\n  },\n  instructionsText: {\n    marginLeft: 8,\n    fontSize: 14,\n    color: '#666',\n    flex: 1,\n  },\n  errorContainer: {\n    padding: 16,\n    backgroundColor: '#fff',\n    borderTopWidth: 1,\n    borderTopColor: '#f0f0f0',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  errorText: {\n    color: '#ff6b6b',\n    fontSize: 14,\n    flex: 1,\n    marginLeft: 8,\n  },\n  retryButton: {\n    backgroundColor: '#003366',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 6,\n  },\n  retryButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n});\n\nexport default AddressPickerScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/client/BalanceScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DriverStackParamList' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2557,2560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2557,2560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'quickTopUpHeight'. Either include it or remove the dependency array.","line":135,"column":6,"nodeType":"ArrayExpression","endLine":135,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [quickTopUpHeight]","fix":{"range":[4865,4867],"text":"[quickTopUpHeight]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleToggleQuickTopUp' is assigned a value but never used.","line":348,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":348,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":380,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12664,12667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12664,12667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, Alert, Animated, Modal, TextInput, Dimensions, Clipboard } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { ClientScreenProps } from '../../types/navigation';\nimport { DriverStackParamList } from '../../types/driver/DriverNavigation';\nimport { BalanceScreenStyles as styles, getBalanceScreenStyles, getBalanceScreenColors } from '../../styles/screens/profile/BalanceScreen.styles';\n// mockQuickAmounts removed - using hardcoded values\nconst mockQuickAmounts = [10, 25, 50, 100, 200, 500];\n\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { colors } from '../../constants/colors';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createCVVStickAnimation } from '../../styles/animations';\nimport BalanceCardDecoration from '../../components/BalanceCardDecoration';\nimport BalanceTopUpHistory from '../../components/BalanceTopUpHistory';\n\nimport { usePackage } from '../../context/PackageContext';\nimport { useBalance } from '../../hooks/useBalance';\nimport { useDriverBalance, DriverBalanceContextType } from '../../hooks/driver/useDriverBalance';\nimport { useAuth } from '../../context/AuthContext';\nimport { formatBalance } from '../../utils/formatters';\nimport { getPackageIcon, getPackageColor } from '../../utils/packageVisuals';\n\n\nimport {\n  balanceCardAnimated,\n  balanceCardFrontRow,\n  cashbackText,\n  balanceActionsMargin,\n  balanceCardBack,\n  cardBackText,\n  animatedCardFront,\n  animatedCardBack,\n  cardSpacer,\n  flipButtonBack,\n  flipButtonFront,\n  mainBalanceContainer,\n  cardContainerWithDynamicWidth,\n  balanceCardWithTheme,\n  cardFrontButtonWithTheme,\n  cardFrontButton2WithTheme,\n  cardFrontBtnTextWithColor,\n  modalContainerWithTheme,\n  modalTitleWithTheme,\n  modalLabelWithTheme,\n  modalInputWithTheme,\n  modalPayBtnWithTheme,\n  modalCancelBtnTextWithTheme,\n  cvvStickerWithAnimation,\n  cvvTextWithOpacity,\n  copiedIconStyle,\n  flipIconColor,\n  backIconColor,\n} from '../../styles/screens/profile/BalanceScreen.styles';\n\n/**\n * Экран баланса пользователя\n * \n * TODO для интеграции с бэкендом:\n * 1. Заменить useState на useBalance hook\n * 2. Подключить BalanceService для API вызовов\n * 3. Добавить обработку ошибок и загрузки\n * 4. Реализовать реальные платежные методы\n * 5. Добавить валидацию сумм\n * 6. Подключить уведомления о транзакциях\n */\n\ntype BalanceScreenProps = ClientScreenProps<'Balance'> | { navigation: any };\n\nconst BalanceScreen: React.FC<BalanceScreenProps> = ({ navigation }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { user } = useAuth();\n  const currentColors = isDark ? colors.dark : colors.light;\n  const dynamicStyles = getBalanceScreenStyles(isDark);\n  const balanceColors = getBalanceScreenColors(isDark);\n  \n  // Проверяем роль пользователя\n  const isDriver = user?.role === 'driver';\n  \n  // Условная логика для разных ролей\n  const getScreenTitle = () => {\n    return t('client.balance.title'); // Одинаковый заголовок для обеих ролей\n  };\n  \n  const getTopUpButtonText = () => {\n    return isDriver ? t('client.balance.topUp') : t('client.balance.topUp');\n  };\n  \n  const getTopUpModalTitle = () => {\n    return isDriver ? t('client.balance.topUp') : t('client.balance.topUp');\n  };\n\n  // Цвета и стили для кнопок и карты\n  const topUpBtnColor = currentColors.primary;\n  const cashbackBtnColor = currentColors.success;\n  const cardBg = currentColors.card;\n  const flipIconColorValue = flipIconColor(isDark);\n  const backIconColorValue = backIconColor(isDark);\n\n  const CASHBACK_KEY = 'user_cashback';\n  const [cashback, setCashback] = useState('0');\n  const { currentPackage } = usePackage();\n  // Используем разные хуки для клиента и водителя\n  const clientBalanceHook = useBalance();\n  const driverBalanceHook = useDriverBalance();\n  \n  // Выбираем нужный хук в зависимости от роли\n  const balanceHook = isDriver ? driverBalanceHook : clientBalanceHook;\n  const userBalance = balanceHook.balance;\n  \n  // Для водителей показываем общую сумму (баланс + заработок)\n  const totalBalance = isDriver \n    ? userBalance + (driverBalanceHook as DriverBalanceContextType).earnings\n    : userBalance;\n  const topUpBalance = isDriver \n    ? (driverBalanceHook as DriverBalanceContextType).topUpBalance \n    : clientBalanceHook.topUpBalance;\n  const withdrawBalance = isDriver \n    ? (driverBalanceHook as DriverBalanceContextType).withdrawBalance \n    : null;\n  \n\n  \n\n  \n  React.useEffect(() => {\n    (async () => {\n      const storedCashback = await AsyncStorage.getItem(CASHBACK_KEY);\n      if (storedCashback !== null) setCashback(storedCashback);\n    })();\n    // Инициализируем анимацию быстрого пополнения в свернутом состоянии\n    quickTopUpHeight.setValue(0);\n  }, []);\n\n\n  // Вместо flipAnim._value используем ref\n  const flipAnim = useRef(new Animated.Value(0)).current;\n  const isFlippedRef = useRef(false);\n  const [topUpModalVisible, setTopUpModalVisible] = useState(false);\n  const [quickTopUpModalVisible, setQuickTopUpModalVisible] = useState(false);\n  const [topUpAmount, setTopUpAmount] = useState('');\n\n  const handleFlip = () => {\n    const toValue = isFlippedRef.current ? 0 : 1;\n    Animated.timing(flipAnim, {\n      toValue,\n      duration: 600,\n      useNativeDriver: true,\n    }).start(() => {\n      isFlippedRef.current = !isFlippedRef.current;\n    });\n  };\n\n  const frontInterpolate = flipAnim.interpolate({\n    inputRange: [0, 0.5, 1],\n    outputRange: ['0deg', '90deg', '180deg'],\n  });\n  const backInterpolate = flipAnim.interpolate({\n    inputRange: [0, 0.5, 1],\n    outputRange: ['180deg', '90deg', '0deg'],\n  });\n  const frontOpacity = flipAnim.interpolate({\n    inputRange: [0, 0.5, 1],\n    outputRange: [1, 0, 0],\n  });\n  const backOpacity = flipAnim.interpolate({\n    inputRange: [0, 0.5, 1],\n    outputRange: [0, 0, 1],\n  });\n\n    const handleTopUp = (amount?: string) => {\n    if (amount) {\n      setTopUpAmount(amount);\n    }\n    // Не очищаем topUpAmount если amount не передан\n    setTopUpModalVisible(true);\n  };\n\n  const handleWithdraw = (amount?: string) => {\n    if (amount) {\n      // Если передана сумма, сразу снимаем\n      const amountNum = parseFloat(amount);\n      if (!isNaN(amountNum) && amountNum > 0) {\n        handleWithdrawAmount(amountNum);\n      }\n    } else {\n      // Если сумма не передана, показываем диалог для ввода\n      Alert.prompt(\n        t('client.balance.withdraw'),\n        t('client.balance.enterWithdrawAmount'),\n        [\n          { text: t('client.balance.cancel'), style: 'cancel' },\n          {\n            text: t('client.balance.withdraw'),\n            onPress: (inputAmount) => {\n              if (inputAmount) {\n                const amountNum = parseFloat(inputAmount);\n                if (!isNaN(amountNum) && amountNum > 0) {\n                  handleWithdrawAmount(amountNum);\n                } else {\n                  Alert.alert(t('client.balance.error'), t('client.balance.enterValidAmount'));\n                }\n              }\n            }\n          }\n        ],\n        'plain-text',\n        ''\n      );\n    }\n  };\n\n  const handleWithdrawAmount = async (amount: number) => {\n    // Проверяем минимальную сумму вывода\n    if (amount < 20) {\n      Alert.alert(t('client.balance.error'), t('client.balance.minimumWithdrawal'));\n      return;\n    }\n\n    if (withdrawBalance) {\n      const success = await withdrawBalance(amount);\n      if (success) {\n        Alert.alert(t('client.balance.success'), t('client.balance.withdrawRequestSent', { 0: amount }));\n      } else {\n        Alert.alert(t('client.balance.error'), t('client.balance.insufficientFunds'));\n      }\n    }\n  };\n\n\n\n  const handleUseCashback = () => {\n    const cashbackNum = parseFloat(cashback);\n    \n    if (cashbackNum < 20) {\n      Alert.alert(\n        t('client.balance.insufficientFunds'),\n        t('client.balance.minimumWithdrawal')\n      );\n      return;\n    }\n    \n        if (isDriver && withdrawBalance) {\n      // Для водителей - снятие средств\n      Alert.alert(\n        t('client.balance.withdraw'),\n        t('client.balance.useCashbackConfirm'),\n        [\n          { text: t('client.balance.cancel'), style: 'cancel' },\n          {\n            text: t('client.balance.yes'),\n            onPress: async () => {\n              const success = await withdrawBalance(cashbackNum);\n              if (success) {\n                setCashback('0');\n                AsyncStorage.setItem(CASHBACK_KEY, '0');\n                Alert.alert(t('client.balance.success'), 'Withdrawal request submitted');\n              } else {\n                Alert.alert(t('client.balance.error'), 'Insufficient funds for withdrawal');\n              }\n            }\n          }\n        ]\n      );\n    } else {\n      // Для клиентов - использование cashback\n      Alert.alert(\n        t('client.balance.useCashback'),\n        t('client.balance.useCashbackConfirm'),\n        [\n          { text: t('client.balance.cancel'), style: 'cancel' },\n          {\n            text: t('client.balance.yes'),\n            onPress: async () => {\n              try {\n                await topUpBalance(cashbackNum);\n                setCashback('0');\n                AsyncStorage.setItem(CASHBACK_KEY, '0');\n                Alert.alert(t('client.balance.success'), t('client.balance.cashbackAdded', { 0: cashbackNum }));\n              } catch (error) {\n                console.error('Error using cashback:', error);\n                Alert.alert(t('client.balance.error'), 'Failed to use cashback');\n              }\n            }\n          }\n        ]\n      );\n    }\n  };\n\n\n\n\n\n  const screenWidth = Dimensions.get('window').width;\n\n  // История транзакций теперь управляется через BalanceContext\n\n\n\n  const handleFakeStripePayment = async () => {\n    const amountNum = parseFloat(topUpAmount.replace(',', '.'));\n    if (isNaN(amountNum) || amountNum <= 0) {\n      Alert.alert(t('client.balance.error'), t('client.balance.enterValidAmount'));\n      return;\n    }\n    \n    // Для всех - пополнение\n    try {\n      await topUpBalance(amountNum);\n      setTopUpModalVisible(false);\n      Alert.alert(t('client.balance.paymentSuccess'), t('client.balance.balanceToppedUp', { 0: amountNum }));\n    } catch (error) {\n      console.error('Error topping up balance:', error);\n      Alert.alert(t('client.balance.error'), 'Failed to top up balance');\n    }\n  };\n\n  const [showCopied, setShowCopied] = useState(false);\n  const [showCVV, setShowCVV] = useState(false);\n  const [isQuickTopUpExpanded, setIsQuickTopUpExpanded] = useState(false);\n  const cvvOpacity = useRef(new Animated.Value(0)).current;\n  const stickerOpacity = useRef(new Animated.Value(1)).current;\n  const stickerTranslateX = useRef(new Animated.Value(0)).current;\n  const stickerTranslateY = useRef(new Animated.Value(0)).current;\n  const stickerRotate = useRef(new Animated.Value(0)).current;\n  const quickTopUpHeight = useRef(new Animated.Value(0)).current;\n\n  const handleCopyCardNumber = async () => {\n    try {\n      await Clipboard.setString('9876 5432 1098 7654');\n      setShowCopied(true);\n      setTimeout(() => setShowCopied(false), 2000);\n    } catch (error) {\n      // Ошибка копирования - молча игнорируем\n    }\n  };\n\n  const handleToggleCVV = () => {\n    createCVVStickAnimation(\n      { cvvOpacity, stickerOpacity, stickerTranslateX, stickerTranslateY, stickerRotate },\n      setShowCVV\n    )(showCVV);\n  };\n\n  const handleToggleQuickTopUp = () => {\n    const toValue = isQuickTopUpExpanded ? 0 : 1;\n    Animated.timing(quickTopUpHeight, {\n      toValue,\n      duration: 300,\n      useNativeDriver: false,\n    }).start(() => {\n      setIsQuickTopUpExpanded(!isQuickTopUpExpanded);\n    });\n  };\n\n\n\n  return (\n    <View style={[styles.container, balanceColors.container]}>\n      <View style={[styles.header, balanceColors.header]}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Ionicons name=\"arrow-back\" size={24} color={backIconColorValue} />\n        </TouchableOpacity>\n        <Text style={[styles.title, balanceColors.title]}>\n          {getScreenTitle()}\n        </Text>\n        <View style={[styles.backButton, { flexDirection: 'row', alignItems: 'center' }]}>\n          <TouchableOpacity onPress={() => setQuickTopUpModalVisible(true)}>\n            <Ionicons \n              name=\"flash\" \n              size={24} \n              color={currentColors.primary}\n              style={{ marginRight: 8 }}\n            />\n          </TouchableOpacity>\n          <Ionicons \n            name={getPackageIcon(currentPackage) as any}\n            size={24} \n            color={getPackageColor(currentPackage)}\n          />\n        </View>\n      </View>\n      \n      <ScrollView style={styles.content} \n        contentContainerStyle={styles.contentContainer}\n        showsVerticalScrollIndicator={false}>\n        {/* Основной баланс с анимацией */}\n        <View style={mainBalanceContainer}>\n          <View style={cardContainerWithDynamicWidth(screenWidth)}>  \n            {/* Front side - всегда в DOM */}\n            <Animated.View\n              style={[\n                styles.balanceCard,\n                styles.balanceCardBorder,\n                { ...dynamicStyles.balanceCard, ...balanceCardWithTheme(currentColors, isDark) },\n                balanceCardAnimated,\n                animatedCardFront,\n                { \n                  transform: [{ rotateY: frontInterpolate }],\n                  opacity: frontOpacity,\n                },\n              ]}\n            >\n              {/* Декорация в верхней части карты */}\n              <BalanceCardDecoration isDark={isDark} packageType={currentPackage} />\n              <View style={balanceCardFrontRow}>\n                <View>\n                  <Text style={styles.balanceLabel}>\n                    {isDriver ? 'Total Balance' : t('client.balance.currentBalance')}\n                  </Text>\n                  <View style={styles.balanceRow}>\n                    <Text style={styles.balanceAmount}>{formatBalance(totalBalance)}</Text>\n                    {!String(totalBalance).includes('AFc') && (\n                      <Text style={styles.balanceCurrency}>AFc</Text>\n                    )}\n                  </View>\n                  <Text style={cashbackText}>\n                    {isDriver \n                      ? `Balance: ${formatBalance(userBalance)} | Earnings: ${formatBalance((driverBalanceHook as DriverBalanceContextType).earnings)}`\n                      : 'FixCash: ' + cashback + ' AFc'\n                    }\n                  </Text>\n                </View>\n                <TouchableOpacity onPress={handleFlip} style={flipButtonFront}>\n                  <Ionicons name=\"swap-horizontal\" size={32} color={flipIconColorValue} />\n                </TouchableOpacity>\n              </View>\n              <View style={[styles.balanceActions, balanceActionsMargin]}> \n                <TouchableOpacity\n                  style={[\n                    styles.cardFrontButton,\n                    cardFrontButtonWithTheme(cardBg, topUpBtnColor),\n                  ]}\n                  onPress={() => isDriver ? handleTopUp() : handleTopUp()}\n                >\n                  <Ionicons name=\"add-circle\" size={24} color={topUpBtnColor} />\n                  <Text style={[styles.cardFrontBtnText, cardFrontBtnTextWithColor(topUpBtnColor)]}>{getTopUpButtonText()}</Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                  style={[\n                    styles.cardFrontButton2,\n                    cardFrontButton2WithTheme(cardBg, cashbackBtnColor),\n                  ]}\n                  onPress={() => isDriver ? handleWithdraw() : handleUseCashback}\n                >\n                  <Ionicons name={isDriver ? \"card\" : \"gift\"} size={24} color={cashbackBtnColor} />\n                  <Text style={[styles.cardFrontBtnText, cardFrontBtnTextWithColor(cashbackBtnColor)]}>\n                    {isDriver ? t('client.balance.withdraw') : 'FixCash'}\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            </Animated.View>\n            {/* Back side - всегда в DOM */}\n            <Animated.View\n              style={[\n                styles.balanceCard,\n                styles.balanceCardBorder,\n                { ...dynamicStyles.balanceCard, ...balanceCardWithTheme(currentColors, isDark) },\n                balanceCardAnimated,\n                animatedCardBack,\n                {\n                  transform: [{ rotateY: backInterpolate }],\n                  opacity: backOpacity,\n                },\n              ]}\n            >\n              {/* Декорация обратной стороны карты */}\n              <BalanceCardDecoration isDark={isDark} packageType={currentPackage} isBackSide={true} />\n              <View style={balanceCardBack}>\n                <View style={styles.cardBackBtnContainer}>\n                  <TouchableOpacity onPress={handleFlip} style={flipButtonBack}>\n                    <Ionicons name=\"swap-horizontal\" size={32} color={flipIconColorValue} />\n                  </TouchableOpacity>\n                </View>\n                <Text style={[cardBackText, styles.cardBackTextCenter]}>DIGITAL AFc CARD</Text>\n                <View style={styles.cardNumberContainer}>\n                  <Text style={[cardBackText, styles.cardNumberText]} numberOfLines={1}>9876 5432 1098 7654</Text>\n                  <TouchableOpacity style={styles.copyButton} onPress={handleCopyCardNumber}>\n                    <Ionicons name=\"copy-outline\" size={16} color=\"#fff\" />\n                  </TouchableOpacity>\n                </View>\n                <View style={styles.cardDetailsContainer}>\n                  <Text style={[cardBackText, styles.cardDetailsText]}>12/25</Text>\n                  <View style={styles.cvvContainer}>\n                    <TouchableOpacity onPress={handleToggleCVV}>\n                      <Animated.Text \n                        style={[\n                          cardBackText, \n                          styles.cardDetailsText, \n                          cvvTextWithOpacity(cvvOpacity)\n                        ]}\n                      >\n                        123\n                      </Animated.Text>\n                    </TouchableOpacity>\n                    <Animated.View \n                      style={[\n                        styles.cvvSticker, \n                        cvvStickerWithAnimation(stickerOpacity, stickerTranslateX, stickerTranslateY, stickerRotate)\n                      ]}\n                    >\n                      <TouchableOpacity onPress={handleToggleCVV}>\n                        <Text style={styles.cvvStickerText}>AFc</Text>\n                      </TouchableOpacity>\n                    </Animated.View>\n                  </View>\n                </View>\n                <View style={styles.cardNameContainer}>\n                  {/* TODO: Получать имя держателя карты из БД/профиля пользователя */}\n                  <Text style={[cardBackText, styles.cardNameText]}>IVAN IVANOV</Text>\n                </View>\n                {showCopied && (\n                  <View style={styles.copiedNotification}>\n                                      <View style={styles.copiedContainer}>\n                    <Ionicons name=\"checkmark-circle\" size={16} color=\"#fff\" style={copiedIconStyle} />\n                    <Text style={styles.copiedText}>{t('client.balance.copied')}</Text>\n                  </View>\n                  </View>\n                )}\n              </View>\n            </Animated.View>\n            {/* Spacer для высоты */}\n            <View style={cardSpacer} />\n          </View>\n        </View>\n\n\n\n        {/* История пополнений */}\n        <BalanceTopUpHistory maxItems={5} />\n\n      </ScrollView>\n      {/* Модальное окно пополнения */}\n      <Modal\n        visible={topUpModalVisible}\n        animationType=\"fade\"\n        transparent\n        onRequestClose={() => setTopUpModalVisible(false)}\n      >\n        <View style={[styles.modalOverlay, isDark && styles.modalOverlayDark]}>\n          <View style={[styles.modalContainer, modalContainerWithTheme(currentColors)]}> \n            <Text style={[styles.modalTitle, modalTitleWithTheme(currentColors)]}>{getTopUpModalTitle()}</Text>\n            <Text style={[styles.modalLabel, modalLabelWithTheme(currentColors)]}>{t('client.balance.amountInAFc')}</Text>\n            <TextInput\n              value={topUpAmount}\n              onChangeText={setTopUpAmount}\n              placeholder={t('client.balance.enterAmount')}\n              placeholderTextColor={currentColors.textSecondary}\n              keyboardType=\"numeric\"\n              style={[styles.modalInput, modalInputWithTheme(currentColors)]}\n            />\n            <TouchableOpacity\n              style={[styles.modalPayBtn, modalPayBtnWithTheme(currentColors)]}\n              onPress={() => {\n                Alert.alert(\n                  t('client.balance.confirm'),\n                  t('client.balance.confirmTopUp', { 0: topUpAmount }),\n                  [\n                    { text: t('client.balance.cancel'), style: 'cancel' },\n                    { text: t('client.balance.topUpBalance'), onPress: handleFakeStripePayment }\n                  ]\n                );\n              }}\n            >\n              <Text style={styles.modalPayBtnText}>{isDriver ? t('client.balance.payButton') : t('client.balance.payButton')}</Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => setTopUpModalVisible(false)} style={styles.modalCancelBtn}>\n              <Text style={[styles.modalCancelBtnText, modalCancelBtnTextWithTheme(currentColors)]}>{t('client.balance.cancel')}</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Модальное окно быстрого пополнения */}\n      <Modal\n        visible={quickTopUpModalVisible}\n        animationType=\"fade\"\n        transparent\n        onRequestClose={() => setQuickTopUpModalVisible(false)}\n      >\n        <View style={[styles.modalOverlay, isDark && styles.modalOverlayDark]}>\n          <View style={[styles.modalContainer, modalContainerWithTheme(currentColors)]}> \n            <Text style={[styles.modalTitle, modalTitleWithTheme(currentColors)]}>{t('client.balance.quickTopUp')}</Text>\n            \n            <View style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between', marginTop: 20 }}>\n              {mockQuickAmounts.map((amount) => (\n                <TouchableOpacity\n                  key={amount}\n                  style={[\n                    styles.quickAmountButtonLarge, \n                    dynamicStyles.quickAmountButtonLarge,\n                    { width: '48%', marginBottom: 12 }\n                  ]}\n                  onPress={() => {\n                    setTopUpAmount(amount.toString());\n                    setQuickTopUpModalVisible(false);\n                    setTopUpModalVisible(true);\n                  }}\n                  activeOpacity={0.8}\n                >\n                  <Text style={[styles.quickAmountTextLarge, dynamicStyles.quickAmountTextLarge]}>{amount}</Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n\n            <TouchableOpacity onPress={() => setQuickTopUpModalVisible(false)} style={styles.modalCancelBtn}>\n              <Text style={[styles.modalCancelBtnText, modalCancelBtnTextWithTheme(currentColors)]}>{t('client.balance.cancel')}</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nexport default BalanceScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/client/CardsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Platform' is defined but never used.","line":2,"column":77,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":85},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AsyncStorage' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DriverStackParamList' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2317,2320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2317,2320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cardsLoading' is assigned a value but never used.","line":66,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cardType' is assigned a value but never used.","line":168,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":168,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, Alert, Modal, TextInput, Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { ClientScreenProps } from '../../types/navigation';\nimport { DriverStackParamList } from '../../types/driver/DriverNavigation';\nimport { CardsScreenStyles as styles, getCardsScreenStyles } from '../../styles/screens/profile/CardsScreen.styles';\nimport { colors } from '../../constants/colors';\nimport { Card } from '../../services/cardService';\nimport VisaIcon from '../../components/VisaIcon';\nimport MastercardIcon from '../../components/MastercardIcon';\nimport { useI18n } from '../../hooks/useI18n';\nimport { useCards } from '../../hooks/useCards';\nimport { CardService } from '../../services/cardService';\n\n// import { check, request, PERMISSIONS, RESULTS } from 'react-native-permissions';\n\n// const requestCameraPermission = async () => {\n//   const perm = Platform.OS === 'ios'\n//     ? PERMISSIONS.IOS.CAMERA\n//     : PERMISSIONS.ANDROID.CAMERA;\n//   let result = await check(perm);\n//   if (result !== RESULTS.GRANTED) {\n//     result = await request(perm);\n//   }\n//   return result === RESULTS.GRANTED;\n// };\n\nconst handleScanCard = async () => {\n  // Временно для Expo Go - просто показываем алерт\n  Alert.alert(\n    'Сканер карт',\n    'Функция сканирования карт будет доступна в продакшн версии приложения.',\n    [{ text: 'OK' }]\n  );\n  \n  // Код для продакшн билда (раскомментировать после сборки):\n  // const granted = await requestCameraPermission();\n  // if (!granted) {\n  //   Alert.alert('Нет доступа к камере', 'Для сканирования карты разрешите доступ к камере в настройках.');\n  //   return;\n  // }\n  // try {\n  //   // Сканирование карты временно отключено\n  //   // const card = await startScanner();\n  //   // if (card && card.cardNumber) {\n  //   //   setNewCard(prev => ({ ...prev, number: card.cardNumber }));\n  //   // }\n  // } catch (e) {\n  //   // пользователь отменил или ошибка\n  // }\n};\n\n// Универсальный тип для навигации\ntype CardsScreenProps = ClientScreenProps<'Cards'> | { navigation: any };\n\nconst CardsScreen: React.FC<CardsScreenProps> = ({ navigation }) => {\n  const { isDark } = useTheme();\n  const { user } = useAuth();\n  const { t } = useI18n();\n  const dynamicStyles = getCardsScreenStyles(isDark);\n  const currentColors = isDark ? colors.dark : colors.light;\n  // const [cards, setCards] = useState<Card[]>([]); // Заменено на useCards\n  const { cards, loading: cardsLoading, addCard: addCardToHook, deleteCard: deleteCardFromHook } = useCards();\n  const [defaultCardId, setDefaultCardId] = useState<string | null>(null);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [newCard, setNewCard] = useState({\n    holderName: '',\n    number: '',\n    expiry: '',\n    type: 'visa',\n    cvv: '',\n  });\n\n  // Валидация\n  const [errors, setErrors] = useState({ holderName: '', number: '', expiry: '', cvv: '' });\n\n  // Определяем роль пользователя\n  const isDriver = user?.role === 'driver';\n  \n  // Условная логика для разных ролей\n  const getScreenTitle = () => {\n    return isDriver ? 'Карты для выплат' : t('components.cards.title');\n  };\n  \n  const getEmptyStateText = () => {\n    return isDriver \n      ? 'Добавьте карту для получения выплат' \n      : t('components.cards.emptyDescription');\n  };\n  \n  const getAddCardButtonText = () => {\n    return isDriver ? 'Добавить карту для выплат' : t('components.cards.add');\n  };\n\n  useEffect(() => {\n    (async () => {\n      // Теперь карты загружает useCards автоматически\n      // Осталось только загрузить карту по умолчанию\n      const def = cards.find(c => c.isDefault);\n      setDefaultCardId(def ? def.id : null);\n    })();\n  }, [cards]); // Зависимость от cards из useCards\n\n  useEffect(() => {\n    if (showAddModal) {\n      handleScanCard();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showAddModal]);\n\n  // Определение типа карты по номеру\n  const getCardType = (number: string): 'visa' | 'mastercard' => {\n    const digits = number.replace(/\\D/g, '');\n    if (digits.startsWith('4')) return 'visa';\n    if (digits.startsWith('5')) return 'mastercard';\n    if (digits.startsWith('34') || digits.startsWith('37')) return 'visa'; // American Express (но показываем как Visa)\n    if (digits.startsWith('6')) return 'mastercard'; // Discover (но показываем как Mastercard)\n    return 'visa'; // по умолчанию\n  };\n\n  const getCardErrors = () => {\n    const newErrors = { holderName: '', number: '', expiry: '', cvv: '' };\n    if (!newCard.holderName || newCard.holderName.trim().length < 2) {\n      newErrors.holderName = t('components.cards.holderError');\n    }\n    if (!/^([0-9]{4} ){3}[0-9]{4}$/.test(newCard.number)) {\n      newErrors.number = t('components.cards.numberError');\n    }\n    if (!/^\\d{2}\\/\\d{2}$/.test(newCard.expiry)) {\n      newErrors.expiry = t('components.cards.expiryError');\n    } else {\n      const [mm, yy] = newCard.expiry.split('/').map(Number);\n      const now = new Date();\n      const curYear = now.getFullYear() % 100;\n      const curMonth = now.getMonth() + 1;\n      if (mm < 1 || mm > 12) {\n        newErrors.expiry = t('components.cards.expiryMonthError');\n      } else if (yy < curYear || (yy === curYear && mm < curMonth)) {\n        newErrors.expiry = t('components.cards.expiryPastError');\n      }\n    }\n    if (!/^\\d{3,4}$/.test(newCard.cvv)) {\n      newErrors.cvv = t('components.cards.cvvError');\n    }\n    return newErrors;\n  };\n\n  const isCardValid = () => {\n    const errs = getCardErrors();\n    return !errs.holderName && !errs.number && !errs.expiry && !errs.cvv;\n  };\n\n  const handleAddCard = async () => {\n    setShowAddModal(true);\n  };\n\n  const handleSaveCard = async () => {\n    const errs = getCardErrors();\n    setErrors(errs);\n    if (errs.holderName || errs.number || errs.expiry || errs.cvv) {\n      return;\n    }\n    const id = Date.now().toString();\n    const lastFour = newCard.number.slice(-4);\n    const cardType = getCardType(newCard.number);\n    // Парсим дату истечения\n    const [expiryMonth, expiryYear] = newCard.expiry.split('/').map(num => parseInt(num.trim()));\n    \n    const newCardData: Card = {\n      id,\n      holderName: newCard.holderName,\n      last4: lastFour,\n      type: 'card',\n      brand: newCard.type === 'visa' ? 'Visa' : 'Mastercard',\n      expiryMonth,\n      expiryYear,\n      isDefault: cards.length === 0, // Если это первая карта, делаем её по умолчанию\n    };\n    // Используем универсальный хук\n    const success = await addCardToHook(newCardData);\n    if (!success) {\n      Alert.alert(t('common.error'), t('cards.addError'));\n      return;\n    }\n    \n    // Если это первая карта, устанавливаем её как карту по умолчанию\n    if (cards.length === 1) { // Теперь карта уже добавлена\n      await CardService.setDefault(id, user?.id || '');\n    }\n    setDefaultCardId(newCardData.isDefault ? id : defaultCardId);\n    setShowAddModal(false);\n    setNewCard({ holderName: '', number: '', expiry: '', type: 'visa', cvv: '' });\n    setErrors({ holderName: '', number: '', expiry: '', cvv: '' });\n  };\n\n  const handleCancelAdd = () => {\n    setShowAddModal(false);\n    setNewCard({ holderName: '', number: '', expiry: '', type: 'visa', cvv: '' });\n  };\n\n  const handleDeleteCard = async (cardId: string) => {\n    Alert.alert(\n      t('components.cards.delete'),\n      t('components.cards.deleteConfirm'),\n      [\n        { text: t('components.cards.cancel'), style: 'cancel' },\n        { text: t('components.cards.delete'), style: 'destructive', onPress: async () => {\n          const success = await deleteCardFromHook(cardId);\n          if (!success) {\n            Alert.alert(t('common.error'), t('cards.deleteError'));\n            return;\n          }\n          if (defaultCardId === cardId) {\n            if (cards.length > 1) {\n              const newDefaultId = cards.find(c => c.id !== cardId)?.id;\n              if (newDefaultId) {\n                await CardService.setDefault(newDefaultId, user?.id || '');\n                setDefaultCardId(newDefaultId);\n              }\n            } else {\n              setDefaultCardId(null);\n            }\n          }\n        } }\n      ]\n    );\n  };\n\n  const handleSetDefault = async (cardId: string) => {\n    await CardService.setDefault(cardId, user?.id || '');\n    setDefaultCardId(cardId);\n  };\n\n  const getCardColor = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'visa':\n        return isDark ? '#60A5FA' : '#1a1f71'; // фирменный синий Visa\n      case 'mastercard':\n        return isDark ? '#FBBF24' : '#eb001b'; // фирменный цвет Mastercard\n      default:\n        return currentColors.primary;\n    }\n  };\n\n  const handleCardNumberChange = (text: string) => {\n    // Удаляем все нецифровые символы\n    const digits = text.replace(/\\D/g, '');\n    // Ограничиваем до 16 цифр\n    const limited = digits.slice(0, 16);\n    // Форматируем в группы по 4 цифры\n    let formatted = '';\n    for (let i = 0; i < limited.length; i++) {\n      if (i > 0 && i % 4 === 0) {\n        formatted += ' ';\n      }\n      formatted += limited[i];\n    }\n    // Определяем тип карты на основе номера\n    const cardType = getCardType(formatted);\n    setNewCard(prev => ({ ...prev, number: formatted, type: cardType }));\n  };\n\n  const handleExpiryChange = (v: string) => {\n    let digits = v.replace(/\\D/g, '');\n    digits = digits.slice(0, 4);\n    let formatted = '';\n    if (digits.length > 0) {\n      let mm = digits.slice(0, 2);\n      if (mm.length === 1 && parseInt(mm) > 1) mm = '0' + mm;\n      if (mm.length === 2) {\n        let m = parseInt(mm, 10);\n        if (m < 1) mm = '01';\n        if (m > 12) mm = '12';\n      }\n      formatted = mm;\n      if (digits.length > 2) {\n        formatted += '/';\n        let yy = digits.slice(2, 4);\n        const now = new Date();\n        const curYear = now.getFullYear() % 100;\n        let y = parseInt(yy, 10);\n        if (yy.length === 2 && y < curYear) yy = curYear.toString();\n        formatted += yy;\n      }\n    }\n    setNewCard(c => ({ ...c, expiry: formatted }));\n  };\n\n  return (\n    <View style={[styles.container, dynamicStyles.container]}>\n      <View style={[styles.header, dynamicStyles.header]}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Ionicons name=\"arrow-back\" size={24} color={currentColors.primary} />\n        </TouchableOpacity>\n        <Text style={[styles.title, dynamicStyles.title]}>{getScreenTitle()}</Text>\n        <TouchableOpacity onPress={handleAddCard} style={styles.addButton}>\n          <Ionicons name=\"add\" size={24} color={currentColors.primary} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Модальное окно добавления карты */}\n      <Modal\n        visible={showAddModal}\n        animationType=\"fade\"\n        transparent\n        onRequestClose={handleCancelAdd}\n      >\n        <View style={styles.modalOverlay}>\n          <View style={[styles.modalContainer, dynamicStyles.modalContainer]}>\n            <Text style={[styles.modalTitle, dynamicStyles.modalTitle]}>{t('components.cards.addTitle')}</Text>\n            <TextInput\n                              placeholder={t('components.cards.holderPlaceholder')}\n              placeholderTextColor={currentColors.textSecondary}\n              value={newCard.holderName}\n              onChangeText={v => setNewCard(c => ({ ...c, holderName: v }))}\n              style={[styles.input, dynamicStyles.input]}\n            />\n                            {!!errors.holderName && <Text style={[styles.errorText, dynamicStyles.errorText]}>{t('components.cards.holderError')}</Text>}\n            <View style={styles.inputContainer}>\n              <TextInput\n                placeholder={t('components.cards.numberPlaceholder')}\n                placeholderTextColor={currentColors.textSecondary}\n                value={newCard.number}\n                onChangeText={handleCardNumberChange}\n                style={[styles.input, styles.inputWithIcon, dynamicStyles.input]}\n                keyboardType=\"numeric\"\n                maxLength={19}\n              />\n              <TouchableOpacity\n                onPress={handleScanCard}\n                style={styles.scanButton}\n                hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}\n              >\n                <Ionicons name=\"scan-outline\" size={22} color={currentColors.primary} />\n              </TouchableOpacity>\n              {/* Индикатор типа карты */}\n              {newCard.number.length > 0 && (\n                <View style={styles.cardTypeIndicator}>\n                  {newCard.type === 'visa' ? (\n                    <VisaIcon width={24} height={24} />\n                  ) : newCard.type === 'mastercard' ? (\n                    <MastercardIcon width={24} height={24} />\n                  ) : null}\n                </View>\n              )}\n            </View>\n                            {!!errors.number && <Text style={[styles.errorText, dynamicStyles.errorText]}>{t('components.cards.numberError')}</Text>}\n            <View style={styles.inputRow}>\n              <TextInput\n                                  placeholder={t('components.cards.expiryPlaceholder')}\n                placeholderTextColor={currentColors.textSecondary}\n                value={newCard.expiry}\n                onChangeText={handleExpiryChange}\n                style={[styles.input, styles.inputFlex, dynamicStyles.inputFlex]}\n                keyboardType=\"numeric\"\n                maxLength={5}\n              />\n              <TextInput\n                                  placeholder={t('components.cards.cvvPlaceholder')}\n                placeholderTextColor={currentColors.textSecondary}\n                value={newCard.cvv || ''}\n                onChangeText={v => setNewCard(c => ({ ...c, cvv: v.replace(/[^0-9]/g, '') }))}\n                maxLength={4}\n                keyboardType=\"number-pad\"\n                secureTextEntry\n                style={[styles.input, styles.inputFlex, dynamicStyles.inputFlex]}\n              />\n            </View>\n            <View style={styles.errorRow}>\n              <View style={styles.errorContainer}>\n                {!!errors.expiry && <Text style={[styles.errorText, dynamicStyles.errorText]}>{errors.expiry}</Text>}\n              </View>\n              <View style={styles.errorContainer}>\n                {!!errors.cvv && <Text style={[styles.errorText, dynamicStyles.errorText]}>{t('components.cards.cvvError')}</Text>}\n              </View>\n            </View>\n            <View style={styles.buttonRow}>\n              <TouchableOpacity onPress={handleCancelAdd} style={[styles.modalButton, styles.modalButtonCancel, dynamicStyles.modalButtonCancel]}>\n                <Text style={[styles.modalButtonText, dynamicStyles.modalButtonText]}>{t('components.cards.cancel')}</Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                onPress={handleSaveCard}\n                style={[\n                  styles.modalButton,\n                  styles.modalButtonSave,\n                  !isCardValid() && styles.modalButtonDisabled,\n                  isCardValid() ? dynamicStyles.modalButtonSave : dynamicStyles.modalButtonSaveDisabled,\n                ]}\n                disabled={!isCardValid()}\n              >\n                                  <Text style={[styles.modalButtonText, isCardValid() ? dynamicStyles.modalButtonTextSave : dynamicStyles.modalButtonTextSaveDisabled]}>{t('components.cards.save')}</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n      \n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {cards.length === 0 ? (\n          <View style={styles.emptyState}>\n            <Ionicons name=\"card-outline\" size={64} color=\"#ccc\" />\n            <Text style={[styles.emptyTitle, dynamicStyles.emptyTitle]}>{t('components.cards.empty')}</Text>\n            <Text style={[styles.emptyDescription, dynamicStyles.emptyDescription]}>\n              {getEmptyStateText()}\n            </Text>\n            <TouchableOpacity style={styles.addCardButton} onPress={handleAddCard}>\n              <Text style={styles.addCardButtonText}>{getAddCardButtonText()}</Text>\n            </TouchableOpacity>\n          </View>\n        ) : (\n          <>\n            {cards.map((card) => (\n              <View key={card.id} style={[styles.cardItem, dynamicStyles.cardItem]}>\n                <View style={styles.cardHeader}>\n                  <View style={styles.cardInfo}>\n                    {card.type.toLowerCase() === 'visa' ? (\n                      <VisaIcon width={32} height={32} />\n                    ) : card.type.toLowerCase() === 'mastercard' ? (\n                      <MastercardIcon width={32} height={32} />\n                    ) : (\n                      <Ionicons \n                        name={'card'}\n                        size={32}\n                        color={getCardColor(card.type)}\n                      />\n                    )}\n                    <View style={styles.cardDetails}>\n                      <Text style={[styles.cardName, dynamicStyles.cardName]}>{card.holderName}</Text>\n                      <View style={styles.cardNumberRow}>\n                        <Text style={[styles.cardNumber, dynamicStyles.cardNumber]}>•••• {card.last4}</Text>\n                        <Text style={[styles.cardExpiry, dynamicStyles.cardExpiry, styles.cardExpiryWithMargin]}> {card.expiryMonth.toString().padStart(2, '0')}/{card.expiryYear}</Text>\n                      </View>\n                      <TouchableOpacity\n                        style={[\n                          styles.defaultButton,\n                          card.id === defaultCardId ? dynamicStyles.defaultButton : dynamicStyles.defaultButtonInactive\n                        ]}\n                        onPress={() => handleSetDefault(card.id)}\n                        disabled={card.id === defaultCardId}\n                      >\n                        <Text style={[\n                          styles.defaultButtonText,\n                          card.id === defaultCardId ? dynamicStyles.defaultButtonText : dynamicStyles.defaultButtonTextInactive\n                        ]}>\n                          {t('components.cards.default')}\n                        </Text>\n                      </TouchableOpacity>\n                    </View>\n                  </View>\n                  <TouchableOpacity \n                    onPress={() => {\n                      handleDeleteCard(card.id);\n                    }}\n                    style={styles.deleteButton}\n                  >\n                    <Ionicons name=\"trash-outline\" size={20} color={currentColors.error} />\n                  </TouchableOpacity>\n                </View>\n                <View style={styles.cardFooter}>\n                </View>\n              </View>\n            ))}\n          </>\n        )}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default CardsScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/client/ChangePasswordScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1197,1200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1197,1200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1602,1605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1602,1605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1700,1703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1700,1703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  View, \n  Text, \n  TouchableOpacity, \n  ScrollView,\n  TextInput,\n  Alert,\n  KeyboardAvoidingView,\n  Platform\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { ClientScreenProps } from '../../types/navigation';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { getCurrentColors } from '../../constants/colors';\nimport PasswordStrengthIndicator from '../../components/PasswordStrengthIndicator';\nimport { ChangePasswordScreenStyles as styles, getChangePasswordScreenColors } from '../../styles/screens/profile/ChangePasswordScreen.styles';\nimport { ProfileService } from '../../services/ProfileService';\n\nconst ChangePasswordScreen: React.FC<ClientScreenProps<'ChangePassword'>> = ({ navigation }) => {\n  const { isDark } = useTheme();\n  const { t } = useLanguage();\n  const currentColors = getCurrentColors(isDark);\n  const changePasswordColors = getChangePasswordScreenColors(isDark);\n  \n  const [form, setForm] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: '',\n  });\n  const [errors, setErrors] = useState<any>({});\n  const [loading, setLoading] = useState(false);\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const handleChange = (field: string, value: string) => {\n    setForm((prev) => ({ ...prev, [field]: value }));\n    setErrors((prev: any) => ({ ...prev, [field]: undefined }));\n  };\n\n  const validate = () => {\n    const newErrors: any = {};\n    \n    // Валидация текущего пароля\n    if (!form.currentPassword.trim()) {\n      newErrors.currentPassword = t('register.passwordRequired');\n    }\n    \n    // Валидация нового пароля\n    if (!form.newPassword) {\n      newErrors.newPassword = t('register.passwordRequired');\n    } else if (form.newPassword.length < 8) {\n      newErrors.newPassword = t('register.passwordShort');\n    } else if (!/(?=.*[a-z])/.test(form.newPassword)) {\n      newErrors.newPassword = t('register.passwordLowercase');\n    } else if (!/(?=.*[A-Z])/.test(form.newPassword)) {\n      newErrors.newPassword = t('register.passwordUppercase');\n    } else if (!/(?=.*\\d)/.test(form.newPassword)) {\n      newErrors.newPassword = t('register.passwordNumbers');\n    } else if (!/(?=.*[!@#$%^&*])/.test(form.newPassword)) {\n      newErrors.newPassword = t('register.passwordSpecial');\n    }\n    \n    // Проверка совпадения паролей\n    if (form.confirmPassword !== form.newPassword) {\n      newErrors.confirmPassword = t('register.passwordsDontMatch');\n    }\n    \n    // Проверка что новый пароль отличается от текущего\n    if (form.currentPassword === form.newPassword) {\n      newErrors.newPassword = t('profile.settings.security.passwordSameError');\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleChangePassword = async () => {\n    if (!validate()) return;\n    \n    setLoading(true);\n    try {\n      const result = await ProfileService.changePassword({\n        currentPassword: form.currentPassword,\n        newPassword: form.newPassword,\n      });\n      \n      if (result.success) {\n        Alert.alert(\n          t('register.successTitle'), \n          t('profile.settings.security.passwordChangedSuccess'),\n          [\n            {\n              text: t('register.ok'),\n              onPress: () => navigation.goBack()\n            }\n          ]\n        );\n      } else {\n        Alert.alert(\n          t('register.errorTitle'), \n          result.error || t('profile.settings.security.passwordChangeError')\n        );\n      }\n    } catch (error) {\n      Alert.alert(\n        t('register.errorTitle'), \n        t('profile.settings.security.passwordChangeError')\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const isFormValid = form.currentPassword.trim() && \n                     form.newPassword.trim() && \n                     form.confirmPassword.trim() && \n                     form.newPassword === form.confirmPassword && \n                     form.newPassword.length >= 8 &&\n                     form.currentPassword !== form.newPassword;\n\n  return (\n    <KeyboardAvoidingView \n      style={[{ flex: 1 }, changePasswordColors.container]}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n    >\n      <View style={[styles.header, changePasswordColors.header]}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Ionicons name=\"arrow-back\" size={24} color={currentColors.primary} />\n        </TouchableOpacity>\n        <Text style={[styles.title, changePasswordColors.title]}>{t('profile.settings.security.changePassword')}</Text>\n        <View style={styles.placeholder} />\n      </View>\n\n      <ScrollView \n        style={styles.content}\n        contentContainerStyle={styles.contentContainer}\n        showsVerticalScrollIndicator={false}\n      >\n        {/* Текущий пароль */}\n        <View style={styles.inputContainer}>\n          <Text style={[styles.inputLabel, changePasswordColors.inputLabel]}>\n            {t('register.password')} <Text style={{ color: currentColors.error }}>*</Text>\n          </Text>\n          <View style={[styles.passwordInput, changePasswordColors.passwordInput]}>\n            <TextInput\n              style={[styles.textInput, changePasswordColors.textInput]}\n              value={form.currentPassword}\n              onChangeText={(v) => handleChange('currentPassword', v)}\n              secureTextEntry={!showCurrentPassword}\n              placeholder={t('register.passwordPlaceholder')}\n              placeholderTextColor={currentColors.textSecondary}\n            />\n            <TouchableOpacity \n              onPress={() => setShowCurrentPassword(!showCurrentPassword)}\n              style={styles.eyeButton}\n            >\n              <Ionicons \n                name={showCurrentPassword ? \"eye-off\" : \"eye\"} \n                size={20} \n                color={currentColors.textSecondary} \n              />\n            </TouchableOpacity>\n          </View>\n          {errors.currentPassword && <Text style={[styles.errorText, changePasswordColors.errorText]}>{errors.currentPassword}</Text>}\n        </View>\n\n        {/* Новый пароль */}\n        <View style={styles.inputContainer}>\n          <Text style={[styles.inputLabel, changePasswordColors.inputLabel]}>\n            {t('register.password')} <Text style={{ color: currentColors.error }}>*</Text>\n          </Text>\n          <View style={[styles.passwordInput, changePasswordColors.passwordInput]}>\n            <TextInput\n              style={[styles.textInput, changePasswordColors.textInput]}\n              value={form.newPassword}\n              onChangeText={(v) => handleChange('newPassword', v)}\n              secureTextEntry={!showNewPassword}\n              placeholder={t('register.passwordPlaceholder')}\n              placeholderTextColor={currentColors.textSecondary}\n            />\n            <TouchableOpacity \n              onPress={() => setShowNewPassword(!showNewPassword)}\n              style={styles.eyeButton}\n            >\n              <Ionicons \n                name={showNewPassword ? \"eye-off\" : \"eye\"} \n                size={20} \n                color={currentColors.textSecondary} \n              />\n            </TouchableOpacity>\n          </View>\n          {form.newPassword && <PasswordStrengthIndicator value={form.newPassword} showFeedback={true} />}\n          {errors.newPassword && <Text style={[styles.errorText, changePasswordColors.errorText]}>{errors.newPassword}</Text>}\n        </View>\n\n        {/* Подтверждение пароля */}\n        <View style={styles.inputContainer}>\n          <Text style={[styles.inputLabel, changePasswordColors.inputLabel]}>\n            {t('register.confirmPassword')} <Text style={{ color: currentColors.error }}>*</Text>\n          </Text>\n          <View style={[styles.passwordInput, changePasswordColors.passwordInput]}>\n            <TextInput\n              style={[styles.textInput, changePasswordColors.textInput]}\n              value={form.confirmPassword}\n              onChangeText={(v) => handleChange('confirmPassword', v)}\n              secureTextEntry={!showConfirmPassword}\n              placeholder={t('register.confirmPasswordPlaceholder')}\n              placeholderTextColor={currentColors.textSecondary}\n            />\n            <TouchableOpacity \n              onPress={() => setShowConfirmPassword(!showConfirmPassword)}\n              style={styles.eyeButton}\n            >\n              <Ionicons \n                name={showConfirmPassword ? \"eye-off\" : \"eye\"} \n                size={20} \n                color={currentColors.textSecondary} \n              />\n            </TouchableOpacity>\n          </View>\n          {errors.confirmPassword && <Text style={[styles.errorText, changePasswordColors.errorText]}>{errors.confirmPassword}</Text>}\n        </View>\n\n        {/* Кнопка изменения пароля */}\n        <TouchableOpacity \n          style={[\n            styles.submitButton,\n            {\n              backgroundColor: isFormValid ? currentColors.primary : '#9ca3af',\n              opacity: loading ? 0.7 : 1\n            }\n          ]} \n          onPress={handleChangePassword}\n          disabled={!isFormValid || loading}\n        >\n          <Text style={styles.submitButtonText}>\n            {loading ? t('profile.settings.security.changingPassword') : t('profile.settings.security.changePassword')}\n          </Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n};\n\nexport default ChangePasswordScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/client/DriversScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Text' is defined but never used.","line":2,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TouchableOpacity' is defined but never used.","line":2,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Ionicons' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasMore' is assigned a value but never used.","line":37,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'removeDriver' is assigned a value but never used.","line":44,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3364,3367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3364,3367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSavedStatuses'. Either include it or remove the dependency array.","line":99,"column":6,"nodeType":"ArrayExpression","endLine":99,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadSavedStatuses]","fix":{"range":[4101,4103],"text":"[loadSavedStatuses]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5243,5246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5243,5246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'filteredDriversWithFilters' is assigned a value but never used.","line":142,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":142,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6628,6631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6628,6631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleDriverPress' is assigned a value but never used.","line":317,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":317,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":351,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12842,12845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12842,12845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":355,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12957,12960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12957,12960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13558,13561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13558,13561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deleteSelected' is assigned a value but never used.","line":446,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":446,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":506,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":506,"endColumn":73}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState, useRef, useCallback, useEffect } from 'react';\nimport { SafeAreaView, View, Text, FlatList, TouchableOpacity, Alert, Animated, NativeScrollEvent, NativeSyntheticEvent } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Swipeable } from 'react-native-gesture-handler';\nimport type { Swipeable as RNSwipeable } from 'react-native-gesture-handler';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { createDriversScreenStyles } from '../../styles/screens/drivers/DriversScreen.styles';\nimport { useAuth } from '../../context/AuthContext';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { ClientStackParamList, DriverStackParamList } from '../../types/navigation';\nimport { Driver } from '../../types/driver';\nimport useDriversList from '../../hooks/client/useDriversList';\nimport NotificationsModal from '../../components/NotificationsModal';\nimport DriverListItem from '../../components/driver/DriverListItem';\nimport DriversHeader from '../../components/DriversHeader';\nimport EmptyDriversState from '../../components/EmptyDriversState';\nimport LoadingFooter from '../../components/LoadingFooter';\nimport DriversSearchBar from '../../components/DriversSearchBar';\nimport DriversSelectionBar from '../../components/DriversSelectionBar';\n\nconst ACTION_WIDTH = 100; // Keep in sync with styles.swipeAction.width\n\nconst DriversScreen: React.FC = () => {\n  const { isDark } = useTheme();\n  const styles = useMemo(() => createDriversScreenStyles(isDark), [isDark]);\n  const { t } = useI18n();\n  const { user } = useAuth();\n  const {\n    drivers,\n    filteredDrivers,\n    favorites,\n    loading,\n    loadingMore,\n    hasMore,\n    searchQuery,\n    setSearchQuery,\n    toggleFavorite,\n    restoreFavorites,\n    loadMoreDrivers,\n    handleRefresh,\n    removeDriver,\n    removeDrivers,\n  } = useDriversList();\n  const navigation = useNavigation<StackNavigationProp<ClientStackParamList | DriverStackParamList>>();\n  const [lastBookmarkedId, setLastBookmarkedId] = useState<string | null>(null);\n  const [pausedDrivers, setPausedDrivers] = useState<Set<string>>(new Set());\n  const [deletedDrivers, setDeletedDrivers] = useState<Set<string>>(new Set());\n\n  // Фильтры/сортировки для чипов в хедере\n  const [activeFilters, setActiveFilters] = useState<{ \n    all?: boolean;\n    online?: boolean; \n    priceAsc?: boolean; \n    priceDesc?: boolean; \n    rating45?: boolean;\n    vip?: boolean;\n    dailyTrips?: boolean;\n    economy?: boolean;\n  }>({ \n    all: true,\n    online: false, priceAsc: false, priceDesc: false, rating45: false, vip: false, dailyTrips: false, economy: false \n  });\n\n  const onSelectFilter = useCallback((key: 'all' | 'online' | 'priceAsc' | 'priceDesc' | 'rating45' | 'vip' | 'nearby' | 'fastDispatch' | 'economy' | 'dailyTrips') => {\n    setActiveFilters(prev => {\n      const base = { all: false, online: false, priceAsc: false, priceDesc: false, rating45: false, vip: false, dailyTrips: false, economy: false } as typeof prev;\n      if (key === 'all') return { ...base, all: true };\n      // Эксклюзивно: только один активен. Повторное нажатие возвращает к All\n      if ((prev as any)[key]) {\n        return { ...base, all: true };\n      }\n      switch (key) {\n        case 'online':\n          return { ...base, online: true };\n        case 'priceAsc':\n          return { ...base, priceAsc: true };\n        case 'priceDesc':\n          return { ...base, priceDesc: true };\n        case 'rating45':\n          return { ...base, rating45: true };\n        case 'vip':\n          return { ...base, vip: true };\n        case 'dailyTrips':\n          return { ...base, dailyTrips: true };\n        case 'economy':\n          return { ...base, economy: true };\n        default:\n          return prev;\n      }\n    });\n  }, []);\n\n  // Загрузка сохраненных статусов при монтировании\n  useEffect(() => {\n    loadSavedStatuses();\n  }, []);\n\n  const loadSavedStatuses = async () => {\n    try {\n      const [savedFavorites, savedPaused, savedDeleted, savedLastBookmarked] = await Promise.all([\n        AsyncStorage.getItem('driver_favorites'),\n        AsyncStorage.getItem('driver_paused'),\n        AsyncStorage.getItem('driver_deleted'),\n        AsyncStorage.getItem('driver_last_bookmarked'),\n      ]);\n\n      if (savedFavorites) {\n        restoreFavorites(JSON.parse(savedFavorites));\n      }\n      if (savedPaused) {\n        setPausedDrivers(new Set(JSON.parse(savedPaused)));\n      }\n      if (savedDeleted) {\n        setDeletedDrivers(new Set(JSON.parse(savedDeleted)));\n      }\n      if (savedLastBookmarked) {\n        setLastBookmarkedId(JSON.parse(savedLastBookmarked));\n      }\n    } catch (error) {\n      console.error('Error loading saved statuses:', error);\n    }\n  };\n\n  // Фильтрация водителей\n  const originalIndexById = useMemo(() => {\n    const map: Record<string, number> = {};\n    drivers.forEach((d, idx) => {\n      map[d.id] = idx;\n    });\n    return map;\n  }, [drivers]);\n\n  const parsePrice = (driver: Driver): number => {\n    const priceStr = (driver as any).price ?? '';\n    const match = priceStr.match(/\\d+(?:[.,]\\d+)?/);\n    return match ? parseFloat(match[0].replace(',', '.')) : Number.POSITIVE_INFINITY;\n  };\n\n  const filteredDriversWithFilters = useMemo(() => {\n    const query = searchQuery.toLowerCase().trim();\n    const filtered = query\n      ? filteredDrivers.filter((driver) =>\n          driver.first_name?.toLowerCase().includes(query) ||\n          driver.last_name?.toLowerCase().includes(query) ||\n          driver.vehicle_brand?.toLowerCase().includes(query) ||\n          driver.vehicle_model?.toLowerCase().includes(query)\n        )\n      : filteredDrivers;\n\n    // Исключаем удаленных водителей\n    let notDeleted = filtered.filter((driver) => !deletedDrivers.has(driver.id));\n\n    // Фильтр по онлайн, если активен\n    if (activeFilters.online) {\n      notDeleted = notDeleted.filter(driver => !!driver.isAvailable);\n    }\n\n    // Фильтр по рейтингу 4.5+\n    if (activeFilters.rating45) {\n      notDeleted = notDeleted.filter(driver => (driver.rating ?? 0) >= 4.5);\n    }\n\n    // Фильтр VIP (как суррогат — высокий рейтинг)\n    if (activeFilters.vip) {\n      notDeleted = notDeleted.filter(driver => (driver.rating ?? 0) >= 4.8);\n    }\n\n    // Фильтр Ежедневные поездки (по расписанию из моков)\n    if (activeFilters.dailyTrips) {\n      notDeleted = notDeleted.filter((driver) => {\n        const schedule = (driver as any).schedule?.toLowerCase?.() ?? '';\n        return schedule.includes('пн-пт') || schedule.includes('пн-сб') || schedule.includes('-');\n      });\n    }\n\n    // Эконом — низкая цена по мок-цене\n    if (activeFilters.economy) {\n      notDeleted = notDeleted.filter((driver) => parsePrice(driver) <= 20);\n    }\n\n    const mapped = notDeleted.map(d => ({ \n      ...d, \n      isFavorite: favorites.has(d.id),\n      isPaused: pausedDrivers.has(d.id)\n    }));\n\n    // Сортировка по цене при активных чипах\n    if (activeFilters.priceAsc || activeFilters.priceDesc) {\n      mapped.sort((a, b) => {\n        const pa = parsePrice(a);\n        const pb = parsePrice(b);\n        return activeFilters.priceAsc ? pa - pb : pb - pa;\n      });\n    } else {\n      mapped.sort((a, b) => {\n        const aIsPinned = lastBookmarkedId != null && a.id === lastBookmarkedId && a.isFavorite;\n        const bIsPinned = lastBookmarkedId != null && b.id === lastBookmarkedId && b.isFavorite;\n        if (aIsPinned !== bIsPinned) return aIsPinned ? -1 : 1;\n        if (a.isFavorite !== b.isFavorite) return a.isFavorite ? -1 : 1;\n        return (originalIndexById[a.id] ?? 0) - (originalIndexById[b.id] ?? 0);\n      });\n    }\n\n    return mapped;\n  }, [filteredDrivers, searchQuery, favorites, pausedDrivers, deletedDrivers, activeFilters, lastBookmarkedId, originalIndexById]);\n\n  const togglePause = useCallback((driverId: string) => {\n    const driver = drivers.find(d => d.id === driverId);\n    if (!driver) return;\n\n    const isCurrentlyPaused = pausedDrivers.has(driverId);\n    const driverName = `${driver.first_name} ${driver.last_name}`;\n    \n    // Умная логика ролей\n    const isDriver = user?.role === 'driver';\n    \n    // Выбираем правильные ключи в зависимости от состояния\n    let titleKey, messageKey;\n    if (isDriver) {\n      titleKey = isCurrentlyPaused ? 'driver.tripDialogs.pauseTrip.resume' : 'driver.tripDialogs.pauseTrip.title';\n      messageKey = isCurrentlyPaused ? 'driver.tripDialogs.pauseTrip.resumeMessage' : 'driver.tripDialogs.pauseTrip.message';\n    } else {\n      titleKey = isCurrentlyPaused ? 'client.driversScreen.alerts.resumeTripTitle' : 'client.driversScreen.alerts.pauseTripTitle';\n      messageKey = isCurrentlyPaused ? 'client.driversScreen.alerts.resumeTripMessage' : 'client.driversScreen.alerts.pauseTripMessage';\n    }\n    const nameKey = isDriver ? 'clientName' : 'driverName';\n    \n    Alert.alert(\n      t(titleKey),\n      t(messageKey, { [nameKey]: driverName }),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        {\n          text: t('common.confirm'),\n          onPress: async () => {\n            setPausedDrivers(prev => {\n              const next = new Set(prev);\n              if (isCurrentlyPaused) {\n                next.delete(driverId);\n              } else {\n                next.add(driverId);\n              }\n              return next;\n            });\n\n            // Сохраняем в AsyncStorage\n            try {\n              const newPausedDrivers = isCurrentlyPaused\n                ? new Set([...pausedDrivers].filter(id => id !== driverId))\n                : new Set([...pausedDrivers, driverId]);\n              \n              await AsyncStorage.setItem('driver_paused', JSON.stringify([...newPausedDrivers]));\n            } catch (error) {\n              console.error('Error saving paused status:', error);\n            }\n\n            // TODO: Обновить статус в БД\n            console.log(`${isCurrentlyPaused ? 'Resume' : 'Pause'} trip for ${isDriver ? 'client' : 'driver'}:`, driverId);\n            // Закрываем свайп после подтверждения\n            try { swipeRefs.current[driverId]?.close?.(); } catch (error) {\n              console.error('Error closing swipe:', error);\n            }\n          }\n        }\n      ]\n    );\n  }, [drivers, pausedDrivers, t, user?.role]);\n\n  const [selectionMode, setSelectionMode] = useState(false);\n  const [selectedIds, setSelectedIds] = useState<Set<string>>(new Set());\n  const [notificationsModalVisible, setNotificationsModalVisible] = useState(false);\n  const [filterExpanded, setFilterExpanded] = useState(false);\n  const filterExpandAnim = useRef(new Animated.Value(0)).current;\n  // ITEMS_PER_PAGE и mock удалены из экрана; данные приходят из useDriversList\n  \n  // Индивидуальные состояния переносятся внутрь элемента DriverListItem\n\n  // Keep refs to swipeable rows to close them programmatically\n  const swipeRefs = useRef<Record<string, RNSwipeable | null>>({});\n  const openSwipeRef = useRef<RNSwipeable | null>(null);\n\n  // Загрузка/фильтрация вынесена в useDriversList\n\n  const toggleSelect = (id: string) => {\n    setSelectedIds(prev => {\n      const next = new Set(prev);\n      next.has(id) ? next.delete(id) : next.add(id);\n      return next;\n    });\n  };\n\n  const openDriverDetails = (driver: Driver) => {\n    if (selectionMode) {\n      toggleSelect(driver.id);\n      return;\n    }\n\n    Alert.alert(\n      t('client.driversScreen.alerts.selectDriverTitle'),\n      t('client.driversScreen.alerts.selectDriverMessage', {\n        firstName: driver.first_name,\n        lastName: driver.last_name,\n      }),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        { \n          text: t('common.select'), \n          onPress: () => navigation.navigate('Map')\n        }\n      ]\n    );\n  };\n\n  const handleDriverPress = (driver: Driver) => {\n    if (selectionMode) {\n      toggleSelect(driver.id);\n    } else {\n      openDriverDetails(driver);\n    }\n  };\n\n  const closeOpenSwipe = useCallback(() => {\n    if (openSwipeRef.current) {\n      try { openSwipeRef.current.close(); } catch (error) {\n        console.error('Error closing open swipe:', error);\n      }\n      openSwipeRef.current = null;\n    }\n  }, []);\n\n  const toggleFilter = useCallback(() => {\n    const toValue = filterExpanded ? 0 : 1;\n    setFilterExpanded(!filterExpanded);\n    \n    Animated.timing(filterExpandAnim, {\n      toValue,\n      duration: 300,\n      useNativeDriver: false,\n    }).start();\n  }, [filterExpanded, filterExpandAnim]);\n\n\n\n\n  const handleChatWithDriver = useCallback((driver: Driver) => {\n    try {\n      // Для обеих ролей используем одинаковую навигацию к стеку чатов\n      navigation.navigate('Chat' as any);\n      \n      setTimeout(() => {\n        // Навигируем к конкретному чату внутри стека\n        (navigation as any).navigate('Chat', {\n          screen: 'ChatConversation',\n          params: {\n            driverId: driver.id,\n            driverName: `${driver.first_name} ${driver.last_name}`,\n            driverCar: `${driver.vehicle_brand} ${driver.vehicle_model}`,\n            driverNumber: driver.phone_number,\n            driverRating: driver.rating.toString(),\n            driverStatus: driver.isAvailable ? 'online' : 'offline'\n          }\n        });\n      }, 100);\n    } catch (error) {\n      console.warn('Chat navigation failed, falling back to Chat tab:', error);\n      navigation.navigate('Chat' as any);\n    }\n  }, [navigation]);\n\n  // Анимации и call-sheet теперь инкапсулированы в DriverListItem\n\n  const renderDriverItem = ({ item }: { item: Driver & { isFavorite?: boolean } }) => (\n    <DriverListItem\n      driver={{ ...item, isFavorite: favorites.has(item.id) }}\n      isDark={isDark}\n      styles={styles}\n      actionWidth={ACTION_WIDTH}\n      SwipeableComponent={Swipeable}\n      swipeRefSetter={(id, ref) => {\n        swipeRefs.current[id] = ref as RNSwipeable | null;\n      }}\n      onSwipeableWillOpen={(id) => {\n        if (openSwipeRef.current && openSwipeRef.current !== swipeRefs.current[id]) {\n          try {\n            openSwipeRef.current.close();\n          } catch (error) {\n            console.error('Error closing previous swipe:', error);\n          }\n        }\n        openSwipeRef.current = swipeRefs.current[id] ?? null;\n      }}\n      onSwipeableClose={(id) => {\n        if (openSwipeRef.current === swipeRefs.current[id]) {\n          openSwipeRef.current = null;\n        }\n      }}\n      onToggleFavorite={(driverId) => {\n        toggleFavorite(driverId);\n        try { swipeRefs.current[driverId]?.close?.(); } catch (error) {\n          console.error('Error closing swipe on toggle favorite:', error);\n        }\n      }}\n      onDelete={(driverId) => {\n        deleteDriver(driverId);\n        try { swipeRefs.current[driverId]?.close?.(); } catch (error) {\n          console.error('Error closing swipe on toggle favorite:', error);\n        }\n      }}\n      onChat={handleChatWithDriver}\n      onTogglePause={togglePause}\n      role={user?.role === 'driver' ? 'driver' : 'client'}\n    />\n  );\n\n  const selectAll = () => {\n    if (selectedIds.size === filteredDrivers.length) {\n      setSelectedIds(new Set());\n    } else {\n      setSelectedIds(new Set(filteredDrivers.map(d => d.id)));\n    }\n  };\n\n  const bookSelected = () => {\n    if (selectedIds.size === 0) return;\n\n    Alert.alert(\n      t('client.driversScreen.alerts.bookDriversTitle'),\n      t('client.driversScreen.alerts.bookDriversMessage', { count: selectedIds.size }),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        {\n          text: t('client.driversScreen.common.book'),\n          onPress: () => {\n            navigation.navigate('Map');\n            setSelectionMode(false);\n            setSelectedIds(new Set());\n          }\n        }\n      ]\n    );\n  };\n\n  const deleteSelected = () => {\n    if (selectedIds.size === 0) return;\n\n    Alert.alert(\n      t('client.driversScreen.alerts.deleteDriversTitle'),\n      t('client.driversScreen.alerts.deleteDriversMessage'),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        {\n          text: t('common.delete'),\n          style: 'destructive',\n          onPress: () => {\n            removeDrivers(selectedIds);\n            setSelectionMode(false);\n            setSelectedIds(new Set());\n          }\n        }\n      ]\n    );\n  };\n\n  // toggleFavorite уже предоставлен useDriversList\n\n  const deleteDriver = (driverId: string) => {\n    Alert.alert(\n      t('client.driversScreen.alerts.deleteOneDriverTitle'),\n      t('client.driversScreen.alerts.deleteOneDriverMessage'),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        {\n          text: t('common.delete'),\n          style: 'destructive',\n          onPress: async () => {\n            setDeletedDrivers(prev => {\n              const next = new Set(prev);\n              next.add(driverId);\n              return next;\n            });\n\n            // Сохраняем в AsyncStorage\n            try {\n              const newDeletedDrivers = new Set([...deletedDrivers, driverId]);\n              await AsyncStorage.setItem('driver_deleted', JSON.stringify([...newDeletedDrivers]));\n            } catch (error) {\n              console.error('Error saving deleted status:', error);\n            }\n\n            console.log('Driver deleted:', driverId);\n          }\n        }\n      ]\n    );\n  };\n\n  const renderEmptyState = () => <EmptyDriversState styles={styles} isDark={isDark} loading={loading} />;\n\n  const renderFooter = () => (loadingMore ? <LoadingFooter styles={styles} /> : null);\n\n  // CallSheet удален: реализован внутри DriverListItem\n\n  const onListScrollBegin = (_e: NativeSyntheticEvent<NativeScrollEvent>) => {\n    closeOpenSwipe();\n  };\n\n\n\n  return (\n    <View style={styles.container}>\n      <SafeAreaView style={styles.safeAreaTop}>\n        <DriversHeader\n          styles={styles}\n          isDark={isDark}\n          filterExpandAnim={filterExpandAnim}\n          onToggleFilter={toggleFilter}\n          onOpenNotifications={() => setNotificationsModalVisible(true)}\n          activeFilters={activeFilters}\n          onSelectFilter={onSelectFilter}\n        />\n\n\n\n        <DriversSearchBar styles={styles} isDark={isDark} value={searchQuery} onChange={setSearchQuery} />\n      </SafeAreaView>\n\n      <FlatList\n        data={filteredDrivers}\n        keyExtractor={(item) => item.id}\n        renderItem={renderDriverItem}\n        style={styles.flatListContainer}\n        contentContainerStyle={styles.driversList}\n        ListEmptyComponent={renderEmptyState}\n        ListFooterComponent={renderFooter}\n        refreshing={loading}\n        onRefresh={handleRefresh}\n        onEndReached={loadMoreDrivers}\n        onEndReachedThreshold={0.5}\n        initialNumToRender={3}\n        maxToRenderPerBatch={3}\n        windowSize={5}\n        removeClippedSubviews={true}\n        onScrollBeginDrag={onListScrollBegin}\n        showsVerticalScrollIndicator={true}\n        scrollEnabled={true}\n        bounces={true}\n        alwaysBounceVertical={false}\n        nestedScrollEnabled={true}\n        keyboardShouldPersistTaps=\"handled\"\n        scrollEventThrottle={16}\n        getItemLayout={undefined}\n      />\n\n      {selectionMode && (\n        <DriversSelectionBar\n          styles={styles}\n          selectedCount={selectedIds.size}\n          totalCount={filteredDrivers.length}\n          onSelectAll={selectAll}\n          onBook={bookSelected}\n        />\n      )}\n\n      <NotificationsModal\n        visible={notificationsModalVisible}\n        onClose={() => setNotificationsModalVisible(false)}\n      />\n\n      {/* Удалены индивидуальные CallSheet: теперь в элементе списка */}\n\n    </View>\n  );\n};\n\nexport default DriversScreen;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/client/HelpScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1179,1182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1179,1182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6589,6592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6589,6592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useMemo, useState } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, Linking, ActivityIndicator, RefreshControl } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { ClientScreenProps } from '../../types/navigation';\nimport { HelpScreenStyles as styles, getHelpScreenStyles } from '../../styles/screens/profile/HelpScreen.styles';\nimport { useI18n } from '../../hooks/useI18n';\nimport RulesModal from '../../components/RulesModal';\nimport BookingHelpModal from '../../components/BookingHelpModal';\nimport PaymentHelpModal from '../../components/PaymentHelpModal';\nimport SafetyHelpModal from '../../components/SafetyHelpModal';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useAuth } from '../../context/AuthContext';\nimport useHelpContent from '../../shared/hooks/useHelpContent';\nimport { getCurrentColors } from '../../constants/colors';\nimport type { HelpSection, HelpModalType } from '../../shared/types/help';\n\n/**\n * Экран помощи и правил\n * \n * TODO:\n * 1. Реализовать поиск по FAQ\n * 2. Подключить чат поддержки\n */\n\ntype HelpScreenProps = ClientScreenProps<'Help'> | { navigation: any };\n\nconst HelpScreen: React.FC<HelpScreenProps> = ({ navigation }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { user } = useAuth();\n  const dynamicStyles = useMemo(() => getHelpScreenStyles(isDark), [isDark]);\n  const currentColors = useMemo(() => getCurrentColors(isDark), [isDark]);\n\n  const isDriver = user?.role === 'driver';\n\n  const getScreenTitle = useCallback(() => {\n    return isDriver ? t('help.title') : t('help.title');\n  }, [isDriver, t]);\n\n  const { sections, contact, loading, refreshing, errorKey, refresh } = useHelpContent();\n  const [activeModal, setActiveModal] = useState<HelpModalType | null>(null);\n  const [supportLoading, setSupportLoading] = useState(false);\n  const [supportErrorKey, setSupportErrorKey] = useState<string | null>(null);\n\n  const displaySections = useMemo(\n    () =>\n      sections.map(section => ({\n        section,\n        title: t(section.titleKey),\n        description: t(section.descriptionKey),\n      })),\n    [sections, t]\n  );\n\n  const isLoading = loading && displaySections.length === 0;\n\n  const handleSectionPress = useCallback(\n    async (section: HelpSection) => {\n      if (section.modalType) {\n        setActiveModal(section.modalType);\n        return;\n      }\n\n      if (section.action?.type === 'navigation') {\n        navigation.navigate(section.action.value as never);\n        return;\n      }\n\n      if (section.action?.type === 'link') {\n        try {\n          const url = section.action.value;\n          const canOpen = await Linking.canOpenURL(url);\n          if (canOpen) {\n            await Linking.openURL(url);\n            return;\n          }\n          if (contact.fallbackUrl) {\n            await Linking.openURL(contact.fallbackUrl);\n          }\n        } catch (linkError) {\n          console.error('Help link open failed', linkError);\n          setSupportErrorKey('errors.unknownError');\n        }\n      }\n    },\n    [contact.fallbackUrl, navigation]\n  );\n\n  const handleSupportContact = useCallback(async () => {\n    const normalizedNumber = (contact.whatsappNumber || '').replace(/[^\\d]/g, '');\n    if (!normalizedNumber) {\n      setSupportErrorKey('support.whatsappError');\n      return;\n    }\n\n    const messageKey = contact.messageKey || 'support.whatsappMessage';\n    const message = t(messageKey);\n    const encodedMessage = encodeURIComponent(message);\n    const whatsappUrl = `whatsapp://send?phone=${normalizedNumber}&text=${encodedMessage}`;\n    const fallbackBase = contact.fallbackUrl || `https://wa.me/${normalizedNumber}`;\n    const fallbackUrl = fallbackBase.includes('?')\n      ? `${fallbackBase}&text=${encodedMessage}`\n      : `${fallbackBase}?text=${encodedMessage}`;\n\n    setSupportErrorKey(null);\n    setSupportLoading(true);\n\n    try {\n      const canOpen = await Linking.canOpenURL(whatsappUrl);\n      if (canOpen) {\n        await Linking.openURL(whatsappUrl);\n      } else {\n        await Linking.openURL(fallbackUrl);\n      }\n    } catch (error) {\n      console.error('Support contact failed', error);\n      setSupportErrorKey('support.whatsappError');\n    } finally {\n      setSupportLoading(false);\n    }\n  }, [contact.fallbackUrl, contact.messageKey, contact.whatsappNumber, t]);\n\n  const closeModal = useCallback(() => {\n    setActiveModal(null);\n  }, []);\n\n  const errorMessageKey = useMemo(() => errorKey ?? supportErrorKey, [errorKey, supportErrorKey]);\n  const errorMessage = useMemo(\n    () => (errorMessageKey ? t(errorMessageKey) : null),\n    [errorMessageKey, t]\n  );\n\n  return (\n    <View style={[styles.container, dynamicStyles.container]}>\n      <View style={[styles.header, dynamicStyles.header]}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Ionicons name=\"arrow-back\" size={24} color={currentColors.primary} />\n        </TouchableOpacity>\n        <Text style={[styles.title, dynamicStyles.title]}>{getScreenTitle()}</Text>\n        <View style={styles.placeholder} />\n      </View>\n      \n      <ScrollView\n        style={styles.content}\n        contentContainerStyle={styles.contentContainer}\n        showsVerticalScrollIndicator={false}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={refresh}\n            tintColor={currentColors.info}\n          />\n        }\n      >\n        {isLoading ? (\n          <View style={styles.loadingContainer}>\n            <ActivityIndicator size=\"large\" color={currentColors.info} />\n          </View>\n        ) : (\n          <>\n            <Text style={[styles.description, dynamicStyles.description]}>\n              {t('help.description')}\n            </Text>\n\n            {errorMessage && (\n              <View style={styles.errorBox}>\n                <Ionicons name=\"warning-outline\" size={20} color={currentColors.warning} />\n                <Text style={[styles.errorText, dynamicStyles.helpDescription]}>{errorMessage}</Text>\n              </View>\n            )}\n\n            {displaySections.map(({ section, title, description }) => (\n              <TouchableOpacity\n                key={section.id}\n                style={[styles.helpItem, dynamicStyles.helpItem]}\n                onPress={() => handleSectionPress(section)}\n                activeOpacity={0.7}\n              >\n                <View style={[styles.helpIcon, dynamicStyles.helpIcon]}>\n                  <Ionicons name={section.icon as any} size={24} color={isDark ? '#fff' : '#003366'} />\n                </View>\n                <View style={styles.helpInfo}>\n                  <Text style={[styles.helpTitle, dynamicStyles.helpTitle]}>{title}</Text>\n                  <Text style={[styles.helpDescription, dynamicStyles.helpDescription]}>{description}</Text>\n                </View>\n                <Ionicons name=\"chevron-forward\" size={20} color={isDark ? '#666' : '#ccc'} />\n              </TouchableOpacity>\n            ))}\n\n            <View style={styles.contactSection}>\n              <Text style={[styles.contactTitle, dynamicStyles.contactTitle]}>{t('help.contactTitle')}</Text>\n              <Text style={[styles.contactDescription, dynamicStyles.contactDescription]}>\n                {t('help.contactDescription')}\n              </Text>\n              <TouchableOpacity\n                style={[styles.contactButton, supportLoading && styles.contactButtonDisabled]}\n                onPress={handleSupportContact}\n                activeOpacity={0.8}\n                disabled={supportLoading}\n              >\n                {supportLoading ? (\n                  <ActivityIndicator color=\"#fff\" />\n                ) : (\n                  <Ionicons name=\"logo-whatsapp\" size={24} color=\"#fff\" />\n                )}\n                <Text style={styles.contactButtonText}>{t('help.contactWhatsApp')}</Text>\n              </TouchableOpacity>\n            </View>\n          </>\n        )}\n      </ScrollView>\n\n      <RulesModal visible={activeModal === 'rules'} onClose={closeModal} />\n      <BookingHelpModal visible={activeModal === 'booking'} onClose={closeModal} />\n      <PaymentHelpModal visible={activeModal === 'payment'} onClose={closeModal} />\n      <SafetyHelpModal visible={activeModal === 'safety'} onClose={closeModal} />\n    </View>\n  );\n};\n\nexport default HelpScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/client/PaymentHistoryScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1167,1170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1167,1170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'resetFilter' is assigned a value but never used.","line":43,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, RefreshControl, ActivityIndicator } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { formatDateWithLanguage, formatTime } from '../../utils/formatters';\nimport { ClientScreenProps } from '../../types/navigation';\nimport { PaymentHistoryScreenStyles as styles, getPaymentHistoryScreenStyles } from '../../styles/screens/profile/PaymentHistoryScreen.styles';\nimport PaymentHistoryFilter, { PaymentFilter } from '../../components/PaymentHistoryFilter';\nimport { colors } from '../../constants/colors';\nimport { useAuth } from '../../context/AuthContext';\nimport { usePaymentHistory } from '../../shared/hooks/usePaymentHistory';\n\n/**\n * Экран истории платежей\n * \n * Интегрирован с PaymentHistoryService и usePaymentHistory hook\n * Поддерживает DEV/PROD режимы, фильтрацию, пагинацию и обновление\n */\n\ntype PaymentHistoryScreenProps = ClientScreenProps<'PaymentHistory'> | { navigation: any };\n\nconst PaymentHistoryScreen: React.FC<PaymentHistoryScreenProps> = ({ navigation }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const currentColors = isDark ? colors.dark : colors.light;\n  const dynamicStyles = getPaymentHistoryScreenStyles(isDark);\n  \n  const isDriver = user?.role === 'driver';\n  \n  // Используем новый хук для управления историей платежей\n  const {\n    filteredTransactions,\n    loading,\n    refreshing,\n    errorKey,\n    hasMore,\n    currentFilter,\n    setFilter,\n    resetFilter,\n    refresh,\n    loadMore,\n    clearError,\n    getTransactionIcon,\n    getTransactionColor,\n    getStatusColor,\n    formatAmount,\n  } = usePaymentHistory();\n  \n  const [filterVisible, setFilterVisible] = useState(false);\n  \n  // Условная логика для разных ролей\n  const getScreenTitle = () => {\n    return isDriver ? t('driver.paymentHistory.title') : t('client.paymentHistory.title');\n  };\n  \n  const getEmptyStateTitle = () => {\n    return isDriver ? t('driver.paymentHistory.noPayments') : t('client.paymentHistory.noPayments');\n  };\n  \n  const getEmptyStateDescription = () => {\n    return isDriver ? t('driver.paymentHistory.emptyDescription') : t('client.paymentHistory.emptyDescription');\n  };\n  \n  // Обработчики\n  const handleFilterApply = (filter: PaymentFilter) => {\n    setFilter(filter);\n    setFilterVisible(false);\n  };\n  \n  const handleLoadMore = () => {\n    if (hasMore && !loading && !refreshing) {\n      loadMore();\n    }\n  };\n  \n  const handleRefresh = () => {\n    refresh();\n  };\n\n  // Показываем индикатор загрузки при первой загрузке\n  if (loading && filteredTransactions.length === 0) {\n    return (\n      <View style={[styles.container, dynamicStyles.container]}>\n        <View style={[styles.header, dynamicStyles.header]}>\n          <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n            <Ionicons name=\"arrow-back\" size={24} color={currentColors.primary} />\n          </TouchableOpacity>\n          <Text style={[styles.title, dynamicStyles.title]}>{getScreenTitle()}</Text>\n          <View style={styles.filterButton} />\n        </View>\n        \n        <View style={[styles.loadingContainer, { justifyContent: 'center', alignItems: 'center', flex: 1 }]}>\n          <ActivityIndicator size=\"large\" color={currentColors.primary} />\n          <Text style={[styles.loadingText, dynamicStyles.loadingText]}>\n            {t('common.loading')}\n          </Text>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <View style={[styles.container, dynamicStyles.container]}>\n      <View style={[styles.header, dynamicStyles.header]}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Ionicons name=\"arrow-back\" size={24} color={currentColors.primary} />\n        </TouchableOpacity>\n        <Text style={[styles.title, dynamicStyles.title]}>{getScreenTitle()}</Text>\n        <TouchableOpacity \n          style={styles.filterButton}\n          onPress={() => setFilterVisible(true)}\n        >\n          <Ionicons name=\"filter\" size={24} color={currentColors.primary} />\n        </TouchableOpacity>\n      </View>\n      \n      {/* Показываем ошибку если есть */}\n      {errorKey && (\n        <View style={[styles.errorBox, dynamicStyles.errorBox]}>\n          <Ionicons name=\"alert-circle\" size={20} color=\"#e53935\" />\n          <Text style={[styles.errorText, dynamicStyles.errorText]}>\n            {t(errorKey)}\n          </Text>\n          <TouchableOpacity onPress={clearError} style={styles.errorCloseButton}>\n            <Ionicons name=\"close\" size={16} color=\"#e53935\" />\n          </TouchableOpacity>\n        </View>\n      )}\n      \n      <ScrollView \n        style={styles.content} \n        contentContainerStyle={[styles.contentContainer, { paddingTop: 16 }]}\n        showsVerticalScrollIndicator={false}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={handleRefresh}\n            colors={[currentColors.primary]}\n            tintColor={currentColors.primary}\n          />\n        }\n        onScroll={({ nativeEvent }) => {\n          const { layoutMeasurement, contentOffset, contentSize } = nativeEvent;\n          const paddingToBottom = 20;\n          if (layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom) {\n            handleLoadMore();\n          }\n        }}\n        scrollEventThrottle={400}\n      >\n        {filteredTransactions.length === 0 ? (\n          <View style={[styles.emptyState, { alignItems: 'center', justifyContent: 'center' }]}>\n            <Ionicons name=\"document-outline\" size={64} color={currentColors.textSecondary} />\n            <Text style={[styles.emptyTitle, dynamicStyles.emptyTitle]}>{getEmptyStateTitle()}</Text>\n            <Text style={[styles.emptyDescription, dynamicStyles.emptyDescription]}>\n              {getEmptyStateDescription()}\n            </Text>\n          </View>\n        ) : (\n          <>\n            {filteredTransactions.map((transaction) => {\n              const title = transaction.translationKey \n                ? (() => {\n                    if (transaction.translationParams?.packageName) {\n                      // Для транзакций с пакетами используем переведенные названия\n                      const packageName = transaction.translationParams.packageName.split('_')[0];\n                      const translatedPackageName = t(`premium.packages.${packageName}`, { defaultValue: packageName });\n                      return t(transaction.translationKey, { ...transaction.translationParams, packageName: translatedPackageName });\n                    }\n                    return t(transaction.translationKey, transaction.translationParams);\n                  })()\n                : transaction.description;\n\n              return (\n                <View key={transaction.id} style={[styles.paymentItem, dynamicStyles.paymentItem]}>\n                  <View style={styles.paymentHeader}>\n                    <View style={styles.paymentInfo}>\n                      <Ionicons \n                        name={getTransactionIcon(transaction.type) as keyof typeof Ionicons.glyphMap} \n                        size={24} \n                        color={getTransactionColor(transaction.type)} \n                      />\n                      <View style={styles.paymentDetails}>\n                        <Text style={[styles.paymentTitle, dynamicStyles.paymentTitle]}>{title}</Text>\n                        <Text style={[styles.paymentDate, dynamicStyles.paymentDate]}>\n                          {formatDateWithLanguage(new Date(transaction.date), language, 'short')} • {formatTime(new Date(transaction.date), language)}\n                        </Text>\n                      </View>\n                    </View>\n                    <View style={styles.paymentAmount}>\n                      <Text style={[styles.amountText, { color: getTransactionColor(transaction.type) }]}>\n                        {formatAmount(transaction.amount, transaction.type)}\n                      </Text>\n                      <View style={[styles.statusBadge, { backgroundColor: getStatusColor(transaction.status) }]}>\n                        <Text style={styles.statusText}>\n                          {transaction.status === 'completed' ? t('client.paymentHistory.status.completed') : \n                           transaction.status === 'pending' ? t('client.paymentHistory.status.pending') : t('client.paymentHistory.status.failed')}\n                        </Text>\n                      </View>\n                    </View>\n                  </View>\n                  {transaction.description && (\n                    <Text style={[styles.paymentDescription, dynamicStyles.paymentDescription]}>{transaction.description}</Text>\n                  )}\n                </View>\n              );\n            })}\n            \n            {/* Индикатор загрузки следующей страницы */}\n            {hasMore && (\n              <View style={styles.loadingMoreContainer}>\n                <ActivityIndicator size=\"small\" color={currentColors.primary} />\n                <Text style={[styles.loadingMoreText, dynamicStyles.loadingMoreText]}>\n                  {t('common.loadingMore')}\n                </Text>\n              </View>\n            )}\n          </>\n        )}\n      </ScrollView>\n      \n      <PaymentHistoryFilter\n        visible={filterVisible}\n        onClose={() => setFilterVisible(false)}\n        onApply={handleFilterApply}\n        currentFilter={currentFilter}\n      />\n    </View>\n  );\n};\n\nexport default PaymentHistoryScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/client/ResidenceScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DriverStackParamList' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AddressService' is defined but never used.","line":9,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1282,1285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1282,1285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1295,1298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1295,1298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'route' is defined but never used.","line":29,"column":72,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":77}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, Alert, ActivityIndicator } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { getCurrentColors } from '../../constants/colors';\nimport { ClientScreenProps } from '../../types/navigation';\nimport { DriverStackParamList } from '../../types/driver/DriverNavigation';\nimport { ResidenceScreenStyles as styles, getResidenceScreenStyles } from '../../styles/screens/profile/ResidenceScreen.styles';\nimport AddressService, { Address } from '../../services/addressService';\nimport { useAddressCategories } from '../../shared/hooks/useAddressCategories';\nimport AddressModal from '../../components/AddressModal';\nimport { useAddresses } from '../../hooks/useAddresses';\nimport { useI18n } from '../../hooks/useI18n';\nimport { useAuth } from '../../context/AuthContext';\n\n/**\n * Экран резиденции\n * \n * TODO для интеграции с бэкендом:\n * 1. Заменить useState на useResidence hook\n * 2. Подключить ResidenceService для API вызовов\n * 3. Добавить обработку ошибок и загрузки\n * 4. Реализовать управление адресами\n * 5. Подключить геолокацию\n */\n\ntype ResidenceScreenProps = ClientScreenProps<'Residence'> | { navigation: any; route?: any };\n\nconst ResidenceScreen: React.FC<ResidenceScreenProps> = ({ navigation, route }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { user } = useAuth();\n  const { categories } = useAddressCategories();\n  const dynamicStyles = getResidenceScreenStyles(isDark);\n  const currentColors = getCurrentColors(isDark);\n  \n  const isDriver = user?.role === 'driver';\n  \n  // Условная логика для разных ролей\n  const getScreenTitle = () => {\n    return isDriver ? 'Мои адреса' : t('profile.residence.title');\n  };\n  const [showModal, setShowModal] = useState(false);\n  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add');\n  const [selectedAddress, setSelectedAddress] = useState<Address | null>(null);\n\n  const {\n    addresses,\n    loading,\n    error,\n    refreshAddresses,\n    addAddress,\n    updateAddress,\n    deleteAddress,\n    setDefaultAddress,\n  } = useAddresses();\n\n  // Функция для получения переведенного названия категории\n  const getCategoryLabel = (categoryKey: string): string => {\n    const category = categories.find(opt => opt.id === categoryKey);\n    return category ? category.label : categoryKey;\n  };\n\n  const handleAddAddress = () => {\n    setModalMode('add');\n    setSelectedAddress(null);\n    setShowModal(true);\n  };\n\n  const handleEditAddress = (address: Address) => {\n    setModalMode('edit');\n    setSelectedAddress(address);\n    setShowModal(true);\n  };\n\n  const handleDeleteAddress = (address: Address) => {\n    Alert.alert(\n      t('profile.residence.deleteConfirm'),\n      t('profile.residence.deleteMessage', { title: address.title }),\n      [\n        { text: t('profile.cancel'), style: 'cancel' },\n        { \n          text: t('profile.delete'), \n          style: 'destructive',\n          onPress: async () => {\n            const success = await deleteAddress(address.id);\n            if (success) {\n              await refreshAddresses();\n              Alert.alert(t('common.success'), t('profile.residence.deleteSuccess', { title: address.title }));\n            } else {\n              Alert.alert(t('common.error'), t('profile.residence.deleteError'));\n            }\n          }\n        },\n      ]\n    );\n  };\n\n  const handleSetDefault = async (address: Address) => {\n    const success = await setDefaultAddress(address.id);\n    if (success) {\n      await refreshAddresses();\n      Alert.alert(t('common.success'), t('profile.residence.setDefaultSuccess'));\n    } else {\n      Alert.alert(t('common.error'), t('profile.residence.setDefaultError'));\n    }\n  };\n\n  const handleSaveAddress = async (addressData: Omit<Address, 'id' | 'createdAt' | 'updatedAt'>) => {\n    try {\n      if (modalMode === 'add') {\n        const success = await addAddress(addressData);\n        if (success) {\n          setShowModal(false);\n          await refreshAddresses();\n          Alert.alert(t('common.success'), t('profile.residence.addSuccess'));\n        } else {\n          Alert.alert(t('common.error'), t('profile.residence.addError'));\n        }\n      } else if (modalMode === 'edit' && selectedAddress) {\n        const success = await updateAddress(selectedAddress.id, addressData);\n        if (success) {\n          setShowModal(false);\n          await refreshAddresses();\n          Alert.alert(t('common.success'), t('profile.residence.updateSuccess'));\n        } else {\n          Alert.alert(t('common.error'), t('profile.residence.updateError'));\n        }\n      }\n    } catch (error) {\n      Alert.alert(t('common.error'), t('profile.residence.saveError'));\n    }\n  };\n\n  return (\n    <View style={[styles.container, dynamicStyles.container]}>\n      <View style={[styles.header, dynamicStyles.header]}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Ionicons name=\"arrow-back\" size={24} color={currentColors.primary} />\n        </TouchableOpacity>\n        <Text style={[styles.title, dynamicStyles.title]}>{getScreenTitle()}</Text>\n        <View style={styles.headerSpacer} />\n      </View>\n      \n      <ScrollView \n        style={styles.content} \n        contentContainerStyle={[styles.contentContainer, { paddingTop: 20 }]}\n        showsVerticalScrollIndicator={false}\n      >\n        \n        {loading ? (\n          <View style={styles.emptyState}>\n            <ActivityIndicator size=\"large\" color=\"#003366\" />\n            <Text style={[styles.emptyStateText, dynamicStyles.emptyStateText]}>{t('profile.residence.loading')}</Text>\n          </View>\n        ) : error ? (\n          <View style={styles.emptyState}>\n            <Ionicons name=\"alert-circle-outline\" size={64} color=\"#f44336\" />\n            <Text style={[styles.emptyStateText, dynamicStyles.emptyStateText]}>{error}</Text>\n            <TouchableOpacity \n              style={styles.retryButton}\n              onPress={refreshAddresses}\n            >\n              <Text style={styles.retryButtonText}>{t('profile.residence.retry')}</Text>\n            </TouchableOpacity>\n          </View>\n        ) : addresses.length === 0 ? (\n          <View style={styles.emptyState}>\n            <Ionicons name=\"location-outline\" size={64} color=\"#ccc\" />\n            <Text style={[styles.emptyStateText, dynamicStyles.emptyStateText]}>\n              {t('profile.residence.emptyState')}\n            </Text>\n          </View>\n        ) : (\n          addresses.map((address) => (\n            <View key={address.id} style={[styles.addressItem, dynamicStyles.addressItem]}>\n              <View style={styles.addressHeader}>\n                                  <View style={styles.addressInfo}>\n                    <Text style={[styles.addressTitle, dynamicStyles.addressTitle]}>{address.title}</Text>\n                    <Text style={[styles.addressText, dynamicStyles.addressText]}>{address.address}</Text>\n                    {address.category && (\n                      <Text style={[styles.addressDescription, dynamicStyles.addressDescription]}>{getCategoryLabel(address.category)}</Text>\n                    )}\n                  </View>\n                <View style={styles.actionButtons}>\n                  {!address.isDefault && (\n                    <TouchableOpacity \n                      style={[styles.defaultButton, dynamicStyles.defaultButton]}\n                      onPress={() => handleSetDefault(address)}\n                    >\n                      <Ionicons name=\"star-outline\" size={18} color={isDark ? '#fff' : '#ffc107'} />\n                    </TouchableOpacity>\n                  )}\n                  <TouchableOpacity \n                    style={[styles.editButton, dynamicStyles.editButton]}\n                    onPress={() => handleEditAddress(address)}\n                  >\n                    <Ionicons name=\"pencil\" size={18} color={isDark ? '#fff' : '#2196f3'} />\n                  </TouchableOpacity>\n                  <TouchableOpacity \n                    style={[styles.deleteButton, dynamicStyles.deleteButton]}\n                    onPress={() => handleDeleteAddress(address)}\n                  >\n                    <Ionicons name=\"trash\" size={18} color=\"#f44336\" />\n                  </TouchableOpacity>\n                </View>\n              </View>\n              {address.isDefault && (\n                <View style={styles.defaultBadge}>\n                  <Text style={styles.defaultText}>{t('profile.residence.defaultBadge')}</Text>\n                </View>\n              )}\n            </View>\n          ))\n        )}\n      </ScrollView>\n\n      <TouchableOpacity style={styles.floatingAddButton} onPress={handleAddAddress}>\n        <Ionicons name=\"add\" size={24} color=\"#fff\" />\n      </TouchableOpacity>\n\n      <AddressModal\n        visible={showModal}\n        onClose={() => {\n          setShowModal(false);\n          setSelectedAddress(null);\n        }}\n        onSave={handleSaveAddress}\n        address={selectedAddress}\n        mode={modalMode}\n        addresses={addresses}\n        setDefaultAddress={setDefaultAddress}\n      />\n    </View>\n  );\n};\n\nexport default ResidenceScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/client/SettingsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DriverStackParamList' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1410,1413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1410,1413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'theme' is assigned a value but never used.","line":32,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'openNotificationSettings' is assigned a value but never used.","line":54,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, Switch, Alert, ActivityIndicator, Modal } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { ClientScreenProps } from '../../types/navigation';\nimport { DriverStackParamList } from '../../types/driver/DriverNavigation';\nimport { SettingsScreenStyles as styles, getSettingsScreenColors } from '../../styles/screens/profile/SettingsScreen.styles';\nimport { LanguageModalStyles as languageModalStyles, getLanguageModalColors } from '../../styles/components/LanguageModal.styles';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { useNotifications } from '../../hooks/useNotifications';\nimport { useAuth } from '../../context/AuthContext';\nimport { ProfileService } from '../../services/ProfileService';\nimport { DriverProfileService } from '../../services/driver/DriverProfileService';\nimport { getCurrentColors } from '../../constants/colors';\n\n\n/**\n * Экран настроек\n * \n * TODO для интеграции с бэкендом:\n * 1. Заменить useState на useSettings hook\n * 2. Подключить SettingsService для API вызовов\n * 3. Добавить обработку ошибок и загрузки\n * 4. Реализовать сохранение настроек\n * 5. Подключить push-уведомления\n * 6. Добавить синхронизацию\n */\n\ntype SettingsScreenProps = ClientScreenProps<'Settings'> | { navigation: any };\n\nconst SettingsScreen: React.FC<SettingsScreenProps> = ({ navigation }) => {\n  const { isDark, theme, toggleTheme } = useTheme();\n  const { language, languageOptions, setLanguage, t } = useI18n();\n  const { logout, user } = useAuth();\n  \n  const isDriver = user?.role === 'driver';\n  \n  // Условная логика для разных ролей\n  const getScreenTitle = () => {\n    return isDriver ? t('driver.settings') : t('profile.settings.title');\n  };\n\n  const currentColors = getCurrentColors(isDark);\n  const languageModalColors = getLanguageModalColors(isDark);\n  const settingsColors = getSettingsScreenColors(isDark);\n  \n  // Хук для push-уведомлений\n  const {\n    settings: notificationSettings,\n    permissions,\n    isLoading: notificationsLoading,\n    togglePushNotifications,\n    requestPermissions,\n    openNotificationSettings,\n  } = useNotifications();\n  \n  const [autoLocation, setAutoLocation] = useState(true);\n  const [languageModalVisible, setLanguageModalVisible] = useState(false);\n\n  // Убираем автоматическую синхронизацию с системным языком\n  // Теперь язык будет сохраняться как выбрал пользователь\n\n  const handleLanguageChange = () => {\n    setLanguageModalVisible(true);\n  };\n\n  const selectLanguage = async (langCode: typeof language) => {\n    try {\n      await setLanguage(langCode);\n      setLanguageModalVisible(false);\n    } catch (error) {\n              Alert.alert(\n          t('profile.settings.language.error.title'),\n          t('profile.settings.language.error.message')\n        );\n    }\n  };\n\n\n\n  return (\n    <View style={[styles.container, settingsColors.container]}>\n      <View style={[styles.header, settingsColors.header]}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Ionicons name=\"arrow-back\" size={24} color={currentColors.primary} />\n        </TouchableOpacity>\n        <Text style={[styles.title, settingsColors.title]}>{getScreenTitle()}</Text>\n        <View style={styles.placeholder} />\n      </View>\n      \n      <ScrollView \n        style={styles.content} \n        contentContainerStyle={styles.contentContainer}\n        showsVerticalScrollIndicator={false}\n      >\n        {/* Уведомления */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, settingsColors.sectionTitle]}>{t('profile.settings.notifications.title')}</Text>\n          \n          {notificationsLoading ? (\n            <View style={styles.loadingContainer}>\n              <ActivityIndicator size=\"small\" color={currentColors.primary} />\n              <Text style={[styles.loadingText, settingsColors.loadingText]}>Загрузка настроек уведомлений...</Text>\n            </View>\n          ) : (\n            <>\n              <View style={[styles.settingItem, settingsColors.settingItem]}>\n                <View style={styles.settingInfo}>\n                  <Ionicons name=\"notifications\" size={24} color={currentColors.primary} />\n                  <Text style={[styles.settingLabel, settingsColors.settingLabel]}>{t('profile.settings.notifications.push')}</Text>\n                </View>\n                <Switch \n                  value={notificationSettings.pushEnabled} \n                  onValueChange={togglePushNotifications}\n                />\n              </View>\n              \n              {!permissions.granted && (\n                <TouchableOpacity \n                  style={styles.permissionButton}\n                  onPress={requestPermissions}\n                >\n                  <Text style={styles.permissionButtonText}>\n                    Разрешить уведомления\n                  </Text>\n                </TouchableOpacity>\n              )}\n            </>\n          )}\n        </View>\n\n        {/* Язык */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, settingsColors.sectionTitle]}>{t('profile.settings.language.section')}</Text>\n          <TouchableOpacity style={[styles.settingItem, settingsColors.settingItem]} onPress={handleLanguageChange}>\n            <View style={styles.settingInfo}>\n              <Ionicons name=\"language\" size={24} color={currentColors.primary} />\n              <Text style={[styles.settingLabel, settingsColors.settingLabel]}>{t('profile.settings.language.current')}</Text>\n            </View>\n            <View style={styles.languageValue}>\n              <Text style={[styles.settingLabel, { color: currentColors.textSecondary, fontWeight: '600' }]}>\n                {languageOptions.find(lang => lang.code === language)?.flag} {languageOptions.find(lang => lang.code === language)?.name}\n              </Text>\n              <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n            </View>\n          </TouchableOpacity>\n        </View>\n\n        {/* Внешний вид */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, settingsColors.sectionTitle]}>{t('profile.settings.appearance.title')}</Text>\n          <View style={[styles.settingItem, settingsColors.settingItem]}>\n            <View style={styles.settingInfo}>\n              <Ionicons name=\"moon\" size={24} color={currentColors.primary} />\n              <Text style={[styles.settingLabel, settingsColors.settingLabel]}>{t('profile.settings.appearance.darkMode')}</Text>\n            </View>\n            <Switch value={isDark} onValueChange={toggleTheme} />\n          </View>\n        </View>\n\n        {/* Местоположение */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, settingsColors.sectionTitle]}>{t('profile.settings.location.title')}</Text>\n          <View style={[styles.settingItem, settingsColors.settingItem]}>\n            <View style={styles.settingInfo}>\n              <Ionicons name=\"location\" size={24} color={currentColors.primary} />\n              <Text style={[styles.settingLabel, settingsColors.settingLabel]}>{t('profile.settings.location.autoLocation')}</Text>\n            </View>\n            <Switch value={autoLocation} onValueChange={setAutoLocation} />\n          </View>\n        </View>\n\n        {/* Безопасность */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, settingsColors.sectionTitle]}>{t('profile.settings.security.title')}</Text>\n          <TouchableOpacity \n            style={[styles.settingItem, settingsColors.settingItem]}\n            onPress={() => navigation.navigate('ChangePassword')}\n          >\n            <View style={styles.settingInfo}>\n              <Ionicons name=\"lock-closed\" size={24} color={currentColors.primary} />\n              <Text style={[styles.settingLabel, settingsColors.settingLabel]}>{t('profile.settings.security.changePassword')}</Text>\n            </View>\n            <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n          </TouchableOpacity>\n        </View>\n\n        {/* Данные */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, settingsColors.sectionTitle]}>{t('profile.settings.data.title')}</Text>\n          <TouchableOpacity \n            style={[styles.settingItem, settingsColors.settingItem]}\n            activeOpacity={0.7}\n            hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}\n            onPress={() => {\n              Alert.alert(\n                t('profile.settings.data.deleteAccount'),\n                t('profile.settings.data.deleteAccountConfirm'),\n                [\n                  { text: t('common.cancel'), style: 'cancel' },\n                  { \n                    text: t('profile.settings.data.deleteAccount'), \n                    style: 'destructive',\n                                         onPress: async () => {\n                       try {\n                         // Вызываем API для удаления аккаунта\n                         // Вызываем API для удаления аккаунта в зависимости от роли\n                         const result = isDriver \n                           ? await DriverProfileService.deleteAccount()\n                           : await ProfileService.deleteAccount();\n                         \n                         if (!result.success) {\n                           throw new Error(result.message || 'Failed to delete account');\n                         }\n                         \n                                                 Alert.alert(\n                          t('profile.settings.data.deleteAccountSuccess'),\n                          t('profile.settings.data.deleteAccountSuccessMessage'),\n                           [\n                             {\n                               text: t('common.ok'),\n                               onPress: async () => {\n                                 // Выходим из аккаунта после удаления\n                                 await logout();\n                                 // Перенаправляем на экран входа\n                                 navigation.navigate('Auth', { screen: 'Login' });\n                               }\n                             }\n                           ]\n                         );\n                       } catch (error) {\n                                                 Alert.alert(\n                          t('common.error'),\n                          t('profile.settings.data.deleteAccountError') || 'Не удалось удалить аккаунт',\n                           [{ text: t('common.ok') }]\n                         );\n                       }\n                     }\n                  }\n                ]\n              );\n            }}\n          >\n            <View style={styles.settingInfo}>\n              <Ionicons name=\"trash\" size={24} color={currentColors.error} />\n              <Text style={[styles.settingLabel, settingsColors.settingLabel, settingsColors.dangerText]}>{t('profile.settings.data.deleteAccount')}</Text>\n            </View>\n            <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n\n      {/* Модал выбора языка */}\n      <Modal\n        visible={languageModalVisible}\n        transparent={true}\n        animationType=\"fade\"\n        onRequestClose={() => setLanguageModalVisible(false)}\n      >\n        <View style={languageModalStyles.modalOverlay}>\n          <View style={[languageModalStyles.modalContent, languageModalColors.modalContent]}>\n            <View style={[languageModalStyles.modalHeader, languageModalColors.modalHeader]}>\n              <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                <Ionicons name=\"language\" size={20} color={currentColors.primary} style={{ marginRight: 8 }} />\n                <Text style={[languageModalStyles.modalTitle, languageModalColors.modalTitle]}>\n                  {t('profile.settings.language.title')}\n                </Text>\n              </View>\n              <TouchableOpacity \n                onPress={() => setLanguageModalVisible(false)}\n                style={languageModalStyles.closeButton}\n              >\n                <Ionicons name=\"close\" size={20} color={currentColors.textSecondary} />\n              </TouchableOpacity>\n            </View>\n            \n            <ScrollView style={languageModalStyles.languageList} showsVerticalScrollIndicator={false}>\n              {languageOptions.map((lang) => (\n                <TouchableOpacity\n                  key={lang.code}\n                  style={[\n                    languageModalStyles.languageItem,\n                    languageModalColors.languageItem,\n                    lang.code === language && languageModalStyles.languageItemSelected,\n                    lang.code === language && languageModalColors.languageItemSelected\n                  ]}\n                  onPress={() => selectLanguage(lang.code)}\n                >\n                  <Text style={languageModalStyles.languageFlag}>{lang.flag}</Text>\n                  <Text style={[\n                    languageModalStyles.languageName,\n                    languageModalColors.languageName,\n                    lang.code === language && languageModalStyles.languageNameSelected,\n                    lang.code === language && languageModalColors.languageNameSelected\n                  ]}>\n                    {lang.name}\n                  </Text>\n                  {lang.code === language && (\n                    <Ionicons name=\"checkmark-circle\" size={24} color={currentColors.primary} />\n                  )}\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nexport default SettingsScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/client/TripsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DriverStackParamList' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[939,942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[939,942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2327,2330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2327,2330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTrips'. Either include it or remove the dependency array.","line":96,"column":37,"nodeType":"ArrayExpression","endLine":96,"endColumn":47,"suggestions":[{"desc":"Update the dependencies array to be: [loadTrips, user.id]","fix":{"range":[3402,3412],"text":"[loadTrips, user.id]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6693,6696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6693,6696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { ClientScreenProps } from '../../types/navigation';\nimport { DriverStackParamList } from '../../types/driver/DriverNavigation';\nimport { TripsScreenStyles as styles, getTripsScreenStyles } from '../../styles/screens/profile/TripsScreen.styles';\nimport OrderService from '../../services/OrderService';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport TripsFilter, { TripFilter } from '../../components/TripsFilter';\nimport { colors } from '../../constants/colors';\n\n// Универсальный тип для навигации\ntype TripsScreenProps = ClientScreenProps<'Trips'> | { navigation: any };\n\n/**\n * Экран истории поездок\n * \n * TODO для интеграции с бэкендом:\n * 1. Заменить useState на useTrips hook\n * 2. Подключить TripsService для API вызовов\n * 3. Добавить обработку ошибок и загрузки\n * 4. Реализовать фильтрацию и поиск\n * 5. Добавить экспорт данных\n * 6. Подключить пагинацию\n */\n\nconst TripsScreen: React.FC<TripsScreenProps> = ({ navigation }) => {\n  const { isDark } = useTheme();\n  const { user } = useAuth();\n  const { t } = useI18n();\n  const currentColors = isDark ? colors.dark : colors.light;\n  const dynamicStyles = getTripsScreenStyles(isDark);\n  \n  // Определяем роль пользователя\n  const isDriver = user?.role === 'driver';\n  \n  // Условная логика для разных ролей\n  const getScreenTitle = () => {\n    return isDriver ? 'Мои поездки' : t('client.trips.title');\n  };\n  \n  const getEmptyStateText = () => {\n    return isDriver \n      ? 'История выполненных поездок пуста' \n      : t('client.trips.emptyDescription');\n  };\n  \n  const getEmptyStateTitle = () => {\n    return isDriver ? 'Нет поездок' : t('client.trips.noTrips');\n  };\n  \n  const getDriverLabel = () => {\n    return isDriver ? 'Клиент' : t('client.trips.driver');\n  };\n\n  const [filterVisible, setFilterVisible] = useState(false);\n  const [currentFilter, setCurrentFilter] = useState<TripFilter>({\n    status: 'all',\n    dateRange: 'all'\n  });\n  \n  const [allTrips, setAllTrips] = useState<any[]>([]);\n\n  const storageKey = user?.id ? `@trips_${user.id}` : '@trips_anonymous';\n\n  const loadTrips = async () => {\n    try {\n      if (__DEV__) {\n        const saved = await AsyncStorage.getItem(storageKey);\n        setAllTrips(saved ? JSON.parse(saved) : []);\n      } else {\n        if (!user?.id) { setAllTrips([]); return; }\n        const service = OrderService.getInstance();\n        const orders = await service.getOrders(user.id);\n        const mapped = orders.map(o => ({\n          id: o.id,\n          title: o.from || 'Trip',\n          date: new Date(o.createdAt).toLocaleDateString(),\n          time: new Date(o.createdAt).toLocaleTimeString(),\n          amount: o.price ? `${o.price} ₼` : '',\n          status: o.status,\n          type: o.status === 'completed' ? 'completed' : o.status === 'cancelled' ? 'cancelled' : 'scheduled',\n          description: o.driverNotes || '',\n          driver: o.driverId || undefined,\n        }));\n        setAllTrips(mapped);\n      }\n    } catch (e) {\n      setAllTrips([]);\n    }\n  };\n\n  useEffect(() => { loadTrips(); }, [user?.id]);\n  \n  const filteredTrips = useMemo(() => {\n    let filtered = allTrips;\n    \n    // Фильтр по статусу\n    if (currentFilter.status !== 'all') {\n      filtered = filtered.filter(trip => trip.status === currentFilter.status);\n    }\n    \n    // Фильтр по дате (упрощенная логика для мок данных)\n    if (currentFilter.dateRange !== 'all') {\n      switch (currentFilter.dateRange) {\n        case 'today':\n          filtered = filtered.filter((_, index) => index === 0);\n          break;\n        case 'week':\n          filtered = filtered.filter((_, index) => index < 2);\n          break;\n        case 'month':\n          filtered = filtered.filter((_, index) => index < 3);\n          break;\n        case 'year':\n          break;\n      }\n    }\n    \n    return filtered;\n  }, [allTrips, currentFilter]);\n\n  const getTripIcon = (type: string) => {\n    switch (type) {\n      case 'completed':\n        return 'checkmark-circle';\n      case 'cancelled':\n        return 'close-circle';\n      case 'scheduled':\n        return 'time';\n      default:\n        return 'car';\n    }\n  };\n\n  const getTripColor = (type: string) => {\n    switch (type) {\n      case 'completed':\n        return '#4caf50';\n      case 'cancelled':\n        return '#e53935';\n      case 'scheduled':\n        return '#2196f3';\n      default:\n        return '#003366';\n    }\n  };\n\n  const getTripStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return '#4caf50';\n      case 'cancelled':\n        return '#e53935';\n      case 'scheduled':\n        return '#2196f3';\n      default:\n        return '#888';\n    }\n  };\n\n  return (\n    <View style={[styles.container, dynamicStyles.container]}>\n      <View style={[styles.header, dynamicStyles.header]}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Ionicons name=\"arrow-back\" size={24} color={currentColors.primary} />\n        </TouchableOpacity>\n        <Text style={[styles.title, dynamicStyles.title]}>{getScreenTitle()}</Text>\n        <TouchableOpacity \n          style={styles.filterButton}\n          onPress={() => setFilterVisible(true)}\n        >\n          <Ionicons name=\"filter\" size={24} color={currentColors.primary} />\n        </TouchableOpacity>\n      </View>\n      \n      <ScrollView \n        style={styles.content} \n        contentContainerStyle={[styles.contentContainer, { paddingTop: 16 }]}\n        showsVerticalScrollIndicator={false}\n      >\n\n        {filteredTrips.length === 0 ? (\n          <View style={[styles.emptyState, { alignItems: 'center', justifyContent: 'center' }]}>\n            <Ionicons name=\"car-outline\" size={64} color={currentColors.textSecondary} />\n            <Text style={[styles.emptyTitle, dynamicStyles.emptyTitle]}>{getEmptyStateTitle()}</Text>\n            <Text style={[styles.emptyDescription, dynamicStyles.emptyDescription]}>\n              {getEmptyStateText()}\n            </Text>\n          </View>\n        ) : (\n          <>\n            {filteredTrips.map((trip) => (\n              <View key={trip.id} style={[styles.carItem, dynamicStyles.carItem]}>\n                <View style={styles.carHeader}>\n                  <View style={styles.carInfo}>\n                    <Ionicons \n                      name={getTripIcon(trip.type) as any} \n                      size={24} \n                      color={getTripColor(trip.type)} \n                    />\n                    <View style={styles.carDetails}>\n                      <Text style={[styles.carModel, dynamicStyles.carModel]}>{trip.title}</Text>\n                      <Text style={[styles.carPlate, dynamicStyles.carPlate]}>{trip.date} • {trip.time}</Text>\n                    </View>\n                  </View>\n                  <View style={styles.paymentAmount}>\n                    <Text style={[styles.amountText, { color: getTripColor(trip.type) }]}>\n                      {trip.amount}\n                    </Text>\n                    <View style={[styles.statusBadge, { backgroundColor: getTripStatusColor(trip.status) }]}>\n                      <Text style={styles.statusText}>\n                        {trip.status === 'completed' ? t('client.trips.status.completed') : \n                         trip.status === 'cancelled' ? t('client.trips.status.cancelled') : t('client.trips.status.scheduled')}\n                      </Text>\n                    </View>\n                  </View>\n                </View>\n                {trip.description && (\n                  <Text style={[styles.carPlate, dynamicStyles.carPlate]}>{trip.description}</Text>\n                )}\n                {trip.driver && (\n                  <Text style={[styles.carPlate, dynamicStyles.carPlate]}>\n                    {getDriverLabel()}: {trip.driver}\n                  </Text>\n                )}\n              </View>\n            ))}\n          </>\n        )}\n      </ScrollView>\n      \n      <TripsFilter\n        visible={filterVisible}\n        onClose={() => setFilterVisible(false)}\n        onApply={setCurrentFilter}\n        currentFilter={currentFilter}\n      />\n    </View>\n  );\n};\n\nexport default TripsScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/CustomizationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[397,400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[397,400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity, Modal } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport TimePicker from '../../../../components/TimePicker';\nimport { TIME_PICKER_COLORS } from './constants';\n\ninterface CustomizationModalProps {\n  visible: boolean;\n  onClose: () => void;\n  onSave: (isReturnTrip: boolean) => Promise<boolean>;\n  colors: any;\n  t: (key: string) => string;\n  weekDays: { key: string; label: string }[];\n  selectedDays: string[];\n  selectedCustomDays: string[];\n  onSelectedCustomDaysChange: (days: string[]) => void;\n  tempCustomizedDays: {[key: string]: {there: string, back: string}};\n  onTempCustomizedDaysChange: (days: {[key: string]: {there: string, back: string}}) => void;\n  isReturnTrip: boolean;\n  validationError?: { message: string; field: string } | null;\n}\n\nexport const CustomizationModal: React.FC<CustomizationModalProps> = ({\n  visible,\n  onClose,\n  onSave,\n  colors,\n  t,\n  weekDays,\n  selectedDays,\n  selectedCustomDays,\n  onSelectedCustomDaysChange,\n  tempCustomizedDays,\n  onTempCustomizedDaysChange,\n  isReturnTrip,\n  validationError\n}) => {\n  // Функция для получения цвета дня\n  const getDayColor = (dayKey: string) => {\n    const colorMap: Record<string, string> = {\n      'mon': TIME_PICKER_COLORS.MONDAY,\n      'tue': TIME_PICKER_COLORS.TUESDAY,\n      'wed': TIME_PICKER_COLORS.WEDNESDAY,\n      'thu': TIME_PICKER_COLORS.THURSDAY,\n      'fri': TIME_PICKER_COLORS.FRIDAY,\n      'sat': TIME_PICKER_COLORS.SATURDAY,\n      'sun': TIME_PICKER_COLORS.SUNDAY,\n    };\n    return colorMap[dayKey] || TIME_PICKER_COLORS.THERE;\n  };\n  return (\n    <Modal\n      visible={visible}\n      animationType=\"fade\"\n      transparent={true}\n      onRequestClose={onClose}\n    >\n      <View style={{\n        flex: 1,\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 20,\n      }}>\n        <View style={{\n          backgroundColor: colors.background,\n          borderRadius: 16,\n          padding: 20,\n          width: '100%',\n          maxHeight: '80%',\n        }}>\n          <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20 }}>\n            <Text style={{ fontSize: 18, fontWeight: '600', color: colors.text }}>\n              {t('common.customizeSchedule')}\n            </Text>\n            <TouchableOpacity onPress={onClose}>\n              <Ionicons name=\"close\" size={24} color={colors.text} />\n            </TouchableOpacity>\n          </View>\n          \n          <Text style={{ fontSize: 14, color: colors.textSecondary, marginBottom: 16 }}>\n            {t('common.selectDaysToCustomize')}\n          </Text>\n          \n          {/* Выбор дней для кастомизации */}\n          <View style={{ flexDirection: 'row', flexWrap: 'wrap', marginBottom: 20 }}>\n            {weekDays.map((day) => {\n              // Показываем только выбранные дни, кроме первого и уже настроенных\n              if (!selectedDays.includes(day.key) || day.key === selectedDays[0] || tempCustomizedDays[day.key]) return null;\n              const isSelected = selectedCustomDays.includes(day.key);\n              return (\n                <TouchableOpacity\n                  key={day.key}\n                  style={{\n                    paddingHorizontal: 12,\n                    paddingVertical: 8,\n                    margin: 4,\n                    borderRadius: 20,\n                    backgroundColor: isSelected ? colors.primary : colors.surface,\n                    borderWidth: 1,\n                    borderColor: isSelected ? colors.primary : colors.border,\n                  }}\n                  onPress={() => {\n                    if (isSelected) {\n                      onSelectedCustomDaysChange(selectedCustomDays.filter(d => d !== day.key));\n                    } else {\n                      onSelectedCustomDaysChange([...selectedCustomDays, day.key]);\n                    }\n                  }}\n                >\n                  <Text style={{\n                    color: isSelected ? '#FFFFFF' : colors.text,\n                    fontSize: 14,\n                    fontWeight: '500',\n                  }}>\n                    {day.label}\n                  </Text>\n                </TouchableOpacity>\n              );\n            })}\n          </View>\n          \n          {/* Таймпикеры для выбранных дней */}\n          {selectedCustomDays.map((dayKey) => {\n            const day = weekDays.find(d => d.key === dayKey);\n            if (!day) return null;\n            \n            return (\n              <View key={dayKey} style={{ marginBottom: 16 }}>\n                <Text style={{ fontSize: 16, fontWeight: '600', color: colors.text, marginBottom: 8 }}>\n                  {day.label}\n                </Text>\n                <TimePicker\n                  value={tempCustomizedDays[dayKey]?.there || ''}\n                  onChange={(time) => {\n                    onTempCustomizedDaysChange({\n                      ...tempCustomizedDays,\n                      [dayKey]: {\n                        ...tempCustomizedDays[dayKey],\n                        there: time,\n                        back: tempCustomizedDays[dayKey]?.back || ''\n                      }\n                    });\n                  }}\n                  placeholder={t('common.selectTime')}\n                  indicatorColor={getDayColor(dayKey)}\n                  dayLabel={day.label}\n                />\n                {isReturnTrip && (\n                  <View style={{ marginTop: 12 }}>\n                    <TimePicker\n                      value={tempCustomizedDays[dayKey]?.back || ''}\n                      onChange={(time) => {\n                        onTempCustomizedDaysChange({\n                          ...tempCustomizedDays,\n                          [dayKey]: {\n                            ...tempCustomizedDays[dayKey],\n                            there: tempCustomizedDays[dayKey]?.there || '',\n                            back: time\n                          }\n                        });\n                      }}\n                      placeholder={t('common.selectTime')}\n                      indicatorColor={getDayColor(dayKey)}\n                      dayLabel={day.label}\n                    />\n                  </View>\n                )}\n              </View>\n            );\n          })}\n          \n          {validationError && (\n            <View style={{\n              backgroundColor: '#FFE6E6',\n              padding: 12,\n              borderRadius: 8,\n              marginTop: 16,\n              borderWidth: 1,\n              borderColor: '#FF6B6B',\n            }}>\n              <Text style={{ color: '#D32F2F', fontSize: 14, textAlign: 'center' }}>\n                {validationError.message}\n              </Text>\n            </View>\n          )}\n          \n          <TouchableOpacity\n            style={{\n              backgroundColor: colors.primary,\n              paddingVertical: 12,\n              borderRadius: 8,\n              alignItems: 'center',\n              marginTop: 20,\n            }}\n            onPress={() => onSave(isReturnTrip)}\n          >\n            <Text style={{ color: '#FFFFFF', fontSize: 16, fontWeight: '600' }}>\n              {t('common.done')}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/FixDriveAddressPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1348,1351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1348,1351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3033,3036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3033,3036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3297,3300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3297,3300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, Alert } from 'react-native';\nimport { useTheme } from '../../../../context/ThemeContext';\nimport { useLanguage } from '../../../../context/LanguageContext';\nimport { getCurrentColors } from '../../../../constants/colors';\nimport FixDriveDropdown from '../../../../components/FixDriveDropdown';\nimport FixDriveMapInput from '../../../../components/FixDriveMapInput';\nimport { useFixDriveFamilyMembers } from '../../../../hooks/useFixDriveFamilyMembers';\nimport { fixdriveOrderService } from '../../../../services/fixdriveOrderService';\nimport { AddressData } from '../types/fix-drive.types';\n\ninterface FixDriveAddressPageProps {\n  onNext: (data: AddressData) => void;\n  initialData?: AddressData;\n}\n\nconst FixDriveAddressPage: React.FC<FixDriveAddressPageProps> = ({ onNext, initialData }) => {\n  const { isDark } = useTheme();\n  const colors = getCurrentColors(isDark);\n  const { t } = useLanguage();\n  \n  const { getFamilyMemberOptions, getFamilyMemberById, loading } = useFixDriveFamilyMembers();\n  \n  const [selectedFamilyMember, setSelectedFamilyMember] = useState<string>(initialData?.familyMemberId || '');\n  const [selectedPackage, setSelectedPackage] = useState<string>(initialData?.packageType || '');\n  const [addresses, setAddresses] = useState<any[]>(initialData?.addresses || []);\n  const [isSaving, setIsSaving] = useState(false);\n\n  // Загружаем данные из сессии при инициализации и при изменении initialData\n  useEffect(() => {\n    const loadSessionData = async () => {\n      try {\n        const sessionData = await fixdriveOrderService.loadSessionData();\n        console.log('Session data loaded:', sessionData); // Добавляем лог для отладки\n        if (sessionData?.addressData) {\n          const { addressData } = sessionData;\n          setSelectedFamilyMember(addressData.familyMemberId || '');\n          setSelectedPackage(addressData.packageType || '');\n          setAddresses(addressData.addresses || []);\n          console.log('Addresses restored:', addressData.addresses); // Добавляем лог для отладки\n        }\n      } catch (error) {\n        console.error('Error loading session data:', error);\n      }\n    };\n    loadSessionData();\n  }, [initialData]); // Добавляем зависимость от initialData\n\n  const familyMemberOptions = getFamilyMemberOptions();\n  const packageOptions = [\n    { key: 'standard', label: t('premium.packages.standard'), value: 'standard' },\n    { key: 'plus', label: t('premium.packages.plus'), value: 'plus' },\n    { key: 'premium', label: t('premium.packages.premium'), value: 'premium' },\n  ];\n\n  const handleFamilyMemberSelect = (value: string) => {\n    setSelectedFamilyMember(value);\n    // Сохраняем в сессию при изменении участника семьи\n    saveToSession(addresses);\n  };\n\n  const handlePackageSelect = (value: string) => {\n    setSelectedPackage(value);\n    // Сохраняем в сессию при изменении пакета\n    saveToSession(addresses);\n  };\n\n  const handleAddressesChange = (newAddresses: any[]) => {\n    console.log('Addresses changed:', newAddresses); // Добавляем лог для отладки\n    setAddresses(newAddresses);\n    // Сохраняем адреса в сессию при каждом изменении\n    saveToSession(newAddresses);\n  };\n\n  const saveToSession = async (newAddresses: any[]) => {\n    try {\n      const selectedMember = getFamilyMemberById(selectedFamilyMember);\n      const familyMemberName = selectedMember ? `${selectedMember.name} ${selectedMember.surname}` : '';\n\n      // Сначала загружаем существующие данные сессии\n      const existingSession = await fixdriveOrderService.loadSessionData();\n      \n      const sessionData = {\n        ...existingSession, // Сохраняем существующие данные\n        currentPage: 'addresses',\n        addressData: {\n          familyMemberId: selectedFamilyMember,\n          familyMemberName,\n          packageType: selectedPackage,\n          addresses: newAddresses.map(addr => ({\n            id: addr.id,\n            type: addr.type,\n            address: addr.address,\n            coordinates: addr.coordinate,\n          })),\n        },\n      };\n      await fixdriveOrderService.saveSessionData(sessionData);\n      console.log('Session saved:', sessionData); // Добавляем лог для отладки\n    } catch (error) {\n      console.error('Error saving to session:', error);\n    }\n  };\n\n  const handleSaveAndNext = async () => {\n    try {\n      setIsSaving(true);\n\n      const selectedMember = getFamilyMemberById(selectedFamilyMember);\n      const familyMemberName = selectedMember ? `${selectedMember.name} ${selectedMember.surname}` : '';\n\n      const addressData: AddressData = {\n        familyMemberId: selectedFamilyMember,\n        familyMemberName,\n        packageType: selectedPackage,\n        addresses: addresses.map(addr => ({\n          id: addr.id,\n          type: addr.type,\n          address: addr.address,\n          coordinates: addr.coordinate || addr.coordinates, // Используем оба формата\n        })),\n      };\n\n      // Валидируем данные\n      const validation = fixdriveOrderService.validateOrderData(addressData);\n      if (!validation.isValid) {\n        Alert.alert(\n          'Ошибка валидации',\n          validation.errors.join('\\n'),\n          [{ text: 'OK' }]\n        );\n        return;\n      }\n\n      // Сохраняем данные в заказ (финальное сохранение)\n      await fixdriveOrderService.saveOrderData(addressData);\n\n      // Переходим к следующей странице\n      onNext(addressData);\n\n    } catch (error) {\n      console.error('Error saving order:', error);\n      Alert.alert(\n        'Ошибка',\n        'Не удалось сохранить данные заказа. Попробуйте еще раз.',\n        [{ text: 'OK' }]\n      );\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  return (\n    <View style={{ marginTop: 10 }}>\n      {/* Выбор участника семьи */}\n      {loading ? (\n        <Text style={{ color: colors.primary, textAlign: 'center', marginBottom: 16 }}>\n          Загрузка участников семьи...\n        </Text>\n      ) : (\n        <FixDriveDropdown\n          label={t('common.fixDrive.selectFamilyMember')}\n          placeholder={t('common.fixDrive.familyMemberPlaceholder')}\n          options={familyMemberOptions}\n          selectedValue={selectedFamilyMember}\n          onSelect={handleFamilyMemberSelect}\n        />\n      )}\n\n      {/* Выбор пакета */}\n      <FixDriveDropdown\n        label={t('common.fixDrive.selectPackage')}\n        placeholder={t('common.fixDrive.packagePlaceholder')}\n        options={packageOptions}\n        selectedValue={selectedPackage}\n        onSelect={handlePackageSelect}\n      />\n\n      {/* Ввод адреса через карту */}\n      <FixDriveMapInput \n        onAddressesChange={handleAddressesChange}\n        initialAddresses={addresses}\n      />\n      \n      {/* Кнопка Сохранить и Продолжить */}\n      <TouchableOpacity \n        style={{ \n          backgroundColor: isSaving ? colors.textSecondary : colors.primary,\n          paddingVertical: 12,\n          marginHorizontal: 20,\n          marginTop: 8,\n          marginBottom: 20,\n          borderRadius: 8,\n          opacity: isSaving ? 0.7 : 1,\n        }}\n        onPress={handleSaveAndNext}\n        disabled={isSaving}\n      >\n        <Text style={{ \n          color: '#FFFFFF', \n          fontSize: 16, \n          fontWeight: '600',\n          textAlign: 'center'\n        }}>\n          {isSaving ? 'Сохранение...' : t('common.save')}\n        </Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default FixDriveAddressPage;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/FixDriveConfirm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SafeAreaView' is defined but never used.","line":2,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'forceUpdate' is assigned a value but never used.","line":82,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setForceUpdate' is assigned a value but never used.","line":82,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectDriver' is assigned a value but never used.","line":134,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":134,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deselectDriver' is assigned a value but never used.","line":139,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":139,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState, useCallback, useEffect } from 'react';\nimport { View, Text, ScrollView, TouchableOpacity, SafeAreaView } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../../../context/ThemeContext';\nimport { useLanguage } from '../../../../context/LanguageContext';\nimport { getCurrentColors } from '../../../../constants/colors';\nimport { createDriversScreenStyles } from '../../../../styles/screens/drivers/DriversScreen.styles';\nimport { AddressData } from '../types/fix-drive.types';\n\ninterface FixDriveConfirmProps {\n  scheduleData: {\n    scheduleType: string;\n    selectedDays: string[];\n    selectedTime: string;\n    returnTime?: string;\n    returnTripTime?: string;\n    returnWeekdaysTime?: string;\n    isReturnTrip: boolean;\n  };\n  addressData: AddressData | null;\n}\n\n// Моковые данные для водителей\nconst drivers = [\n  {\n    id: 1,\n    name: 'Александр Смирнов',\n    vehicle: 'Toyota Camry • А123БВ',\n    isOnline: true,\n    rating: 4.8,\n    emergencyDriver: {\n      name: 'Сергей Петров',\n      vehicle: 'BMW X5 • М777НН'\n    }\n  },\n  {\n    id: 2,\n    name: 'Михаил Козлов',\n    vehicle: 'Honda Accord • В456ГД',\n    isOnline: true,\n    rating: 4.9,\n    emergencyDriver: {\n      name: 'Игорь Сидоров',\n      vehicle: 'Mercedes C-Class • А888ВВ'\n    }\n  },\n  {\n    id: 3,\n    name: 'Дмитрий Волков',\n    vehicle: 'Nissan Altima • Е789ЖЗ',\n    isOnline: false,\n    rating: 4.7,\n    emergencyDriver: {\n      name: 'Виктор Иванов',\n      vehicle: 'Audi A6 • К999ММ'\n    }\n  },\n  {\n    id: 4,\n    name: 'Андрей Морозов',\n    vehicle: 'Hyundai Sonata • И012КЛ',\n    isOnline: true,\n    rating: 4.6,\n    emergencyDriver: {\n      name: 'Павел Николаев',\n      vehicle: 'Volkswagen Passat • Р555СС'\n    }\n  }\n];\n\nconst FixDriveConfirm: React.FC<FixDriveConfirmProps> = ({ \n  scheduleData, \n  addressData \n}) => {\n  const { isDark } = useTheme();\n  const colors = getCurrentColors(isDark);\n  const { t } = useLanguage();\n  const styles = useMemo(() => createDriversScreenStyles(isDark), [isDark]);\n  \n  const [expandedDrivers, setExpandedDrivers] = useState<number[]>([]);\n  const [selectedDriverId, setSelectedDriverId] = useState<number | null>(null);\n  const [forceUpdate, setForceUpdate] = useState(0);\n\n  useEffect(() => {\n    console.log('🔄 selectedDriverId changed to:', selectedDriverId);\n  }, [selectedDriverId]);\n\n  // Детерминированное расстояние (Haversine) и мемоизированная цена\n  const distance = useMemo(() => {\n    if (!addressData?.addresses || addressData.addresses.length < 2) return 0;\n    const from = addressData.addresses[0]?.coordinates;\n    const to = addressData.addresses[1]?.coordinates;\n    if (!from || !to) return 0;\n\n    const toRad = (v: number) => (v * Math.PI) / 180;\n    const R = 6371; // км\n    const dLat = toRad(to.latitude - from.latitude);\n    const dLon = toRad(to.longitude - from.longitude);\n    const lat1 = toRad(from.latitude);\n    const lat2 = toRad(to.latitude);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(lat1) * Math.cos(lat2) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }, [addressData?.addresses]);\n\n  const price = useMemo(() => (distance * 0.3).toFixed(2), [distance]);\n\n  // Формируем расписание из реальных данных\n  const scheduleText = scheduleData.selectedDays.map(day => t(`common.${day}`)).join(', ') || 'Не выбрано';\n\n  // Формируем маршрут из реальных адресов\n  const realTrips = addressData?.addresses.map((addr, index) => ({\n    text: addr.address,\n    time: index === 0 ? scheduleData.selectedTime : \n          index === 1 && scheduleData.returnTime ? scheduleData.returnTime :\n          `${(8 + index)}:${(index * 15) % 60}`,\n    dotStyle: addr.type === 'from' ? 'default' : \n              addr.type === 'to' ? 'location' : 'blue'\n  })) || [];\n\n  const toggleDriverExpanded = (driverId: number) => {\n    setExpandedDrivers(prev => \n      prev.includes(driverId) \n        ? prev.filter(id => id !== driverId)\n        : [...prev, driverId]\n    );\n  };\n\n\n\n  const selectDriver = useCallback((driverId: number) => {\n    console.log('Selecting driver:', driverId);\n    setSelectedDriverId(driverId);\n  }, []);\n\n  const deselectDriver = useCallback(() => {\n    console.log('Deselecting driver');\n    setSelectedDriverId(null);\n  }, []);\n\n  const toggleDriverSelection = useCallback((driverId: number) => {\n    setSelectedDriverId(prev => prev === driverId ? null : driverId);\n  }, []);\n\n  // Компонент фиксированной кнопки - показывается только после выбора\n  const FixedBottomButton = () => {\n    // Показываем кнопку только если выбран водитель\n    if (!selectedDriverId) {\n      return null;\n    }\n\n    return (\n      <View style={{\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        padding: 16,\n        backgroundColor: 'transparent',\n      }}>\n        <TouchableOpacity \n          style={{\n            backgroundColor: colors.primary,\n            paddingVertical: 16,\n            paddingHorizontal: 24,\n            borderRadius: 12,\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n          activeOpacity={0.8}\n          onPress={() => {\n            console.log('Подтверждение выбора водителя:', selectedDriverId);\n            // Здесь будет логика подтверждения\n          }}\n        >\n          <Ionicons \n            name=\"checkmark-circle\" \n            size={20} \n            color=\"#FFFFFF\" \n            style={{ marginRight: 8 }} \n          />\n          <Text style={{\n            color: '#FFFFFF',\n            fontSize: 16,\n            fontWeight: '600',\n          }}>\n            Подтвердить выбор\n          </Text>\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\n  const renderDriverCard = (driver: typeof drivers[0]) => {\n    const isExpanded = expandedDrivers.includes(driver.id);\n    const isSelected = selectedDriverId === driver.id;\n\n    return (\n      <View key={driver.id} style={styles.driverItem}>\n        {isSelected && (\n          <View style={{\n            position: 'absolute',\n            top: -2,\n            left: -2,\n            right: -2,\n            bottom: -2,\n            borderWidth: 2,\n            borderColor: colors.primary,\n            borderRadius: 14,\n            zIndex: 0,\n          }} />\n        )}\n        {/* Хедер водителя - кликабельный */}\n        <TouchableOpacity \n          style={styles.driverHeader}\n          onPress={() => toggleDriverExpanded(driver.id)}\n          activeOpacity={0.7}\n        >\n          <View style={[styles.avatarContainer, { position: 'absolute', top: 0, left: 10 }]}>\n            <View style={styles.avatar}>\n              <Ionicons name=\"person\" size={32} color=\"#FFFFFF\" />\n            </View>\n            <View style={[styles.onlineIndicator, { \n              backgroundColor: driver.isOnline ? '#10B981' : '#9CA3AF' \n            }]} />\n            {isExpanded && (\n              <>\n                <View style={{\n                  position: 'absolute',\n                  bottom: -50,\n                  left: '50%',\n                  transform: [{ translateX: -1 }],\n                  width: 2,\n                  height: 40,\n                  backgroundColor: isDark ? '#4B5563' : '#E5E7EB',\n                }} />\n                <View style={{\n                  position: 'absolute',\n                  bottom: -50,\n                  left: '50%',\n                  width: 20,\n                  height: 2,\n                  backgroundColor: isDark ? '#4B5563' : '#E5E7EB',\n                }} />\n              </>\n            )}\n          </View>\n          <View style={[styles.driverMainInfo, { marginLeft: 80 }]}>\n            <View style={styles.nameRatingRow}>\n              <View style={styles.nameContainer}>\n                <Text \n                  style={styles.driverName}\n                  numberOfLines={1}\n                  ellipsizeMode=\"tail\"\n                >\n                  {driver.name}\n                </Text>\n                <Ionicons name=\"diamond\" size={16} color=\"#9CA3AF\" style={styles.premiumIcon} />\n              </View>\n              <Text style={styles.ratingText}>{driver.rating.toFixed(1)}</Text>\n            </View>\n            \n            {/* Блок с данными автомобиля */}\n            <View style={[styles.vehicleInfoContainer, { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }]}>\n              <Text style={styles.vehicleInfo}>\n                {driver.vehicle}\n              </Text>\n              <Ionicons \n                name={isExpanded ? \"chevron-up\" : \"chevron-down\"} \n                size={16} \n                color=\"#9CA3AF\" \n              />\n            </View>\n            \n            {/* Разворачиваемый контент над линией */}\n            {isExpanded && (\n              <View style={{\n                backgroundColor: isDark ? '#374151' : '#F3F4F6',\n                borderRadius: 8,\n                padding: 12,\n                marginTop: 20,\n                marginBottom: 8,\n              }}>\n                {/* Экстренный водитель */}\n                <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                  <View style={{\n                    width: 40,\n                    height: 40,\n                    borderRadius: 20,\n                    backgroundColor: '#EF4444',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    marginRight: 12,\n                  }}>\n                    <Ionicons name=\"person\" size={20} color=\"#FFFFFF\" />\n                  </View>\n                  <View style={{ flex: 1 }}>\n                    <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 4 }}>\n                      <Text \n                        style={{\n                          fontSize: 14,\n                          fontWeight: '600',\n                          color: isDark ? '#F9FAFB' : '#111827',\n                          marginRight: 8,\n                          flex: 1,\n                        }}\n                        numberOfLines={1}\n                        ellipsizeMode=\"tail\"\n                      >\n                        {driver.emergencyDriver.name}\n                      </Text>\n                      <View style={{ position: 'absolute', right: -4 }}>\n                        <Ionicons name=\"flash\" size={16} color=\"#EF4444\" />\n                      </View>\n                    </View>\n                    <Text style={{\n                      fontSize: 12,\n                      color: isDark ? '#D1D5DB' : '#6B7280',\n                    }}>\n                      {driver.emergencyDriver.vehicle}\n                    </Text>\n                  </View>\n                </View>\n              </View>\n            )}\n          </View>\n        </TouchableOpacity>\n\n        {/* Инфо панель водителя */}\n        <View style={styles.driverInfoBar}>\n          <View style={styles.scheduleInfo}>\n            <Ionicons name=\"calendar-outline\" size={16} color=\"#9CA3AF\" />\n            <Text style={styles.scheduleText}>{scheduleText}</Text>\n          </View>\n          <View style={styles.priceInfo}>\n            <Ionicons name=\"pricetag-outline\" size={16} color=\"#9CA3AF\" />\n            <Text style={styles.priceText}>{price} AFc</Text>\n          </View>\n          <View style={styles.distanceInfo}>\n            <Ionicons name=\"location\" size={16} color=\"#9CA3AF\" />\n            <Text style={styles.distanceText}>{distance.toFixed(1)} км</Text>\n          </View>\n          <View style={styles.timeInfo}>\n            <Ionicons name=\"football\" size={16} color=\"#9CA3AF\" />\n            <Text style={styles.timeText}>{addressData?.familyMemberName || 'Участник семьи'}</Text>\n          </View>\n        </View>\n\n        {/* Маршрут водителя - с реальными адресами */}\n        <View style={styles.expandableContent}>\n          <View style={styles.tripsContainer}>\n            {realTrips.map((trip, index) => (\n              <View key={index} style={styles.tripItem}>\n                <View\n                  style={[\n                    styles.tripDot,\n                    trip.dotStyle === 'blue' && styles.tripDotBlue,\n                    trip.dotStyle === 'location' && styles.tripDotLocation,\n                  ]}\n                />\n                <Text style={styles.tripText}>{trip.text}</Text>\n                <Text style={styles.tripTime}>{trip.time}</Text>\n              </View>\n            ))}\n          </View>\n\n          <View style={styles.bottomBorder} />\n\n          <View style={[styles.buttonsContainer, { zIndex: 10 }]}>\n            <TouchableOpacity \n              style={[styles.rightButton, { \n                backgroundColor: colors.primary,\n                borderColor: colors.primary,\n                zIndex: 10\n              }]}\n              onPress={() => {\n                console.log('Button pressed for driver:', driver.id, 'Current selected:', selectedDriverId);\n                toggleDriverSelection(driver.id);\n              }}\n              activeOpacity={0.8}\n            >\n              <View style={styles.rightButtonContent}>\n                <Ionicons name=\"checkmark-outline\" size={18} color=\"#FFFFFF\" />\n                <Text style={[styles.rightButtonText, { \n                  color: '#FFFFFF'\n                }]}\n                >\n                  {isSelected ? 'Выбрано' : 'Выбрать'}\n                </Text>\n              </View>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    );\n  };\n\n\n\n  const visibleDrivers = useMemo(() => {\n    if (selectedDriverId == null) return drivers;\n    const selected = drivers.find(d => d.id === selectedDriverId);\n    return selected ? [selected] : drivers;\n  }, [selectedDriverId]);\n\n  return (\n    <View style={[styles.container, { backgroundColor: 'transparent' }]}>\n      <ScrollView \n        style={styles.flatListContainer}\n        contentContainerStyle={[styles.driversList, { paddingBottom: 100 }]}\n        showsVerticalScrollIndicator={false}\n      >\n        {visibleDrivers.map(renderDriverCard)}\n      </ScrollView>\n      \n      <FixedBottomButton />\n    </View>\n  );\n};\n\nexport default FixDriveConfirm;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/ProgressBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Text' is defined but never used.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[701,704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[701,704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1939,1942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1939,1942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../../../context/ThemeContext';\nimport { getCurrentColors } from '../../../../constants/colors';\nimport { ProgressStep, FixDrivePage } from '../types/fix-drive.types';\nimport { getProgressSteps } from '../utils/progressUtils';\n\ninterface ProgressBarProps {\n  currentPage: string;\n  onStepPress?: (page: FixDrivePage) => void;\n}\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({ currentPage, onStepPress }) => {\n  const { isDark } = useTheme();\n  const colors = getCurrentColors(isDark);\n  const steps = getProgressSteps(currentPage as any);\n\n  const handleStepPress = (step: ProgressStep) => {\n    // Можно кликать только на завершенные шаги (зеленые)\n    if (step.isCompleted && onStepPress) {\n      onStepPress(step.id);\n    }\n  };\n\n  return (\n    <View style={{ \n      flexDirection: 'row', \n      justifyContent: 'space-around', \n      alignItems: 'center',\n      paddingTop: 0,\n      paddingBottom: 8\n    }}>\n      {steps.map((step, index) => (\n        <React.Fragment key={step.id}>\n          {/* Круг с иконкой */}\n          <TouchableOpacity \n            style={{ \n              width: 40, \n              height: 40, \n              borderRadius: 20,\n              backgroundColor: step.isCompleted ? colors.success : \n                             step.isActive ? colors.primary : colors.textSecondary,\n              justifyContent: 'center',\n              alignItems: 'center',\n              shadowColor: '#000',\n              shadowOffset: { width: 0, height: 2 },\n              shadowOpacity: 0.1,\n              shadowRadius: 4,\n              elevation: 3,\n            }}\n            onPress={() => handleStepPress(step)}\n            disabled={!step.isCompleted}\n            activeOpacity={0.7}\n          >\n            <Ionicons \n              name={step.icon as any} \n              size={18} \n              color=\"#FFFFFF\" \n            />\n          </TouchableOpacity>\n          \n          {/* Прогресс бар между кругами */}\n          {index < steps.length - 1 && (\n            <View style={{ \n              flex: 1, \n              height: 2, \n              backgroundColor: '#E0E0E0', \n              borderRadius: 1,\n              marginHorizontal: 10,\n              overflow: 'hidden'\n            }}>\n              <View style={{ \n                height: '100%', \n                width: steps[index].isCompleted ? '100%' : '0%', \n                backgroundColor: colors.success,\n                borderRadius: 1\n              }} />\n            </View>\n          )}\n        </React.Fragment>\n      ))}\n    </View>\n  );\n};\n\nexport default ProgressBar;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/ScheduleTypeSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3304,3307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3304,3307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, Platform } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../../../context/ThemeContext';\nimport { useLanguage } from '../../../../context/LanguageContext';\nimport { getCurrentColors } from '../../../../constants/colors';\nimport { WeekDaysSelector } from './WeekDaysSelector';\n\ninterface ScheduleType {\n  id: string;\n  icon: string;\n  titleKey: string;\n  descriptionKey: string;\n}\n\ninterface ScheduleTypeSelectorProps {\n  onSelect: (type: string) => void;\n  selectedType?: string;\n  selectedDays?: string[];\n  onDaysChange?: (days: string[]) => void;\n  selectedTime?: string;\n  onTimeChange?: (time: string) => void;\n  returnTime?: string;\n  onReturnTimeChange?: (time: string) => void;\n  returnTripTime?: string;\n  onReturnTripTimeChange?: (time: string) => void;\n  returnWeekdaysTime?: string;\n  onReturnWeekdaysTimeChange?: (time: string) => void;\n  isReturnTrip?: boolean;\n  onReturnTripChange?: (isReturnTrip: boolean) => void;\n}\n\nconst ScheduleTypeSelector: React.FC<ScheduleTypeSelectorProps> = ({ \n  onSelect, \n  selectedType,\n  selectedDays = [],\n  onDaysChange,\n  selectedTime,\n  onTimeChange,\n  returnTime,\n  onReturnTimeChange,\n  returnTripTime,\n  onReturnTripTimeChange,\n  returnWeekdaysTime,\n  onReturnWeekdaysTimeChange,\n  isReturnTrip,\n  onReturnTripChange\n}) => {\n  const { isDark } = useTheme();\n  const colors = getCurrentColors(isDark);\n  const { t } = useLanguage();\n\n  const scheduleTypes: ScheduleType[] = [\n    {\n      id: 'oneWay',\n      icon: 'arrow-forward',\n      titleKey: 'common.oneWay',\n      descriptionKey: 'common.schedule.types.oneWayDesc'\n    },\n    {\n      id: 'weekdays',\n      icon: 'briefcase',\n      titleKey: 'common.weekdays',\n      descriptionKey: 'common.schedule.types.weekdaysDesc'\n    },\n    {\n      id: 'thereAndBack',\n      icon: 'swap-horizontal',\n      titleKey: 'common.roundTrip',\n      descriptionKey: 'common.schedule.types.thereAndBackDesc'\n    },\n    {\n      id: 'flexible',\n      icon: 'settings',\n      titleKey: 'common.schedule.types.flexible',\n      descriptionKey: 'common.schedule.types.flexibleDesc'\n    }\n  ];\n\n  return (\n    <View style={styles.container}>\n      <Text style={[styles.stepTitle, { color: colors.text }]}>\n        {t('common.schedule.selectType')}\n      </Text>\n      <View style={styles.grid}>\n        {scheduleTypes.map((type) => {\n          const isSelected = selectedType === type.id;\n          \n          return (\n            <TouchableOpacity\n              key={type.id}\n                            style={[\n                styles.card,\n                {\n                  backgroundColor: isSelected ? colors.primary : isDark ? colors.surface : colors.background,\n                }\n              ]}\n              onPress={() => onSelect(type.id)}\n            >\n              <View style={[\n                styles.iconContainer,\n                {\n                  backgroundColor: isSelected \n                    ? 'rgba(255, 255, 255, 0.2)' \n                    : isDark \n                      ? 'rgba(255, 255, 255, 0.05)'\n                      : 'rgba(0, 0, 0, 0.05)'\n                }\n              ]}>\n                <Ionicons \n                  name={type.icon as any} \n                  size={24} \n                  color={isSelected ? '#FFFFFF' : isDark ? colors.text : colors.primary} \n                />\n              </View>\n              \n              <Text style={[\n                styles.cardTitle,\n                { color: isSelected ? '#FFFFFF' : colors.text }\n              ]}>\n                {t(type.titleKey)}\n              </Text>\n              \n              <Text style={[\n                styles.cardDescription,\n                { \n                  color: isSelected ? '#FFFFFF' : colors.textSecondary,\n                  opacity: isDark ? 0.7 : 0.85\n                }\n              ]}>\n                {t(type.descriptionKey)}\n              </Text>\n            </TouchableOpacity>\n          );\n        })}\n      </View>\n      \n      {/* Выбор дней недели - показываем только после выбора типа */}\n      {selectedType && (\n        <View style={{ marginTop: 20 }}>\n          <Text style={[styles.stepTitle, { color: colors.text }]}>\n            {t('common.selectTripDays')}\n          </Text>\n          <WeekDaysSelector \n            colors={colors}\n            isDark={isDark}\n            t={t}\n            selectedDays={selectedDays}\n            onSelectionChange={onDaysChange}\n            selectedTime={selectedTime}\n            onTimeChange={onTimeChange}\n            returnTime={returnTime}\n            onReturnTimeChange={onReturnTimeChange}\n            returnTripTime={returnTripTime}\n            onReturnTripTimeChange={onReturnTripTimeChange}\n            returnWeekdaysTime={returnWeekdaysTime}\n            onReturnWeekdaysTimeChange={onReturnWeekdaysTimeChange}\n            isReturnTrip={isReturnTrip}\n            onReturnTripChange={onReturnTripChange}\n            scheduleType={selectedType}\n          />\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 0,\n  },\n  grid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  },\n  card: {\n    width: '48%',\n    padding: 16,\n    borderRadius: 16,\n    marginBottom: 16,\n    alignItems: 'flex-start',\n    ...Platform.select({\n      ios: {\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 4 },\n        shadowOpacity: 0.15,\n        shadowRadius: 12,\n      },\n      android: {\n        elevation: 6,\n      },\n    }),\n  },\n  iconContainer: {\n    width: 44,\n    height: 44,\n    borderRadius: 22,\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 12,\n  },\n  cardTitle: {\n    fontSize: 15,\n    fontWeight: '700',\n    textAlign: 'left',\n    marginBottom: 6,\n    letterSpacing: 0.3,\n  },\n  cardDescription: {\n    fontSize: 13,\n    textAlign: 'left',\n    lineHeight: 18,\n    opacity: 1,\n  },\n  stepTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    marginBottom: 12,\n    marginLeft: 4,\n    textAlign: 'left',\n  },\n});\n\nexport default ScheduleTypeSelector;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/WeekDaysSelector.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/WeekDaysSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[530,533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[530,533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, Animated, Easing } from 'react-native';\nimport { styles } from './WeekDaysSelector.styles';\nimport { ANIMATION_CONFIG } from './constants';\nimport { WeekdaysSection } from './sections/WeekdaysSection';\nimport { FlexibleScheduleSection } from './sections/FlexibleScheduleSection';\nimport TimePicker from '../../../../components/TimePicker';\nimport { TIME_PICKER_COLORS } from './constants';\n\ninterface WeekDaysSelectorProps {\n  colors: Record<string, any>;\n  isDark: boolean;\n  t: (key: string) => string;\n  selectedDays?: string[];\n  onSelectionChange?: (days: string[]) => void;\n  selectedTime?: string;\n  onTimeChange?: (time: string) => void;\n  returnTime?: string;\n  onReturnTimeChange?: (time: string) => void;\n  returnTripTime?: string;\n  onReturnTripTimeChange?: (time: string) => void;\n  returnWeekdaysTime?: string;\n  onReturnWeekdaysTimeChange?: (time: string) => void;\n  isReturnTrip?: boolean;\n  onReturnTripChange?: (isReturnTrip: boolean) => void;\n\n  scheduleType?: string;\n}\n\nexport const WeekDaysSelector: React.FC<WeekDaysSelectorProps> = ({\n  colors,\n  isDark,\n  t,\n  selectedDays = [],\n  onSelectionChange,\n  selectedTime,\n  onTimeChange,\n  returnTime,\n  onReturnTimeChange,\n  returnTripTime,\n  onReturnTripTimeChange,\n  returnWeekdaysTime,\n  onReturnWeekdaysTimeChange,\n  isReturnTrip = false,\n  onReturnTripChange,\n\n  scheduleType\n}) => {\n  const [animations] = useState(() => Array(7).fill(0).map(() => new Animated.Value(1)));\n\n  const animatePress = (index: number) => {\n    Animated.sequence([\n      Animated.timing(animations[index], { toValue: ANIMATION_CONFIG.SCALE, duration: ANIMATION_CONFIG.DURATION, easing: Easing.inOut(Easing.ease), useNativeDriver: true }),\n      Animated.timing(animations[index], { toValue: 1, duration: ANIMATION_CONFIG.DURATION, easing: Easing.inOut(Easing.ease), useNativeDriver: true }),\n    ]).start();\n  };\n\n  const weekDays = [\n    { key: 'mon', label: t('common.mon') },\n    { key: 'tue', label: t('common.tue') },\n    { key: 'wed', label: t('common.wed') },\n    { key: 'thu', label: t('common.thu') },\n    { key: 'fri', label: t('common.fri') },\n    { key: 'sat', label: t('common.sat') },\n    { key: 'sun', label: t('common.sun') },\n  ];\n\n  const toggleDay = (key: string, index: number) => {\n    animatePress(index);\n    const next = selectedDays.includes(key) ? selectedDays.filter(d => d !== key) : [...selectedDays, key];\n    onSelectionChange && onSelectionChange(next);\n  };\n\n  const renderSection = () => {\n    console.log('🔍 WeekDaysSelector Debug:');\n    console.log('  - scheduleType:', scheduleType);\n    console.log('  - selectedDays:', selectedDays);\n    console.log('  - selectedDays.length:', selectedDays.length);\n    \n    switch (scheduleType) {\n      case 'weekdays':\n        return (\n          <WeekdaysSection\n            t={t}\n            selectedDays={selectedDays}\n            selectedTime={selectedTime}\n            onTimeChange={onTimeChange}\n            returnTime={returnTime}\n            onReturnTimeChange={onReturnTimeChange}\n            isReturnTrip={!!isReturnTrip}\n            onReturnTripChange={onReturnTripChange}\n            returnTripTime={returnTripTime}\n            onReturnTripTimeChange={onReturnTripTimeChange}\n            returnWeekdaysTime={returnWeekdaysTime}\n            onReturnWeekdaysTimeChange={onReturnWeekdaysTimeChange}\n          />\n        );\n      case 'flexible':\n        console.log('🎯 WeekDaysSelector: Режим flexible активирован');\n        console.log('🔢 WeekDaysSelector: Проверка условия selectedDays.length >= 2:', selectedDays.length >= 2);\n        \n        return selectedDays.length >= 2 ? (\n          <FlexibleScheduleSection\n            t={t}\n            colors={colors}\n            weekDays={weekDays}\n            selectedDays={selectedDays}\n            selectedTime={selectedTime}\n            onTimeChange={onTimeChange}\n            returnTime={returnTime}\n            onReturnTimeChange={onReturnTimeChange}\n            isReturnTrip={!!isReturnTrip}\n            onReturnTripChange={onReturnTripChange}\n          />\n        ) : (\n          console.log('❌ WeekDaysSelector: FlexibleScheduleSection НЕ отображается - недостаточно дней'),\n          null\n        );\n      \n      // Добавляем кнопку сохранения для режима flexible\n      case 'flexible-with-button':\n        console.log('🎯 WeekDaysSelector: Режим flexible с кнопкой активирован');\n        \n        return selectedDays.length >= 2 ? (\n          <View>\n            <FlexibleScheduleSection\n              t={t}\n              colors={colors}\n              weekDays={weekDays}\n              selectedDays={selectedDays}\n              selectedTime={selectedTime}\n              onTimeChange={onTimeChange}\n              returnTime={returnTime}\n              onReturnTimeChange={onReturnTimeChange}\n              isReturnTrip={!!isReturnTrip}\n              onReturnTripChange={onReturnTripChange}\n\n            />\n                            </View>\n        ) : null;\n      case 'oneWay':\n        console.log('🎯 WeekDaysSelector: Режим oneWay активирован');\n        console.log('⏰ selectedTime:', selectedTime);\n        \n        return (\n          <View>\n            <TimePicker\n              value={selectedTime}\n              onChange={time => onTimeChange?.(time)}\n              onClear={() => onTimeChange?.('')}\n              placeholder={t('common.selectTime')}\n              indicatorColor={TIME_PICKER_COLORS.THERE}\n              title={t('common.there')}\n            />\n            \n\n          </View>\n        );\n      case 'thereAndBack':\n        return (\n          <>\n            <TimePicker\n              value={selectedTime}\n              onChange={time => onTimeChange?.(time)}\n              onClear={() => onTimeChange?.('')}\n              placeholder={t('common.selectTime')}\n              indicatorColor={TIME_PICKER_COLORS.THERE}\n              title={t('common.there')}\n            />\n            {selectedTime && (\n              <View style={{ marginTop: 16 }}>\n                <TimePicker\n                  value={returnTime}\n                  onChange={time => onReturnTimeChange?.(time)}\n                  onClear={() => onReturnTimeChange?.('')}\n                  placeholder={t('common.selectTime')}\n                  indicatorColor={TIME_PICKER_COLORS.BACK}\n                  title={t('common.return')}\n                />\n              </View>\n            )}\n          </>\n        );\n      default:\n        console.log('⚠️ WeekDaysSelector: Неизвестный scheduleType или null');\n        return null;\n    }\n  };\n\n  return (\n    <View>\n      <View style={styles.container}>\n        {weekDays.map((day, index) => {\n          const isActive = selectedDays.includes(day.key);\n          return (\n            <Animated.View key={day.key} style={{ transform: [{ scale: animations[index] }] }}>\n              <TouchableOpacity\n                testID={`day-button-${day.key}`}\n                style={[styles.dayButton, { \n                  backgroundColor: isActive ? colors.primary : isDark ? colors.surface : colors.background\n                }]}\n                activeOpacity={0.8}\n                onPress={() => toggleDay(day.key, index)}\n              >\n                <Text style={[styles.dayText, { color: isActive ? '#FFFFFF' : isDark ? colors.text : colors.primary, opacity: isActive ? 1 : isDark ? 0.8 : 1 }]}>\n                  {day.label}\n                </Text>\n              </TouchableOpacity>\n            </Animated.View>\n          );\n        })}\n      </View>\n\n      {selectedDays.length > 0 && (\n        <View style={{ marginTop: 8 }}>\n          {renderSection()}\n        </View>\n      )}\n    </View>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/hooks/useCustomizedDays.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/sections/FlexibleScheduleSection.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/sections/FlexibleScheduleSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AsyncStorage' is defined but never used.","line":10,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[669,672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[669,672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setMainValidationError' is assigned a value but never used.","line":41,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateMainSchedule' is assigned a value but never used.","line":76,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, TouchableOpacity, Text } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport TimePicker from '../../../../../components/TimePicker';\nimport ReturnTripCheckbox from '../../../../../components/ReturnTripCheckbox';\nimport { styles } from './FlexibleScheduleSection.styles';\nimport { TIME_PICKER_COLORS } from '../constants';\nimport { CustomizationModal } from '../CustomizationModal';\nimport { useCustomizedDays } from '../hooks/useCustomizedDays';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\ninterface Props {\n  t: (key: string) => string;\n  colors: Record<string, any>;\n  weekDays: { key: string; label: string }[];\n  selectedDays: string[];\n  selectedTime?: string;\n  onTimeChange?: (time: string) => void;\n  returnTime?: string;\n  onReturnTimeChange?: (time: string) => void;\n  isReturnTrip: boolean;\n  onReturnTripChange?: (v: boolean) => void;\n\n}\n\nexport const FlexibleScheduleSection: React.FC<Props> = ({\n  t,\n  colors,\n  weekDays,\n  selectedDays,\n  selectedTime,\n  onTimeChange,\n  returnTime,\n  onReturnTimeChange,\n  isReturnTrip,\n  onReturnTripChange,\n\n}) => {\n  const customization = useCustomizedDays();\n  const customizedKeys = Object.keys(customization.customizedDays);\n  const [mainValidationError, setMainValidationError] = useState<string | null>(null);\n  \n  // Функция для сортировки дней по порядку недели\n  const sortDaysByWeekOrder = (days: string[]) => {\n    const weekOrder = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n    return days.sort((a, b) => weekOrder.indexOf(a) - weekOrder.indexOf(b));\n  };\n\n  // Проверяем, есть ли еще дни для настройки (исключаем первый день, который уже показан сверху)\n  const remainingDaysToCustomize = selectedDays.slice(1).filter(day => !customizedKeys.includes(day));\n  const hasMoreDaysToCustomize = remainingDaysToCustomize.length > 0;\n  \n  // Логирование для отладки кнопки сохранения\n  const shouldShowSaveButton = selectedTime || customizedKeys.length > 0;\n  console.log('🔍 FlexibleScheduleSection Debug:');\n  console.log('  - selectedTime:', selectedTime);\n  console.log('  - customizedKeys:', customizedKeys);\n  console.log('  - customizedKeys.length:', customizedKeys.length);\n  console.log('  - shouldShowSaveButton:', shouldShowSaveButton);\n\n  // Функция для получения цвета дня\n  const getDayColor = (dayKey: string) => {\n    const colorMap: Record<string, string> = {\n      'mon': TIME_PICKER_COLORS.MONDAY,\n      'tue': TIME_PICKER_COLORS.TUESDAY,\n      'wed': TIME_PICKER_COLORS.WEDNESDAY,\n      'thu': TIME_PICKER_COLORS.THURSDAY,\n      'fri': TIME_PICKER_COLORS.FRIDAY,\n      'sat': TIME_PICKER_COLORS.SATURDAY,\n      'sun': TIME_PICKER_COLORS.SUNDAY,\n    };\n    return colorMap[dayKey] || TIME_PICKER_COLORS.THERE;\n  };\n\n  // Функция валидации основного расписания\n  const validateMainSchedule = (): string | null => {\n    if (!selectedTime || !selectedTime.trim()) {\n      return 'Выберите время \"туда\"';\n    }\n    \n    if (isReturnTrip && (!returnTime || !returnTime.trim())) {\n      return 'Выберите время \"обратно\"';\n    }\n    \n    // Проверяем кастомизированные дни\n    for (const dayKey of customizedKeys) {\n      const dayData = customization.customizedDays[dayKey];\n      if (!dayData.there || !dayData.there.trim()) {\n        const day = weekDays.find(d => d.key === dayKey);\n        return `Выберите время \"туда\" для ${day?.label || dayKey}`;\n      }\n      \n      if (isReturnTrip && (!dayData.back || !dayData.back.trim())) {\n        const day = weekDays.find(d => d.key === dayKey);\n        return `Выберите время \"обратно\" для ${day?.label || dayKey}`;\n      }\n    }\n    \n    return null;\n  };\n\n\n\n  return (\n    <View>\n      <View style={styles.rowBetween}>\n        <View style={styles.flex1}>\n          <TimePicker\n            value={selectedTime}\n            onChange={onTimeChange}\n            onClear={() => onTimeChange?.('')}\n            placeholder={t('common.selectTime')}\n            indicatorColor={getDayColor(sortDaysByWeekOrder([...selectedDays])[0])}\n            dayLabel={weekDays.find(d => d.key === sortDaysByWeekOrder([...selectedDays])[0])?.label || ''}\n          />\n        </View>\n        {hasMoreDaysToCustomize && customizedKeys.length === 0 && (\n          <TouchableOpacity style={[styles.addButton, { backgroundColor: colors.primary }]} onPress={customization.openModal}>\n            <Ionicons name=\"add\" size={20} color=\"#FFFFFF\" />\n          </TouchableOpacity>\n        )}\n      </View>\n\n      {sortDaysByWeekOrder(customizedKeys.filter(dayKey => selectedDays.includes(dayKey))).map((dayKey, index, filteredKeys) => {\n        const day = weekDays.find(d => d.key === dayKey);\n        if (!day) return null;\n        const isLast = index === filteredKeys.length - 1;\n        return (\n          <View key={dayKey} style={[styles.rowBetween, styles.spacerTop16]}>\n            <View style={styles.flex1}>\n              <TimePicker\n                value={customization.customizedDays[dayKey]?.there || ''}\n                onChange={(time) => customization.setCustomizedDays({\n                  ...customization.customizedDays,\n                  [dayKey]: { ...customization.customizedDays[dayKey], there: time, back: customization.customizedDays[dayKey]?.back || '' }\n                })}\n                placeholder={t('common.selectTime')}\n                indicatorColor={getDayColor(dayKey)}\n                dayLabel={day.label}\n              />\n            </View>\n            {hasMoreDaysToCustomize && isLast && (\n              <TouchableOpacity style={[styles.addButton, { backgroundColor: colors.primary }]} onPress={customization.openModal}>\n                <Ionicons name=\"add\" size={20} color=\"#FFFFFF\" />\n              </TouchableOpacity>\n            )}\n          </View>\n        );\n      })}\n\n      {(selectedTime || customizedKeys.length > 0) && (\n        <View style={[styles.spacerTop16, styles.spacerBottom16]}>\n          <ReturnTripCheckbox\n            checked={isReturnTrip}\n            onCheckedChange={v => onReturnTripChange?.(v)}\n            label={t('common.roundTrip')}\n          />\n        </View>\n      )}\n\n      {isReturnTrip && (selectedTime || customizedKeys.length > 0) && (\n        <>\n          <View style={styles.rowBetween}>\n            <View style={styles.flex1}>\n              <TimePicker\n                value={returnTime}\n                onChange={onReturnTimeChange}\n                onClear={() => onReturnTimeChange?.('')}\n                placeholder={t('common.selectTime')}\n                indicatorColor={getDayColor(sortDaysByWeekOrder([...selectedDays])[0])}\n                dayLabel={weekDays.find(d => d.key === sortDaysByWeekOrder([...selectedDays])[0])?.label || ''}\n              />\n            </View>\n            {hasMoreDaysToCustomize && customizedKeys.length === 0 && (\n              <TouchableOpacity style={[styles.addButton, { backgroundColor: colors.primary }]} onPress={customization.openModal}>\n                <Ionicons name=\"add\" size={20} color=\"#FFFFFF\" />\n              </TouchableOpacity>\n            )}\n          </View>\n\n          {sortDaysByWeekOrder(customizedKeys.filter(dayKey => selectedDays.includes(dayKey))).map((dayKey, index, filteredKeys) => {\n            const day = weekDays.find(d => d.key === dayKey);\n            if (!day) return null;\n            const isLast = index === filteredKeys.length - 1;\n            return (\n              <View key={`return-${dayKey}`} style={[styles.rowBetween, styles.spacerTop16]}>\n                <View style={styles.flex1}>\n                  <TimePicker\n                    value={customization.customizedDays[dayKey]?.back || ''}\n                    onChange={(time) => customization.setCustomizedDays({\n                      ...customization.customizedDays,\n                      [dayKey]: { ...customization.customizedDays[dayKey], there: customization.customizedDays[dayKey]?.there || '', back: time }\n                    })}\n                    placeholder={t('common.selectTime')}\n                    indicatorColor={getDayColor(dayKey)}\n                    dayLabel={day.label}\n                  />\n                </View>\n                {hasMoreDaysToCustomize && isLast && (\n                  <TouchableOpacity style={[styles.addButton, { backgroundColor: colors.primary }]} onPress={customization.openModal}>\n                    <Ionicons name=\"add\" size={20} color=\"#FFFFFF\" />\n                  </TouchableOpacity>\n                )}\n              </View>\n            );\n          })}\n        </>\n      )}\n\n      {/* Ошибка валидации */}\n      {mainValidationError && (\n        <View style={{\n          backgroundColor: '#FFE6E6',\n          padding: 12,\n          borderRadius: 8,\n          marginTop: 16,\n          borderWidth: 1,\n          borderColor: '#FF6B6B',\n        }}>\n          <Text style={{ color: '#D32F2F', fontSize: 14, textAlign: 'center' }}>\n            {mainValidationError}\n          </Text>\n        </View>\n      )}\n\n      <CustomizationModal\n        visible={customization.showCustomizationModal}\n        onClose={customization.closeModal}\n        onSave={customization.saveModal}\n        colors={colors}\n        t={t}\n        weekDays={weekDays}\n        selectedDays={selectedDays}\n        selectedCustomDays={customization.selectedCustomDays}\n        onSelectedCustomDaysChange={customization.setSelectedCustomDays}\n        tempCustomizedDays={customization.tempCustomizedDays}\n        onTempCustomizedDaysChange={customization.setTempCustomizedDays}\n        isReturnTrip={isReturnTrip}\n        validationError={customization.validationError}\n      />\n    </View>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/sections/WeekdaysSection.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/components/sections/WeekdaysSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Ionicons' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState } from 'react';\nimport { SafeAreaView, View, Text, ScrollView, TouchableOpacity, Alert } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useTheme } from '../../../context/ThemeContext';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport { getCurrentColors } from '../../../constants/colors';\nimport ProgressBar from './components/ProgressBar';\nimport ScheduleTypeSelector from './components/ScheduleTypeSelector';\nimport FixDriveAddressPage from './components/FixDriveAddressPage';\nimport FixDriveConfirm from './components/FixDriveConfirm';\nimport { FixDrivePage, AddressData } from './types/fix-drive.types';\n\ninterface FixDriveScreenProps {\n  isChild?: boolean;\n}\n\nconst FixDriveScreen: React.FC<FixDriveScreenProps> = ({ isChild = false }) => {\n  const { isDark } = useTheme();\n  const colors = useMemo(() => getCurrentColors(isDark), [isDark]);\n  const { t } = useLanguage();\n\n  const [currentPage, setCurrentPage] = useState<FixDrivePage>('timeSchedule');\n  const [selectedScheduleType, setSelectedScheduleType] = useState<string>('');\n  const [selectedDays, setSelectedDays] = useState<string[]>([]);\n  const [selectedTime, setSelectedTime] = useState<string>('');\n  const [returnTime, setReturnTime] = useState<string>('');\n  const [returnTripTime, setReturnTripTime] = useState<string>('');\n  const [returnWeekdaysTime, setReturnWeekdaysTime] = useState<string>('');\n  const [isReturnTrip, setIsReturnTrip] = useState(false);\n  const [addressData, setAddressData] = useState<AddressData | null>(null);\n\n  // Проверяем готовность данных для отображения кнопки сохранения\n  const isScheduleReadyToSave = () => {\n    console.log('🔍 Проверка готовности кнопки \"Сохранить\":');\n    console.log('  - scheduleType:', `\"${selectedScheduleType}\" (type: ${typeof selectedScheduleType})`);\n    console.log('  - selectedDays:', selectedDays);\n    console.log('  - selectedTime:', selectedTime);\n    console.log('  - returnTime:', returnTime);\n    console.log('  - isReturnTrip:', isReturnTrip);\n    console.log('  - returnWeekdaysTime:', returnWeekdaysTime);\n\n    // Базовые проверки\n    if (!selectedScheduleType || selectedDays.length === 0) {\n      console.log('❌ Базовые поля не заполнены');\n      return false;\n    }\n\n    // Строгие проверки в зависимости от типа расписания\n    switch (selectedScheduleType) {\n      case 'oneWay': {\n        // Нужно: время туда\n        const oneWayReady = !!selectedTime;\n        console.log('🎯 oneWay готов:', oneWayReady, '(нужно только selectedTime)');\n        return oneWayReady;\n      }\n\n      case 'thereAndBack': {\n        // Нужно: время туда И время обратно (всегда)\n        const thereAndBackReady = !!selectedTime && !!returnTime;\n        console.log('🔄 thereAndBack готов:', thereAndBackReady, '(нужно selectedTime + returnTime)');\n        return thereAndBackReady;\n      }\n\n      case 'weekdays':\n        // Нужно: selectedTime + (returnWeekdaysTime если включена обратная поездка)\n        if (!selectedTime) {\n          console.log('❌ weekdays: нет selectedTime');\n          return false;\n        }\n        // Если пользователь включил обратную поездку - нужно время обратно\n        if (isReturnTrip && !returnWeekdaysTime) {\n          console.log('❌ weekdays: включена обратная поездка, но нет returnWeekdaysTime');\n          return false;\n        }\n        console.log('📅 weekdays готов: true (все поля заполнены)');\n        return true;\n\n      case 'flexible':\n        // Нужно: selectedTime + (returnTime если включена обратная поездка)\n        if (!selectedTime) {\n          console.log('❌ flexible: нет selectedTime');\n          return false;\n        }\n        // Если пользователь включил обратную поездку - нужно время обратно\n        if (isReturnTrip && !returnTime) {\n          console.log('❌ flexible: включена обратная поездка, но нет returnTime');\n          return false;\n        }\n        console.log('🔧 flexible готов: true (все поля заполнены)');\n        return true;\n\n      default:\n        console.log('❌ Неизвестный тип расписания:', selectedScheduleType);\n        return false;\n    }\n  };\n\n  // Проверяем есть ли видимый чекбокс \"Туда-обратно\"\n  const hasVisibleCheckbox = () => {\n    // Чекбокс появляется когда есть время и это flexible/thereAndBack режимы\n    if (!selectedTime) return false;\n    \n    // В flexible режиме чекбокс появляется когда выбрано время\n    if (selectedScheduleType === 'flexible') return true;\n    \n    // В thereAndBack режиме всегда есть поля для обратного времени\n    if (selectedScheduleType === 'thereAndBack') return true;\n    \n    // В weekdays режиме может быть чекбокс\n    if (selectedScheduleType === 'weekdays') return true;\n    \n    return false;\n  };\n\n  // Нужен ли дополнительный отступ снизу\n  const needsBottomPadding = () => {\n    const hasButton = isScheduleReadyToSave();\n    const hasCheckbox = hasVisibleCheckbox();\n    \n    console.log('🔍 Проверка отступа снизу:');\n    console.log('  - hasButton (кнопка Сохранить):', hasButton);\n    console.log('  - hasCheckbox (чекбокс виден):', hasCheckbox);\n    console.log('  - needsPadding:', !hasButton && !hasCheckbox);\n    \n    // Если нет кнопки \"Сохранить\" И нет чекбокса = нужен отступ\n    return !hasButton && !hasCheckbox;\n  };\n\n  const handleProgressStepPress = (page: FixDrivePage) => {\n    setCurrentPage(page);\n  };\n\n  const handleScheduleTypeSelect = (type: string) => {\n    setSelectedScheduleType(type);\n  };\n\n  const handleAddressPageNext = (data: AddressData) => {\n    setAddressData(data);\n    setCurrentPage('confirmation');\n  };\n\n  // Универсальная валидация расписания\n  const validateSchedule = () => {\n    console.log('🔍 Универсальная валидация расписания...');\n    console.log('📋 Тип расписания:', selectedScheduleType);\n    console.log('📅 Выбранные дни:', selectedDays);\n    console.log('⏰ Время туда:', selectedTime);\n    console.log('🔄 Время обратно:', returnTime);\n    console.log('🚌 Обратная поездка:', isReturnTrip);\n\n    // Проверяем базовые поля\n    if (!selectedScheduleType) {\n      Alert.alert('Ошибка', 'Выберите тип расписания');\n      return false;\n    }\n\n    if (selectedDays.length === 0) {\n      Alert.alert('Ошибка', 'Выберите дни недели');\n      return false;\n    }\n\n    // Валидация в зависимости от типа расписания\n    switch (selectedScheduleType) {\n      case 'oneWay':\n        if (!selectedTime) {\n          Alert.alert('Ошибка', 'Выберите время отправления');\n          return false;\n        }\n        break;\n\n      case 'thereAndBack':\n        if (!selectedTime) {\n          Alert.alert('Ошибка', 'Выберите время \"туда\"');\n          return false;\n        }\n        if (!returnTime) {\n          Alert.alert('Ошибка', 'Выберите время \"обратно\"');\n          return false;\n        }\n        break;\n\n      case 'weekdays':\n        if (!selectedTime) {\n          Alert.alert('Ошибка', 'Выберите время для будней');\n          return false;\n        }\n        if (isReturnTrip && !returnWeekdaysTime) {\n          Alert.alert('Ошибка', 'Выберите время обратно для будней');\n          return false;\n        }\n        break;\n\n      case 'flexible':\n        if (!selectedTime) {\n          Alert.alert('Ошибка', 'Выберите базовое время');\n          return false;\n        }\n        if (isReturnTrip && !returnTime) {\n          Alert.alert('Ошибка', 'Выберите время обратно');\n          return false;\n        }\n        break;\n\n      default:\n        Alert.alert('Ошибка', 'Неизвестный тип расписания');\n        return false;\n    }\n\n    console.log('✅ Валидация пройдена успешно');\n    return true;\n  };\n\n  // Универсальное сохранение расписания\n  const saveScheduleToStorage = async () => {\n    try {\n      console.log('💾 Сохранение расписания в localStorage...');\n      \n      const scheduleData = {\n        scheduleType: selectedScheduleType,\n        selectedDays,\n        selectedTime,\n        returnTime,\n        returnTripTime,\n        returnWeekdaysTime,\n        isReturnTrip,\n        timestamp: new Date().toISOString(),\n      };\n\n      console.log('📊 Данные для сохранения:', JSON.stringify(scheduleData, null, 2));\n\n      await AsyncStorage.setItem('universalSchedule', JSON.stringify(scheduleData));\n      \n      console.log('✅ Расписание успешно сохранено в localStorage');\n      return true;\n    } catch (error) {\n      console.error('❌ Ошибка сохранения расписания:', error);\n      Alert.alert('Ошибка', 'Не удалось сохранить расписание');\n      return false;\n    }\n  };\n\n  const handleSaveAndNext = async () => {\n    console.log('🔘 Универсальная кнопка \"Сохранить\" нажата!');\n    \n    if (currentPage === 'timeSchedule') {\n      // Валидируем расписание\n      if (!validateSchedule()) {\n        return;\n      }\n\n      // Сохраняем расписание\n      const saved = await saveScheduleToStorage();\n      if (!saved) {\n        return;\n      }\n\n      // Переходим к следующей странице\n      console.log('🚀 Переход к странице адресов');\n      setCurrentPage('addresses');\n      \n    } else if (currentPage === 'addresses') {\n      setCurrentPage('confirmation');\n    }\n  };\n\n  const renderContent = () => {\n    // Для страницы confirmation используем другую структуру\n    if (currentPage === 'confirmation') {\n      return (\n        <View style={{ flex: 1 }}>\n          {/* Прогресс-бар */}\n          <View style={{ \n            paddingHorizontal: 20,\n            paddingTop: 20\n          }}>\n            <ProgressBar \n              currentPage={currentPage} \n              onStepPress={handleProgressStepPress}\n            />\n          </View>\n          \n          {/* Компонент подтверждения */}\n          <FixDriveConfirm \n            scheduleData={{\n              scheduleType: selectedScheduleType,\n              selectedDays,\n              selectedTime,\n              returnTime,\n              returnTripTime,\n              returnWeekdaysTime,\n              isReturnTrip,\n            }}\n            addressData={addressData}\n          />\n        </View>\n      );\n    }\n\n    // Для остальных страниц используем ScrollView\n    return (\n      <ScrollView \n        style={{ \n          flex: 1, \n          padding: 20\n        }} \n        contentContainerStyle={{\n          paddingBottom: needsBottomPadding() ? 80 : 20\n        }}\n        showsVerticalScrollIndicator={false}\n      >\n        {/* Прогресс-бар */}\n        <View style={{ \n          paddingHorizontal: 0,\n          paddingTop: 0\n        }}>\n          <ProgressBar \n            currentPage={currentPage} \n            onStepPress={handleProgressStepPress}\n          />\n        </View>\n        \n        {/* Контейнеры страниц */}\n        <View style={{ marginTop: 16 }}>\n          {currentPage === 'addresses' && (\n            <FixDriveAddressPage \n              onNext={handleAddressPageNext}\n              initialData={addressData}\n            />\n          )}\n          \n          {currentPage === 'timeSchedule' && (\n            <View style={{ padding: 0 }}>\n              <ScheduleTypeSelector \n                onSelect={handleScheduleTypeSelect}\n                selectedType={selectedScheduleType}\n                selectedDays={selectedDays}\n                onDaysChange={setSelectedDays}\n                selectedTime={selectedTime}\n                onTimeChange={setSelectedTime}\n                returnTime={returnTime}\n                onReturnTimeChange={setReturnTime}\n                returnTripTime={returnTripTime}\n                onReturnTripTimeChange={setReturnTripTime}\n                returnWeekdaysTime={returnWeekdaysTime}\n                onReturnWeekdaysTimeChange={setReturnWeekdaysTime}\n                isReturnTrip={isReturnTrip}\n                onReturnTripChange={setIsReturnTrip}\n              />\n              \n              {/* Кнопка Сохранить - показывается только когда все поля заполнены */}\n              {isScheduleReadyToSave() && (\n                <TouchableOpacity \n                  style={{ \n                    backgroundColor: colors.primary,\n                    paddingVertical: 12,\n                    marginHorizontal: 20,\n                    marginTop: 24,\n                    marginBottom: 20,\n                    borderRadius: 8,\n                  }}\n                  onPress={handleSaveAndNext}\n                >\n                  <Text style={{ \n                    color: '#FFFFFF', \n                    fontSize: 16, \n                    fontWeight: '600',\n                    textAlign: 'center'\n                  }}>\n                    {t('common.save')}\n                  </Text>\n                </TouchableOpacity>\n              )}\n            </View>\n          )}\n        </View>\n      </ScrollView>\n    );\n  };\n\n  return (\n    <>\n      {isChild ? (\n        renderContent()\n      ) : (\n        <View style={{ \n          flex: 1, \n          backgroundColor: currentPage === 'confirmation' ? 'transparent' : colors.background \n        }}>\n          <SafeAreaView style={{ flex: 1 }}>\n            {renderContent()}\n          </SafeAreaView>\n        </View>\n      )}\n    </>\n  );\n};\n\nexport default FixDriveScreen;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/types/fix-drive.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixDriveScreen/utils/progressUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/FixWaveScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TouchableOpacity' is defined but never used.","line":2,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Ionicons' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'progress' is assigned a value but never used.","line":26,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'forceClearSession' is assigned a value but never used.","line":29,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleInfoPress' is assigned a value but never used.","line":65,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState, useEffect } from 'react';\nimport { SafeAreaView, View, Text, TouchableOpacity, ScrollView, Alert } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../../context/ThemeContext';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport { getCurrentColors } from '../../../constants/colors';\nimport { createFixWaveScreenStyles } from './styles';\nimport { useFixWaveNavigation } from './hooks/useFixWaveNavigation';\nimport { useSessionCleanup } from '../../../hooks/useSessionCleanup';\nimport ProgressBar from './components/ProgressBar';\nimport AddressPage from './components/AddressPage';\nimport TimeSchedulePage from './components/TimeSchedulePage';\nimport { AddressData, TimeScheduleData, FixWavePage } from './types/fix-wave.types';\n\ninterface FixWaveScreenProps {\n  isChild?: boolean;\n}\n\nconst FixWaveScreen: React.FC<FixWaveScreenProps> = ({ isChild = false }) => {\n  const { isDark } = useTheme();\n  const colors = useMemo(() => getCurrentColors(isDark), [isDark]);\n  const styles = useMemo(() => createFixWaveScreenStyles(isDark), [isDark]);\n  const { t } = useLanguage();\n\n  // Хук для навигации между страницами\n  const { currentPage, progress, sessionData, nextPage, previousPage, goToPage } = useFixWaveNavigation();\n  \n  // Хук для автоматической очистки сессии\n  const { forceClearSession } = useSessionCleanup();\n  \n  // Состояния для данных\n  const [addressData, setAddressData] = useState<AddressData | null>(null);\n  const [timeScheduleData, setTimeScheduleData] = useState<TimeScheduleData | null>(null);\n\n  // Обновляем данные при изменении sessionData\n  useEffect(() => {\n    if (sessionData?.addressData) {\n      setAddressData(sessionData.addressData);\n    }\n    if (sessionData?.timeScheduleData) {\n      setTimeScheduleData(sessionData.timeScheduleData);\n    }\n  }, [sessionData]);\n\n  // Обработчики навигации между страницами\n  const handleAddressPageNext = (data: AddressData) => {\n    setAddressData(data);\n    nextPage({ addressData: data });\n  };\n\n  const handleTimeScheduleNext = (data: TimeScheduleData) => {\n    setTimeScheduleData(data);\n    nextPage({ timeScheduleData: data });\n  };\n\n  const handleTimeScheduleBack = () => {\n    previousPage();\n  };\n\n  const handleProgressStepPress = (page: FixWavePage) => {\n    // Переходим к выбранной странице\n    goToPage(page);\n  };\n\n  const handleInfoPress = () => {\n    Alert.alert(\n      t('common.info'),\n      t('common.scheduleInfo'),\n      [{ text: t('common.ok') }]\n    );\n  };\n\n  const Content = () => (\n    <ScrollView style={{ flex: 1, padding: 20 }} showsVerticalScrollIndicator={false}>\n        \n        <ProgressBar \n          currentPage={currentPage} \n          onStepPress={handleProgressStepPress}\n        />\n        \n        {/* Контейнеры страниц */}\n        <View style={{ marginTop: 10 }}>\n          {currentPage === 'addresses' && (\n            <AddressPage \n              onNext={handleAddressPageNext}\n              initialData={addressData}\n            />\n          )}\n          \n          {currentPage === 'timeSchedule' && (\n            <TimeSchedulePage \n              onNext={handleTimeScheduleNext}\n              onBack={handleTimeScheduleBack}\n              initialData={timeScheduleData}\n            />\n          )}\n          \n          {currentPage === 'confirmation' && (\n            <View style={{ padding: 20 }}>\n              <Text style={{ \n                fontSize: 18, \n                fontWeight: '600', \n                color: colors.text,\n                textAlign: 'center'\n              }}>\n                Подтверждение заказа\n              </Text>\n              <Text style={{ \n                fontSize: 16, \n                color: colors.textSecondary,\n                marginTop: 10,\n                textAlign: 'center'\n              }}>\n                Здесь будет страница подтверждения\n              </Text>\n            </View>\n          )}\n        </View>\n      </ScrollView>\n  );\n\n  return (\n    <>\n      {isChild ? (\n        <Content />\n      ) : (\n        <View style={styles.container}>\n          <SafeAreaView style={{ flex: 1 }}>\n            <Content />\n          </SafeAreaView>\n        </View>\n      )}\n    </>\n  );\n};\n\nexport default FixWaveScreen;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/AddressPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1462,1465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1462,1465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3280,3283],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3280,3283],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3544,3547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3544,3547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, Alert } from 'react-native';\nimport { useTheme } from '../../../../context/ThemeContext';\nimport { useLanguage } from '../../../../context/LanguageContext';\nimport { getCurrentColors } from '../../../../constants/colors';\nimport FixDriveDropdown from '../../../../components/FixDriveDropdown';\nimport FixDriveMapInput from '../../../../components/FixDriveMapInput';\nimport UnifiedDateTimePickerModal from './UnifiedDateTimePickerModal';\nimport { useFixDriveFamilyMembers } from '../../../../hooks/useFixDriveFamilyMembers';\nimport { fixwaveOrderService } from '../../../../services/fixwaveOrderService';\nimport { AddressData } from '../types/fix-wave.types';\nimport { OrderData } from '../../../../services/fixwaveOrderService';\n\ninterface AddressPageProps {\n  onNext: (data: AddressData) => void;\n  initialData?: AddressData;\n}\n\nconst AddressPage: React.FC<AddressPageProps> = ({ onNext, initialData }) => {\n  const { isDark } = useTheme();\n  const colors = getCurrentColors(isDark);\n  const { t } = useLanguage();\n  \n  const { getFamilyMemberOptions, getFamilyMemberById, loading } = useFixDriveFamilyMembers();\n  \n  const [selectedFamilyMember, setSelectedFamilyMember] = useState<string>(initialData?.familyMemberId || '');\n  const [selectedPackage, setSelectedPackage] = useState<string>(initialData?.packageType || '');\n  const [addresses, setAddresses] = useState<any[]>(initialData?.addresses || []);\n  const [isSaving, setIsSaving] = useState(false);\n  const [startDateTime, setStartDateTime] = useState<Date | null>(null);\n  const [pickerVisible, setPickerVisible] = useState(false);\n\n  // Загружаем данные из сессии при инициализации и при изменении initialData\n  useEffect(() => {\n    const loadSessionData = async () => {\n      try {\n        const sessionData = await fixwaveOrderService.loadSessionData();\n        console.log('Session data loaded:', sessionData); // Добавляем лог для отладки\n        if (sessionData?.addressData) {\n          const { addressData } = sessionData;\n          setSelectedFamilyMember(addressData.familyMemberId || '');\n          setSelectedPackage(addressData.packageType || '');\n          setAddresses(addressData.addresses || []);\n          console.log('Addresses restored:', addressData.addresses); // Добавляем лог для отладки\n        }\n      } catch (error) {\n        console.error('Error loading session data:', error);\n      }\n    };\n    loadSessionData();\n  }, [initialData]); // Добавляем зависимость от initialData\n\n  const familyMemberOptions = getFamilyMemberOptions();\n  const packageOptions = [\n    { key: 'standard', label: t('premium.packages.standard'), value: 'standard' },\n    { key: 'plus', label: t('premium.packages.plus'), value: 'plus' },\n    { key: 'premium', label: t('premium.packages.premium'), value: 'premium' },\n  ];\n\n  const handleFamilyMemberSelect = (value: string) => {\n    setSelectedFamilyMember(value);\n    // Сохраняем в сессию при изменении участника семьи\n    saveToSession(addresses);\n  };\n\n  const handlePackageSelect = (value: string) => {\n    setSelectedPackage(value);\n    // Сохраняем в сессию при изменении пакета\n    saveToSession(addresses);\n  };\n\n  const handleAddressesChange = (newAddresses: any[]) => {\n    console.log('Addresses changed:', newAddresses); // Добавляем лог для отладки\n    setAddresses(newAddresses);\n    // Сохраняем адреса в сессию при каждом изменении\n    saveToSession(newAddresses);\n  };\n\n  const saveToSession = async (newAddresses: any[]) => {\n    try {\n      const selectedMember = getFamilyMemberById(selectedFamilyMember);\n      const familyMemberName = selectedMember ? `${selectedMember.name} ${selectedMember.surname}` : '';\n\n      // Сначала загружаем существующие данные сессии\n      const existingSession = await fixwaveOrderService.loadSessionData();\n      \n      const sessionData = {\n        ...existingSession, // Сохраняем существующие данные\n        currentPage: 'addresses',\n        addressData: {\n          familyMemberId: selectedFamilyMember,\n          familyMemberName,\n          packageType: selectedPackage,\n          addresses: newAddresses.map(addr => ({\n            id: addr.id,\n            type: addr.type,\n            address: addr.address,\n            coordinates: addr.coordinate,\n          })),\n        },\n      };\n      await fixwaveOrderService.saveSessionData(sessionData);\n      console.log('Session saved:', sessionData); // Добавляем лог для отладки\n    } catch (error) {\n      console.error('Error saving to session:', error);\n    }\n  };\n\n  const handleSaveAndNext = async () => {\n    try {\n      setIsSaving(true);\n\n      const selectedMember = getFamilyMemberById(selectedFamilyMember);\n      const familyMemberName = selectedMember ? `${selectedMember.name} ${selectedMember.surname}` : '';\n\n      const addressData: AddressData = {\n        familyMemberId: selectedFamilyMember,\n        familyMemberName,\n        packageType: selectedPackage,\n        addresses: addresses.map(addr => ({\n          id: addr.id,\n          type: addr.type,\n          address: addr.address,\n          coordinates: addr.coordinate || addr.coordinates, // Используем оба формата\n        })),\n      };\n\n      // Валидируем данные\n      const validation = fixwaveOrderService.validateOrderData(addressData);\n      if (!validation.isValid) {\n        Alert.alert(\n          'Ошибка валидации',\n          validation.errors.join('\\n'),\n          [{ text: 'OK' }]\n        );\n        return;\n      }\n\n      // Сохраняем данные в заказ (финальное сохранение)\n      await fixwaveOrderService.saveOrderData(addressData as Omit<OrderData, 'id' | 'createdAt'>);\n\n      // Переходим к следующей странице\n      onNext(addressData);\n\n    } catch (error) {\n      console.error('Error saving order:', error);\n      Alert.alert(\n        'Ошибка',\n        'Не удалось сохранить данные заказа. Попробуйте еще раз.',\n        [{ text: 'OK' }]\n      );\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  return (\n    <View style={{ marginTop: 10 }}>\n      {/* Выбор участника семьи */}\n      {loading ? (\n        <Text style={{ color: colors.primary, textAlign: 'center', marginBottom: 16 }}>\n          Загрузка участников семьи...\n        </Text>\n      ) : (\n        <FixDriveDropdown\n          label={t('common.fixDrive.selectFamilyMember')}\n          placeholder={t('common.fixDrive.familyMemberPlaceholder')}\n          options={familyMemberOptions}\n          selectedValue={selectedFamilyMember}\n          onSelect={handleFamilyMemberSelect}\n        />\n      )}\n\n      {/* Выбор пакета */}\n      <FixDriveDropdown\n        label={t('common.fixDrive.selectPackage')}\n        placeholder={t('common.fixDrive.packagePlaceholder')}\n        options={packageOptions}\n        selectedValue={selectedPackage}\n        onSelect={handlePackageSelect}\n      />\n\n      {/* Дата начала (контейнер, открывающий модалку даты+времени) */}\n      <View style={{ marginBottom: 16 }}>\n        <Text style={{\n          fontSize: 14,\n          fontWeight: '500',\n          marginBottom: 8,\n          color: colors.text\n        }}>\n          {t('new.dateStart')}\n        </Text>\n        <TouchableOpacity\n          onPress={() => setPickerVisible(true)}\n          style={{\n            paddingVertical: 12,\n            paddingHorizontal: 12,\n            borderWidth: 1,\n            borderColor: colors.border,\n            borderRadius: 8,\n            backgroundColor: colors.surface\n          }}\n        >\n          <Text style={{\n            fontSize: 15,\n            color: startDateTime ? colors.text : colors.textSecondary\n          }}>\n            {startDateTime\n              ? `${String(startDateTime.getDate()).padStart(2, '0')}.${String(startDateTime.getMonth()+1).padStart(2, '0')}.${startDateTime.getFullYear()} ${String(startDateTime.getHours()).padStart(2, '0')}:${String(startDateTime.getMinutes()).padStart(2, '0')}`\n              : '00 00 00 00 00'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Ввод адреса через карту */}\n      <FixDriveMapInput \n        onAddressesChange={handleAddressesChange}\n        initialAddresses={addresses}\n      />\n\n      <UnifiedDateTimePickerModal\n        visible={pickerVisible}\n        title={t('new.dateStart')}\n        value={startDateTime}\n        onCancel={() => setPickerVisible(false)}\n        onConfirm={(d) => { setStartDateTime(d); setPickerVisible(false); }}\n        colors={colors}\n        t={t}\n        isDark={isDark}\n      />\n      \n      {/* Кнопка Сохранить и Продолжить */}\n      <TouchableOpacity \n        style={{ \n          backgroundColor: isSaving ? colors.textSecondary : colors.primary,\n          paddingVertical: 12,\n          marginHorizontal: 20,\n          marginTop: 8,\n          marginBottom: 20,\n          borderRadius: 8,\n          opacity: isSaving ? 0.7 : 1,\n        }}\n        onPress={handleSaveAndNext}\n        disabled={isSaving}\n      >\n        <Text style={{ \n          color: '#FFFFFF', \n          fontSize: 16, \n          fontWeight: '600',\n          textAlign: 'center'\n        }}>\n          {isSaving ? 'Сохранение...' : t('common.save')}\n        </Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default AddressPage;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/DateTimePickerModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[470,473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[470,473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, Modal, Platform } from 'react-native';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { createTimePickerModalStyles, platformSpecificStyles } from './TimePickerModal.styles';\n\ninterface DateTimePickerModalProps {\n  visible: boolean;\n  title: string;\n  value: Date | null;\n  onCancel: () => void;\n  onConfirm: (date: Date) => void;\n  colors: any;\n  t: (key: string) => string;\n  isDark?: boolean;\n}\n\nexport const DateTimePickerModal: React.FC<DateTimePickerModalProps> = ({\n  visible,\n  title,\n  value,\n  onCancel,\n  onConfirm,\n  colors,\n  t,\n  isDark = false,\n}) => {\n  const [tempDate, setTempDate] = useState<Date>(value || new Date());\n\n  useEffect(() => {\n    if (value) setTempDate(value);\n  }, [value]);\n\n  const styles = useMemo(() => {\n    const baseStyles = createTimePickerModalStyles(isDark, colors.primary);\n    const platformStyles = platformSpecificStyles[Platform.OS as keyof typeof platformSpecificStyles];\n    return {\n      ...baseStyles,\n      modalContainer: [baseStyles.modalContainer, platformStyles?.modalContainer],\n      pickerContainer: [baseStyles.pickerContainer, platformStyles?.pickerContainer],\n    };\n  }, [isDark, colors.primary]);\n\n  if (!visible) return null;\n\n  return (\n    <Modal transparent animationType=\"fade\" visible={visible} statusBarTranslucent>\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContainer}>\n          <Text style={styles.modalTitle}>{title}</Text>\n\n          {/* Unified picker: iOS single datetime spinner; Android shows date (день/месяц/год) and time (час/минута) одновременно */}\n          {Platform.OS === 'ios' ? (\n            <View style={styles.pickerContainer}>\n              <DateTimePicker\n                value={tempDate}\n                mode=\"datetime\"\n                is24Hour\n                display=\"spinner\"\n                onChange={(_e, d) => d && setTempDate(d)}\n                textColor={isDark ? '#FFFFFF' : '#000000'}\n              />\n            </View>\n          ) : (\n            <>\n              <View style={styles.pickerContainer}>\n                <DateTimePicker\n                  value={tempDate}\n                  mode=\"date\"\n                  display=\"spinner\"\n                  onChange={(_e, d) => d && setTempDate(prev => {\n                    const next = new Date(prev);\n                    next.setFullYear(d.getFullYear(), d.getMonth(), d.getDate());\n                    return next;\n                  })}\n                />\n              </View>\n              <View style={styles.pickerContainer}>\n                <DateTimePicker\n                  value={tempDate}\n                  mode=\"time\"\n                  is24Hour\n                  display=\"spinner\"\n                  onChange={(_e, d) => d && setTempDate(prev => {\n                    const next = new Date(prev);\n                    next.setHours(d.getHours(), d.getMinutes(), 0, 0);\n                    return next;\n                  })}\n                />\n              </View>\n            </>\n          )}\n\n          <View style={styles.buttonsContainer}>\n            <TouchableOpacity style={styles.cancelButton} onPress={onCancel} activeOpacity={0.7}>\n              <Text style={styles.cancelButtonText}>{t('common.cancel') || 'Отмена'}</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.confirmButton} onPress={() => onConfirm(tempDate)} activeOpacity={0.8}>\n              <Text style={styles.confirmButtonText}>{t('common.done') || 'Готово'}</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default DateTimePickerModal;\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/ProgressBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Text' is defined but never used.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[698,701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[698,701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1937,1940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1937,1940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../../../context/ThemeContext';\nimport { getCurrentColors } from '../../../../constants/colors';\nimport { ProgressStep, FixWavePage } from '../types/fix-wave.types';\nimport { getProgressSteps } from '../utils/progressUtils';\n\ninterface ProgressBarProps {\n  currentPage: string;\n  onStepPress?: (page: FixWavePage) => void;\n}\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({ currentPage, onStepPress }) => {\n  const { isDark } = useTheme();\n  const colors = getCurrentColors(isDark);\n  const steps = getProgressSteps(currentPage as any);\n\n  const handleStepPress = (step: ProgressStep) => {\n    // Можно кликать только на завершенные шаги (зеленые)\n    if (step.isCompleted && onStepPress) {\n      onStepPress(step.id);\n    }\n  };\n\n  return (\n    <View style={{ \n      flexDirection: 'row', \n      justifyContent: 'space-around', \n      alignItems: 'center',\n      paddingTop: 0,\n      paddingBottom: 10\n    }}>\n      {steps.map((step, index) => (\n        <React.Fragment key={step.id}>\n          {/* Круг с иконкой */}\n          <TouchableOpacity \n            style={{ \n              width: 40, \n              height: 40, \n              borderRadius: 20,\n              backgroundColor: step.isCompleted ? colors.success : \n                             step.isActive ? colors.primary : colors.textSecondary,\n              justifyContent: 'center',\n              alignItems: 'center',\n              shadowColor: '#000',\n              shadowOffset: { width: 0, height: 2 },\n              shadowOpacity: 0.1,\n              shadowRadius: 4,\n              elevation: 3,\n            }}\n            onPress={() => handleStepPress(step)}\n            disabled={!step.isCompleted}\n            activeOpacity={0.7}\n          >\n            <Ionicons \n              name={step.icon as any} \n              size={18} \n              color=\"#FFFFFF\" \n            />\n          </TouchableOpacity>\n          \n          {/* Прогресс бар между кругами */}\n          {index < steps.length - 1 && (\n            <View style={{ \n              flex: 1, \n              height: 2, \n              backgroundColor: '#E0E0E0', \n              borderRadius: 1,\n              marginHorizontal: 10,\n              overflow: 'hidden'\n            }}>\n              <View style={{ \n                height: '100%', \n                width: steps[index].isCompleted ? '100%' : '0%', \n                backgroundColor: colors.success,\n                borderRadius: 1\n              }} />\n            </View>\n          )}\n        </React.Fragment>\n      ))}\n    </View>\n  );\n};\n\nexport default ProgressBar;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/ScheduleContainer.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/ScheduleContainer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[422,425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[422,425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'shouldShowCalculatedTime' is assigned a value but never used.","line":60,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'weekDays'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [activeDays, weekDays]","fix":{"range":[2308,2320],"text":"[activeDays, weekDays]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { View, Text } from 'react-native';\nimport { styles } from './ScheduleContainer.styles';\nimport { useScheduleContainer } from '../hooks/useScheduleContainer';\nimport { TimePickerModal } from './TimePickerModal';\nimport { ScheduleContainerContent } from './ScheduleContainerContent';\n\ninterface ScheduleContainerProps {\n  fromAddress: string;\n  borderColor: string;\n  colors: any;\n  t: (key: string) => string;\n  isLast: boolean;\n  dayTimes?: Record<string, string>;\n  onDayTimeChange?: (dayKey: string, time: string) => void;\n  activeDays?: string[];\n  fixedMode?: boolean;\n  fixedTime?: string;\n  onFixedTimeChange?: (time: string) => void;\n  weekdaysMode?: boolean;\n  weekdayTime?: string;\n  weekendTime?: string;\n  onWeekdayTimeChange?: (time: string) => void;\n  onWeekendTimeChange?: (time: string) => void;\n  showDays?: boolean;\n  allowTimeSelection?: boolean;\n  fromCoordinate?: { latitude: number; longitude: number };\n  toCoordinate?: { latitude: number; longitude: number };\n  departureTime?: Date;\n  isDark?: boolean;\n  shouldCalculateTime?: boolean;\n  shouldShowCalculatedTime?: boolean;\n  calculatedWeekdayTime?: string;\n  calculatedWeekendTime?: string;\n}\n\nexport const ScheduleContainer: React.FC<ScheduleContainerProps> = ({ \n  fromAddress, \n  borderColor, \n  colors, \n  t, \n  isLast,\n  dayTimes = {},\n  onDayTimeChange,\n  activeDays,\n  fixedMode = false,\n  fixedTime,\n  onFixedTimeChange,\n  weekdaysMode = false,\n  weekdayTime,\n  weekendTime,\n  onWeekdayTimeChange,\n  onWeekendTimeChange,\n  allowTimeSelection = true,\n  fromCoordinate,\n  toCoordinate,\n  departureTime,\n  isDark,\n  shouldCalculateTime = false,\n  shouldShowCalculatedTime = false,\n  calculatedWeekdayTime,\n  calculatedWeekendTime\n}) => {\n  const weekDays = [\n    { key: 'mon', label: t('common.mon') },\n    { key: 'tue', label: t('common.tue') },\n    { key: 'wed', label: t('common.wed') },\n    { key: 'thu', label: t('common.thu') },\n    { key: 'fri', label: t('common.fri') },\n    { key: 'sat', label: t('common.sat') },\n    { key: 'sun', label: t('common.sun') },\n  ];\n\n  const visibleDays = useMemo(() => {\n    if (activeDays && activeDays.length > 0) {\n      const set = new Set(activeDays);\n      return weekDays.filter(d => set.has(d.key));\n    }\n    return weekDays;\n  }, [activeDays]);\n\n  // Хук для управления состоянием\n  const {\n    pickerState,\n    setPickerState,\n    dayTempDate,\n    setDayTempDate,\n    localDayTimes,\n    setLocalDayTimes,\n    fixedPickerVisible,\n    setFixedPickerVisible,\n    fixedTempDate,\n    setFixedTempDate,\n    weekdayPickerVisible,\n    setWeekdayPickerVisible,\n    weekdayTempDate,\n    setWeekdayTempDate,\n    weekendPickerVisible,\n    setWeekendPickerVisible,\n    weekendTempDate,\n    setWeekendTempDate,\n    calculatedTime,\n    isCalculating,\n  } = useScheduleContainer(allowTimeSelection, fromCoordinate, toCoordinate, departureTime, shouldCalculateTime);\n\n  // Обработчики для плавающего режима\n  const openPickerForDay = (dayKey: string) => {\n    setPickerState({ dayKey, date: new Date(), isVisible: true });\n    setDayTempDate(new Date());\n  };\n\n  const handleDayModalCancel = () => {\n    setPickerState(prev => ({ ...prev, isVisible: false, dayKey: null }));\n  };\n\n  const handleDayModalConfirm = () => {\n    if (!pickerState.dayKey) return;\n    const hh = String(dayTempDate.getHours()).padStart(2, '0');\n    const mm = String(dayTempDate.getMinutes()).padStart(2, '0');\n    const formatted = `${hh}:${mm}`;\n    onDayTimeChange && onDayTimeChange(pickerState.dayKey, formatted);\n    setLocalDayTimes(prev => ({ ...prev, [pickerState.dayKey as string]: formatted }));\n    setPickerState(prev => ({ ...prev, isVisible: false, dayKey: null }));\n  };\n\n  // Обработчики для фиксированного режима\n  const handleFixedTimePress = () => {\n    if (!allowTimeSelection) return;\n    setFixedTempDate(new Date());\n    setFixedPickerVisible(true);\n  };\n\n  const handleFixedModalCancel = () => {\n    setFixedPickerVisible(false);\n  };\n\n  const handleFixedModalConfirm = () => {\n    const hh = String(fixedTempDate.getHours()).padStart(2, '0');\n    const mm = String(fixedTempDate.getMinutes()).padStart(2, '0');\n    const formatted = `${hh}:${mm}`;\n    onFixedTimeChange && onFixedTimeChange(formatted);\n    setFixedPickerVisible(false);\n  };\n\n  // Обработчики для будни/выходные\n  const handleWeekdayPress = () => {\n    if (!allowTimeSelection) return;\n    setWeekdayPickerVisible(true);\n  };\n\n  const handleWeekendPress = () => {\n    if (!allowTimeSelection) return;\n    setWeekendPickerVisible(true);\n  };\n\n  const handleWeekdayConfirm = () => {\n    const hh = String(weekdayTempDate.getHours()).padStart(2, '0');\n    const mm = String(weekdayTempDate.getMinutes()).padStart(2, '0');\n    onWeekdayTimeChange && onWeekdayTimeChange(`${hh}:${mm}`);\n    setWeekdayPickerVisible(false);\n  };\n\n  const handleWeekendConfirm = () => {\n    const hh = String(weekendTempDate.getHours()).padStart(2, '0');\n    const mm = String(weekendTempDate.getMinutes()).padStart(2, '0');\n    onWeekendTimeChange && onWeekendTimeChange(`${hh}:${mm}`);\n    setWeekendPickerVisible(false);\n  };\n\n  return (\n    <View style={[\n      styles.container,\n      {\n        backgroundColor: colors.surface,\n        borderColor: borderColor,\n        marginBottom: isLast ? 20 : 10,\n        height: (fixedMode && weekdaysMode && activeDays && activeDays.length > 0) ? 176 : undefined,\n      }\n    ]}>\n      {/* Адрес отправления */}\n      <Text style={[styles.addressText, { color: colors.text }]}>\n        {fromAddress || 'Адрес не выбран'}\n      </Text>\n      \n      {/* Верхняя линия */}\n      <View style={[styles.divider, { backgroundColor: colors.border }]} />\n      \n      {/* Содержимое контейнера */}\n      <ScheduleContainerContent\n        fixedMode={fixedMode}\n        weekdaysMode={weekdaysMode}\n        activeDays={activeDays}\n        allowTimeSelection={allowTimeSelection}\n        colors={colors}\n        t={t}\n        calculatedTime={calculatedTime}\n        isCalculating={isCalculating}\n        fixedTime={fixedTime}\n        onFixedTimePress={handleFixedTimePress}\n        weekdayTime={weekdayTime}\n        weekendTime={weekendTime}\n        calculatedWeekdayTime={calculatedWeekdayTime}\n        calculatedWeekendTime={calculatedWeekendTime}\n        onWeekdayPress={handleWeekdayPress}\n        onWeekendPress={handleWeekendPress}\n        visibleDays={visibleDays}\n        dayTimes={dayTimes}\n        localDayTimes={localDayTimes}\n        onDayPress={openPickerForDay}\n      />\n      \n      {/* Нижняя линия */}\n      <View style={[styles.bottomDivider, { backgroundColor: colors.border }]} />\n\n      {/* Модальные окна */}\n      <TimePickerModal\n        visible={pickerState.isVisible}\n        title={t('common.selectTime') || 'Выберите время'}\n        value={dayTempDate}\n        onChange={setDayTempDate}\n        onCancel={handleDayModalCancel}\n        onConfirm={handleDayModalConfirm}\n        colors={colors}\n        t={t}\n        isDark={isDark}\n      />\n\n      <TimePickerModal\n        visible={fixedPickerVisible}\n        title={t('common.departureTime')}\n        value={fixedTempDate}\n        onChange={setFixedTempDate}\n        onCancel={handleFixedModalCancel}\n        onConfirm={handleFixedModalConfirm}\n        colors={colors}\n        t={t}\n        isDark={isDark}\n      />\n\n      <TimePickerModal\n        visible={weekdayPickerVisible}\n        title={t('common.weekdaysOnly')}\n        value={weekdayTempDate}\n        onChange={setWeekdayTempDate}\n        onCancel={() => setWeekdayPickerVisible(false)}\n        onConfirm={handleWeekdayConfirm}\n        colors={colors}\n        t={t}\n        isDark={isDark}\n      />\n\n      <TimePickerModal\n        visible={weekendPickerVisible}\n        title={t('common.weekend') || 'Выходные'}\n        value={weekendTempDate}\n        onChange={setWeekendTempDate}\n        onCancel={() => setWeekendPickerVisible(false)}\n        onConfirm={handleWeekendConfirm}\n        colors={colors}\n        t={t}\n        isDark={isDark}\n      />\n    </View>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/ScheduleContainerContent.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[297,300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[297,300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDisplayTime' is assigned a value but never used.","line":55,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { styles } from './ScheduleContainer.styles';\n\ninterface ScheduleContainerContentProps {\n  fixedMode: boolean;\n  weekdaysMode: boolean;\n  activeDays?: string[];\n  allowTimeSelection: boolean;\n  colors: any;\n  t: (key: string) => string;\n  calculatedTime: string;\n  isCalculating: boolean;\n  // Фиксированный режим\n  fixedTime?: string;\n  onFixedTimePress: () => void;\n  // Будни/выходные\n  weekdayTime?: string;\n  weekendTime?: string;\n  calculatedWeekdayTime?: string;\n  calculatedWeekendTime?: string;\n  onWeekdayPress: () => void;\n  onWeekendPress: () => void;\n  // Плавающий режим\n  visibleDays: Array<{ key: string; label: string }>;\n  dayTimes: Record<string, string>;\n  localDayTimes: Record<string, string>;\n  onDayPress: (dayKey: string) => void;\n}\n\nexport const ScheduleContainerContent: React.FC<ScheduleContainerContentProps> = ({\n  fixedMode,\n  weekdaysMode,\n  activeDays,\n  allowTimeSelection,\n  colors,\n  t,\n  calculatedTime,\n  isCalculating,\n  fixedTime,\n  onFixedTimePress,\n  weekdayTime,\n  weekendTime,\n  calculatedWeekdayTime,\n  calculatedWeekendTime,\n  onWeekdayPress,\n  onWeekendPress,\n  visibleDays,\n  dayTimes,\n  localDayTimes,\n  onDayPress,\n}) => {\n  const shouldShowCalculatedTime = !allowTimeSelection && isCalculating;\n\n  const getDisplayTime = () => {\n    console.log('🎯 getDisplayTime:', {\n      shouldShowCalculatedTime,\n      allowTimeSelection,\n      calculatedTime,\n      fixedTime,\n      weekdayTime,\n      weekendTime,\n      weekdaysMode,\n      fixedMode,\n    });\n\n    // Если нужно показать рассчитанное время и время не выбирается пользователем\n    if (shouldShowCalculatedTime && !allowTimeSelection) {\n      console.log('📊 Показываем рассчитанное время:', calculatedTime);\n      return calculatedTime;\n    }\n\n    // Иначе показываем время, введенное пользователем\n    if (fixedMode) {\n      console.log('📊 Показываем фиксированное время:', fixedTime);\n      return fixedTime || '--:--';\n    } else if (weekdaysMode) {\n      console.log('📊 Показываем время будней:', weekdayTime);\n      return weekdayTime || '--:--';\n    } else {\n      console.log('📊 Показываем время выходных:', weekendTime);\n      return weekendTime || '--:--';\n    }\n  };\n\n  if (fixedMode) {\n    if (weekdaysMode) {\n      // Будни/Выходные внутри контейнера\n      if (!activeDays || activeDays.length === 0) {\n        return (\n          <View style={styles.weekDaysContainer}>\n            <Text style={[styles.selectDaysText, { color: colors.text }]}>\n              {t('common.selectTripDays')}\n            </Text>\n          </View>\n        );\n      }\n\n      return (\n        <View style={{ marginTop: 8, marginBottom: 8 }}>\n          <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 6 }}>\n            <Text style={[styles.dayText, { color: colors.text }]}> \n              {t('common.weekdaysOnly')}\n              {':'}\n            </Text>\n            <TouchableOpacity\n              style={[\n                styles.dayButton,\n                { backgroundColor: colors.background, borderColor: colors.border, opacity: allowTimeSelection ? 1 : 0.5 }\n              ]}\n              activeOpacity={0.8}\n              onPress={onWeekdayPress}\n            >\n              <Text style={[styles.dayText, { color: colors.text }]}> \n                {allowTimeSelection ? (weekdayTime || '--:--') : (isCalculating ? '...' : (calculatedWeekdayTime || calculatedTime))}\n              </Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 6 }}>\n            <Text style={[styles.dayText, { color: colors.text }]}> \n              {t('common.weekend') || 'Выходные'}\n              {':'}\n            </Text>\n            <TouchableOpacity\n              style={[\n                styles.dayButton,\n                { backgroundColor: colors.background, borderColor: colors.border, opacity: allowTimeSelection ? 1 : 0.5 }\n              ]}\n              activeOpacity={0.8}\n              onPress={onWeekendPress}\n            >\n              <Text style={[styles.dayText, { color: colors.text }]}> \n                {allowTimeSelection ? (weekendTime || '--:--') : (isCalculating ? '...' : (calculatedWeekendTime || calculatedTime))}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      );\n    } else {\n      // Ежедневно: один таймпикер\n      if (!activeDays || activeDays.length === 0) {\n        return (\n          <View style={styles.weekDaysContainer}>\n            <Text style={[styles.selectDaysText, { color: colors.text }]}>\n              {t('common.selectTripDays')}\n            </Text>\n          </View>\n        );\n      }\n\n      return (\n        <View style={styles.weekDaysContainer}>\n          <View style={{ flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Text style={[styles.dayText, { color: colors.text }]}> \n              {t('common.departureTime')}\n              {':'}\n            </Text>\n            <TouchableOpacity\n              style={[\n                styles.dayButton,\n                {\n                  backgroundColor: colors.background,\n                  borderColor: colors.border,\n                  opacity: allowTimeSelection ? 1 : 0.5\n                }\n              ]}\n              onPress={onFixedTimePress}\n              activeOpacity={0.8}\n            >\n              <Text style={[styles.dayText, { color: colors.text }]}> \n                {allowTimeSelection ? (fixedTime ? fixedTime : '--:--') : (isCalculating ? '...' : calculatedTime)}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      );\n    }\n  } else {\n    // Плавающий режим\n    if (!activeDays || activeDays.length === 0) {\n      return (\n        <View style={styles.weekDaysContainer}>\n          <Text style={[styles.selectDaysText, { color: colors.text }]}>{t('common.selectTripDays')}</Text>\n        </View>\n      );\n    }\n\n    return (\n      <View style={styles.weekDaysContainer}>\n        <View style={{ flex: 1, flexDirection: 'row', alignItems: 'center' }}>\n          {/* Левая подпись до тех пор, пока хватает места */}\n          {activeDays ? (\n            activeDays.length <= 4 ? (\n              <Text style={[styles.dayText, { color: colors.text, marginRight: 8 }]}> {t('common.departureTime')}{':'} </Text>\n            ) : activeDays.length === 5 ? (\n              <Text style={[styles.dayText, { color: colors.text, marginRight: 8 }]}> {t('common.time')}{':'} </Text>\n            ) : null\n          ) : null}\n          \n          {/* Кнопки дней слева направо */}\n          <View style={{ flex: 1, flexDirection: 'row', justifyContent: 'flex-end', marginLeft: -4 }}>\n            {visibleDays.map((day) => {\n              const selectedTime = (dayTimes && dayTimes[day.key]) || localDayTimes[day.key];\n              return (\n                <TouchableOpacity\n                  key={day.key}\n                  style={[\n                    styles.dayButton,\n                    {\n                      backgroundColor: colors.background,\n                      borderColor: colors.border,\n                      marginLeft: 1,\n                    }\n                  ]}\n                  onPress={() => onDayPress(day.key)}\n                  activeOpacity={0.8}\n                >\n                  <Text style={[styles.dayText, { color: colors.text }]}>\n                    {allowTimeSelection ? (selectedTime ? selectedTime : day.label) : (isCalculating ? '...' : calculatedTime)}\n                  </Text>\n                </TouchableOpacity>\n              );\n            })}\n          </View>\n        </View>\n      </View>\n    );\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/SwitchToggle.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/SwitchToggle.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[216,219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[216,219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { TouchableOpacity, View } from 'react-native';\nimport { styles } from './SwitchToggle.styles';\n\ninterface SwitchToggleProps {\n  isActive: boolean;\n  onToggle: () => void;\n  colors: any;\n}\n\nexport const SwitchToggle: React.FC<SwitchToggleProps> = ({ isActive, onToggle, colors }) => {\n  return (\n    <TouchableOpacity \n      style={[\n        styles.switchContainer,\n        {\n          backgroundColor: isActive ? colors.success : colors.surface,\n          borderColor: isActive ? colors.success : colors.border,\n        }\n      ]}\n      onPress={onToggle}\n    >\n      <View style={[\n        styles.switchThumb,\n        {\n          backgroundColor: isActive ? '#FFFFFF' : colors.primary,\n          left: isActive ? 46 : 2,\n        }\n      ]} />\n    </TouchableOpacity>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/TimePickerModal.styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Platform' is defined but never used.","line":1,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'screenHeight' is assigned a value but never used.","line":3,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StyleSheet, Platform, Dimensions } from 'react-native';\n\nconst { width: screenWidth, height: screenHeight } = Dimensions.get('window');\n\nexport const createTimePickerModalStyles = (isDark: boolean, primaryColor?: string) => StyleSheet.create({\n  // Основной контейнер модального окна\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: isDark ? 'rgba(0,0,0,0.7)' : 'rgba(0,0,0,0.4)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  \n  // Контейнер модального окна\n  modalContainer: {\n    width: Math.min(screenWidth * 0.9, 400),\n    borderRadius: 16,\n    padding: 20,\n    backgroundColor: isDark ? '#1E1E1E' : '#FFFFFF',\n    shadowColor: isDark ? '#000000' : '#000000',\n    shadowOffset: {\n      width: 0,\n      height: isDark ? 4 : 2,\n    },\n    shadowOpacity: isDark ? 0.5 : 0.25,\n    shadowRadius: isDark ? 8 : 4,\n    elevation: isDark ? 8 : 4,\n    borderWidth: isDark ? 1 : 0,\n    borderColor: isDark ? '#333333' : 'transparent',\n  },\n  \n  // Заголовок модального окна\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    textAlign: 'center',\n    marginBottom: 16,\n    color: isDark ? '#FFFFFF' : '#000000',\n    letterSpacing: 0.5,\n  },\n  \n  // Контейнер для DateTimePicker\n  pickerContainer: {\n    alignItems: 'center',\n    marginVertical: 16,\n    paddingVertical: 8,\n    backgroundColor: isDark ? '#2A2A2A' : '#F8F9FA',\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: isDark ? '#404040' : '#E9ECEF',\n  },\n  \n  // Стили для DateTimePicker (iOS)\n  iosPicker: {\n    width: '100%',\n    height: 200,\n    backgroundColor: 'transparent',\n  },\n  \n  // Стили для DateTimePicker (Android)\n  androidPicker: {\n    width: '100%',\n    height: 50,\n    backgroundColor: 'transparent',\n  },\n  \n  // Контейнер кнопок\n  buttonsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 20,\n    paddingTop: 16,\n    borderTopWidth: 1,\n    borderTopColor: isDark ? '#404040' : '#E9ECEF',\n  },\n  \n  // Кнопка отмены\n  cancelButton: {\n    flex: 1,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    marginRight: 8,\n    borderRadius: 8,\n    backgroundColor: isDark ? '#333333' : '#F8F9FA',\n    borderWidth: 1,\n    borderColor: isDark ? '#404040' : '#DEE2E6',\n    alignItems: 'center',\n  },\n  \n  // Кнопка подтверждения\n  confirmButton: {\n    flex: 1,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    marginLeft: 8,\n    borderRadius: 8,\n    backgroundColor: primaryColor || '#007AFF', // Используем переданный цвет или fallback\n    alignItems: 'center',\n  },\n  \n  // Текст кнопки отмены\n  cancelButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: isDark ? '#CCCCCC' : '#6C757D',\n  },\n  \n  // Текст кнопки подтверждения\n  confirmButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#FFFFFF',\n  },\n  \n  // Анимация появления (для iOS)\n  modalAnimation: {\n    transform: [{ scale: 1 }],\n  },\n  \n  // Адаптивные размеры для разных экранов\n  smallScreen: {\n    width: Math.min(screenWidth * 0.95, 350),\n    padding: 16,\n  },\n  \n  largeScreen: {\n    width: Math.min(screenWidth * 0.85, 450),\n    padding: 24,\n  },\n  \n  // Стили для темной темы - дополнительные акценты\n  darkThemeAccent: {\n    backgroundColor: isDark ? '#2A2A2A' : '#FFFFFF',\n    borderColor: isDark ? '#404040' : '#E9ECEF',\n  },\n  \n  // Стили для светлой темы - дополнительные акценты\n  lightThemeAccent: {\n    backgroundColor: isDark ? '#1E1E1E' : '#FFFFFF',\n    shadowColor: isDark ? '#000000' : '#000000',\n    shadowOpacity: isDark ? 0.5 : 0.25,\n  },\n});\n\n// Дополнительные стили для разных платформ\nexport const platformSpecificStyles = {\n  ios: {\n    modalContainer: {\n      borderRadius: 20,\n      shadowRadius: 10,\n    },\n    pickerContainer: {\n      borderRadius: 16,\n    },\n  },\n  android: {\n    modalContainer: {\n      borderRadius: 12,\n      elevation: 8,\n    },\n    pickerContainer: {\n      borderRadius: 8,\n    },\n  },\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/TimePickerModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'screenHeight' is assigned a value but never used.","line":6,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[554,557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[554,557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { View, Text, TouchableOpacity, Modal, Platform, Dimensions } from 'react-native';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { createTimePickerModalStyles, platformSpecificStyles } from './TimePickerModal.styles';\n\nconst { width: screenWidth, height: screenHeight } = Dimensions.get('window');\n\ninterface TimePickerModalProps {\n  visible: boolean;\n  title: string;\n  value: Date;\n  onChange: (date: Date) => void;\n  onCancel: () => void;\n  onConfirm: () => void;\n  colors: any;\n  t: (key: string) => string;\n  isDark?: boolean;\n}\n\nexport const TimePickerModal: React.FC<TimePickerModalProps> = ({\n  visible,\n  title,\n  value,\n  onChange,\n  onCancel,\n  onConfirm,\n  colors,\n  t,\n  isDark = false,\n}) => {\n  // Создаем адаптивные стили\n  const styles = useMemo(() => {\n    const baseStyles = createTimePickerModalStyles(isDark, colors.primary);\n    const platformStyles = platformSpecificStyles[Platform.OS as keyof typeof platformSpecificStyles];\n    \n    // Определяем размер экрана для адаптивности\n    const isSmallScreen = screenWidth < 375;\n    const isLargeScreen = screenWidth > 768;\n    \n    return {\n      ...baseStyles,\n      modalContainer: [\n        baseStyles.modalContainer,\n        platformStyles?.modalContainer,\n        isSmallScreen ? baseStyles.smallScreen : null,\n        isLargeScreen ? baseStyles.largeScreen : null,\n      ],\n      pickerContainer: [\n        baseStyles.pickerContainer,\n        platformStyles?.pickerContainer,\n      ],\n    };\n  }, [isDark, colors.primary]);\n\n  if (!visible) return null;\n\n  return (\n    <Modal \n      transparent \n      animationType=\"fade\" \n      visible={visible}\n      statusBarTranslucent\n    >\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContainer}>\n          {/* Заголовок */}\n          <Text style={styles.modalTitle}>\n            {title}\n          </Text>\n          \n          {/* Контейнер для DateTimePicker */}\n          <View style={styles.pickerContainer}>\n            <DateTimePicker\n              value={value}\n              mode=\"time\"\n              is24Hour\n              display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n              onChange={(_e, d) => d && onChange(d)}\n              style={Platform.OS === 'ios' ? styles.iosPicker : styles.androidPicker}\n              textColor={isDark ? '#FFFFFF' : '#000000'}\n              accentColor={colors.primary}\n            />\n          </View>\n          \n          {/* Кнопки */}\n          <View style={styles.buttonsContainer}>\n            <TouchableOpacity \n              style={styles.cancelButton}\n              onPress={onCancel}\n              activeOpacity={0.7}\n            >\n              <Text style={styles.cancelButtonText}>\n                {t('common.cancel') || 'Отмена'}\n              </Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={styles.confirmButton}\n              onPress={onConfirm}\n              activeOpacity={0.8}\n            >\n              <Text style={styles.confirmButtonText}>\n                {t('common.done') || 'Готово'}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/TimeSchedulePage.styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isDark' is defined but never used.","line":3,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StyleSheet } from 'react-native';\n\nexport const createTimeSchedulePageStyles = (isDark: boolean) => StyleSheet.create({\n  container: {\n    padding: 0,\n  },\n  switchesContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 10,\n  },\n  switchLabelsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 10,\n  },\n  switchLabel: {\n    fontSize: 12,\n    textAlign: 'center',\n    width: 100,\n  },\n  switchToggleDisabled: {\n    opacity: 0.5,\n  },\n  saveButton: {\n    paddingVertical: 12,\n    marginHorizontal: 20,\n    marginTop: 8,\n    marginBottom: 20,\n    borderRadius: 8,\n  },\n  saveButtonText: {\n    color: '#FFFFFF',\n    fontSize: 16,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n});\n\n// Константы для цветов контейнеров\nexport const CONTAINER_COLORS = {\n  GREEN: '#4CAF50',   // отправление\n  BLUE: '#1565C0',    // назначение\n  YELLOW: '#FFF59D',  // обратно\n  GREY: '#9E9E9E',    // остановки\n} as const;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/TimeSchedulePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onBack' is defined but never used.","line":22,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":76}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState } from 'react';\nimport { View, Text, TouchableOpacity, Alert } from 'react-native';\nimport { useTheme } from '../../../../context/ThemeContext';\nimport { useLanguage } from '../../../../context/LanguageContext';\nimport { getCurrentColors } from '../../../../constants/colors';\nimport { TimeScheduleData } from '../types/fix-wave.types';\nimport { fixwaveOrderService } from '../../../../services/fixwaveOrderService';\nimport { createTimeSchedulePageStyles } from './TimeSchedulePage.styles';\nimport { SwitchToggle } from './SwitchToggle';\nimport { WeekDaysSelector } from './WeekDaysSelector';\nimport { ScheduleContainer } from './ScheduleContainer';\nimport { useScheduleState } from '../hooks/useScheduleState';\nimport { useSessionData } from '../hooks/useSessionData';\nimport { createScheduleContainers, getDepartureTime, canSelectTime, getDayNumber } from '../utils/scheduleUtils';\n\ninterface TimeSchedulePageProps {\n  onNext: (data: TimeScheduleData) => void;\n  onBack: () => void;\n  initialData?: TimeScheduleData;\n}\n\nconst TimeSchedulePage: React.FC<TimeSchedulePageProps> = ({ onNext, onBack, initialData }) => {\n  const { isDark } = useTheme();\n  const colors = getCurrentColors(isDark);\n  const { t } = useLanguage();\n  \n  // Стили\n  const styles = useMemo(() => createTimeSchedulePageStyles(isDark), [isDark]);\n  \n  // Управление состоянием\n  const state = useScheduleState(initialData);\n  \n  // Загрузка данных из сессии\n  useSessionData(state, initialData);\n  \n  // Вычисляемые значения\n  const isSmooth = useMemo(() => state.switchStates.switch2 === true, [state.switchStates.switch2]);\n  \n  const isWeekdaysMode = useMemo(() => !isSmooth && state.switchStates.switch3 === true, [isSmooth, state.switchStates.switch3]);\n  \n  // Определяем режим выходных по выбранному дню\n  const isWeekendMode = useMemo(() => {\n    if (state.selectedDays.length > 0) {\n      const selectedDay = state.selectedDays[0];\n      const weekends = ['sat', 'sun'];\n      return weekends.includes(selectedDay);\n    }\n    return false;\n  }, [state.selectedDays]);\n  \n  // Состояние для активного поля ввода времени\n  const [activeTimeField, setActiveTimeField] = useState<'weekday' | 'weekend' | undefined>(undefined);\n  \n  // Логируем режимы\n  console.log('🔍 TimeSchedulePage - Режимы:', {\n    isSmooth,\n    isWeekdaysMode,\n    isWeekendMode,\n    switchStates: state.switchStates,\n    selectedDays: state.selectedDays\n  });\n  \n  // Создание контейнеров\n  const containers = useMemo(() => \n    createScheduleContainers(state.addresses, state.coordinates, state.switchStates),\n    [state.addresses, state.coordinates, state.switchStates]\n  );\n  \n  // Обработчики\n  const toggleSwitch = (switchKey: keyof typeof state.switchStates) => {\n    // Сбрасываем все данные при переключении режимов\n    state.resetAllData();\n    \n    // Обновляем состояние переключателя\n    const newSwitchStates = {\n      ...state.switchStates,\n      [switchKey]: !state.switchStates[switchKey]\n    };\n    state.forceSetSwitchStates(newSwitchStates);\n    \n    console.log(`Switch ${switchKey} toggled, all data reset`);\n  };\n  \n  const saveToSession = async (data: TimeScheduleData) => {\n    try {\n      const sessionData = {\n        currentPage: 'timeSchedule',\n        timeScheduleData: data,\n      };\n      await fixwaveOrderService.saveSessionData(sessionData);\n    } catch (error) {\n      console.error('Error saving to session:', error);\n    }\n  };\n  \n  const handleSaveAndNext = async () => {\n    // Проверяем, что выбрано хотя бы одно время\n    const hasAnyTime = Object.values(state.times.fixed).some(time => time) || \n                      Object.values(state.times.weekday).some(time => time) || \n                      Object.values(state.times.weekend).some(time => time);\n    \n    if (!hasAnyTime) {\n      Alert.alert('Ошибка', 'Пожалуйста, выберите время');\n      return;\n    }\n\n    // Собираем все данные для сохранения\n    const dataToSave: TimeScheduleData = {\n      ...state.timeScheduleData,\n      fixedTimes: state.times.fixed,\n      weekdayTimes: state.times.weekday,\n      weekendTimes: state.times.weekend,\n      selectedDays: state.selectedDays,\n      switchStates: state.switchStates\n    };\n\n    await saveToSession(dataToSave);\n    onNext(dataToSave);\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* Переключатели */}\n      <View style={styles.switchesContainer}>\n        <SwitchToggle\n          isActive={state.switchStates.switch1}\n          onToggle={() => toggleSwitch('switch1')}\n          colors={colors}\n        />\n        <SwitchToggle\n          isActive={state.switchStates.switch2}\n          onToggle={() => toggleSwitch('switch2')}\n          colors={colors}\n        />\n        <View style={isSmooth ? styles.switchToggleDisabled : undefined} pointerEvents={isSmooth ? 'none' : 'auto'}>\n          <SwitchToggle\n            isActive={state.switchStates.switch3}\n            onToggle={() => toggleSwitch('switch3')}\n            colors={colors}\n          />\n        </View>\n      </View>\n\n      {/* Тексты под переключателями */}\n      <View style={styles.switchLabelsContainer}>\n        <Text style={[styles.switchLabel, { color: colors.textSecondary }]}>\n          {state.switchStates.switch1 ? t('common.thereAndBack') : t('common.there')}\n        </Text>\n        <Text style={[styles.switchLabel, { color: colors.textSecondary }]}>\n          {state.switchStates.switch2 ? t('common.smooth') : t('common.normal')}\n        </Text>\n        <Text style={[styles.switchLabel, { color: colors.textSecondary, opacity: isSmooth ? 0.5 : 1, width: 120, textAlign: 'center' }]}> \n          {state.switchStates.switch3 ? t('common.weekdays') : t('common.fixed')}\n        </Text>\n      </View>\n\n      {/* Выбор дней */}\n      <WeekDaysSelector \n        colors={colors} \n        t={t}\n        selectedDays={state.selectedDays}\n        onSelectionChange={state.setSelectedDays}\n      />\n\n      {/* Контейнеры расписания */}\n      {containers.map((container, index) => {\n        const allowTimeSelection = canSelectTime(container.color);\n        const departureTime = getDepartureTime(index, state.times, container.color, isSmooth, isWeekdaysMode, isWeekendMode, activeTimeField);\n        \n        // Рассчитываем отдельные времена для будней и выходных\n        const weekdayDepartureTime = getDepartureTime(index, state.times, container.color, isSmooth, isWeekdaysMode, false, 'weekday');\n        const weekendDepartureTime = getDepartureTime(index, state.times, container.color, isSmooth, isWeekdaysMode, true, 'weekend');\n        \n        // Конвертируем Date в строку времени\n        const formatTimeFromDate = (date: Date | undefined): string => {\n          if (!date) return '';\n          const hours = date.getHours().toString().padStart(2, '0');\n          const minutes = date.getMinutes().toString().padStart(2, '0');\n          return `${hours}:${minutes}`;\n        };\n        \n        const calculatedWeekdayTime = formatTimeFromDate(weekdayDepartureTime);\n        const calculatedWeekendTime = formatTimeFromDate(weekendDepartureTime);\n        \n        console.log(`🏗️ Контейнер ${index} (${container.color}):`, {\n          allowTimeSelection,\n          departureTime: departureTime?.toISOString(),\n          fromCoordinate: container.fromCoordinate,\n          toCoordinate: container.toCoordinate,\n          address: container.address,\n          isSmooth,\n          isWeekdaysMode,\n          shouldCalculateTime: !allowTimeSelection,\n          shouldShowCalculatedTime: !allowTimeSelection,\n        });\n        \n        return (\n          <ScheduleContainer\n            key={`${container.color}-${index}`}\n            fromAddress={container.address}\n            borderColor={container.color}\n            colors={colors}\n            t={t}\n            isLast={index === containers.length - 1}\n            fixedMode={!isSmooth}\n            fixedTime={state.times.fixed[index]}\n            onFixedTimeChange={(time) => {\n              console.log(`📅 Изменение фиксированного времени для контейнера ${index}:`, {\n                time,\n                isSmooth,\n                isWeekdaysMode,\n                currentTimes: state.times\n              });\n              state.forceSetTimes({\n                ...state.times,\n                fixed: { ...state.times.fixed, [index]: time }\n              });\n            }}\n            weekdaysMode={isWeekdaysMode}\n            weekdayTime={state.times.weekday[index]}\n            weekendTime={state.times.weekend[index]}\n            onWeekdayTimeChange={(time) => {\n              console.log(`📅 Изменение времени будней для контейнера ${index}:`, {\n                time,\n                isSmooth,\n                isWeekdaysMode,\n                currentTimes: state.times\n              });\n              state.forceSetTimes({\n                ...state.times,\n                weekday: { ...state.times.weekday, [index]: time }\n              });\n              \n              // Устанавливаем активное поле как будни\n              setActiveTimeField('weekday');\n            }}\n            onWeekendTimeChange={(time) => {\n              console.log(`📅 Изменение времени выходных для контейнера ${index}:`, {\n                time,\n                isSmooth,\n                isWeekdaysMode,\n                currentTimes: state.times\n              });\n              state.forceSetTimes({\n                ...state.times,\n                weekend: { ...state.times.weekend, [index]: time }\n              });\n              \n              // Устанавливаем активное поле как выходные\n              setActiveTimeField('weekend');\n            }}\n            showDays={isSmooth}\n            dayTimes={{}}\n            calculatedWeekdayTime={calculatedWeekdayTime}\n            calculatedWeekendTime={calculatedWeekendTime}\n            onDayTimeChange={(dayKey, time) => {\n              console.log(`📅 Изменение времени дня ${dayKey} для контейнера ${index}:`, {\n                time,\n                isSmooth,\n                isWeekdaysMode,\n                currentTimes: state.times,\n              });\n              \n              // Сохраняем время для конкретного дня в плавном режиме\n              if (isSmooth) {\n                const timeKey = isWeekdaysMode ? 'weekday' : 'weekend';\n                const dayNumber = getDayNumber(dayKey);\n                \n                const newTimes = {\n                  ...state.times,\n                  [timeKey]: {\n                    ...state.times[timeKey],\n                    [dayNumber]: time\n                  }\n                };\n                \n                state.forceSetTimes(newTimes);\n                \n                console.log(`💾 Сохранено время для дня ${dayKey} (${dayNumber}) в ${timeKey}:`, time);\n              }\n              \n              // Логируем для режима \"Будни/Выходные\" (переключатель 3)\n              if (!isSmooth && state.switchStates.switch3) {\n                console.log(`📅 Будни/Выходные режим - Изменение времени для контейнера ${index}:`, {\n                  time,\n                  isWeekdaysMode,\n                  currentTimes: state.times,\n                  switchStates: state.switchStates\n                });\n              }\n            }}\n            activeDays={state.selectedDays}\n            allowTimeSelection={allowTimeSelection}\n            fromCoordinate={container.fromCoordinate}\n            toCoordinate={container.toCoordinate}\n            departureTime={departureTime}\n            shouldCalculateTime={!allowTimeSelection}\n            shouldShowCalculatedTime={!allowTimeSelection}\n            isDark={isDark}\n          />\n        );\n      })}\n\n      {/* Кнопка Сохранить */}\n      <TouchableOpacity \n        style={[styles.saveButton, { backgroundColor: colors.primary }]}\n        onPress={handleSaveAndNext}\n      >\n        <Text style={styles.saveButtonText}>\n          {t('common.save')}\n        </Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default TimeSchedulePage;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/UnifiedDateTimePickerModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[619,622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[619,622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2985,2988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2985,2988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRef\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":94,"column":21,"nodeType":"Identifier","endLine":94,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useMemo, useState, useRef } from 'react';\nimport { View, Text, TouchableOpacity, Modal, Platform, Dimensions } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { Picker } from '@react-native-picker/picker';\nimport { FlatList, NativeScrollEvent, NativeSyntheticEvent } from 'react-native';\nimport { createTimePickerModalStyles, platformSpecificStyles } from './TimePickerModal.styles';\n\ninterface UnifiedDateTimePickerModalProps {\n  visible: boolean;\n  title: string;\n  value: Date | null;\n  onCancel: () => void;\n  onConfirm: (date: Date) => void;\n  colors: any;\n  t: (key: string) => string;\n  isDark?: boolean;\n}\n\nconst pad = (num: number, size = 2) => String(num).padStart(size, '0');\n\nconst getDaysInMonth = (year: number, monthIndex0: number) => {\n  return new Date(year, monthIndex0 + 1, 0).getDate();\n};\n\nexport const UnifiedDateTimePickerModal: React.FC<UnifiedDateTimePickerModalProps> = ({\n  visible,\n  title,\n  value,\n  onCancel,\n  onConfirm,\n  colors,\n  t,\n  isDark = false,\n}) => {\n  const initial = value ?? new Date();\n  const [day, setDay] = useState<number>(initial.getDate());\n  const [month, setMonth] = useState<number>(initial.getMonth() + 1); // 1-12\n  const [year, setYear] = useState<number>(initial.getFullYear());\n  const [hour, setHour] = useState<number>(initial.getHours());\n  const [minute, setMinute] = useState<number>(initial.getMinutes());\n\n  useEffect(() => {\n    if (!visible) return;\n    const d = value ?? new Date();\n    setDay(d.getDate());\n    setMonth(d.getMonth() + 1);\n    setYear(d.getFullYear());\n    setHour(d.getHours());\n    setMinute(d.getMinutes());\n  }, [visible, value]);\n\n  const styles = useMemo(() => {\n    const base = createTimePickerModalStyles(isDark, colors.primary);\n    const platform = platformSpecificStyles[Platform.OS as keyof typeof platformSpecificStyles];\n    return {\n      ...base,\n      modalContainer: [base.modalContainer, platform?.modalContainer],\n      pickerContainer: [base.pickerContainer, platform?.pickerContainer],\n    };\n  }, [isDark, colors.primary]);\n\n  const screenWidth = Dimensions.get('window').width;\n  const isSmall = screenWidth < 360;\n  const labelColor = isDark ? '#FFFFFF' : '#003366';\n  const itemColor = isDark ? '#F3F4F6' : '#0A0A0A';\n  const labelFont = isSmall ? 12 : 13;\n  const pickerItemStyle = Platform.select({ ios: { color: itemColor, fontSize: isSmall ? 20 : 22, fontWeight: '600' }, android: undefined });\n  const highlightHeight = isSmall ? 40 : 44;\n  const itemHeight = isSmall ? 36 : 40;\n\n  const WheelColumn: React.FC<{\n    data: number[];\n    value: number;\n    onChange: (v: number) => void;\n  }> = ({ data, value, onChange }) => {\n    // iOS: нативный барабан для идеального UX\n    if (Platform.OS === 'ios') {\n      return (\n        <Picker\n          selectedValue={value}\n          onValueChange={(v) => onChange(Number(v))}\n          dropdownIconColor={itemColor}\n          itemStyle={pickerItemStyle as any}\n        >\n          {data.map((n) => (\n            <Picker.Item key={n} label={pad(n)} value={n} color={itemColor} />\n          ))}\n        </Picker>\n      );\n    }\n\n    // Android/веб: унифицированное колесо на базе FlatList\n    const initialIndex = Math.max(0, data.findIndex(v => v === value));\n    const listRef = useRef<FlatList<number>>(null);\n\n    const onMomentumEnd = (e: NativeSyntheticEvent<NativeScrollEvent>) => {\n      const offsetY = e.nativeEvent.contentOffset.y;\n      const index = Math.round(offsetY / itemHeight);\n      const clamped = Math.max(0, Math.min(index, data.length - 1));\n      const selected = data[clamped];\n      if (selected !== undefined) onChange(selected);\n      listRef.current?.scrollToOffset({ offset: clamped * itemHeight, animated: false });\n    };\n\n    const topBottomPadding = (highlightHeight - itemHeight) / 2 + itemHeight * 2;\n\n    return (\n      <FlatList\n        ref={listRef}\n        data={data}\n        keyExtractor={(n) => String(n)}\n        initialScrollIndex={initialIndex === -1 ? 0 : initialIndex}\n        getItemLayout={(_d, index) => ({ length: itemHeight, offset: itemHeight * index, index })}\n        showsVerticalScrollIndicator={false}\n        snapToInterval={itemHeight}\n        decelerationRate=\"fast\"\n        onMomentumScrollEnd={onMomentumEnd}\n        contentContainerStyle={{ paddingTop: topBottomPadding, paddingBottom: topBottomPadding }}\n        renderItem={({ item }) => (\n          <View style={{ height: itemHeight, alignItems: 'center', justifyContent: 'center' }}>\n            <Text style={{ color: itemColor, fontSize: isSmall ? 18 : 20, fontWeight: '600' }}>{pad(item)}</Text>\n          </View>\n        )}\n      />\n    );\n  };\n\n  const years = useMemo(() => {\n    const nowYear = new Date().getFullYear();\n    const arr: number[] = [];\n    for (let y = nowYear; y <= nowYear + 3; y++) arr.push(y);\n    return arr;\n  }, []);\n\n  const months = useMemo(() => Array.from({ length: 12 }, (_, i) => i + 1), []);\n  const days = useMemo(() => {\n    const max = getDaysInMonth(year, month - 1);\n    return Array.from({ length: max }, (_, i) => i + 1);\n  }, [year, month]);\n  const hours = useMemo(() => Array.from({ length: 24 }, (_, i) => i), []);\n  const minutes = useMemo(() => Array.from({ length: 60 }, (_, i) => i), []);\n\n  // Clamp day if month/year changed and current day is out of range\n  useEffect(() => {\n    const max = getDaysInMonth(year, month - 1);\n    if (day > max) setDay(max);\n  }, [year, month, day]);\n\n  if (!visible) return null;\n\n  return (\n    <Modal transparent animationType=\"fade\" visible={visible} statusBarTranslucent>\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContainer}>\n          <Text style={[styles.modalTitle, { color: labelColor }]}>{title}</Text>\n\n          <View style={{ position: 'relative' }}>\n            <View\n              pointerEvents=\"none\"\n              style={{\n                position: 'absolute',\n                top: '50%',\n                left: 0,\n                right: 0,\n                height: highlightHeight,\n                backgroundColor: isDark ? 'rgba(156,163,175,0.10)' : 'rgba(8,49,152,0.08)',\n                transform: [{ translateY: -highlightHeight / 2 }],\n                borderRadius: 10,\n                zIndex: 0,\n              }}\n            />\n\n            <LinearGradient\n              pointerEvents=\"none\"\n              colors={[ (isDark ? colors.surface : colors.background), (isDark ? 'rgba(31,41,55,0.0)' : 'rgba(255,255,255,0.0)') ]}\n              style={{ position: 'absolute', left: 0, right: 0, top: 0, height: 24, zIndex: 0 }}\n            />\n            <LinearGradient\n              pointerEvents=\"none\"\n              colors={[ (isDark ? 'rgba(31,41,55,0.0)' : 'rgba(255,255,255,0.0)'), (isDark ? colors.surface : colors.background) ]}\n              style={{ position: 'absolute', left: 0, right: 0, bottom: 0, height: 24, zIndex: 0 }}\n            />\n\n            <View style={[styles.pickerContainer, { flexDirection: 'row', justifyContent: 'space-between', backgroundColor: isDark ? colors.surface : colors.background, borderRadius: 12, borderWidth: 1, borderColor: colors.border, paddingVertical: 8, zIndex: 1 }]}> \n            <View style={{ flex: 1, marginHorizontal: 4 }}>\n              <Text style={[styles.modalTitle, { fontSize: labelFont, marginBottom: 4, color: labelColor }]}>DD</Text>\n                <WheelColumn data={days} value={day} onChange={setDay} />\n            </View>\n            <View style={{ flex: 1, marginHorizontal: 4 }}>\n              <Text style={[styles.modalTitle, { fontSize: labelFont, marginBottom: 4, color: labelColor }]}>MM</Text>\n                <WheelColumn data={months} value={month} onChange={setMonth} />\n            </View>\n            <View style={{ flex: 1.2, marginHorizontal: 4 }}>\n              <Text style={[styles.modalTitle, { fontSize: labelFont, marginBottom: 4, color: labelColor }]}>YY</Text>\n                <WheelColumn data={years} value={year} onChange={setYear} />\n            </View>\n            <View style={{ flex: 1, marginHorizontal: 4 }}>\n              <Text style={[styles.modalTitle, { fontSize: labelFont, marginBottom: 4, color: labelColor }]}>HH</Text>\n                <WheelColumn data={hours} value={hour} onChange={setHour} />\n            </View>\n            <View style={{ flex: 1, marginHorizontal: 4 }}>\n              <Text style={[styles.modalTitle, { fontSize: labelFont, marginBottom: 4, color: labelColor }]}>MM</Text>\n                <WheelColumn data={minutes} value={minute} onChange={setMinute} />\n            </View>\n          </View>\n          </View>\n\n\n          <View style={styles.buttonsContainer}>\n            <TouchableOpacity style={styles.cancelButton} onPress={onCancel} activeOpacity={0.7}>\n              <Text style={styles.cancelButtonText}>{t('common.cancel') || 'Отмена'}</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={styles.confirmButton}\n              onPress={() => {\n                const result = new Date(year, month - 1, day, hour, minute, 0, 0);\n                onConfirm(result);\n              }}\n              activeOpacity={0.8}\n            >\n              <Text style={styles.confirmButtonText}>{t('common.done') || 'Готово'}</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default UnifiedDateTimePickerModal;\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/WeekDaysSelector.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/components/WeekDaysSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[199,202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[199,202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { styles } from './WeekDaysSelector.styles';\n\ninterface WeekDaysSelectorProps {\n  colors: any;\n  t: (key: string) => string;\n  selectedDays?: string[];\n  onSelectionChange?: (days: string[]) => void;\n}\n\nexport const WeekDaysSelector: React.FC<WeekDaysSelectorProps> = ({ colors, t, selectedDays = [], onSelectionChange }) => {\n  const weekDays = [\n    { key: 'mon', label: t('common.mon') },\n    { key: 'tue', label: t('common.tue') },\n    { key: 'wed', label: t('common.wed') },\n    { key: 'thu', label: t('common.thu') },\n    { key: 'fri', label: t('common.fri') },\n    { key: 'sat', label: t('common.sat') },\n    { key: 'sun', label: t('common.sun') },\n  ];\n\n  const toggleDay = (key: string) => {\n    const next = selectedDays.includes(key) ? selectedDays.filter(d => d !== key) : [...selectedDays, key];\n    console.log('📅 WeekDaysSelector - Переключение дня:', { \n      key, \n      selectedDays, \n      next,\n      isWeekday: ['mon', 'tue', 'wed', 'thu', 'fri'].includes(key),\n      isWeekend: ['sat', 'sun'].includes(key)\n    });\n    onSelectionChange && onSelectionChange(next);\n  };\n\n  return (\n    <View style={[\n      styles.container,\n      {\n        backgroundColor: colors.surface,\n        borderColor: colors.border,\n      }\n    ]}>\n      {weekDays.map((day) => {\n        const isActive = selectedDays.includes(day.key);\n        return (\n          <TouchableOpacity\n            key={day.key}\n            style={[\n              styles.dayButton,\n              {\n                backgroundColor: isActive ? colors.primary : colors.background,\n                borderColor: isActive ? colors.primary : colors.border,\n              }\n            ]}\n            activeOpacity={0.8}\n            onPress={() => toggleDay(day.key)}\n          >\n            <Text style={[\n              styles.dayText, \n              { color: isActive ? '#FFFFFF' : colors.text }\n            ]}>\n              {day.label}\n            </Text>\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/hooks/useFixWaveNavigation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[501,504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[501,504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateProgress'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [updateProgress]","fix":{"range":[1016,1018],"text":"[updateProgress]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1242,1245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1242,1245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1793,1796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1793,1796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1973,1976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1973,1976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect } from 'react';\nimport { FixWavePage } from '../types/fix-wave.types';\nimport { getProgressForPage, getNextPage, getPreviousPage } from '../utils/progressUtils';\nimport { fixwaveOrderService } from '../../../../services/fixwaveOrderService';\n\nexport const useFixWaveNavigation = () => {\n  const [currentPage, setCurrentPage] = useState<FixWavePage>('addresses');\n  const [progress, setProgress] = useState(0);\n  const [sessionData, setSessionData] = useState<any>(null);\n\n  // Загружаем данные сессии при инициализации\n  useEffect(() => {\n    const loadSession = async () => {\n      try {\n        const data = await fixwaveOrderService.loadSessionData();\n        if (data) {\n          setSessionData(data);\n          // Всегда начинаем с первой страницы при загрузке\n          setCurrentPage('addresses');\n          updateProgress('addresses');\n        }\n      } catch (error) {\n        console.error('Error loading session:', error);\n      }\n    };\n    loadSession();\n  }, []);\n\n  const updateProgress = useCallback((page: FixWavePage) => {\n    const newProgress = getProgressForPage(page);\n    setProgress(newProgress);\n  }, []);\n\n  const saveSession = useCallback(async (page: FixWavePage, data?: any) => {\n    try {\n      // Сначала загружаем существующие данные сессии\n      const existingSession = await fixwaveOrderService.loadSessionData();\n      \n      const sessionData = {\n        ...existingSession, // Сохраняем существующие данные\n        currentPage: page,\n        ...data,\n      };\n      await fixwaveOrderService.saveSessionData(sessionData);\n      setSessionData(sessionData);\n    } catch (error) {\n      console.error('Error saving session:', error);\n    }\n  }, []);\n\n  const goToPage = useCallback(async (page: FixWavePage, data?: any) => {\n    setCurrentPage(page);\n    updateProgress(page);\n    await saveSession(page, data);\n  }, [updateProgress, saveSession]);\n\n  const nextPage = useCallback(async (data?: any) => {\n    const next = getNextPage(currentPage);\n    if (next) {\n      await goToPage(next, data);\n    }\n  }, [currentPage, goToPage]);\n\n  const previousPage = useCallback(async () => {\n    const previous = getPreviousPage(currentPage);\n    if (previous) {\n      await goToPage(previous);\n    }\n  }, [currentPage, goToPage]);\n\n  const resetToFirstPage = useCallback(async () => {\n    await goToPage('addresses');\n  }, [goToPage]);\n\n  const clearSession = useCallback(async () => {\n    try {\n      await fixwaveOrderService.clearSessionData();\n      setSessionData(null);\n    } catch (error) {\n      console.error('Error clearing session:', error);\n    }\n  }, []);\n\n  return {\n    currentPage,\n    progress,\n    sessionData,\n    goToPage,\n    nextPage,\n    previousPage,\n    resetToFirstPage,\n    updateProgress,\n    clearSession,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/hooks/useScheduleContainer.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'allowTimeSelection'. Either include it or remove the dependency array.","line":101,"column":6,"nodeType":"ArrayExpression","endLine":101,"endColumn":72,"suggestions":[{"desc":"Update the dependencies array to be: [shouldCalculateTime, fromCoordinate, toCoordinate, departureTime, allowTimeSelection]","fix":{"range":[4105,4171],"text":"[shouldCalculateTime, fromCoordinate, toCoordinate, departureTime, allowTimeSelection]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { RoutePoint } from '../../../../components/MapView/types/map.types';\nimport { DistanceCalculationService } from '../../../../services/DistanceCalculationService';\n\nexport const useScheduleContainer = (\n  allowTimeSelection: boolean,\n  fromCoordinate?: { latitude: number; longitude: number },\n  toCoordinate?: { latitude: number; longitude: number },\n  departureTime?: Date,\n  shouldCalculateTime?: boolean\n) => {\n  // Состояние для плавающего режима\n  const [pickerState, setPickerState] = useState<{\n    dayKey: string | null;\n    date: Date;\n    isVisible: boolean;\n  }>({ dayKey: null, date: new Date(), isVisible: false });\n  const [dayTempDate, setDayTempDate] = useState<Date>(new Date());\n  const [localDayTimes, setLocalDayTimes] = useState<Record<string, string>>({});\n\n  // Состояние для фиксированного режима\n  const [fixedPickerVisible, setFixedPickerVisible] = useState(false);\n  const [fixedTempDate, setFixedTempDate] = useState<Date>(new Date());\n\n  // Состояние для будни/выходные\n  const [weekdayPickerVisible, setWeekdayPickerVisible] = useState(false);\n  const [weekdayTempDate, setWeekdayTempDate] = useState<Date>(new Date());\n  const [weekendPickerVisible, setWeekendPickerVisible] = useState(false);\n  const [weekendTempDate, setWeekendTempDate] = useState<Date>(new Date());\n\n  // Состояние для расчетного времени\n  const [calculatedTime, setCalculatedTime] = useState<string>('--:--');\n  const [isCalculating, setIsCalculating] = useState(false);\n\n  // Расчет времени для полей \"Откуда\" и \"Остановки\"\n  useEffect(() => {\n    const calculateEstimatedTime = async () => {\n      console.log('🔍 useScheduleContainer - Проверка условий:', {\n        allowTimeSelection,\n        hasFromCoordinate: !!fromCoordinate,\n        hasToCoordinate: !!toCoordinate,\n        hasDepartureTime: !!departureTime,\n        shouldCalculateTime,\n        shouldCalculate: shouldCalculateTime && fromCoordinate && toCoordinate && departureTime,\n      });\n      \n      if (shouldCalculateTime && fromCoordinate && toCoordinate && departureTime) {\n        setIsCalculating(true);\n        try {\n          const fromPoint: RoutePoint = {\n            id: 'from',\n            coordinate: fromCoordinate,\n            type: 'start'\n          };\n          const toPoint: RoutePoint = {\n            id: 'to',\n            coordinate: toCoordinate,\n            type: 'end'\n          };\n          \n          const result = await DistanceCalculationService.calculateRouteSegment(\n            fromPoint,\n            toPoint,\n            departureTime\n          );\n          \n          console.log('📈 useScheduleContainer - Результат расчета:', result);\n          \n          // Для GREEN контейнера (ОТКУДА) время отбытия = время прибытия минус время маршрута\n          let finalTime = result.estimatedTime;\n          if (result.durationMinutes && result.durationMinutes > 0) {\n            // Время прибытия (из BLUE контейнера)\n            const arrivalTime = new Date(departureTime);\n            \n            // Время отбытия = время прибытия минус время маршрута\n            const departureTimeCalculated = new Date(arrivalTime.getTime() - result.durationMinutes * 60 * 1000);\n            const departureHours = departureTimeCalculated.getHours().toString().padStart(2, '0');\n            const departureMinutes = departureTimeCalculated.getMinutes().toString().padStart(2, '0');\n            \n            finalTime = `${departureHours}:${departureMinutes}`;\n            console.log('⏰ useScheduleContainer - Рассчитанное время отбытия:', {\n              arrivalTime: arrivalTime.toISOString(),\n              routeDurationMinutes: result.durationMinutes,\n              departureTime: finalTime,\n            });\n          }\n          \n          setCalculatedTime(finalTime);\n        } catch (error) {\n          console.error('Error calculating time:', error);\n          setCalculatedTime('--:--');\n        } finally {\n          setIsCalculating(false);\n        }\n      } else {\n        setCalculatedTime('--:--');\n      }\n    };\n\n    calculateEstimatedTime();\n  }, [shouldCalculateTime, fromCoordinate, toCoordinate, departureTime]);\n\n  return {\n    // Плавающий режим\n    pickerState,\n    setPickerState,\n    dayTempDate,\n    setDayTempDate,\n    localDayTimes,\n    setLocalDayTimes,\n    \n    // Фиксированный режим\n    fixedPickerVisible,\n    setFixedPickerVisible,\n    fixedTempDate,\n    setFixedTempDate,\n    \n    // Будни/выходные\n    weekdayPickerVisible,\n    setWeekdayPickerVisible,\n    weekdayTempDate,\n    setWeekdayTempDate,\n    weekendPickerVisible,\n    setWeekendPickerVisible,\n    weekendTempDate,\n    setWeekendTempDate,\n    \n    // Расчетное время\n    calculatedTime,\n    isCalculating,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/hooks/useScheduleState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/hooks/useSessionData.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [initialData, state]","fix":{"range":[2768,2781],"text":"[initialData, state]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\nimport { TimeScheduleData } from '../types/fix-wave.types';\nimport { fixwaveOrderService } from '../../../../services/fixwaveOrderService';\n\nexport const useSessionData = (\n  state: ReturnType<typeof import('./useScheduleState').useScheduleState>, \n  initialData?: TimeScheduleData\n) => {\n  useEffect(() => {\n    const loadSessionData = async () => {\n      try {\n        const sessionData = await fixwaveOrderService.loadSessionData();\n        \n        if (sessionData?.timeScheduleData) {\n          state.setTimeScheduleData(sessionData.timeScheduleData);\n          \n          // Восстанавливаем состояние\n          if (sessionData.timeScheduleData.fixedTimes) {\n            state.setTimes({ ...state.times, fixed: sessionData.timeScheduleData.fixedTimes });\n          }\n          if (sessionData.timeScheduleData.weekdayTimes) {\n            state.setTimes({ ...state.times, weekday: sessionData.timeScheduleData.weekdayTimes });\n          }\n          if (sessionData.timeScheduleData.weekendTimes) {\n            state.setTimes({ ...state.times, weekend: sessionData.timeScheduleData.weekendTimes });\n          }\n          if (sessionData.timeScheduleData.selectedDays) {\n            state.setSelectedDays(sessionData.timeScheduleData.selectedDays);\n          }\n          if (sessionData.timeScheduleData.switchStates) {\n            state.setSwitchStates(sessionData.timeScheduleData.switchStates);\n          }\n        }\n        \n        if (sessionData?.addressData?.addresses) {\n          const fromAddr = sessionData.addressData.addresses.find(addr => addr.type === 'from');\n          const toAddr = sessionData.addressData.addresses.find(addr => addr.type === 'to');\n          const stops = sessionData.addressData.addresses.filter(addr => addr.type === 'stop');\n          \n          if (fromAddr) {\n            state.setAddresses(prev => ({ ...prev, from: fromAddr.address }));\n            state.setCoordinates(prev => ({ ...prev, from: fromAddr.coordinates }));\n          }\n          if (toAddr) {\n            state.setAddresses(prev => ({ ...prev, to: toAddr.address }));\n            state.setCoordinates(prev => ({ ...prev, to: toAddr.coordinates }));\n          }\n          if (stops && stops.length) {\n            const stopAddresses = stops.map(s => s.address).slice(0, 2);\n            const stopCoords = stops.slice(0, 2).map(s => s.coordinates).filter(Boolean) as Array<{ latitude: number; longitude: number }>;\n            state.setAddresses(prev => ({ ...prev, stops: stopAddresses }));\n            state.setCoordinates(prev => ({ ...prev, stops: stopCoords }));\n          }\n        }\n      } catch (error) {\n        console.error('Error loading session data:', error);\n      }\n    };\n    \n    loadSessionData();\n  }, [initialData]);\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SHADOWS' is defined but never used.","line":2,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StyleSheet } from 'react-native';\nimport { getCurrentColors, SIZES, SHADOWS } from '../../../constants/colors';\n\nexport const createFixWaveScreenStyles = (isDark: boolean) => {\n  const colors = getCurrentColors(isDark);\n\n  return StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: colors.background,\n    },\n    // Хедер скопированный из ChatListScreen\n    header: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      paddingHorizontal: SIZES.xl,\n      paddingVertical: SIZES.lg,\n      backgroundColor: colors.background,\n      borderBottomWidth: 1,\n      borderBottomColor: colors.border,\n    },\n    headerLeft: {\n      flex: 1,\n    },\n    headerRight: {\n      flex: 1,\n    },\n    headerActions: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: SIZES.md,\n    },\n    headerContainer: {\n      width: 200,\n      height: 30,\n      backgroundColor: colors.surface,\n      borderRadius: 15,\n      borderWidth: 1,\n      borderColor: colors.border,\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'relative',\n    },\n    headerButton: {\n      width: 100,\n      height: 24,\n      backgroundColor: colors.primary,\n      borderRadius: 12,\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'absolute',\n    },\n    buttonInner: {\n      width: '100%',\n      height: '100%',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    buttonText: {\n      color: '#FFFFFF',\n      fontSize: 12,\n      fontWeight: '600',\n      textAlign: 'center',\n    },\n    containerTouchable: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      zIndex: 1,\n    },\n    headerButtonLeft: {\n      left: 4,\n    },\n    headerButtonRight: {\n      right: 4,\n    },\n    headerTitle: {\n      fontSize: SIZES.fontSize.xxl + 4, // Увеличиваем размер на 4\n      fontWeight: '700',\n      color: colors.text,\n      textAlign: 'left',\n      marginLeft: SIZES.sm, // Сдвигаем правее\n    },\n    content: {\n      padding: SIZES.lg,\n      gap: SIZES.lg,\n    },\n  });\n};\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/types/fix-wave.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/utils/progressUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1656,1659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1656,1659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FixWavePage, ProgressStep } from '../types/fix-wave.types';\n\nexport const PROGRESS_STEPS: ProgressStep[] = [\n  {\n    id: 'addresses',\n    title: 'Адреса',\n    icon: 'location',\n    isCompleted: false,\n    isActive: true,\n  },\n  {\n    id: 'timeSchedule',\n    title: 'Время',\n    icon: 'time',\n    isCompleted: false,\n    isActive: false,\n  },\n  {\n    id: 'confirmation',\n    title: 'Подтверждение',\n    icon: 'car',\n    isCompleted: false,\n    isActive: false,\n  },\n];\n\nexport const getProgressForPage = (page: FixWavePage): number => {\n  switch (page) {\n    case 'addresses':\n      return 0;\n    case 'timeSchedule':\n      return 50;\n    case 'confirmation':\n      return 100;\n    default:\n      return 0;\n  }\n};\n\nexport const getProgressSteps = (currentPage: FixWavePage): ProgressStep[] => {\n  return PROGRESS_STEPS.map((step, index) => {\n    const currentIndex = PROGRESS_STEPS.findIndex(s => s.id === currentPage);\n    \n    return {\n      ...step,\n      isActive: step.id === currentPage,\n      isCompleted: index < currentIndex,\n    };\n  });\n};\n\nexport const getNextPage = (currentPage: FixWavePage): FixWavePage | null => {\n  const currentIndex = PROGRESS_STEPS.findIndex(step => step.id === currentPage);\n  const nextStep = PROGRESS_STEPS[currentIndex + 1];\n  return nextStep ? nextStep.id : null;\n};\n\nexport const getPreviousPage = (currentPage: FixWavePage): FixWavePage | null => {\n  const currentIndex = PROGRESS_STEPS.findIndex(step => step.id === currentPage);\n  const previousStep = PROGRESS_STEPS[currentIndex - 1];\n  return previousStep ? previousStep.id : null;\n};\n\nexport const canGoToNextPage = (currentPage: FixWavePage, data: any): boolean => {\n  switch (currentPage) {\n    case 'addresses':\n      return data.familyMemberId && data.packageType && data.addresses?.length >= 2;\n    case 'timeSchedule':\n      return data.date && data.time;\n    case 'confirmation':\n      return true;\n    default:\n      return false;\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/FixWaveScreen/utils/scheduleUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/NotificationsScreen.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadNotifications'. Either include it or remove the dependency array.","line":397,"column":50,"nodeType":"ArrayExpression","endLine":397,"endColumn":60,"suggestions":[{"desc":"Update the dependencies array to be: [loadNotifications, user.id]","fix":{"range":[14459,14469],"text":"[loadNotifications, user.id]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":397,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":397,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14474,14477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14474,14477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  SafeAreaView,\n  RefreshControl,\n  Alert,\n  Animated,\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport NotificationService, { Notification as ApiNotification } from '../../services/NotificationService';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useAuth } from '../../context/AuthContext';\nimport { NotificationsScreenStyles } from '../../styles/screens/NotificationsScreen.styles';\n\ntype Notification = ApiNotification;\n\nconst NotificationsScreen: React.FC = () => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { user } = useAuth();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [refreshing, setRefreshing] = useState(false);\n  const [isSelectionMode, setIsSelectionMode] = useState(false);\n  const [selectedNotifications, setSelectedNotifications] = useState<Set<string>>(new Set());\n  const [fadeAnim] = useState(new Animated.Value(0));\n  const storageKey = user?.id ? `@notifications_${user.id}` : '@notifications_anonymous';\n\n  useEffect(() => {\n    // Анимация появления\n    Animated.timing(fadeAnim, {\n      toValue: 1,\n      duration: 300,\n      useNativeDriver: true,\n    }).start();\n  }, [fadeAnim]);\n\n  const loadNotifications = async () => {\n    try {\n      setRefreshing(true);\n      if (__DEV__) {\n        const saved = await AsyncStorage.getItem(storageKey);\n        setNotifications(saved ? JSON.parse(saved) : []);\n      } else {\n        if (!user?.id) {\n          setNotifications([]);\n        } else {\n          const list = await NotificationService.getInstance().getNotifications(user.id, 1, 50);\n          setNotifications(list);\n        }\n      }\n    } catch (e) {\n      setNotifications([]);\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  const onRefresh = () => {\n    loadNotifications();\n  };\n\n  const handleNotificationPress = (notification: Notification) => {\n    if (isSelectionMode) {\n      // В режиме выбора - переключаем выбор\n      const newSelected = new Set(selectedNotifications);\n      if (newSelected.has(notification.id)) {\n        newSelected.delete(notification.id);\n      } else {\n        newSelected.add(notification.id);\n      }\n      setSelectedNotifications(newSelected);\n    } else {\n      // Обычный режим - отмечаем как прочитанное\n      if (!notification.isRead) {\n        setNotifications(prev => prev.map(n => n.id === notification.id ? { ...n, isRead: true } : n));\n        if (__DEV__) {\n          AsyncStorage.setItem(storageKey, JSON.stringify(\n            notifications.map(n => n.id === notification.id ? { ...n, isRead: true } : n)\n          ));\n        } else {\n          NotificationService.getInstance().markAsRead(notification.id).catch(() => {});\n        }\n      }\n      // Здесь можно добавить навигацию в зависимости от типа уведомления\n  \n    }\n  };\n\n  const handleLongPress = (notification: Notification) => {\n    if (!isSelectionMode) {\n      setIsSelectionMode(true);\n      setSelectedNotifications(new Set([notification.id]));\n    }\n  };\n\n  const handleCancelSelection = () => {\n    setIsSelectionMode(false);\n    setSelectedNotifications(new Set());\n  };\n\n  const handleSelectAll = () => {\n    if (selectedNotifications.size === notifications.length) {\n      setSelectedNotifications(new Set());\n    } else {\n      setSelectedNotifications(new Set(notifications.map(n => n.id)));\n    }\n  };\n\n  const handleMarkSelectedAsRead = () => {\n    setNotifications(prev => prev.map(n => \n      selectedNotifications.has(n.id) ? { ...n, isRead: true } : n\n    ));\n    setIsSelectionMode(false);\n    setSelectedNotifications(new Set());\n  };\n\n  const handleDeleteSelected = () => {\n    Alert.alert(\n      t('notifications.alerts.deleteTitle'),\n      t('notifications.alerts.deleteMessage'),\n      [\n        { text: t('notifications.buttons.cancel'), style: 'cancel' },\n        {\n          text: t('notifications.delete'),\n          style: 'destructive',\n          onPress: () => {\n            setNotifications(prev => prev.filter(n => !selectedNotifications.has(n.id)));\n            if (__DEV__) {\n              const updated = notifications.filter(n => !selectedNotifications.has(n.id));\n              AsyncStorage.setItem(storageKey, JSON.stringify(updated));\n            } else {\n              // удаляем по одному, без ожидания\n              [...selectedNotifications].forEach(id => {\n                NotificationService.getInstance().deleteNotification(id).catch(() => {});\n              });\n            }\n            setIsSelectionMode(false);\n            setSelectedNotifications(new Set());\n          },\n        },\n      ]\n    );\n  };\n\n  const handleDeleteNotification = (notificationId: string) => {\n    Alert.alert(\n      t('notifications.alerts.deleteTitle'),\n      t('notifications.alerts.deleteMessage'),\n      [\n        { text: t('notifications.buttons.cancel'), style: 'cancel' },\n        {\n          text: t('notifications.delete'),\n          style: 'destructive',\n          onPress: () => {\n            setNotifications(prev => prev.filter(n => n.id !== notificationId));\n            if (__DEV__) {\n              const updated = notifications.filter(n => n.id !== notificationId);\n              AsyncStorage.setItem(storageKey, JSON.stringify(updated));\n            } else {\n              NotificationService.getInstance().deleteNotification(notificationId).catch(() => {});\n            }\n          },\n        },\n      ]\n    );\n  };\n\n  const handleMarkAllAsRead = () => {\n    setNotifications(prev => prev.map(n => ({ ...n, isRead: true })));\n    if (__DEV__) {\n      AsyncStorage.setItem(storageKey, JSON.stringify(\n        notifications.map(n => ({ ...n, isRead: true }))\n      ));\n    } else if (user?.id) {\n      NotificationService.getInstance().markAllAsRead(user.id).catch(() => {});\n    }\n  };\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'trip':\n        return 'car';\n      case 'payment':\n        return 'card';\n      case 'driver':\n        return 'person';\n      case 'system':\n        return 'settings';\n      default:\n        return 'notifications';\n    }\n  };\n\n  const getNotificationColor = (type: string) => {\n    switch (type) {\n      case 'trip':\n        return '#10B981';\n      case 'payment':\n        return '#F59E0B';\n      case 'driver':\n        return '#3B82F6';\n      case 'system':\n        return '#6B7280';\n      default:\n        return '#6B7280';\n    }\n  };\n\n  const unreadCount = notifications.filter(n => !n.isRead).length;\n\n  const renderNotificationItem = (notification: Notification) => {\n    const isSelected = selectedNotifications.has(notification.id);\n    \n    return (\n      <Animated.View key={notification.id} style={{ opacity: fadeAnim }}>\n        <TouchableOpacity\n          style={[\n            NotificationsScreenStyles.notificationItem,\n            isDark && NotificationsScreenStyles.notificationItemDark,\n            !notification.isRead && NotificationsScreenStyles.unreadNotification,\n            isSelected && NotificationsScreenStyles.selectedNotification,\n          ]}\n          onPress={() => handleNotificationPress(notification)}\n          onLongPress={() => handleLongPress(notification)}\n          activeOpacity={0.7}\n        >\n          {/* Checkbox для режима выбора */}\n          {isSelectionMode && (\n            <TouchableOpacity\n              style={[\n                NotificationsScreenStyles.checkbox,\n                isSelected && NotificationsScreenStyles.checkboxSelected\n              ]}\n              onPress={() => handleNotificationPress(notification)}\n            >\n              {isSelected && (\n                <Ionicons name=\"checkmark\" size={16} color=\"#FFFFFF\" />\n              )}\n            </TouchableOpacity>\n          )}\n\n          <View style={NotificationsScreenStyles.notificationContent}>\n            {/* Icon */}\n            <View\n              style={[\n                NotificationsScreenStyles.notificationIcon,\n                { backgroundColor: getNotificationColor(notification.type) + '20' },\n              ]}\n            >\n              <Ionicons\n                name={getNotificationIcon(notification.type)}\n                size={20}\n                color={getNotificationColor(notification.type)}\n              />\n            </View>\n\n            {/* Content */}\n            <View style={NotificationsScreenStyles.notificationTextContainer}>\n              <View style={NotificationsScreenStyles.notificationHeader}>\n                <Text\n                  style={[\n                    NotificationsScreenStyles.notificationTitle,\n                    isDark && NotificationsScreenStyles.notificationTitleDark,\n                    !notification.isRead && NotificationsScreenStyles.unreadTitle,\n                  ]}\n                >\n                  {notification.title}\n                </Text>\n              </View>\n              <Text style={NotificationsScreenStyles.notificationMessage}>{notification.message}</Text>\n              <Text style={NotificationsScreenStyles.notificationTime}>{notification.createdAt}</Text>\n            </View>\n            \n            {!isSelectionMode && (\n              <TouchableOpacity\n                style={NotificationsScreenStyles.deleteButton}\n                onPress={() => handleDeleteNotification(notification.id)}\n              >\n                <Ionicons name=\"trash\" size={20} color=\"#FF3B30\" />\n              </TouchableOpacity>\n            )}\n          </View>\n        </TouchableOpacity>\n      </Animated.View>\n    );\n  };\n\n  return (\n    <SafeAreaView style={[NotificationsScreenStyles.container, isDark && NotificationsScreenStyles.containerDark]}>\n      {/* Header */}\n      <View style={[NotificationsScreenStyles.header, isDark && NotificationsScreenStyles.headerDark]}>\n        {isSelectionMode ? (\n          // Режим выбора\n          <View style={NotificationsScreenStyles.selectionHeader} testID=\"selection-header\">\n            <TouchableOpacity onPress={handleCancelSelection}>\n              <Text style={NotificationsScreenStyles.cancelButton}>{t('notifications.cancel')}</Text>\n            </TouchableOpacity>\n            <Text style={NotificationsScreenStyles.selectionTitle}>\n              {t('notifications.selectedCount')}: {selectedNotifications.size}\n            </Text>\n            <TouchableOpacity onPress={handleSelectAll}>\n              <Text style={NotificationsScreenStyles.selectAllButton}>\n                {selectedNotifications.size === notifications.length ? t('notifications.unselectAll') : t('notifications.selectAll')}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        ) : (\n          // Обычный режим\n          <View style={NotificationsScreenStyles.headerContent}>\n            <View style={NotificationsScreenStyles.headerLeft}>\n              <Ionicons name=\"notifications\" size={24} color={isDark ? '#F9FAFB' : '#1F2937'} />\n              <Text style={[NotificationsScreenStyles.headerTitle, isDark && NotificationsScreenStyles.headerTitleDark]}>\n                {t('notifications.title')}\n              </Text>\n            </View>\n            <View style={NotificationsScreenStyles.headerRight}>\n              {unreadCount > 0 && (\n                <TouchableOpacity\n                  style={NotificationsScreenStyles.markAllButton}\n                  onPress={handleMarkAllAsRead}\n                >\n                  <Text style={NotificationsScreenStyles.markAllButtonText}>\n                    {t('notifications.readAll')} ({unreadCount})\n                  </Text>\n                </TouchableOpacity>\n              )}\n              <TouchableOpacity \n                style={NotificationsScreenStyles.selectButton}\n                onPress={() => setIsSelectionMode(true)}\n                testID=\"select-button\"\n              >\n                <Ionicons name=\"checkmark-circle-outline\" size={24} color=\"#007AFF\" />\n              </TouchableOpacity>\n            </View>\n          </View>\n        )}\n      </View>\n\n      {/* Actions для выбранных элементов */}\n      {isSelectionMode && selectedNotifications.size > 0 && (\n        <View style={NotificationsScreenStyles.selectionActions}>\n          <TouchableOpacity \n            style={NotificationsScreenStyles.actionButton}\n            onPress={handleMarkSelectedAsRead}\n          >\n            <Ionicons name=\"checkmark-circle\" size={20} color=\"#10B981\" />\n            <Text style={NotificationsScreenStyles.actionButtonText}>{t('notifications.markRead')}</Text>\n          </TouchableOpacity>\n          \n                      <TouchableOpacity \n              style={[NotificationsScreenStyles.actionButton, NotificationsScreenStyles.deleteActionButton]}\n              onPress={handleDeleteSelected}\n            >\n              <Ionicons name=\"trash\" size={20} color=\"#EF4444\" />\n              <Text style={[NotificationsScreenStyles.actionButtonText, NotificationsScreenStyles.deleteButtonText]}>\n                {t('notifications.delete')}\n              </Text>\n            </TouchableOpacity>\n        </View>\n      )}\n\n      <ScrollView\n        style={NotificationsScreenStyles.scrollView}\n        refreshControl={\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n        }\n        showsVerticalScrollIndicator={false}\n        testID=\"notifications-scroll\"\n      >\n        {notifications.length === 0 ? (\n          <View style={NotificationsScreenStyles.emptyState}>\n            <Ionicons \n              name=\"notifications-off\" \n              size={64} \n              color={isDark ? '#6B7280' : '#9CA3AF'} \n            />\n            <Text style={[NotificationsScreenStyles.emptyStateText, isDark && NotificationsScreenStyles.emptyStateTextDark]}>\n              {t('notifications.noNotifications')}\n            </Text>\n            <Text style={[NotificationsScreenStyles.emptyStateSubtext, isDark && NotificationsScreenStyles.emptyStateSubtextDark]}>\n              {t('notifications.allNotificationsHere')}\n            </Text>\n          </View>\n        ) : (\n          notifications.map(renderNotificationItem)\n        )}\n      </ScrollView>\n      {/* Первичная загрузка */}\n      {notifications.length === 0 && !refreshing && (\n        <></>\n      )}\n      {useEffect(() => { loadNotifications(); }, [user?.id]) as any}\n    </SafeAreaView>\n  );\n};\n\nexport default NotificationsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/OrdersMapScreen/OrdersMapScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/OrdersMapScreen/components/MapControls.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useTheme' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSettingsExpanded' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, TouchableOpacity, Animated } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../../../context/ThemeContext';\nimport { useAuth } from '../../../../context/AuthContext';\nimport { createOrdersMapScreenStyles } from '../../../../styles/screens/OrdersMapScreen.styles';\n\ninterface MapControlsProps {\n  isDark: boolean;\n  isSettingsExpanded: boolean;\n  isRefreshing: boolean;\n  isClientLocationActive: boolean;\n  settingsRotate: Animated.AnimatedInterpolation<string | number>;\n  settingsPanelWidth: Animated.AnimatedInterpolation<string | number>;\n  settingsPanelOpacity: Animated.AnimatedInterpolation<string | number>;\n  onSettingsPress: () => void;\n  onRefreshMap: () => void;\n  onClientLocationToggle: () => void;\n  onReportPress: () => void;\n  onLocatePress: () => void;\n  onLayersPress: () => void;\n  onZoomIn: () => void;\n  onZoomOut: () => void;\n  onSimpleDialogOpen: () => void;\n  onChevronPress: () => void;\n  onSharePress: () => void;\n  canShare?: boolean;\n}\n\nconst MapControls: React.FC<MapControlsProps> = ({\n  isDark,\n  isSettingsExpanded,\n  isRefreshing,\n  isClientLocationActive,\n  settingsRotate,\n  settingsPanelWidth,\n  settingsPanelOpacity,\n  onSettingsPress,\n  onRefreshMap,\n  onClientLocationToggle,\n  onReportPress,\n  onLocatePress,\n  onLayersPress,\n  onZoomIn,\n  onZoomOut,\n  onSimpleDialogOpen,\n  onChevronPress,\n  onSharePress,\n  canShare = true,\n}) => {\n  const { user } = useAuth();\n  const styles = createOrdersMapScreenStyles(isDark);\n\n  return (\n    <>\n      {/* Кнопка сверху слева */}\n      <TouchableOpacity\n        style={styles.topLeftButton}\n        onPress={onSimpleDialogOpen}\n        accessibilityLabel=\"Simple dialog\"\n      >\n        <View style={{\n          width: 24,\n          height: 24,\n          borderRadius: 12,\n          backgroundColor: '#DC2626',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}>\n          <Ionicons\n            name=\"shield\"\n            size={16}\n            color=\"#FFFFFF\"\n            style={{ marginTop: -1 }}\n          />\n        </View>\n      </TouchableOpacity>\n\n      {/* Кнопка сверху справа - поделиться */}\n      <TouchableOpacity\n        style={[styles.topRightButton, !canShare && { opacity: 0.5 }]}\n        onPress={onSharePress}\n        accessibilityLabel=\"Share\"\n        disabled={!canShare}\n      >\n        <Ionicons\n          name=\"share-outline\"\n          size={20}\n          color={isDark ? '#F9FAFB' : '#111827'}\n        />\n      </TouchableOpacity>\n      \n      {/* Кнопки управления вертикально внизу справа */}\n      <View style={styles.bottomButtonsContainer}>\n        {/* Кнопка настроек */}\n        <View style={{ position: 'relative' }}>\n          <TouchableOpacity\n            style={styles.bottomButton}\n            onPress={onSettingsPress}\n            accessibilityLabel=\"Settings\"\n          >\n            <Animated.View style={{ transform: [{ rotate: settingsRotate }] }}>\n              <Ionicons\n                name=\"settings-outline\"\n                size={22}\n                color={isDark ? '#F9FAFB' : '#111827'}\n              />\n            </Animated.View>\n          </TouchableOpacity>\n          \n          {/* Выпадающая панель настроек */}\n          <Animated.View\n            style={[\n              styles.settingsPanel,\n              {\n                width: settingsPanelWidth,\n                opacity: settingsPanelOpacity,\n                right: 0,\n                bottom: 60,\n              }\n            ]}\n          >\n            <TouchableOpacity \n              style={[styles.settingsButton, isRefreshing && { opacity: 0.5 }]}\n              onPress={onRefreshMap}\n              disabled={isRefreshing}\n            >\n              <Ionicons \n                name=\"refresh-outline\" \n                size={18} \n                color={isDark ? '#F9FAFB' : '#111827'} \n              />\n            </TouchableOpacity>\n            \n            {user?.role === 'client' ? (\n              <TouchableOpacity \n                style={[\n                  styles.settingsButton, \n                  isClientLocationActive && { backgroundColor: isDark ? '#10B981' : '#10B981' }\n                ]}\n                onPress={onClientLocationToggle}\n              >\n                <Ionicons \n                  name=\"location-sharp\" \n                  size={18} \n                  color={\n                    isClientLocationActive \n                      ? '#FFFFFF' \n                      : (isDark ? '#F9FAFB' : '#111827')\n                  } \n                />\n              </TouchableOpacity>\n            ) : (\n              <TouchableOpacity \n                style={styles.settingsButton}\n                onPress={onReportPress}\n              >\n                <Ionicons \n                  name=\"warning\" \n                  size={18} \n                  color={isDark ? '#F9FAFB' : '#111827'}\n                />\n              </TouchableOpacity>\n            )}\n            \n            <TouchableOpacity \n              style={styles.settingsButton}\n              onPress={onLocatePress}\n            >\n              <Ionicons name=\"locate-outline\" size={18} color={isDark ? '#F9FAFB' : '#111827'} />\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={styles.settingsButton}\n              onPress={onLayersPress}\n            >\n              <Ionicons name=\"layers-outline\" size={18} color={isDark ? '#F9FAFB' : '#111827'} />\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={styles.settingsButton}\n              onPress={onZoomIn}\n            >\n              <Ionicons name=\"add-outline\" size={18} color={isDark ? '#F9FAFB' : '#111827'} />\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={styles.settingsButton}\n              onPress={onZoomOut}\n            >\n              <Ionicons name=\"remove-outline\" size={18} color={isDark ? '#F9FAFB' : '#111827'} />\n            </TouchableOpacity>\n          </Animated.View>\n        </View>\n      </View>\n      \n      {/* Кнопка меню слева */}\n      <TouchableOpacity\n        style={styles.leftButton}\n        onPress={onChevronPress}\n        accessibilityLabel=\"Menu\"\n      >\n        <Ionicons\n          name=\"chevron-up\"\n          size={22}\n          color={isDark ? '#F9FAFB' : '#111827'}\n        />\n      </TouchableOpacity>\n    </>\n  );\n};\n\nexport default MapControls;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/OrdersMapScreen/components/ReportModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/OrdersMapScreen/components/SimpleDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/OrdersMapScreen/hooks/useMapControls.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[526,529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[526,529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[562,565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[562,565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'state.reportComment'. Either exclude it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [actions]","fix":{"range":[1218,1248],"text":"[actions]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'state.driverVisibilityTrigger' and 'state.mapRefreshKey'. Either include them or remove the dependency array.","line":124,"column":6,"nodeType":"ArrayExpression","endLine":124,"endColumn":61,"suggestions":[{"desc":"Update the dependencies array to be: [state.isRefreshing, state.driverVisibilityTrigger, state.mapRefreshKey, state.isSettingsExpanded, actions]","fix":{"range":[3803,3858],"text":"[state.isRefreshing, state.driverVisibilityTrigger, state.mapRefreshKey, state.isSettingsExpanded, actions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useCallback } from 'react';\nimport { Alert } from 'react-native';\nimport { MapService } from '../../../../services/MapService';\nimport { OrdersMapState, OrdersMapActions, MapControlHandlers } from '../types/orders-map.types';\nimport { callEmergencyService } from '../../../../utils/countryHelpers';\nimport { useLanguage } from '../../../../context/LanguageContext';\n\nexport const useMapControls = (\n  state: OrdersMapState,\n  actions: OrdersMapActions\n): MapControlHandlers & { mapRef: React.RefObject<any> } => {\n  const mapRef = useRef<any>(null);\n  const isZoomingRef = useRef(false);\n  const { t } = useLanguage();\n\n  const handleChevronPress = useCallback(() => {\n    actions.setIsDriverModalVisible(true);\n  }, [actions]);\n\n  const handleDriverModalClose = useCallback(() => {\n    actions.setIsDriverModalVisible(false);\n  }, [actions]);\n\n  const handleReportPress = useCallback(() => {\n    actions.setIsReportModalVisible(true);\n  }, [actions]);\n\n  const handleReportSubmit = useCallback(() => {\n    // Здесь можно добавить логику отправки репорта на сервер\n    actions.setIsReportModalVisible(false);\n    actions.setReportComment('');\n    Alert.alert('Успех', 'Репорт отправлен');\n  }, [state.reportComment, actions]);\n\n  const handleReportCancel = useCallback(() => {\n    actions.setIsReportModalVisible(false);\n    actions.setReportComment('');\n  }, [actions]);\n\n  const handleSimpleDialogYes = useCallback(async () => {\n    actions.setIsSimpleDialogVisible(false);\n    \n    try {\n      // Получаем код страны (по умолчанию RU, в реальном приложении определяется по геолокации)\n      const countryCode = 'RU'; // TODO: получать из настроек пользователя или геолокации\n      \n      // Совершаем звонок в экстренную службу\n      await callEmergencyService(countryCode);\n    } catch (error) {\n      console.error('Ошибка при звонке в экстренную службу:', error);\n      Alert.alert(\n        t('common.error'),\n        t('common.emergency.error')\n      );\n    }\n  }, [actions, t]);\n\n  const handleSimpleDialogNo = useCallback(() => {\n    actions.setIsSimpleDialogVisible(false);\n  }, [actions]);\n\n  const handleLayersPress = useCallback(() => {\n    const mapTypes: Array<'standard' | 'satellite' | 'hybrid'> = ['standard', 'satellite', 'hybrid'];\n    const currentIndex = mapTypes.indexOf(state.mapType);\n    const nextIndex = (currentIndex + 1) % mapTypes.length;\n    actions.setMapType(mapTypes[nextIndex]);\n  }, [state.mapType, actions]);\n\n  const handleZoomIn = useCallback(() => {\n    if (isZoomingRef.current) {\n      return;\n    }\n    \n    isZoomingRef.current = true;\n    \n    if (mapRef.current && mapRef.current.zoomIn) {\n      mapRef.current.zoomIn();\n    }\n    \n    setTimeout(() => {\n      isZoomingRef.current = false;\n    }, 650);\n  }, [mapRef]);\n\n  const handleZoomOut = useCallback(() => {\n    if (isZoomingRef.current) {\n      return;\n    }\n    \n    isZoomingRef.current = true;\n    \n    if (mapRef.current && mapRef.current.zoomOut) {\n      mapRef.current.zoomOut();\n    }\n    \n    setTimeout(() => {\n      isZoomingRef.current = false;\n    }, 650);\n  }, [mapRef]);\n\n  const handleRefreshMap = useCallback(async () => {\n    if (state.isRefreshing) return;\n    \n    actions.setIsRefreshing(true);\n    \n    try {\n      const newLocation = await MapService.getCurrentLocationWithRetry(3);\n      if (newLocation) {\n        actions.setCurrentLocation(newLocation);\n      }\n      \n      actions.setDriverVisibilityTrigger(state.driverVisibilityTrigger + 1);\n      actions.setMapRefreshKey(state.mapRefreshKey + 1);\n      \n      if (state.isSettingsExpanded) {\n        actions.setIsSettingsExpanded(false);\n      }\n      \n    } catch (error) {\n      console.error('Error refreshing map:', error);\n    } finally {\n      actions.setIsRefreshing(false);\n    }\n  }, [state.isRefreshing, state.isSettingsExpanded, actions]);\n\n  const handleDriverVisibilityToggle = useCallback((timestamp: number) => {\n    actions.setDriverVisibilityTrigger(timestamp);\n  }, [actions]);\n\n  const handleLocatePress = useCallback(async () => {\n    try {\n      const location = await MapService.getCurrentLocationWithRetry(3);\n      if (location) {\n        actions.setCurrentLocation(location);\n      }\n    } catch (error) {\n      console.error('Error getting current location:', error);\n      Alert.alert('Ошибка', 'Не удалось получить текущее местоположение');\n    }\n  }, [actions]);\n\n  const handleClientLocationToggle = useCallback(async () => {\n    try {\n      if (!state.isClientLocationActive) {\n        const location = await MapService.getCurrentLocationWithRetry(3);\n        if (location) {\n          actions.setIsClientLocationActive(true);\n          actions.setCurrentLocation(location);\n        }\n      } else {\n        actions.setIsClientLocationActive(false);\n      }\n    } catch (error) {\n      console.error('Error toggling client location:', error);\n      Alert.alert('Ошибка', 'Не удалось обновить локацию');\n    }\n  }, [state.isClientLocationActive, actions]);\n\n  const handleSettingsPress = useCallback(() => {\n    actions.setIsSettingsExpanded(!state.isSettingsExpanded);\n  }, [state.isSettingsExpanded, actions]);\n\n  return {\n    handleChevronPress,\n    handleDriverModalClose,\n    handleReportPress,\n    handleReportSubmit,\n    handleReportCancel,\n    handleSimpleDialogYes,\n    handleSimpleDialogNo,\n    handleLayersPress,\n    handleZoomIn,\n    handleZoomOut,\n    handleSettingsPress,\n    handleRefreshMap,\n    handleDriverVisibilityToggle,\n    handleLocatePress,\n    handleClientLocationToggle,\n    mapRef,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/OrdersMapScreen/hooks/useMapSettings.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'settingsPanelAnim' and 'settingsRotateAnim'. Either include them or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [isExpanded, actions, settingsRotateAnim, settingsPanelAnim]","fix":{"range":[882,903],"text":"[isExpanded, actions, settingsRotateAnim, settingsPanelAnim]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRef, useCallback, useState } from 'react';\nimport { Animated } from 'react-native';\nimport { OrdersMapActions } from '../types/orders-map.types';\n\nexport const useMapSettings = (actions: OrdersMapActions) => {\n  const settingsRotateAnim = useRef(new Animated.Value(0)).current;\n  const settingsPanelAnim = useRef(new Animated.Value(0)).current;\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const handleSettingsPress = useCallback(() => {\n    const toValue = isExpanded ? 0 : 1;\n    setIsExpanded(!isExpanded);\n    actions.setIsSettingsExpanded(!isExpanded);\n    \n    Animated.parallel([\n      Animated.timing(settingsRotateAnim, {\n        toValue,\n        duration: 300,\n        useNativeDriver: true,\n      }),\n      Animated.timing(settingsPanelAnim, {\n        toValue,\n        duration: 300,\n        useNativeDriver: false,\n      })\n    ]).start();\n  }, [isExpanded, actions]);\n\n  const settingsRotate = settingsRotateAnim.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '180deg'],\n  });\n\n  const settingsPanelWidth = settingsPanelAnim.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 280],\n  });\n\n  const settingsPanelOpacity = settingsPanelAnim.interpolate({\n    inputRange: [0, 0.3, 1],\n    outputRange: [0, 0, 1],\n  });\n\n  const headerTitleOpacity = settingsPanelAnim.interpolate({\n    inputRange: [0, 0.5, 1],\n    outputRange: [1, 0.3, 0],\n  });\n\n  return {\n    handleSettingsPress,\n    settingsRotate,\n    settingsPanelWidth,\n    settingsPanelOpacity,\n    headerTitleOpacity,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/OrdersMapScreen/hooks/useOrdersMapState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/OrdersMapScreen/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/OrdersMapScreen/types/orders-map.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/ScheduleScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/SupportChatScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SupportMessage' is defined but never used.","line":19,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":40},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializeSupportChat'. Either include it or remove the dependency array.","line":73,"column":6,"nodeType":"ArrayExpression","endLine":73,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [initializeSupportChat, route.params]","fix":{"range":[2054,2069],"text":"[initializeSupportChat, route.params]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  FlatList,\n  KeyboardAvoidingView,\n  Platform,\n  Alert,\n  SafeAreaView,\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { useAuth } from '../../context/AuthContext';\nimport { SupportChatScreenStyles } from '../../styles/screens/SupportChatScreen.styles';\nimport { supportService, SupportMessage, SupportTicket } from '../../services/SupportService';\n\ninterface AttachedFile {\n  id: string;\n  name: string;\n  uri: string;\n  type: 'image' | 'document';\n  size?: number;\n}\n\ninterface Message {\n  id: string;\n  text: string;\n  isUser: boolean;\n  timestamp: Date;\n  attachments?: AttachedFile[];\n}\n\ninterface SupportChatScreenProps {\n  navigation: { goBack: () => void };\n  route?: {\n    params?: {\n      initialMessage?: string;\n      quickQuestion?: string;\n    };\n  };\n}\n\nconst SupportChatScreen: React.FC<SupportChatScreenProps> = ({ navigation, route }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { user } = useAuth();\n  \n  const isDriver = user?.role === 'driver';\n  \n  // Условная логика для разных ролей\n  const getScreenTitle = () => {\n    return isDriver ? 'Поддержка' : t('support.title');\n  };\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputText, setInputText] = useState('');\n  const [currentTicket, setCurrentTicket] = useState<SupportTicket | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [attachedFiles, setAttachedFiles] = useState<AttachedFile[]>([]);\n  const flatListRef = useRef<FlatList>(null);\n\n  const quickQuestions = [\n    { id: 'q1', question: t('support.quickQuestion1') },\n    { id: 'q2', question: t('support.quickQuestion2') },\n    { id: 'q3', question: t('support.quickQuestion3') },\n  ];\n\n  useEffect(() => {\n    initializeSupportChat();\n  }, [route?.params]);\n\n  const initializeSupportChat = () => {\n    setIsLoading(true);\n    \n    try {\n      // Создаем новый тикет поддержки\n      const initialMessage = route?.params?.initialMessage || t('support.initialMessage');\n      const ticket = supportService.createSupportTicket(t('support.chatTitle'), initialMessage);\n      setCurrentTicket(ticket);\n      \n      // Конвертируем сообщения тикета в формат для отображения\n      const displayMessages: Message[] = ticket.messages.map(msg => ({\n        id: msg.id,\n        text: msg.text,\n        isUser: msg.sender === 'user',\n        timestamp: msg.timestamp,\n      }));\n      \n      setMessages(displayMessages);\n      \n      // Если есть быстрый вопрос, выбираем его\n      if (route?.params?.quickQuestion) {\n        selectQuickQuestion(route.params.quickQuestion);\n      }\n      \n    } catch (error) {\n      console.error('Ошибка инициализации чата поддержки:', error);\n      Alert.alert(t('errors.error'), t('support.initError'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const sendMessage = () => {\n    if ((!inputText.trim() && attachedFiles.length === 0) || !currentTicket) return;\n\n    const messageText = inputText.trim();\n    const filesToSend = [...attachedFiles];\n    \n    setInputText('');\n    setAttachedFiles([]);\n\n    try {\n      // Добавляем сообщение пользователя в тикет\n      supportService.addUserMessage(currentTicket.id, messageText);\n      \n      // Обновляем локальное состояние\n      const userMessage: Message = {\n        id: Date.now().toString(),\n        text: messageText,\n        isUser: true,\n        timestamp: new Date(),\n        attachments: filesToSend.length > 0 ? filesToSend : undefined,\n      };\n      \n      setMessages(prev => [...prev, userMessage]);\n      \n      // Симулируем ответ поддержки\n      supportService.simulateSupportResponse(currentTicket.id, messageText);\n      \n      // Обновляем тикет\n      const updatedTicket = supportService.getCurrentTicket();\n      if (updatedTicket) {\n        setCurrentTicket(updatedTicket);\n        \n        // Добавляем ответ поддержки в UI\n        setTimeout(() => {\n          const lastSupportMessage = updatedTicket.messages[updatedTicket.messages.length - 1];\n          if (lastSupportMessage && lastSupportMessage.sender === 'support') {\n            const supportMessage: Message = {\n              id: lastSupportMessage.id,\n              text: lastSupportMessage.text,\n              isUser: false,\n              timestamp: lastSupportMessage.timestamp,\n            };\n            setMessages(prev => [...prev, supportMessage]);\n          }\n        }, 2000);\n      }\n      \n    } catch (error) {\n      console.error('Ошибка отправки сообщения:', error);\n      Alert.alert(t('errors.error'), t('support.sendError'));\n    }\n  };\n\n  const selectQuickQuestion = (question: string) => {\n    if (!currentTicket) return;\n    \n    try {\n      // Добавляем быстрый вопрос как сообщение пользователя\n      supportService.addUserMessage(currentTicket.id, question);\n      \n      // Обновляем локальное состояние\n      const userMessage: Message = {\n        id: Date.now().toString(),\n        text: question,\n        isUser: true,\n        timestamp: new Date(),\n      };\n      \n      setMessages(prev => [...prev, userMessage]);\n      \n      // Симулируем ответ поддержки\n      supportService.simulateSupportResponse(currentTicket.id, question);\n      \n      // Обновляем тикет\n      const updatedTicket = supportService.getCurrentTicket();\n      if (updatedTicket) {\n        setCurrentTicket(updatedTicket);\n        \n        // Добавляем ответ поддержки в UI\n        setTimeout(() => {\n          const lastSupportMessage = updatedTicket.messages[updatedTicket.messages.length - 1];\n          if (lastSupportMessage && lastSupportMessage.sender === 'support') {\n            const supportMessage: Message = {\n              id: lastSupportMessage.id,\n              text: lastSupportMessage.text,\n              isUser: false,\n              timestamp: lastSupportMessage.timestamp,\n            };\n            setMessages(prev => [...prev, supportMessage]);\n          }\n        }, 2000);\n      }\n      \n    } catch (error) {\n      console.error('Ошибка выбора быстрого вопроса:', error);\n      Alert.alert(t('errors.error'), t('support.quickQuestionError'));\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString('ru-RU', { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const handleAttachFile = async () => {\n    Alert.alert(\n      t('support.attachFile'),\n      t('support.selectFileType'),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        { \n          text: t('support.takePhoto'), \n          onPress: () => takePhoto() \n        },\n        { \n          text: t('support.choosePhoto'), \n          onPress: () => pickImage() \n        },\n        { \n          text: t('support.document'), \n          onPress: () => pickDocument() \n        }\n      ]\n    );\n  };\n\n  const takePhoto = async () => {\n    try {\n      const { status } = await ImagePicker.requestCameraPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert(t('errors.permissionDenied'), t('support.cameraPermissionError'));\n        return;\n      }\n\n      const result = await ImagePicker.launchCameraAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 0.8,\n      });\n\n      if (!result.canceled && result.assets[0]) {\n        const asset = result.assets[0];\n        const newFile: AttachedFile = {\n          id: Date.now().toString(),\n          name: `camera_${Date.now()}.jpg`,\n          uri: asset.uri,\n          type: 'image',\n          size: asset.fileSize,\n        };\n        setAttachedFiles(prev => [...prev, newFile]);\n      }\n    } catch (error) {\n      console.error('Ошибка фотографирования:', error);\n      Alert.alert(t('errors.error'), t('support.cameraError'));\n    }\n  };\n\n  const pickImage = async () => {\n    try {\n      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert(t('errors.permissionDenied'), t('support.photoPermissionError'));\n        return;\n      }\n\n      const result = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 0.8,\n      });\n\n      if (!result.canceled && result.assets[0]) {\n        const asset = result.assets[0];\n        const newFile: AttachedFile = {\n          id: Date.now().toString(),\n          name: `photo_${Date.now()}.jpg`,\n          uri: asset.uri,\n          type: 'image',\n          size: asset.fileSize,\n        };\n        setAttachedFiles(prev => [...prev, newFile]);\n      }\n    } catch (error) {\n      console.error('Ошибка выбора изображения:', error);\n      Alert.alert(t('errors.error'), t('support.photoSelectionError'));\n    }\n  };\n\n  const pickDocument = async () => {\n    Alert.alert(\n      t('support.documentPicker'),\n      t('support.documentPickerInfo'),\n      [{ text: t('common.ok'), style: 'default' }]\n    );\n  };\n\n  const removeAttachedFile = (fileId: string) => {\n    setAttachedFiles(prev => prev.filter(file => file.id !== fileId));\n  };\n\n  const handleClose = () => {\n    Alert.alert(\n      t('support.closeChat'),\n      t('support.closeChatConfirm'),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        { text: t('support.close'), onPress: () => navigation.goBack(), style: 'destructive' }\n      ]\n    );\n  };\n\n  const renderMessage = ({ item }: { item: Message }) => (\n    <View style={[\n      SupportChatScreenStyles.messageContainer,\n      item.isUser ? SupportChatScreenStyles.userMessage : SupportChatScreenStyles.supportMessage\n    ]}>\n      <View style={[\n        SupportChatScreenStyles.messageBubble,\n        item.isUser \n          ? [SupportChatScreenStyles.userBubble, isDark && SupportChatScreenStyles.userBubbleDark]\n          : [SupportChatScreenStyles.supportBubble, isDark && SupportChatScreenStyles.supportBubbleDark]\n      ]}>\n        {!item.isUser && (\n          <View style={SupportChatScreenStyles.supportHeader}>\n            <Ionicons name=\"person-circle\" size={16} color=\"#003366\" />\n            <Text style={SupportChatScreenStyles.supportName}>{t('support.supportName')}</Text>\n          </View>\n        )}\n        <Text style={[\n          SupportChatScreenStyles.messageText,\n          item.isUser \n            ? SupportChatScreenStyles.userMessageText\n            : [SupportChatScreenStyles.supportMessageText, isDark && SupportChatScreenStyles.supportMessageTextDark]\n        ]}>\n          {item.text}\n        </Text>\n        \n        {/* Прикрепленные файлы */}\n        {item.attachments && item.attachments.length > 0 && (\n          <View style={SupportChatScreenStyles.attachmentsContainer}>\n            {item.attachments.map((file) => (\n              <View key={file.id} style={SupportChatScreenStyles.attachmentItem}>\n                {file.type === 'image' ? (\n                  <View style={SupportChatScreenStyles.imageAttachment}>\n                    <Ionicons name=\"image\" size={20} color={isDark ? '#9CA3AF' : '#6B7280'} />\n                    <Text style={[\n                      SupportChatScreenStyles.attachmentName,\n                      isDark && SupportChatScreenStyles.attachmentNameDark\n                    ]}>\n                      {file.name}\n                    </Text>\n                  </View>\n                ) : (\n                  <View style={SupportChatScreenStyles.documentAttachment}>\n                    <Ionicons name=\"document\" size={20} color={isDark ? '#9CA3AF' : '#6B7280'} />\n                    <Text style={[\n                      SupportChatScreenStyles.attachmentName,\n                      isDark && SupportChatScreenStyles.attachmentNameDark\n                    ]}>\n                      {file.name}\n                    </Text>\n                  </View>\n                )}\n              </View>\n            ))}\n          </View>\n        )}\n        \n        <Text style={[\n          SupportChatScreenStyles.messageTime,\n          item.isUser \n            ? SupportChatScreenStyles.userMessageTime\n            : [SupportChatScreenStyles.supportMessageTime, isDark && SupportChatScreenStyles.supportMessageTimeDark]\n        ]}>\n          {formatTime(item.timestamp)}\n        </Text>\n      </View>\n    </View>\n  );\n\n  const renderQuickQuestions = () => (\n    <View style={SupportChatScreenStyles.quickQuestionsContainer}>\n      <Text style={[\n        SupportChatScreenStyles.quickQuestionsTitle,\n        isDark && SupportChatScreenStyles.quickQuestionsTitleDark\n      ]}>\n        {t('support.quickQuestions')}:\n      </Text>\n      {quickQuestions.map((question, index) => (\n        <TouchableOpacity\n          key={index}\n          style={[\n            SupportChatScreenStyles.quickQuestionButton,\n            isDark && SupportChatScreenStyles.quickQuestionButtonDark\n          ]}\n          onPress={() => selectQuickQuestion(question.question)}\n        >\n          <Text style={[\n            SupportChatScreenStyles.quickQuestionText,\n            isDark && SupportChatScreenStyles.quickQuestionTextDark\n          ]}>\n            {question.question}\n          </Text>\n          <Ionicons \n            name=\"chevron-forward\" \n            size={20} \n            color={isDark ? '#9CA3AF' : '#6B7280'} \n          />\n        </TouchableOpacity>\n      ))}\n    </View>\n  );\n\n  return (\n    <SafeAreaView style={[\n      SupportChatScreenStyles.container,\n      isDark && SupportChatScreenStyles.containerDark\n    ]}>\n      <KeyboardAvoidingView\n        style={[\n          SupportChatScreenStyles.keyboardView,\n          { backgroundColor: isDark ? '#1F2937' : '#F5F5F5' }\n        ]}\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      >\n        {/* Header */}\n        <View style={[\n          SupportChatScreenStyles.header,\n          isDark && SupportChatScreenStyles.headerDark\n        ]}>\n          <TouchableOpacity \n            style={SupportChatScreenStyles.backButton}\n            onPress={() => navigation.goBack()}\n          >\n            <Ionicons name=\"arrow-back\" size={24} color={isDark ? '#F9FAFB' : '#111827'} />\n          </TouchableOpacity>\n          \n          <View style={SupportChatScreenStyles.headerInfo}>\n                    <Text style={[\n          SupportChatScreenStyles.headerTitle,\n          isDark && SupportChatScreenStyles.headerTitleDark\n        ]}>\n          {getScreenTitle()}\n        </Text>\n            <View style={SupportChatScreenStyles.statusContainer}>\n              <View style={SupportChatScreenStyles.onlineIndicator} />\n              <Text style={[\n                SupportChatScreenStyles.statusText,\n                isDark && SupportChatScreenStyles.statusTextDark\n              ]}>\n                {t('support.online')}\n              </Text>\n            </View>\n          </View>\n          \n          <TouchableOpacity style={SupportChatScreenStyles.closeButton} onPress={handleClose}>\n            <Ionicons name=\"close\" size={24} color={isDark ? '#F9FAFB' : '#111827'} />\n          </TouchableOpacity>\n        </View>\n\n        {/* Messages */}\n        <View style={SupportChatScreenStyles.messagesContainer}>\n          {isLoading ? (\n            <View style={SupportChatScreenStyles.loadingContainer}>\n              <Text style={[\n                SupportChatScreenStyles.loadingText,\n                isDark && SupportChatScreenStyles.loadingTextDark\n              ]}>\n                {t('support.connecting')}\n              </Text>\n            </View>\n          ) : (\n            <FlatList\n              ref={flatListRef}\n              data={messages}\n              renderItem={renderMessage}\n              keyExtractor={(item) => item.id}\n              contentContainerStyle={SupportChatScreenStyles.messagesContent}\n              style={{ backgroundColor: isDark ? '#1F2937' : '#F5F5F5' }}\n              showsVerticalScrollIndicator={false}\n              onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}\n              ListFooterComponent={() => (\n                <>\n                  {messages.length === 1 && renderQuickQuestions()}\n                </>\n              )}\n            />\n          )}\n        </View>\n\n        {/* Предварительный просмотр прикрепленных файлов */}\n        {attachedFiles.length > 0 && (\n          <View style={[\n            SupportChatScreenStyles.attachedFilesPreview,\n            isDark && SupportChatScreenStyles.attachedFilesPreviewDark\n          ]}>\n            {attachedFiles.map((file) => (\n              <View key={file.id} style={[\n                SupportChatScreenStyles.attachedFilePreview,\n                isDark && SupportChatScreenStyles.attachedFilePreviewDark\n              ]}>\n                <Ionicons \n                  name={file.type === 'image' ? 'image' : 'document'} \n                  size={16} \n                  color={isDark ? '#9CA3AF' : '#6B7280'} \n                />\n                <Text style={[\n                  SupportChatScreenStyles.attachedFilePreviewName,\n                  isDark && SupportChatScreenStyles.attachedFilePreviewNameDark\n                ]} numberOfLines={1}>\n                  {file.name}\n                </Text>\n                <TouchableOpacity\n                  style={SupportChatScreenStyles.removeFileButton}\n                  onPress={() => removeAttachedFile(file.id)}\n                >\n                  <Ionicons name=\"close-circle\" size={16} color=\"#EF4444\" />\n                </TouchableOpacity>\n              </View>\n            ))}\n          </View>\n        )}\n\n        {/* Input */}\n        <View style={[\n          SupportChatScreenStyles.inputContainer,\n          isDark && SupportChatScreenStyles.inputContainerDark\n        ]}>\n          <TouchableOpacity\n            style={[\n              SupportChatScreenStyles.attachButton,\n              isDark && SupportChatScreenStyles.attachButtonDark\n            ]}\n            onPress={handleAttachFile}\n          >\n            <Ionicons \n              name=\"attach\" \n              size={20} \n              color={isDark ? '#9CA3AF' : '#6B7280'} \n            />\n          </TouchableOpacity>\n          \n          <TextInput\n            style={[\n              SupportChatScreenStyles.textInput,\n              isDark && SupportChatScreenStyles.textInputDark\n            ]}\n            value={inputText}\n            onChangeText={setInputText}\n            placeholder={t('support.messagePlaceholder')}\n            placeholderTextColor={isDark ? '#9CA3AF' : '#6B7280'}\n            multiline\n            maxLength={500}\n          />\n          \n          <TouchableOpacity\n            style={[\n              SupportChatScreenStyles.sendButton,\n              isDark && SupportChatScreenStyles.sendButtonDark,\n              (!inputText.trim() && attachedFiles.length === 0) && SupportChatScreenStyles.sendButtonDisabled\n            ]}\n            onPress={sendMessage}\n            disabled={!inputText.trim() && attachedFiles.length === 0}\n          >\n            <Ionicons \n              name=\"send\" \n              size={20} \n              color=\"#FFFFFF\" \n            />\n          </TouchableOpacity>\n        </View>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nexport default SupportChatScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/chats/ChatListScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1386,1389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1386,1389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1451,1454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1451,1454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadChats'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadChats]","fix":{"range":[2063,2065],"text":"[loadChats]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterChats'. Either include it or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [chats, debouncedQuery, favorites, filterChats]","fix":{"range":[2308,2342],"text":"[chats, debouncedQuery, favorites, filterChats]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3508,3511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3508,3511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4083,4086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4083,4086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4489,4492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4489,4492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4542,4545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4542,4545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4554,4557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4554,4557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5688,5691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5688,5691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5700,5703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5700,5703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'markAsRead' is assigned a value but never used.","line":286,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":286,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":369,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":369,"endColumn":73}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useMemo, useState, useRef, useCallback } from 'react';\nimport { SafeAreaView, View, Text, FlatList, TouchableOpacity, Alert, TextInput, Animated, NativeScrollEvent, NativeSyntheticEvent } from 'react-native';\nimport { Swipeable } from 'react-native-gesture-handler';\nimport type { Swipeable as RNSwipeable } from 'react-native-gesture-handler';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../../context/ThemeContext';\nimport { useI18n } from '../../../hooks/useI18n';\nimport { createChatListScreenStyles } from '../../../styles/screens/chats/ChatListScreen.styles';\nimport { ChatService } from '../../../services/ChatService';\nimport { useAuth } from '../../../context/AuthContext';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { ClientStackParamList } from '../../../types/navigation';\nimport { formatTime } from '../../../utils/formatters';\n\nconst ACTION_WIDTH = 100; // Keep in sync with styles.swipeAction.width\n\nconst ChatListScreen: React.FC = () => {\n  const { isDark } = useTheme();\n  const styles = useMemo(() => createChatListScreenStyles(isDark), [isDark]);\n  const { t } = useI18n();\n  const { user } = useAuth();\n  const navigation = useNavigation<StackNavigationProp<ClientStackParamList>>();\n  const [chats, setChats] = useState<any[]>([]);\n  const [filteredChats, setFilteredChats] = useState<any[]>([]);\n  const [favorites, setFavorites] = useState<Set<string>>(new Set());\n  const [selectionMode, setSelectionMode] = useState(false);\n  const [selectedIds, setSelectedIds] = useState<Set<string>>(new Set());\n  const [searchQuery, setSearchQuery] = useState('');\n  const [debouncedQuery, setDebouncedQuery] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  // Keep refs to swipeable rows to close them programmatically\n  const swipeRefs = useRef<Record<string, RNSwipeable | null>>({});\n  const openSwipeRef = useRef<RNSwipeable | null>(null);\n\n  useEffect(() => {\n    loadChats();\n  }, []);\n\n  // Debounce search input\n  useEffect(() => {\n    const id = setTimeout(() => setDebouncedQuery(searchQuery.trim().toLowerCase()), 200);\n    return () => clearTimeout(id);\n  }, [searchQuery]);\n\n  useEffect(() => {\n    filterChats();\n  }, [chats, debouncedQuery, favorites]);\n\n  const loadChats = async () => {\n    try {\n      setLoading(true);\n      const list = await ChatService.getChats(user?.id || '');\n      setChats(list);\n    } catch (error) {\n      console.error('Error loading chats:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterChats = () => {\n    const base = chats.map(c => ({ ...c, isFavorite: favorites.has(c.id) }));\n    const list = !debouncedQuery\n      ? base\n      : base.filter(chat =>\n          chat.participant?.name?.toLowerCase().includes(debouncedQuery) ||\n          chat.lastMessage?.content?.toLowerCase().includes(debouncedQuery)\n        );\n    // Sort: favorites first, then by updatedAt desc\n    const sorted = list.sort((a, b) => {\n      if (a.isFavorite && !b.isFavorite) return -1;\n      if (!a.isFavorite && b.isFavorite) return 1;\n      return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n    });\n    setFilteredChats(sorted);\n  };\n\n  const toggleSelect = (id: string) => {\n    setSelectedIds(prev => {\n      const next = new Set(prev);\n      next.has(id) ? next.delete(id) : next.add(id);\n      return next;\n    });\n  };\n\n  const openChat = (chat: any) => {\n    if (selectionMode) {\n      toggleSelect(chat.id);\n      return;\n    }\n\n    navigation.navigate('ChatConversation', {\n      driverId: chat.participant?.id || chat.id,\n      driverName: chat.participant?.name || t('client.chat.unknownUser'),\n      driverCar: chat.participant?.car || 'Toyota Camry',\n      driverNumber: chat.participant?.phone || 'A123БВ777',\n      driverRating: chat.participant?.rating || '4.8',\n      driverStatus: chat.online ? 'online' : 'offline',\n      driverPhoto: chat.participant?.avatar,\n    });\n  };\n\n  const handleChatPress = (chat: any) => {\n    if (selectionMode) {\n      toggleSelect(chat.id);\n    } else {\n      openChat(chat);\n    }\n  };\n\n  const closeOpenSwipe = useCallback(() => {\n    if (openSwipeRef.current) {\n      try { openSwipeRef.current.close(); } catch (error) {\n        console.error('Error closing swipe:', error);\n      }\n      openSwipeRef.current = null;\n    }\n  }, []);\n\n  const renderChatItem = ({ item }: { item: any }) => {\n    const renderLeftActions = (progress: any, dragX: any) => {\n      const scale = dragX.interpolate({\n        inputRange: [0, ACTION_WIDTH],\n        outputRange: [0, 1],\n        extrapolate: 'clamp',\n      });\n      const opacity = dragX.interpolate({\n        inputRange: [0, ACTION_WIDTH * 0.6, ACTION_WIDTH],\n        outputRange: [0, 0.6, 1],\n        extrapolate: 'clamp',\n      });\n\n      return (\n        <View style={[styles.swipeActionsLeft]}>\n          <Animated.View style={{ transform: [{ scale }], opacity }}>\n            <TouchableOpacity\n              style={[styles.swipeAction, styles.favoriteAction, styles.swipeActionInnerLeft]}\n              onPress={() => {\n                toggleFavorite(item.id);\n                swipeRefs.current[item.id]?.close();\n              }}\n              accessibilityRole=\"button\"\n              accessibilityLabel=\"bookmark\"\n              hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}\n              activeOpacity={0.85}\n            >\n              <Ionicons name=\"bookmark\" size={28} color=\"#fff\" />\n            </TouchableOpacity>\n          </Animated.View>\n        </View>\n      );\n    };\n\n    const renderRightActions = (progress: any, dragX: any) => {\n      const scale = dragX.interpolate({\n        inputRange: [-ACTION_WIDTH, 0],\n        outputRange: [1, 0],\n        extrapolate: 'clamp',\n      });\n      const opacity = dragX.interpolate({\n        inputRange: [-ACTION_WIDTH, -ACTION_WIDTH * 0.6, 0],\n        outputRange: [1, 0.6, 0],\n        extrapolate: 'clamp',\n      });\n\n      return (\n        <View style={[styles.swipeActionsRight]}>\n          <Animated.View style={{ transform: [{ scale }], opacity }}>\n            <TouchableOpacity\n              style={[styles.swipeAction, styles.deleteAction, styles.swipeActionInnerRight]}\n              onPress={() => {\n                deleteChat(item.id);\n                swipeRefs.current[item.id]?.close();\n              }}\n              accessibilityRole=\"button\"\n              accessibilityLabel=\"delete\"\n              hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}\n              activeOpacity={0.85}\n            >\n              <Ionicons name=\"trash\" size={28} color=\"#fff\" />\n            </TouchableOpacity>\n          </Animated.View>\n        </View>\n      );\n    };\n\n    return (\n      <Swipeable\n        ref={(ref) => { swipeRefs.current[item.id] = ref as RNSwipeable | null; }}\n        renderLeftActions={selectionMode ? undefined : renderLeftActions}\n        renderRightActions={selectionMode ? undefined : renderRightActions}\n        leftThreshold={60}\n        rightThreshold={60}\n        friction={2}\n        overshootLeft={false}\n        overshootRight={false}\n        onSwipeableWillOpen={() => {\n          if (openSwipeRef.current && openSwipeRef.current !== swipeRefs.current[item.id]) {\n            try { openSwipeRef.current.close(); } catch (error) {\n        console.error('Error closing swipe:', error);\n      }\n          }\n          openSwipeRef.current = swipeRefs.current[item.id] ?? null;\n        }}\n        onSwipeableClose={() => {\n          if (openSwipeRef.current === swipeRefs.current[item.id]) {\n            openSwipeRef.current = null;\n          }\n        }}\n      >\n        <TouchableOpacity\n          style={styles.chatItem}\n          onPress={() => handleChatPress(item)}\n          onLongPress={() => !selectionMode && setSelectionMode(true)}\n          activeOpacity={0.8}\n        >\n          {selectionMode && (\n            <TouchableOpacity\n              style={[styles.selectionCheckbox, selectedIds.has(item.id) && styles.selectionCheckboxActive]}\n              onPress={() => toggleSelect(item.id)}\n              accessibilityRole=\"checkbox\"\n              accessibilityState={{ checked: selectedIds.has(item.id) }}\n            >\n              {selectedIds.has(item.id) && <Ionicons name=\"checkmark\" size={14} color=\"#fff\" />}\n            </TouchableOpacity>\n          )}\n\n          <View style={styles.avatarContainer}>\n            <View style={styles.avatar}>\n              <Ionicons name=\"person\" size={22} color=\"#fff\" />\n            </View>\n            <View style={item.online ? styles.onlineIndicator : styles.offlineIndicator} />\n          </View>\n\n          <View style={styles.chatContent}>\n            <View style={styles.chatInfo}>\n              <View style={styles.chatNameRow}>\n                <Text style={styles.chatName} numberOfLines={1}>\n                  {item.participant?.name || t('client.chat.unknownUser')}\n                </Text>\n                {favorites.has(item.id) && (\n                  <Ionicons\n                    name=\"bookmark-outline\"\n                    size={16}\n                    color={isDark ? '#9CA3AF' : '#6B7280'}\n                    style={styles.favoriteInlineIcon}\n                  />\n                )}\n              </View>\n              <Text style={styles.carInfo}>\n                A123БВ777\n              </Text>\n              <Text numberOfLines={1} style={styles.lastMessage}>\n                {item.lastMessage?.content || t('client.chat.noMessages')}\n              </Text>\n            </View>\n          </View>\n\n          <View style={styles.rightSection}>\n            <Text style={styles.chatTime}>\n              {formatTime(item.updatedAt)}\n            </Text>\n            {item.unreadCount > 0 && (\n              <View style={styles.unreadBadge}>\n                <Text style={styles.unreadCount}>\n                  {item.unreadCount > 99 ? '99+' : item.unreadCount}\n                </Text>\n              </View>\n            )}\n          </View>\n        </TouchableOpacity>\n      </Swipeable>\n    );\n  };\n\n  const selectAll = () => {\n    if (selectedIds.size === filteredChats.length) {\n      setSelectedIds(new Set());\n    } else {\n      setSelectedIds(new Set(filteredChats.map(c => c.id)));\n    }\n  };\n\n  const markAsRead = () => {\n    if (selectedIds.size === 0) return;\n\n    Alert.alert(\n      t('client.chat.markAsRead'),\n      t('client.chat.markAsReadConfirm', { count: selectedIds.size }),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        {\n          text: t('client.chat.read'),\n          onPress: () => {\n            setSelectionMode(false);\n            setSelectedIds(new Set());\n          }\n        }\n      ]\n    );\n  };\n\n  const deleteSelected = () => {\n    if (selectedIds.size === 0) return;\n\n    Alert.alert(\n      t('client.chat.deleteSelected'),\n      t('client.chat.deleteSelectedConfirm'),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        {\n          text: t('components.modal.delete'),\n          style: 'destructive',\n          onPress: () => {\n            setChats(prev => prev.filter(c => !selectedIds.has(c.id)));\n            setSelectionMode(false);\n            setSelectedIds(new Set());\n          }\n        }\n      ]\n    );\n  };\n\n  const toggleFavorite = (chatId: string) => {\n    setFavorites(prev => {\n      const next = new Set(prev);\n      if (next.has(chatId)) next.delete(chatId); else next.add(chatId);\n      return next;\n    });\n  };\n\n  const deleteChat = (chatId: string) => {\n    Alert.alert(\n      t('client.chat.deleteChat'),\n      t('client.chat.deleteChatConfirm'),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        {\n          text: t('components.modal.delete'),\n          style: 'destructive',\n          onPress: () => {\n            setChats(prev => prev.filter(chat => chat.id !== chatId));\n          }\n        }\n      ]\n    );\n  };\n\n  const renderEmptyState = () => (\n    <View style={styles.emptyState}>\n      <Ionicons\n        name=\"chatbubbles-outline\"\n        size={64}\n        color={isDark ? '#6B7280' : '#9CA3AF'}\n      />\n      <Text style={styles.emptyStateTitle}>\n        {loading ? t('client.chat.loadingChats') : t('client.chat.noChats')}\n      </Text>\n      {!loading && (\n        <Text style={styles.emptyStateSubtitle}>\n          {t('client.chat.startNewChat')}\n        </Text>\n      )}\n    </View>\n  );\n\n  const onListScrollBegin = (_e: NativeSyntheticEvent<NativeScrollEvent>) => {\n    closeOpenSwipe();\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>{t('client.chat.title')}</Text>\n        <View style={styles.headerActions}>\n          <TouchableOpacity\n            accessibilityLabel={t('components.select.select')}\n            onPress={() => setSelectionMode(!selectionMode)}\n          >\n            <Ionicons\n              name={selectionMode ? 'close' : 'checkmark-circle-outline'}\n              size={22}\n              color={isDark ? '#F9FAFB' : '#111827'}\n            />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      <View style={styles.searchContainer}>\n        <Ionicons name=\"search\" size={20} color={isDark ? '#9CA3AF' : '#6B7280'} />\n        <TextInput\n          style={styles.searchInput}\n          placeholder={t('common.search')}\n          placeholderTextColor={isDark ? '#9CA3AF' : '#6B7280'}\n          value={searchQuery}\n          onChangeText={setSearchQuery}\n        />\n        {searchQuery.length > 0 && (\n          <TouchableOpacity onPress={() => setSearchQuery('')}>\n            <Ionicons name=\"close-circle\" size={20} color={isDark ? '#9CA3AF' : '#6B7280'} />\n          </TouchableOpacity>\n        )}\n      </View>\n\n      <FlatList\n        data={filteredChats}\n        keyExtractor={(item) => item.id}\n        renderItem={renderChatItem}\n        contentContainerStyle={styles.chatList}\n        ListEmptyComponent={renderEmptyState}\n        refreshing={loading}\n        onRefresh={loadChats}\n        initialNumToRender={10}\n        windowSize={10}\n        removeClippedSubviews\n        onScrollBeginDrag={onListScrollBegin}\n      />\n\n      {selectionMode && (\n        <View style={styles.actionButtonsContainer}>\n          <View style={styles.actionButtonsRow}>\n            <TouchableOpacity\n              style={[styles.actionButton, styles.selectAllButton]}\n              onPress={selectAll}\n            >\n              <Text style={styles.selectAllButtonText}>\n                {selectedIds.size === filteredChats.length ? t('components.select.deselectAll') : t('components.select.selectAll')}\n              </Text>\n            </TouchableOpacity>\n            {selectedIds.size > 0 && (\n              <TouchableOpacity\n                style={[styles.actionButton, styles.deleteButton]}\n                onPress={deleteSelected}\n              >\n                <Text style={styles.deleteButtonText}>\n                  {t('components.modal.delete')} ({selectedIds.size})\n                </Text>\n              </TouchableOpacity>\n            )}\n          </View>\n        </View>\n      )}\n\n    </SafeAreaView>\n  );\n};\n\nexport default ChatListScreen;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/common/chats/ChatScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[734,737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[734,737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1288,1291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1288,1291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMessages'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [chatId, loadMessages]","fix":{"range":[1952,1960],"text":"[chatId, loadMessages]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2708,2711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2708,2711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5632,5635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5632,5635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6470,6473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6470,6473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7360,7363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7360,7363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'text' is assigned a value but never used.","line":305,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":305,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":404,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":404,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13828,13831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13828,13831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { SafeAreaView, View, Text, FlatList, TextInput, TouchableOpacity, KeyboardAvoidingView, Platform, Alert, Animated, Easing, Pressable } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Location from 'expo-location';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../../context/ThemeContext';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport { createChatScreenStyles } from '../../../styles/screens/ChatScreen.styles';\nimport { ChatService } from '../../../services/ChatService';\nimport { formatTime } from '../../../utils/formatters';\n\nconst ChatScreen: React.FC<{ route?: any }> = ({ route }) => {\n  const { isDark } = useTheme();\n  const styles = useMemo(() => createChatScreenStyles(isDark), [isDark]);\n  const { t } = useLanguage();\n  const chatId = route?.params?.driverId || 'chat_1';\n  const chatName = route?.params?.driverName || t('client.chat.title');\n  const driverCar = route?.params?.driverCar as string | undefined;\n  const driverNumber = route?.params?.driverNumber as string | undefined;\n  const headerDetails = [driverCar, driverNumber].filter(Boolean).join(' · ');\n  const [messages, setMessages] = useState<any[]>([]);\n  const [text, setText] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [showAttachments, setShowAttachments] = useState(false);\n  const [showCallSheet, setShowCallSheet] = useState(false);\n  const callSheetAnim = useRef(new Animated.Value(0)).current; // 0 hidden, 1 shown\n  const [showProfileSheet, setShowProfileSheet] = useState(false);\n  const profileSheetAnim = useRef(new Animated.Value(0)).current;\n  const [showActionsSheet, setShowActionsSheet] = useState(false);\n  const actionsSheetAnim = useRef(new Animated.Value(0)).current;\n  const listRef = useRef<FlatList>(null);\n\n  useEffect(() => {\n    loadMessages();\n  }, [chatId]);\n\n  const loadMessages = async () => {\n    try {\n      setLoading(true);\n      const messagesList = await ChatService.getMessages(chatId);\n      setMessages(messagesList);\n    } catch (error) {\n      console.error('Error loading messages:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const send = async () => {\n    if (!text.trim()) return;\n    \n    try {\n      const msg = await ChatService.sendMessage(chatId, text.trim());\n      setMessages((prev) => [...prev, msg]);\n      setText('');\n      setTimeout(() => listRef.current?.scrollToEnd({ animated: true }), 50);\n    } catch (error) {\n      Alert.alert(t('client.chat.messageError'), t('client.chat.messageError'));\n    }\n  };\n\n  const renderMessage = ({ item }: { item: any }) => {\n    const isMine = item.senderId === 'me';\n    return (\n      <View style={[styles.messageContainer, isMine ? styles.userMessage : styles.clientMessage]}>\n        {!isMine && (\n          <View style={styles.messageAvatar}>\n            <Ionicons name=\"person\" size={16} color=\"#fff\" />\n          </View>\n        )}\n        \n        <View style={[styles.messageBubble, !isMine && styles.otherMessage]}>\n          <Text style={[styles.messageText, !isMine && styles.otherMessageText]}>\n            {item.content}\n          </Text>\n          \n          <View style={styles.messageStatus}>\n            <Text style={styles.messageTime}>\n              {formatTime(item.timestamp)}\n            </Text>\n            {isMine && (\n              <Ionicons \n                name={item.status === 'sent' ? 'checkmark' : item.status === 'delivered' ? 'checkmark-done' : 'time'} \n                size={12} \n                color={isDark ? '#9CA3AF' : '#6B7280'} \n                style={styles.statusIcon}\n              />\n            )}\n          </View>\n        </View>\n      </View>\n    );\n  };\n\n  const renderEmptyState = () => (\n    <View style={styles.emptyState}>\n      <Ionicons \n        name=\"chatbubbles-outline\" \n        size={64} \n        color={isDark ? '#6B7280' : '#9CA3AF'} \n        style={styles.emptyStateIcon}\n      />\n      <Text style={styles.emptyStateTitle}>\n        {loading ? t('client.chat.loadingMessages') : t('client.chat.noMessages')}\n      </Text>\n      {!loading && (\n        <Text style={styles.emptyStateSubtitle}>\n          {t('client.chat.startConversation')}\n        </Text>\n      )}\n    </View>\n  );\n\n  // Typing indicator removed per design\n\n  const renderAttachmentMenu = () => (\n    <View style={styles.attachmentMenu}>\n      <TouchableOpacity style={styles.attachmentOption} onPress={attachFromCamera}>\n        <Ionicons name=\"camera\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n        <Text style={styles.attachmentOptionText}>{t('client.chat.camera')}</Text>\n      </TouchableOpacity>\n      <TouchableOpacity style={styles.attachmentOption} onPress={attachFromGallery}>\n        <Ionicons name=\"images\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n        <Text style={styles.attachmentOptionText}>{t('client.chat.gallery')}</Text>\n      </TouchableOpacity>\n      <TouchableOpacity style={styles.attachmentOption} onPress={attachDocument}>\n        <Ionicons name=\"document\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n        <Text style={styles.attachmentOptionText}>{t('client.chat.document')}</Text>\n      </TouchableOpacity>\n      <TouchableOpacity style={styles.attachmentOption} onPress={attachLocation}>\n        <Ionicons name=\"location\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n        <Text style={styles.attachmentOptionText}>{t('client.chat.location')}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  const pushMessageAndScroll = (msg: any) => {\n    setMessages((prev) => [...prev, msg]);\n    setTimeout(() => listRef.current?.scrollToEnd({ animated: true }), 50);\n  };\n\n  const attachFromCamera = async () => {\n    try {\n      const { status } = await ImagePicker.requestCameraPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert(t('errors.permissionDenied'));\n        return;\n      }\n      const result = await ImagePicker.launchCameraAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 0.8,\n      });\n      if (!result.canceled && result.assets[0]) {\n        const asset = result.assets[0];\n        const msg = await ChatService.sendMessage(\n          chatId,\n          t('client.chat.camera'),\n          'image',\n          { imageUrl: asset.uri, fileSize: (asset as any).fileSize }\n        );\n        pushMessageAndScroll(msg);\n        setShowAttachments(false);\n      }\n    } catch (e) {\n      Alert.alert(t('errors.error'));\n    }\n  };\n\n  const attachFromGallery = async () => {\n    try {\n      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert(t('errors.permissionDenied'));\n        return;\n      }\n      const result = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 0.8,\n      });\n      if (!result.canceled && result.assets[0]) {\n        const asset = result.assets[0];\n        const msg = await ChatService.sendMessage(\n          chatId,\n          t('client.chat.gallery'),\n          'image',\n          { imageUrl: asset.uri, fileSize: (asset as any).fileSize }\n        );\n        pushMessageAndScroll(msg);\n        setShowAttachments(false);\n      }\n    } catch (e) {\n      Alert.alert(t('errors.error'));\n    }\n  };\n\n  const attachDocument = async () => {\n    Alert.alert(t('common.featureSoon'));\n  };\n\n  const attachLocation = async () => {\n    try {\n      const { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert(t('errors.permissionDenied'));\n        return;\n      }\n      const pos = await Location.getCurrentPositionAsync({});\n      const msg = await ChatService.sendMessage(\n        chatId,\n        t('client.chat.location'),\n        'location',\n        {\n          location: {\n            latitude: pos.coords.latitude,\n            longitude: pos.coords.longitude,\n          },\n        }\n      );\n      pushMessageAndScroll(msg);\n      setShowAttachments(false);\n    } catch (e) {\n      Alert.alert(t('client.map.locationError'));\n    }\n  };\n\n  const openCallSheet = () => {\n    setShowCallSheet(true);\n    Animated.timing(callSheetAnim, {\n      toValue: 1,\n      duration: 220,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const closeCallSheet = () => {\n    Animated.timing(callSheetAnim, {\n      toValue: 0,\n      duration: 180,\n      easing: Easing.in(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished) {\n        setShowCallSheet(false);\n      }\n    });\n  };\n\n  const openProfileSheet = () => {\n    setShowProfileSheet(true);\n    Animated.timing(profileSheetAnim, {\n      toValue: 1,\n      duration: 220,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const closeProfileSheet = () => {\n    Animated.timing(profileSheetAnim, {\n      toValue: 0,\n      duration: 180,\n      easing: Easing.in(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished) setShowProfileSheet(false);\n    });\n  };\n\n  const openActionsSheet = () => {\n    setShowActionsSheet(true);\n    Animated.timing(actionsSheetAnim, {\n      toValue: 1,\n      duration: 220,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const closeActionsSheet = () => {\n    Animated.timing(actionsSheetAnim, {\n      toValue: 0,\n      duration: 180,\n      easing: Easing.in(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished) setShowActionsSheet(false);\n    });\n  };\n\n  const handleClearChat = async () => {\n    // TODO: Implement clearChat method in ChatService\n    console.log('Clear chat:', chatId);\n    setMessages([]);\n    closeActionsSheet();\n  };\n\n  const handleExportChat = async () => {\n    try {\n      const msgs = await ChatService.getMessages(chatId);\n      const text = msgs.map(m => `${formatTime(m.timestamp)}: ${m.content}`).join('\\n');\n      Alert.alert(t('client.chat.title'), t('common.success'));\n    } catch {\n      Alert.alert(t('errors.error'));\n    } finally {\n      closeActionsSheet();\n    }\n  };\n\n  const handleDeleteChat = async () => {\n    await ChatService.deleteChat(chatId);\n    closeActionsSheet();\n  };\n\n  const handleReport = () => {\n    Alert.alert(t('client.chat.title'), t('common.success'));\n    closeActionsSheet();\n  };\n\n  const handleBlock = () => {\n    Alert.alert(t('client.chat.title'), t('common.success'));\n    closeActionsSheet();\n  };\n\n  const handleInternetCall = () => {\n    // TODO: integrate VoIP/Internet call provider here\n    Alert.alert(t('client.chat.internetCall'));\n    closeCallSheet();\n  };\n\n  const handleNetworkCall = () => {\n    // TODO: integrate native dialer here\n    Alert.alert(t('client.chat.networkCall'));\n    closeCallSheet();\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n        <View style={styles.header}>\n        <TouchableOpacity style={styles.headerAvatar} onPress={openProfileSheet} activeOpacity={0.8}>\n          <Ionicons name=\"person\" size={20} color=\"#fff\" />\n          <View style={route?.params?.driverStatus === 'online' ? styles.headerOnlineIndicator : styles.headerOfflineIndicator} />\n        </TouchableOpacity>\n        <TouchableOpacity style={styles.headerInfo} onPress={openProfileSheet} activeOpacity={0.8}>\n          <Text style={styles.headerName}>{chatName || t('client.chat.title')}</Text>\n          {headerDetails ? (\n            <Text style={styles.headerStatus}>{headerDetails}</Text>\n          ) : null}\n        </TouchableOpacity>\n        <View style={styles.headerActions}>\n          <TouchableOpacity style={styles.headerButton} onPress={openCallSheet}>\n            <Ionicons name=\"call\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.headerButton} onPress={openActionsSheet}>\n            <Ionicons name=\"ellipsis-vertical\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      <FlatList \n        ref={listRef}\n        data={messages}\n        renderItem={renderMessage}\n        keyExtractor={(item) => item.id}\n        contentContainerStyle={styles.messagesContent}\n        ListEmptyComponent={renderEmptyState}\n        refreshing={loading}\n        onRefresh={loadMessages}\n      />\n\n      <KeyboardAvoidingView\n        behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n        keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 0}\n        style={styles.inputAvoider}\n      >\n        <View style={styles.inputContainer}>\n          <View style={styles.inputRow}>\n            <TouchableOpacity \n              style={styles.toolbarButton}\n              onPress={() => setShowAttachments(!showAttachments)}\n            >\n              <Ionicons name=\"add\" size={18} color={isDark ? '#F9FAFB' : '#111827'} />\n            </TouchableOpacity>\n            \n            <TextInput\n              style={styles.textInput}\n              value={text}\n              onChangeText={setText}\n              placeholder={t('components.input.message')}\n              placeholderTextColor={isDark ? '#9CA3AF' : '#6B7280'}\n              multiline\n              maxLength={1000}\n            />\n            \n            <TouchableOpacity \n              style={[styles.sendButton, !text.trim() && { opacity: 0.5 }]} \n              onPress={send} \n              disabled={!text.trim()}\n            >\n              <Ionicons name=\"send\" size={18} style={styles.sendIcon as any} />\n            </TouchableOpacity>\n          </View>\n          \n          {showAttachments && renderAttachmentMenu()}\n        </View>\n      </KeyboardAvoidingView>\n\n      {showCallSheet && (\n        <View style={styles.callSheetOverlay}>\n          <Pressable style={styles.callSheetBackdrop} onPress={closeCallSheet} />\n          <Animated.View\n            style={[\n              styles.callSheetContainer,\n              {\n                transform: [\n                  {\n                    translateY: callSheetAnim.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [300, 0],\n                    }),\n                  },\n                ],\n              },\n            ]}\n          >\n            <TouchableOpacity style={styles.callSheetClose} onPress={closeCallSheet} accessibilityLabel={t('common.close')}>\n              <Ionicons name=\"close\" size={22} color={isDark ? '#F9FAFB' : '#111827'} />\n            </TouchableOpacity>\n            <View style={styles.callSheetHandle} />\n            <Text style={styles.callSheetTitle}>{t('client.chat.callOptions')}</Text>\n            <TouchableOpacity style={styles.callSheetOption} onPress={handleInternetCall}>\n              <Ionicons name=\"wifi\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n              <Text style={styles.callSheetOptionText}>{t('client.chat.internetCall')}</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.callSheetOption} onPress={handleNetworkCall}>\n              <Ionicons name=\"call\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n              <Text style={styles.callSheetOptionText}>{t('client.chat.networkCall')}</Text>\n            </TouchableOpacity>\n          </Animated.View>\n        </View>\n      )}\n\n      {showProfileSheet && (\n        <View style={styles.callSheetOverlay}>\n          <Pressable style={styles.callSheetBackdrop} onPress={closeProfileSheet} />\n          <Animated.View\n            style={[\n              styles.callSheetContainer,\n              {\n                transform: [\n                  {\n                    translateY: profileSheetAnim.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [300, 0],\n                    }),\n                  },\n                ],\n              },\n            ]}\n          >\n            <TouchableOpacity style={styles.callSheetClose} onPress={closeProfileSheet} accessibilityLabel={t('common.close')}>\n              <Ionicons name=\"close\" size={22} color={isDark ? '#F9FAFB' : '#111827'} />\n            </TouchableOpacity>\n            <View style={styles.callSheetHandle} />\n            <View style={styles.profileHeaderRow}>\n              <View style={styles.profileAvatarLarge}>\n                <Ionicons name=\"person\" size={28} color=\"#fff\" />\n                <View style={route?.params?.driverStatus === 'online' ? styles.headerOnlineIndicator : styles.headerOfflineIndicator} />\n              </View>\n              <View style={styles.profileInfo}>\n                <View style={styles.profileNameRow}>\n                  <Text style={styles.profileName}>{chatName}</Text>\n                  <View style={styles.profileRating}>\n                    <Text style={styles.profileRatingText}>{route?.params?.driverRating || '4.8'}</Text>\n                  </View>\n                </View>\n                <Text style={styles.profileSubline}>\n                  {[driverCar, driverNumber].filter(Boolean).join(' · ')}\n                </Text>\n              </View>\n            </View>\n            <View style={styles.profileDivider} />\n            <View style={styles.routeList}>\n              <View style={styles.routeItem}>\n                <View style={styles.routeLeft}>\n                  <View style={styles.dotGreen} />\n                  <Text style={styles.routeText}>{t('client.paymentHistory.mock.tripToCityCenterTitle')}</Text>\n                </View>\n                <Text style={styles.routeTime}>08:00</Text>\n              </View>\n              <View style={styles.routeItem}>\n                <View style={styles.routeLeft}>\n                  <View style={styles.dotBlue} />\n                  <Text style={styles.routeText}>Офис БЦ Port Baku</Text>\n                </View>\n                <Text style={styles.routeTime}>09:15</Text>\n              </View>\n              <View style={styles.routeItem}>\n                <View style={styles.routeLeft}>\n                  <Ionicons name=\"location\" size={18} color={isDark ? '#F9FAFB' : '#111827'} />\n                  <Text style={styles.routeText}>Торговый центр 28 Mall</Text>\n                </View>\n                <Text style={styles.routeTime}>18:30</Text>\n              </View>\n            </View>\n            <View style={styles.bottomInfoRow}>\n              <View style={styles.infoItem}>\n                <Ionicons name=\"calendar\" size={18} color={isDark ? '#9CA3AF' : '#6B7280'} />\n                <Text style={styles.infoText}>пн, ср, пт</Text>\n              </View>\n              <View style={styles.infoItem}>\n                <Ionicons name=\"diamond\" size={18} color={isDark ? '#9CA3AF' : '#6B7280'} />\n                <Text style={styles.infoText}>{t('premium.packages.premium')}</Text>\n              </View>\n              <View style={styles.infoItem}>\n                <Text style={styles.infoText}>3 остановок</Text>\n              </View>\n            </View>\n          </Animated.View>\n        </View>\n      )}\n\n      {showActionsSheet && (\n        <View style={styles.callSheetOverlay}>\n          <Pressable style={styles.callSheetBackdrop} onPress={closeActionsSheet} />\n          <Animated.View\n            style={[\n              styles.callSheetContainer,\n              {\n                transform: [\n                  {\n                    translateY: actionsSheetAnim.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [300, 0],\n                    }),\n                  },\n                ],\n              },\n            ]}\n          >\n            <TouchableOpacity style={styles.callSheetClose} onPress={closeActionsSheet} accessibilityLabel={t('common.close')}>\n              <Ionicons name=\"close\" size={22} color={isDark ? '#F9FAFB' : '#111827'} />\n            </TouchableOpacity>\n            <View style={styles.callSheetHandle} />\n            <Text style={styles.callSheetTitle}>{t('client.chat.title')}</Text>\n            <TouchableOpacity style={styles.callSheetOption} onPress={handleClearChat}>\n              <Ionicons name=\"trash-outline\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n              <Text style={styles.callSheetOptionText}>Clear chat</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.callSheetOption} onPress={handleExportChat}>\n              <Ionicons name=\"download-outline\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n              <Text style={styles.callSheetOptionText}>Export chat</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.callSheetOption} onPress={handleDeleteChat}>\n              <Ionicons name=\"trash\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n              <Text style={styles.callSheetOptionText}>{t('client.chat.deleteChat')}</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.callSheetOption} onPress={handleReport}>\n              <Ionicons name=\"alert-circle-outline\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n              <Text style={styles.callSheetOptionText}>Report</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.callSheetOption} onPress={handleBlock}>\n              <Ionicons name=\"hand-left-outline\" size={20} color={isDark ? '#F9FAFB' : '#111827'} />\n              <Text style={styles.callSheetOptionText}>Block</Text>\n            </TouchableOpacity>\n          </Animated.View>\n        </View>\n      )}\n    </SafeAreaView>\n  );\n};\n\nexport default ChatScreen;\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/driver/DriverProfileScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Modal' is defined but never used.","line":2,"column":59,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AsyncStorage' is defined but never used.","line":11,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used.","line":30,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has a missing dependency: 'loadProfile'. Either include it or remove the dependency array.","line":41,"column":8,"nodeType":"ArrayExpression","endLine":41,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfile]","fix":{"range":[1769,1771],"text":"[loadProfile]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":50,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":109,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":112,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3439,3442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3439,3442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":114,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":117,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3822,3825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3822,3825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4241,4244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4241,4244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, ScrollView, TouchableOpacity, Alert, Modal, Image } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useAuth } from '../../context/AuthContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { useTheme } from '../../context/ThemeContext';\nimport { DriverProfileScreenStyles as styles, getDriverProfileStyles } from '../../styles/screens/driver/DriverProfileScreen.styles';\nimport { DriverScreenProps } from '../../types/driver/DriverNavigation';\nimport { colors } from '../../constants/colors';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useDriverProfile as useProfile } from '../../hooks/driver/DriverUseProfile';\nimport { useBalance } from '../../hooks/useBalance';\nimport { formatBalance } from '../../utils/formatters';\n\n// TODO: Для подключения бэкенда заменить на:\n// import { useNotifications } from '../../hooks/useNotifications';\n// import { useUserStats } from '../../hooks/useUserStats';\n\nconst DriverProfileScreen: React.FC<DriverScreenProps<'DriverProfile'>> = ({ navigation }) => {\n  const { logout } = useAuth();\n  const { t } = useI18n();\n  const { isDark } = useTheme();\n  const currentColors = isDark ? colors.dark : colors.light;\n  const dynamicStyles = getDriverProfileStyles(isDark);\n\n\n  // Используем хук для работы с профилем\n  const { profile, loading, error, loadProfile } = useProfile();\n  \n\n\n  // Используем умный хук для баланса\n  const balanceHook = useBalance();\n  \n  useFocusEffect(\n    React.useCallback(() => {\n      // Перезагружаем профиль при фокусе экрана\n      loadProfile();\n    }, []) // Убираем loadProfile из зависимостей\n  );\n  \n// TODO: Для бэкенда заменить на:\n// const { user, loading: userLoading } = useProfile();\n// const { notificationsCount, loading: notificationsLoading } = useNotifications();\n// const { userStats, loading: statsLoading } = useUserStats();\n  \n  // Данные из мокдата\n  const getUserStats = (userId: string) => {\n    if (!profile) return null;\n    \n    return {\n      trips: 127,\n      spent: '12 450 AFc',\n      rating: profile.rating,\n      balance: formatBalance(balanceHook.balance) + ' AFc',\n      address: profile.address,\n      email: profile.email,\n      memberSince: new Date(profile.createdAt).getFullYear(),\n      id: profile.id,\n      role: profile.role,\n      avatar: profile.avatar,\n    };\n  };\n\n  const userStats = getUserStats(profile?.id || '') || {\n    trips: 0,\n    spent: '0 AFc',\n    rating: 0,\n    balance: '0 AFc',\n    address: '',\n    email: '',\n    memberSince: new Date().getFullYear(),\n    id: '',\n    role: '',\n    avatar: '',\n  };\n\n// Обработка ошибок\nif (error || !profile) {\n  return (\n    <View style={[styles.container, dynamicStyles.container, { justifyContent: 'center', alignItems: 'center' }]}>\n      <Text style={[styles.profileName, dynamicStyles.profileName]}>{error || t('profile.failedToLoadProfile')}</Text>\n    </View>\n  );\n}\n\n  return (\n    <>\n      {/* Фиксированная секция с аватаром и статистикой */}\n      <View style={[styles.fixedSection, dynamicStyles.fixedSection]}>\n        {/* Аватар, имя, телефон, премиум кнопка */}\n        <View style={styles.profileRow}>\n          <TouchableOpacity style={styles.avatar} onPress={() => navigation.navigate('EditDriverProfile' as any)}>\n            {profile?.avatar ? (\n              <Image source={{ uri: profile.avatar }} style={styles.avatarImage} />\n            ) : (\n              <Ionicons name=\"person\" size={48} color={styles.avatarIcon.color} />\n            )}\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.profileText} onPress={() => navigation.navigate('EditDriverProfile' as any)}>\n            <Text style={[styles.profileName, dynamicStyles.profileName]}>{profile?.name || ''} {profile?.surname || ''}</Text>\n            <Text style={[styles.profilePhone, dynamicStyles.profilePhone]}>{profile?.phone || ''}</Text>\n          </TouchableOpacity>\n          <TouchableOpacity \n            style={styles.premiumButtonContainer} \n            onPress={() => navigation.navigate('PremiumPackages' as any)}\n            activeOpacity={0.8}\n          >\n            <LinearGradient\n              colors={['#FFFFFF', '#E6F3FF', '#B3D9FF', '#80BFFF', '#FFFFFF']}\n              start={{ x: 0, y: 0 }}\n              end={{ x: 1, y: 1 }}\n              style={[styles.premiumButton, dynamicStyles.premiumButton]}\n            >\n              <Ionicons name=\"diamond\" size={24} color=\"#0066CC\" />\n            </LinearGradient>\n          </TouchableOpacity>\n        </View>\n        {/* Блок статистики */}\n        <View style={[styles.statsBox, dynamicStyles.statsBox]}>\n          <View style={styles.statCol}>\n            <Text style={[styles.statValue, dynamicStyles.statValue]}>{userStats.trips}</Text>\n            <Text style={[styles.statLabel, dynamicStyles.statLabel]}>{t('client.profile.trips')}</Text>\n          </View>\n          <View style={[styles.statDivider, dynamicStyles.statDivider]} />\n          <View style={styles.statCol}>\n            <Text style={[styles.statValue, dynamicStyles.statValue]}>{userStats.spent}</Text>\n            <Text style={[styles.statLabel, dynamicStyles.statLabel]}>{t('client.profile.spent')}</Text>\n          </View>\n          <View style={[styles.statDivider, dynamicStyles.statDivider]} />\n          <View style={styles.statCol}>\n            <Text style={[styles.statValue, dynamicStyles.statValue]}>{userStats.rating}</Text>\n            <Text style={[styles.statLabel, dynamicStyles.statLabel]}>{t('client.profile.rating')}</Text>\n          </View>\n        </View>\n        {/* Тонкая линия под статистикой */}\n        <View style={[styles.statsDivider, dynamicStyles.statsDivider]} />\n      </View>\n\n      {/* Скроллируемая секция с меню */}\n      <ScrollView style={[styles.scrollSection, dynamicStyles.scrollSection]} contentContainerStyle={styles.contentContainer}>\n        {/* Пункты меню */}\n        <TouchableOpacity style={[styles.menuItem, styles.menuItemFirst, dynamicStyles.menuItem, dynamicStyles.menuItemFirst]} onPress={() => navigation.navigate('Balance')}>\n          <Ionicons name=\"refresh\" size={28} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.profile.balance')}</Text>\n          <Text style={[styles.menuValue, dynamicStyles.menuValue]}>{userStats.balance}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('Cards')}>\n          <Ionicons name=\"card\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.profile.cards')}</Text>\n          <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n        </TouchableOpacity>\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('Trips')}>\n          <Ionicons name=\"time\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.profile.trips')}</Text>\n          <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n        </TouchableOpacity>\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('PaymentHistory')}>\n          <Ionicons name=\"document-text\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.profile.paymentHistory')}</Text>\n          <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n        </TouchableOpacity>\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('Settings')}>\n          <Ionicons name=\"settings\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.settings')}</Text>\n          <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n        </TouchableOpacity>\n\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('Residence')}>\n          <Ionicons name=\"home\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.profile.residence')}</Text>\n          <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n        </TouchableOpacity>\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('Help')}>\n          <Ionicons name=\"help-circle\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.profile.help')}</Text>\n          <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n        </TouchableOpacity>\n        {/* О приложении */}\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('About')}>\n          <Ionicons name=\"information-circle\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabelAbout, dynamicStyles.menuLabelAbout]}>{t('client.profile.about')}</Text>\n          <Text style={[styles.menuVersion, dynamicStyles.menuVersion]}>1.0.0</Text>\n        </TouchableOpacity>\n        {/* Выйти */}\n        <TouchableOpacity \n          style={[styles.logout, dynamicStyles.logout]} \n          onPress={() => {\n            Alert.alert(\n              t('client.profile.logout'),\n              t('client.profile.logoutConfirm'),\n              [\n                { text: t('common.cancel'), style: 'cancel' },\n                { \n                  text: t('client.profile.logout'), \n                  style: 'destructive',\n                  onPress: logout\n                }\n              ]\n            );\n          }}\n        >\n          <Text style={styles.logoutText}>{t('client.profile.logout')}</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </>\n  );\n};\n\nexport default DriverProfileScreen;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/profile/ClientProfileScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Modal' is defined but never used.","line":2,"column":59,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LinearGradient' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AsyncStorage' is defined but never used.","line":11,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used.","line":30,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has a missing dependency: 'loadProfile'. Either include it or remove the dependency array.","line":41,"column":8,"nodeType":"ArrayExpression","endLine":41,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfile]","fix":{"range":[1716,1718],"text":"[loadProfile]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":50,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":109,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":112,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3402,3405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3402,3405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":114,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":117,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3785,3788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3785,3788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, ScrollView, TouchableOpacity, Alert, Modal, Image } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useAuth } from '../../context/AuthContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { useTheme } from '../../context/ThemeContext';\nimport { ClientProfileScreenStyles as styles, getClientProfileStyles } from '../../styles/screens/ClientProfileScreen.styles';\nimport { ClientScreenProps } from '../../types/navigation';\nimport { colors } from '../../constants/colors';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useProfile } from '../../hooks/useProfile';\nimport { useBalance } from '../../hooks/useBalance';\nimport { formatBalance } from '../../utils/formatters';\n\n// TODO: Для подключения бэкенда заменить на:\n// import { useNotifications } from '../../hooks/useNotifications';\n// import { useUserStats } from '../../hooks/useUserStats';\n\nconst ClientProfileScreen: React.FC<ClientScreenProps<'ClientProfile'>> = ({ navigation }) => {\n  const { logout } = useAuth();\n  const { t } = useI18n();\n  const { isDark } = useTheme();\n  const currentColors = isDark ? colors.dark : colors.light;\n  const dynamicStyles = getClientProfileStyles(isDark);\n\n\n  // Используем хук для работы с профилем\n  const { profile, loading, error, loadProfile } = useProfile();\n  \n\n\n  // Используем умный хук для баланса\n  const balanceHook = useBalance();\n  \n  useFocusEffect(\n    React.useCallback(() => {\n      // Перезагружаем профиль при фокусе экрана\n      loadProfile();\n    }, []) // Убираем loadProfile из зависимостей\n  );\n  \n// TODO: Для бэкенда заменить на:\n// const { user, loading: userLoading } = useProfile();\n// const { notificationsCount, loading: notificationsLoading } = useNotifications();\n// const { userStats, loading: statsLoading } = useUserStats();\n  \n  // Данные из мокдата\n  const getUserStats = (userId: string) => {\n    if (!profile) return null;\n    \n    return {\n      trips: 127,\n      spent: '12 450 AFc',\n      rating: profile.rating,\n      balance: formatBalance(balanceHook.balance) + ' AFc',\n      address: profile.address,\n      email: profile.email,\n      memberSince: new Date(profile.createdAt).getFullYear(),\n      id: profile.id,\n      role: profile.role,\n      avatar: profile.avatar,\n    };\n  };\n\n  const userStats = getUserStats(profile?.id || '') || {\n    trips: 0,\n    spent: '0 AFc',\n    rating: 0,\n    balance: '0 AFc',\n    address: '',\n    email: '',\n    memberSince: new Date().getFullYear(),\n    id: '',\n    role: '',\n    avatar: '',\n  };\n\n  // Обработка ошибок\n  if (error || !profile) {\n    return (\n      <View style={[styles.container, dynamicStyles.container, { justifyContent: 'center', alignItems: 'center' }]}>\n        <Text style={[styles.profileName, dynamicStyles.profileName]}>{error || t('profile.failedToLoadProfile')}</Text>\n      </View>\n    );\n  }\n\n  return (\n    <>\n      {/* Фиксированная секция с аватаром и статистикой */}\n      <View style={[styles.fixedSection, dynamicStyles.fixedSection]}>\n        {/* Аватар, имя, телефон, премиум кнопка */}\n        <View style={styles.profileRow}>\n          <TouchableOpacity style={styles.avatar} onPress={() => navigation.navigate('EditClientProfile' as any)}>\n            {profile?.avatar ? (\n              <Image source={{ uri: profile.avatar }} style={styles.avatarImage} />\n            ) : (\n              <Ionicons name=\"person\" size={48} color={styles.avatarIcon.color} />\n            )}\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.profileText} onPress={() => navigation.navigate('EditClientProfile' as any)}>\n            <Text style={[styles.profileName, dynamicStyles.profileName]}>{profile?.name || ''} {profile?.surname || ''}</Text>\n            <Text style={[styles.profilePhone, dynamicStyles.profilePhone]}>{profile?.phone || ''}</Text>\n          </TouchableOpacity>\n          {/* Premium button temporarily disabled to fix render error */}\n          <View style={{ width: 40, height: 40 }} />\n        </View>\n        {/* Блок статистики */}\n        <View style={[styles.statsBox, dynamicStyles.statsBox]}>\n          <View style={styles.statCol}>\n            <Text style={[styles.statValue, dynamicStyles.statValue]}>{userStats.trips}</Text>\n            <Text style={[styles.statLabel, dynamicStyles.statLabel]}>{t('client.profile.trips')}</Text>\n          </View>\n          <View style={[styles.statDivider, dynamicStyles.statDivider]} />\n          <View style={styles.statCol}>\n            <Text style={[styles.statValue, dynamicStyles.statValue]}>{userStats.spent}</Text>\n            <Text style={[styles.statLabel, dynamicStyles.statLabel]}>{t('client.profile.spent')}</Text>\n          </View>\n          <View style={[styles.statDivider, dynamicStyles.statDivider]} />\n          <View style={styles.statCol}>\n            <Text style={[styles.statValue, dynamicStyles.statValue]}>{userStats.rating}</Text>\n            <Text style={[styles.statLabel, dynamicStyles.statLabel]}>{t('client.profile.rating')}</Text>\n          </View>\n        </View>\n        {/* Тонкая линия под статистикой */}\n        <View style={[styles.statsDivider, dynamicStyles.statsDivider]} />\n      </View>\n\n      {/* Скроллируемая секция с меню */}\n      <ScrollView style={[styles.scrollSection, dynamicStyles.scrollSection]} contentContainerStyle={styles.contentContainer}>\n        {/* Пункты меню */}\n        <TouchableOpacity style={[styles.menuItem, styles.menuItemFirst, dynamicStyles.menuItem, dynamicStyles.menuItemFirst]} onPress={() => navigation.navigate('Balance')}>\n          <Ionicons name=\"refresh\" size={28} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.profile.balance')}</Text>\n          <Text style={[styles.menuValue, dynamicStyles.menuValue]}>{userStats.balance}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('Cards')}>\n          <Ionicons name=\"card\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.profile.cards')}</Text>\n          <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n        </TouchableOpacity>\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('Trips')}>\n          <Ionicons name=\"time\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.profile.trips')}</Text>\n          <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n        </TouchableOpacity>\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('PaymentHistory')}>\n          <Ionicons name=\"document-text\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.profile.paymentHistory')}</Text>\n          <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n        </TouchableOpacity>\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('Settings')}>\n          <Ionicons name=\"settings\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.settings')}</Text>\n          <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n        </TouchableOpacity>\n\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('Residence')}>\n          <Ionicons name=\"home\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.profile.residence')}</Text>\n          <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n        </TouchableOpacity>\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('Help')}>\n          <Ionicons name=\"help-circle\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabel, dynamicStyles.menuLabel]}>{t('client.profile.help')}</Text>\n          <Ionicons name=\"chevron-forward\" size={20} color={currentColors.textSecondary} />\n        </TouchableOpacity>\n        {/* О приложении */}\n        <TouchableOpacity style={[styles.menuItem, dynamicStyles.menuItem]} onPress={() => navigation.navigate('About')}>\n          <Ionicons name=\"information-circle\" size={22} color={currentColors.primary} style={styles.menuIcon} />\n          <Text style={[styles.menuLabelAbout, dynamicStyles.menuLabelAbout]}>{t('client.profile.about')}</Text>\n          <Text style={[styles.menuVersion, dynamicStyles.menuVersion]}>1.0.0</Text>\n        </TouchableOpacity>\n        {/* Выйти */}\n        <TouchableOpacity \n          style={[styles.logout, dynamicStyles.logout]} \n          onPress={() => {\n            Alert.alert(\n              t('client.profile.logout'),\n              t('client.profile.logoutConfirm'),\n              [\n                { text: t('common.cancel'), style: 'cancel' },\n                { \n                  text: t('client.profile.logout'), \n                  style: 'destructive',\n                  onPress: logout\n                }\n              ]\n            );\n          }}\n        >\n          <Text style={styles.logoutText}>{t('client.profile.logout')}</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </>\n  );\n};\n\nexport default ClientProfileScreen;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/profile/EditClientProfileScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Text' is defined but never used.","line":3,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TouchableOpacity' is defined but never used.","line":3,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TextInput' is defined but never used.","line":3,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Image' is defined but never used.","line":3,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":75},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Ionicons' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDefaultDate' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasChanges' is defined but never used.","line":14,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DatePicker' is defined but never used.","line":15,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FamilyMember' is defined but never used.","line":23,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logout' is assigned a value but never used.","line":28,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'rootNavigation' is assigned a value but never used.","line":29,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentColors' is assigned a value but never used.","line":31,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'familyPhoneVerifying' is assigned a value but never used.","line":89,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":25},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'checkHasChanges' function makes the dependencies of useCallback Hook (at line 317) change on every render. To fix this, wrap the definition of 'checkHasChanges' in its own useCallback() Hook.","line":105,"column":9,"nodeType":"VariableDeclarator","endLine":110,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'checkHasChanges' in its own useCallback() Hook.","fix":{"range":[3789,4064],"text":"useCallback(() => {\n    return formData.firstName !== originalDataRef.current.firstName ||\n           formData.lastName !== originalDataRef.current.lastName ||\n           formData.phone !== originalDataRef.current.phone ||\n           formData.email !== originalDataRef.current.email;\n  })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'checkHasChanges' function makes the dependencies of useCallback Hook (at line 390) change on every render. To fix this, wrap the definition of 'checkHasChanges' in its own useCallback() Hook.","line":105,"column":9,"nodeType":"VariableDeclarator","endLine":110,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'checkHasChanges' in its own useCallback() Hook.","fix":{"range":[3789,4064],"text":"useCallback(() => {\n    return formData.firstName !== originalDataRef.current.firstName ||\n           formData.lastName !== originalDataRef.current.lastName ||\n           formData.phone !== originalDataRef.current.phone ||\n           formData.email !== originalDataRef.current.email;\n  })"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFamilyExit' is assigned a value but never used.","line":112,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":25},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'saveProfile' function makes the dependencies of useCallback Hook (at line 317) change on every render. To fix this, wrap the definition of 'saveProfile' in its own useCallback() Hook.","line":191,"column":9,"nodeType":"VariableDeclarator","endLine":251,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'saveProfile' in its own useCallback() Hook.","fix":{"range":[6423,8472],"text":"useCallback(async (): Promise<boolean> => {\n    try {\n      // Проверяем, есть ли изменения в форме\n      const hasFormChanges = formData.firstName !== originalDataRef.current.firstName ||\n                            formData.lastName !== originalDataRef.current.lastName ||\n                            formData.phone !== originalDataRef.current.phone ||\n                            formData.email !== originalDataRef.current.email;\n\n      if (hasFormChanges) {\n        // Валидируем поля перед сохранением\n        const validation = validatePersonalInfo();\n        if (!validation.isValid) {\n          Alert.alert(\n            t('profile.validation.title'),\n            validation.errors.join('\\n'),\n            [{ text: t('common.ok'), style: 'default' }]\n          );\n          return false;\n        }\n\n        // Сохраняем изменения в форме\n        const updateData: any = {};\n        \n        if (hasFormChanges) {\n          updateData.name = formData.firstName.trim();\n          updateData.surname = formData.lastName.trim();\n          updateData.phone = formData.phone.trim();\n          updateData.email = formData.email.trim();\n        }\n\n        const success = await updateProfile(updateData);\n\n        if (success) {\n          Alert.alert(\n            t('profile.profileUpdateSuccess.title'),\n            t('profile.profileUpdateSuccess.message')\n          );\n          setIsEditingPersonalInfo(false);\n          // Обновляем исходные данные\n          originalDataRef.current = { ...formData };\n          return true;\n        } else {\n          Alert.alert(\n            t('profile.profileUpdateError.title'),\n            t('profile.profileUpdateError.message')\n          );\n          return false;\n        }\n      } else {\n        // Если изменений нет, просто закрываем режим редактирования\n        setIsEditingPersonalInfo(false);\n        return true;\n      }\n    } catch (error) {\n      Alert.alert(\n        t('profile.profileUpdateGeneralError.title'),\n        t('profile.profileUpdateGeneralError.message')\n      );\n      return false;\n    }\n  })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'saveProfile' function makes the dependencies of useCallback Hook (at line 390) change on every render. To fix this, wrap the definition of 'saveProfile' in its own useCallback() Hook.","line":191,"column":9,"nodeType":"VariableDeclarator","endLine":251,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'saveProfile' in its own useCallback() Hook.","fix":{"range":[6423,8472],"text":"useCallback(async (): Promise<boolean> => {\n    try {\n      // Проверяем, есть ли изменения в форме\n      const hasFormChanges = formData.firstName !== originalDataRef.current.firstName ||\n                            formData.lastName !== originalDataRef.current.lastName ||\n                            formData.phone !== originalDataRef.current.phone ||\n                            formData.email !== originalDataRef.current.email;\n\n      if (hasFormChanges) {\n        // Валидируем поля перед сохранением\n        const validation = validatePersonalInfo();\n        if (!validation.isValid) {\n          Alert.alert(\n            t('profile.validation.title'),\n            validation.errors.join('\\n'),\n            [{ text: t('common.ok'), style: 'default' }]\n          );\n          return false;\n        }\n\n        // Сохраняем изменения в форме\n        const updateData: any = {};\n        \n        if (hasFormChanges) {\n          updateData.name = formData.firstName.trim();\n          updateData.surname = formData.lastName.trim();\n          updateData.phone = formData.phone.trim();\n          updateData.email = formData.email.trim();\n        }\n\n        const success = await updateProfile(updateData);\n\n        if (success) {\n          Alert.alert(\n            t('profile.profileUpdateSuccess.title'),\n            t('profile.profileUpdateSuccess.message')\n          );\n          setIsEditingPersonalInfo(false);\n          // Обновляем исходные данные\n          originalDataRef.current = { ...formData };\n          return true;\n        } else {\n          Alert.alert(\n            t('profile.profileUpdateError.title'),\n            t('profile.profileUpdateError.message')\n          );\n          return false;\n        }\n      } else {\n        // Если изменений нет, просто закрываем режим редактирования\n        setIsEditingPersonalInfo(false);\n        return true;\n      }\n    } catch (error) {\n      Alert.alert(\n        t('profile.profileUpdateGeneralError.title'),\n        t('profile.profileUpdateGeneralError.message')\n      );\n      return false;\n    }\n  })"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7282,7285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7282,7285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":322,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10782,10785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10782,10785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadProfile' and 'loadVerificationStatus'. Either include them or remove the dependency array.","line":411,"column":6,"nodeType":"ArrayExpression","endLine":411,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfile, loadVerificationStatus]","fix":{"range":[13777,13779],"text":"[loadProfile, loadVerificationStatus]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'profile' and 'updateProfile'. Either include them or remove the dependency array.","line":443,"column":6,"nodeType":"ArrayExpression","endLine":443,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [formData.birthDate, profile, updateProfile]","fix":{"range":[14847,14867],"text":"[formData.birthDate, profile, updateProfile]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { usePackage } from '../../context/PackageContext';\nimport { View, Text, TouchableOpacity, ScrollView, TextInput, Alert, Image, Animated } from 'react-native';\nimport { useTheme } from '../../context/ThemeContext';\nimport { EditClientProfileScreenStyles as styles, getEditClientProfileScreenColors } from '../../styles/screens/profile/EditClientProfileScreen.styles';\nimport { Ionicons } from '@expo/vector-icons';\nimport { ClientScreenProps } from '../../types/navigation';\n// mockUsers removed - using hardcoded data\nimport { useAuth } from '../../context/AuthContext';\nimport { useNavigation, useFocusEffect } from '@react-navigation/native';\nimport { useProfile } from '../../hooks/useProfile';\nimport { useVerification } from '../../hooks/useVerification';\nimport { useFamilyMembers } from '../../hooks/useFamilyMembers';\nimport { getDefaultDate, hasChanges, handleCirclePress } from '../../utils/profileHelpers';\nimport DatePicker from '../../components/DatePicker';\nimport PersonalInfoSection from '../../components/profile/PersonalInfoSection';\nimport FamilySection from '../../components/profile/FamilySection';\nimport AddFamilyModal from '../../components/profile/AddFamilyModal';\nimport ProfileAvatarSection from '../../components/profile/ProfileAvatarSection';\nimport VipSection from '../../components/profile/VipSection';\nimport ProfileHeader from '../../components/profile/ProfileHeader';\nimport { useI18n } from '../../hooks/useI18n';\nimport { FamilyMember } from '../../types/family';\n\nconst EditClientProfileScreen: React.FC<ClientScreenProps<'EditClientProfile'>> = ({ navigation }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { logout, login, changeRole } = useAuth();\n  const rootNavigation = useNavigation();\n  const dynamicStyles = getEditClientProfileScreenColors(isDark);\n  const currentColors = isDark ? { dark: { primary: '#3B82F6' } } : { light: { primary: '#083198' } };\n  \n  const { profile, updateProfile, loadProfile } = useProfile();\n  const { currentPackage } = usePackage();\n  const user = profile || {\n    id: '1',\n    name: 'John',\n    surname: 'Doe',\n    phone: '+1234567890',\n    email: 'john@example.com',\n    birthDate: '1990-01-01',\n    rating: 5,\n    address: '123 Main St',\n    createdAt: '2023-01-01',\n    avatar: null\n  };\n  \n\n  \n  // Состояние формы\n  const [formData, setFormData] = useState({\n    firstName: user.name,\n    lastName: user.surname,\n    phone: user.phone,\n    email: user.email,\n    birthDate: user.birthDate || '1990-01-01',\n  });\n\n  // Исходные данные для сравнения\n  const originalDataRef = useRef({\n    firstName: user.name,\n    lastName: user.surname,\n    phone: user.phone,\n    email: user.email,\n    birthDate: user.birthDate || '1990-01-01',\n  });\n\n  const [isEditingPersonalInfo, setIsEditingPersonalInfo] = useState(false);\n  const rotateAnim = useRef(new Animated.Value(0)).current;\n\n  // Хуки для верификации и семейных членов\n  const {\n    verificationStatus,\n    isVerifying,\n    loadVerificationStatus,\n    resetVerificationStatus,\n    verifyEmail,\n    verifyPhone,\n  } = useVerification();\n\n  const {\n    familyMembers,\n    expandedFamilyMember,\n    editingFamilyMember,\n    showAddFamilyModal,\n    newFamilyMember,\n    setNewFamilyMember,\n    familyPhoneVerification,\n    familyPhoneVerifying,\n    toggleFamilyMember,\n    openAddFamilyModal,\n    closeAddFamilyModal,\n    addFamilyMember,\n    startEditingFamilyMember,\n    cancelEditingFamilyMember,\n    saveFamilyMember,\n    deleteFamilyMember,\n    verifyFamilyPhone,\n    resetFamilyPhoneVerification,\n  } = useFamilyMembers();\n\n  const saveFamilyRef = useRef<(() => void) | null>(null);\n\n  // Функция для проверки изменений\n  const checkHasChanges = () => {\n    return formData.firstName !== originalDataRef.current.firstName ||\n           formData.lastName !== originalDataRef.current.lastName ||\n           formData.phone !== originalDataRef.current.phone ||\n           formData.email !== originalDataRef.current.email;\n  };\n\n  const handleFamilyExit = () => {\n    // Если есть активное редактирование семейного члена\n    if (editingFamilyMember !== null) {\n      // Проверяем, есть ли изменения через функцию сохранения\n      if (saveFamilyRef.current) {\n        // Если есть функция сохранения, значит есть изменения - показываем диалог\n        Alert.alert(\n          t('common.confirmation'),\n          t('profile.family.confirmSave'),\n          [\n            { \n              text: t('common.cancel'), \n              style: 'cancel',\n              onPress: () => {\n                // При отмене НЕ делаем ничего - остаемся в режиме редактирования\n                // Пользователь остается на экране и может продолжить редактирование\n              }\n            },\n            { \n              text: t('common.save'), \n              onPress: () => {\n                // Сохраняем изменения и отменяем редактирование\n                handleFamilySave();\n              }\n            }\n          ]\n        );\n      } else {\n        // Если нет функции сохранения, значит изменений нет - сразу выходим\n        cancelEditingFamilyMember();\n        navigation.goBack();\n      }\n    } else {\n      // Если нет активного редактирования, просто уходим назад\n      navigation.goBack();\n    }\n  };\n\n  const handleFamilySave = () => {\n    // Вызываем функцию сохранения из ref, если она есть\n    if (saveFamilyRef.current) {\n      saveFamilyRef.current();\n    }\n    \n    // Отменяем редактирование\n    cancelEditingFamilyMember();\n    \n    // Уходим назад напрямую, без вызова handleFamilyExit\n    navigation.goBack();\n  };\n\n  // Функция валидации полей личной информации\n  const validatePersonalInfo = (): { isValid: boolean; errors: string[] } => {\n    const errors: string[] = [];\n    \n    if (!formData.firstName.trim()) {\n      errors.push(t('profile.validation.firstNameRequired'));\n    }\n    \n    if (!formData.lastName.trim()) {\n      errors.push(t('profile.validation.lastNameRequired'));\n    }\n    \n    // Телефон не обязателен\n    // if (!formData.phone.trim()) {\n    //   errors.push(t('profile.validation.phoneRequired'));\n    // }\n    \n    if (!formData.email.trim()) {\n      errors.push(t('profile.validation.emailRequired'));\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  };\n\n  // Асинхронная функция сохранения профиля\n  const saveProfile = async (): Promise<boolean> => {\n    try {\n      // Проверяем, есть ли изменения в форме\n      const hasFormChanges = formData.firstName !== originalDataRef.current.firstName ||\n                            formData.lastName !== originalDataRef.current.lastName ||\n                            formData.phone !== originalDataRef.current.phone ||\n                            formData.email !== originalDataRef.current.email;\n\n      if (hasFormChanges) {\n        // Валидируем поля перед сохранением\n        const validation = validatePersonalInfo();\n        if (!validation.isValid) {\n          Alert.alert(\n            t('profile.validation.title'),\n            validation.errors.join('\\n'),\n            [{ text: t('common.ok'), style: 'default' }]\n          );\n          return false;\n        }\n\n        // Сохраняем изменения в форме\n        const updateData: any = {};\n        \n        if (hasFormChanges) {\n          updateData.name = formData.firstName.trim();\n          updateData.surname = formData.lastName.trim();\n          updateData.phone = formData.phone.trim();\n          updateData.email = formData.email.trim();\n        }\n\n        const success = await updateProfile(updateData);\n\n        if (success) {\n          Alert.alert(\n            t('profile.profileUpdateSuccess.title'),\n            t('profile.profileUpdateSuccess.message')\n          );\n          setIsEditingPersonalInfo(false);\n          // Обновляем исходные данные\n          originalDataRef.current = { ...formData };\n          return true;\n        } else {\n          Alert.alert(\n            t('profile.profileUpdateError.title'),\n            t('profile.profileUpdateError.message')\n          );\n          return false;\n        }\n      } else {\n        // Если изменений нет, просто закрываем режим редактирования\n        setIsEditingPersonalInfo(false);\n        return true;\n      }\n    } catch (error) {\n      Alert.alert(\n        t('profile.profileUpdateGeneralError.title'),\n        t('profile.profileUpdateGeneralError.message')\n      );\n      return false;\n    }\n  };\n\n  // Обработчик для перехвата swipe-back жеста\n  const handleBackPress = useCallback(() => {\n    const hasPersonalChanges = isEditingPersonalInfo && checkHasChanges();\n    const hasFamilyEditing = editingFamilyMember !== null;\n    \n    if (hasPersonalChanges) {\n      Alert.alert(\n        t('profile.saveChangesConfirm.title'),\n        t('profile.saveChangesConfirm.message'),\n        [\n          { \n            text: t('profile.saveChangesConfirm.cancel'), \n            style: 'cancel',\n            onPress: () => navigation.goBack()\n          },\n          { \n            text: t('profile.saveChangesConfirm.save'), \n            onPress: async () => {\n              const success = await saveProfile();\n              if (success) {\n                navigation.goBack();\n              }\n            }\n          }\n        ]\n      );\n    } else if (hasFamilyEditing) {\n      // Если есть редактирование семейной секции, используем специальную обработку\n      \n      // Проверяем, есть ли изменения через функцию сохранения\n      if (saveFamilyRef.current) {\n        // Если есть изменения - показываем диалог\n        Alert.alert(\n          t('common.confirmation'),\n          t('profile.family.confirmSave'),\n          [\n            { \n              text: t('common.cancel'), \n              style: 'cancel',\n              onPress: () => {\n                // При отмене НЕ делаем ничего - остаемся в режиме редактирования\n              }\n            },\n            { \n              text: t('common.save'), \n              onPress: () => {\n                // Сохраняем изменения и отменяем редактирование\n                if (saveFamilyRef.current) {\n                  saveFamilyRef.current();\n                }\n                cancelEditingFamilyMember();\n                navigation.goBack();\n              }\n            }\n          ]\n        );\n      } else {\n        // Если нет изменений - сразу выходим\n        cancelEditingFamilyMember();\n        navigation.goBack();\n      }\n    } else {\n      navigation.goBack();\n    }\n  }, [isEditingPersonalInfo, checkHasChanges, editingFamilyMember, saveProfile, saveFamilyRef, cancelEditingFamilyMember, navigation, t]);\n\n  // Перехватываем swipe-back жест\n  useFocusEffect(\n    useCallback(() => {\n      const unsubscribe = navigation.addListener('beforeRemove', (e: any) => {\n        const hasPersonalChanges = isEditingPersonalInfo && checkHasChanges();\n        const hasFamilyEditing = editingFamilyMember !== null;\n        \n        if (hasPersonalChanges) {\n          // Предотвращаем переход назад\n          e.preventDefault();\n          \n          Alert.alert(\n            t('profile.saveChangesConfirm.title'),\n            t('profile.saveChangesConfirm.message'),\n            [\n              { \n                text: t('profile.saveChangesConfirm.cancel'), \n                style: 'cancel',\n                onPress: () => navigation.dispatch(e.data.action)\n              },\n              { \n                text: t('profile.saveChangesConfirm.save'), \n                onPress: async () => {\n                  const success = await saveProfile();\n                  if (success) {\n                    navigation.dispatch(e.data.action);\n                  }\n                }\n              }\n            ]\n          );\n        } else if (hasFamilyEditing) {\n          // Если есть редактирование семейной секции, используем специальную обработку\n          e.preventDefault();\n          \n          // Проверяем, есть ли изменения через функцию сохранения\n          if (saveFamilyRef.current) {\n            // Если есть изменения - показываем диалог\n            Alert.alert(\n              t('common.confirmation'),\n              t('profile.family.confirmSave'),\n              [\n                { \n                  text: t('common.cancel'), \n                  style: 'cancel',\n                  onPress: () => {\n                    // При отмене НЕ делаем ничего - остаемся в режиме редактирования\n                  }\n                },\n                { \n                  text: t('common.save'), \n                  onPress: () => {\n                    // Сохраняем изменения и отменяем редактирование\n                    if (saveFamilyRef.current) {\n                      saveFamilyRef.current();\n                    }\n                    cancelEditingFamilyMember();\n                    navigation.dispatch(e.data.action);\n                  }\n                }\n              ]\n            );\n          } else {\n            // Если нет изменений - сразу выходим\n            cancelEditingFamilyMember();\n            navigation.dispatch(e.data.action);\n          }\n        }\n      });\n\n      return unsubscribe;\n    }, [navigation, isEditingPersonalInfo, checkHasChanges, editingFamilyMember, saveProfile, saveFamilyRef, cancelEditingFamilyMember, t])\n  );\n\n  const handleCirclePressAction = () => {\n    // Анимация вращения\n    Animated.timing(rotateAnim, {\n      toValue: 1,\n      duration: 500,\n      useNativeDriver: true,\n    }).start(() => {\n      rotateAnim.setValue(0);\n      \n      // После завершения анимации вызываем функцию из утилит\n      handleCirclePress(navigation, login, t, changeRole);\n    });\n  };\n\n  // Загружаем данные только один раз при монтировании компонента\n  useEffect(() => {\n    loadProfile();\n    loadVerificationStatus();\n  }, []); // Пустой массив зависимостей - выполняется только один раз\n\n  // Обновляем форму при изменении профиля\n  useEffect(() => {\n    if (profile) {\n      setFormData({\n        firstName: profile.name,\n        lastName: profile.surname,\n        phone: profile.phone,\n        email: profile.email,\n        birthDate: profile.birthDate || '1990-01-01',\n      });\n      \n      // Обновляем исходные данные\n      originalDataRef.current = {\n        firstName: profile.name,\n        lastName: profile.surname,\n        phone: profile.phone,\n        email: profile.email,\n        birthDate: profile.birthDate || '1990-01-01',\n      };\n    }\n  }, [profile]);\n\n  // Убираем автоматическое сохранение фото - теперь фото сохраняется только при явном сохранении\n\n  // Автоматически сохраняем дату при её изменении\n  useEffect(() => {\n    if (profile && formData.birthDate !== profile.birthDate && formData.birthDate !== originalDataRef.current.birthDate) {\n      // Сохраняем только дату, не трогая остальные данные\n      updateProfile({ birthDate: formData.birthDate });\n    }\n  }, [formData.birthDate]);\n\n\n\n  return (\n    <View style={[styles.container, dynamicStyles.container]}>\n      <ProfileHeader\n        onBackPress={handleBackPress}\n                  onEditPress={() => {\n           if (isEditingPersonalInfo) {\n             // Если в режиме редактирования, проверяем изменения\n             const hasChanges = checkHasChanges();\n             \n             if (hasChanges) {\n              // Если есть изменения, показываем подтверждение\n              Alert.alert(\n                t('profile.saveProfileConfirm.title'),\n                t('profile.saveProfileConfirm.message'),\n                [\n                  { \n                    text: t('profile.saveProfileConfirm.cancel'), \n                    style: 'cancel' \n                  },\n                  { \n                    text: t('profile.saveProfileConfirm.save'), \n                    onPress: async () => {\n                      const success = await saveProfile();\n                      if (success) {\n                        setIsEditingPersonalInfo(false);\n                      }\n                    }\n                  }\n                ]\n              );\n            } else {\n              // Если изменений нет, просто выключаем режим редактирования без подтверждения\n              setIsEditingPersonalInfo(false);\n            }\n          } else {\n            // Если в режиме просмотра, включаем редактирование\n            setIsEditingPersonalInfo(true);\n          }\n        }}\n        isEditing={isEditingPersonalInfo}\n      />\n      \n      <ScrollView style={styles.content} contentContainerStyle={styles.contentContainer}>\n        <ProfileAvatarSection\n          key={`avatar-${currentPackage}`}\n          userName={user.name}\n          userSurname={user.surname}\n          onCirclePress={handleCirclePressAction}\n          rotateAnim={rotateAnim}\n        />\n\n        <PersonalInfoSection\n          formData={formData}\n          setFormData={setFormData}\n          isEditing={isEditingPersonalInfo}\n          verificationStatus={verificationStatus}\n          isVerifying={isVerifying}\n          onVerifyEmail={verifyEmail}\n          onVerifyPhone={verifyPhone}\n          onResetVerification={resetVerificationStatus}\n        />\n\n        <FamilySection\n          familyMembers={familyMembers}\n          expandedFamilyMember={expandedFamilyMember}\n          editingFamilyMember={editingFamilyMember}\n          familyPhoneVerification={familyPhoneVerification}\n          onToggleFamilyMember={toggleFamilyMember}\n          onOpenAddFamilyModal={openAddFamilyModal}\n          onStartEditing={startEditingFamilyMember}\n          onCancelEditing={cancelEditingFamilyMember}\n          onSaveMember={saveFamilyMember}\n          onDeleteMember={deleteFamilyMember}\n          onResetPhoneVerification={resetFamilyPhoneVerification}\n          onVerifyPhone={verifyFamilyPhone}\n          saveFamilyRef={saveFamilyRef}\n        />\n\n        <VipSection \n          onVipPress={() => navigation.navigate('PremiumPackages')}\n        />\n\n      </ScrollView>\n\n      <AddFamilyModal\n        visible={showAddFamilyModal}\n        newFamilyMember={newFamilyMember}\n        setNewFamilyMember={setNewFamilyMember}\n        onClose={closeAddFamilyModal}\n        onAdd={addFamilyMember}\n        onVerifyPhone={verifyPhone}\n        phoneVerificationStatus={verificationStatus.phone}\n        isVerifyingPhone={isVerifying.phone}\n      />\n    </View>\n  );\n};\n\nexport default EditClientProfileScreen;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/profile/PremiumPackagesScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatDateWithLanguage' is defined but never used.","line":13,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'language' is assigned a value but never used.","line":25,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'extendSubscription' is assigned a value but never used.","line":28,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedPeriod' is defined but never used.","line":112,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentPeriod' is assigned a value but never used.","line":113,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, Alert, Modal, Animated } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { colors } from '../../constants/colors';\nimport VipPackages from '../../components/VipPackages';\nimport { usePackage, PackageType } from '../../context/PackageContext';\nimport { useBalance } from '../../hooks/useBalance';\nimport { useAuth } from '../../context/AuthContext';\nimport { PremiumPackagesScreenStyles, getPremiumPackagesScreenColors } from '../../styles/screens/profile/PremiumPackagesScreen.styles';\nimport { formatBalance, formatDateWithLanguage } from '../../utils/formatters';\n\ninterface PremiumPackagesScreenProps {\n  navigation: {\n    goBack: () => void;\n    navigate: (screen: string) => void;\n  };\n}\n\nconst PremiumPackagesScreen: React.FC<PremiumPackagesScreenProps> = ({ navigation }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const currentColors = isDark ? colors.dark : colors.light;\n  const { currentPackage, subscription, updatePackage, extendSubscription, cancelSubscription, toggleAutoRenew } = usePackage();\n  const { balance, withdrawBalance } = useBalance();\n  \n  const isDriver = user?.role === 'driver';\n  \n  // Условная логика для разных ролей\n  const getScreenTitle = () => {\n    return isDriver ? 'Премиум статус' : t('premium.title');\n  };\n  \n  const [successModalVisible, setSuccessModalVisible] = useState(false);\n  const [selectedPackageInfo, setSelectedPackageInfo] = useState<{name: string, id: string} | null>(null);\n  const [cancelModalVisible, setCancelModalVisible] = useState(false);\n  const [selectedPeriod, setSelectedPeriod] = useState<'month' | 'year'>('month');\n  \n  // Анимация для свитчера\n  const switchAnimation = useRef(new Animated.Value(0)).current;\n\n  // Инициализация анимации при загрузке\n  useEffect(() => {\n    if (subscription?.autoRenew) {\n      switchAnimation.setValue(1);\n    }\n  }, [subscription?.autoRenew, switchAnimation]);\n\n  // Функция анимации свитчера\n  const animateSwitch = (toValue: number) => {\n    Animated.timing(switchAnimation, {\n      toValue,\n      duration: 300,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  const handlePackageSelect = (packageId: string, price: number, selectedPeriod: 'month' | 'year') => {\n    // 1. СНАЧАЛА определяем сценарий действия\n    const scenario = determineScenario(packageId, selectedPeriod);\n    \n    // 2. Проверяем баланс только для новых покупок\n    if (scenario === 'PURCHASE_NEW_PACKAGE' && packageId !== 'free' && balance < price) {\n      const packageName = getPackageName(packageId);\n      Alert.alert(\n        t('premium.insufficient.title'),\n        t('premium.insufficient.message', { \n          packageName, \n          price: formatBalance(price), \n          balance: formatBalance(balance) \n        }),\n        [\n          {\n            text: t('premium.purchase.cancel'),\n            style: 'cancel'\n          },\n          {\n            text: t('premium.insufficient.topUp'),\n            onPress: () => {\n              navigation.navigate('Balance');\n            }\n          }\n        ]\n      );\n      return;\n    }\n    \n    switch (scenario) {\n      case 'FREE_ALREADY_ACTIVE':\n        showFreeAlreadyActiveMessage();\n        break;\n        \n      case 'CANCEL_TO_FREE':\n        showCancelToFreeDialog();\n        break;\n        \n      case 'PURCHASE_NEW_PACKAGE':\n        showPurchaseDialog(packageId, selectedPeriod, price);\n        break;\n        \n      case 'CANCEL_CURRENT':\n        showCancelCurrentDialog(packageId);\n        break;\n    }\n  };\n\n  // Функция определения сценария\n  const determineScenario = (packageId: string, selectedPeriod: 'month' | 'year') => {\n    const currentPeriod = subscription?.period || 'month';\n    \n    // Бесплатный пакет\n    if (packageId === 'free') {\n      if (currentPackage === 'free') return 'FREE_ALREADY_ACTIVE';\n      return 'CANCEL_TO_FREE';\n    }\n    \n    // Тот же пакет, тот же период = отмена (только для активных подписок)\n    if (currentPackage === packageId && subscription?.isActive) {\n      return 'CANCEL_CURRENT';\n    }\n    \n    // Тот же пакет, но подписка неактивна = покупка\n    if (currentPackage === packageId && !subscription?.isActive) {\n      return 'PURCHASE_NEW_PACKAGE';\n    }\n    \n    // Другой пакет или другой период = покупка нового\n    return 'PURCHASE_NEW_PACKAGE';\n  };\n\n  // Вспомогательная функция для получения названия пакета\n  const getPackageName = (packageId: string) => {\n    // Убираем суффикс периода из ID\n    const basePackageId = packageId.replace(/_month$|_year$/, '');\n    \n    switch (basePackageId) {\n      case 'free': return t('premium.packages.free');\n      case 'plus': return t('premium.packages.plus');\n      case 'premium': return t('premium.packages.premium');\n      case 'premiumPlus': return t('premium.packages.premiumPlus');\n      default: return t('premium.packages.free');\n    }\n  };\n\n  // Сценарий: Бесплатный пакет уже активен\n  const showFreeAlreadyActiveMessage = () => {\n    Alert.alert(\n      t('premium.free.alreadyActive.title'),\n      t('premium.free.alreadyActive.message'),\n      [{ text: t('common.ok') }]\n    );\n  };\n\n  // Сценарий: Отмена подписки для перехода на бесплатный\n  const showCancelToFreeDialog = () => {\n    Alert.alert(\n      t('premium.cancelToFree.title'),\n      t('premium.cancelToFree.message'),\n      [\n        {\n          text: t('premium.cancelToFree.keepButton'),\n          style: 'cancel'\n        },\n        {\n          text: t('premium.cancelToFree.confirmButton'),\n          style: 'destructive',\n          onPress: async () => {\n            await cancelSubscription();\n            setSelectedPackageInfo({ name: t('premium.packages.free'), id: 'free' });\n            setSuccessModalVisible(true);\n          }\n        }\n      ]\n    );\n  };\n\n\n\n  // Сценарий: Покупка нового пакета\n  const showPurchaseDialog = (packageId: string, selectedPeriod: 'month' | 'year', price: number) => {\n    const packageName = getPackageName(packageId);\n    \n    Alert.alert(\n      t('premium.purchase.confirmTitle'),\n      t('premium.purchase.confirmMessage', { packageName, price: formatBalance(price) }),\n      [\n        {\n          text: t('premium.purchase.cancelButton'),\n          style: 'cancel'\n        },\n        {\n          text: t('premium.purchase.confirmButton'),\n          onPress: async () => {\n            \n      \n            const success = await withdrawBalance(price);\n            \n            if (success) {\n              await updatePackage(packageId as PackageType, selectedPeriod);\n              setSelectedPackageInfo({ name: packageName, id: packageId });\n              setSuccessModalVisible(true);\n            } else {\n              // Покупка не удалась - показываем ошибку\n              Alert.alert(t('premium.purchaseError'), t('premium.insufficientBalance'));\n            }\n          }\n        }\n      ]\n    );\n  };\n\n  // Сценарий: Отмена текущего пакета\n  const showCancelCurrentDialog = (packageId: string) => {\n    const packageName = getPackageName(packageId);\n    \n    setSelectedPackageInfo({ name: packageName, id: packageId });\n    setCancelModalVisible(true);\n  };\n\n  const dynamicStyles = getPremiumPackagesScreenColors(isDark);\n\n  return (\n    <View style={[PremiumPackagesScreenStyles.container, dynamicStyles.container]}>\n      {/* Header */}\n      <View style={[PremiumPackagesScreenStyles.header, dynamicStyles.header]}>\n        <TouchableOpacity \n          onPress={() => navigation.goBack()}\n          style={PremiumPackagesScreenStyles.backButton}\n        >\n          <Ionicons \n            name=\"arrow-back\" \n            size={24} \n            color={currentColors.primary} \n          />\n        </TouchableOpacity>\n        \n        <Text style={[PremiumPackagesScreenStyles.headerTitle, dynamicStyles.headerTitle]}>\n          {getScreenTitle()}\n        </Text>\n\n        {/* Свитчер автообновления в хедере */}\n        {subscription && subscription.isActive && subscription.packageType !== 'free' ? (\n          <TouchableOpacity\n            style={[PremiumPackagesScreenStyles.autoRenewSwitch, dynamicStyles.autoRenewSwitch]}\n            onPress={async () => {\n              // Если включаем автообновление - сразу включаем с анимацией\n              if (!subscription.autoRenew) {\n                const newValue = 1;\n                animateSwitch(newValue);\n                await toggleAutoRenew();\n              } else {\n                // Если отключаем - сначала анимация, потом диалог\n                const newValue = 0;\n                animateSwitch(newValue);\n                \n                Alert.alert(\n                  t('premium.subscription.disableAutoRenewTitle'),\n                  t('premium.subscription.disableAutoRenewMessage'),\n                  [\n                    {\n                      text: t('premium.subscription.cancelButton'),\n                      style: 'cancel',\n                      onPress: async () => {\n                        // Если отменили - возвращаем анимацию обратно\n                        const revertValue = 1;\n                        animateSwitch(revertValue);\n                      }\n                    },\n                    {\n                      text: t('premium.subscription.disableButton'),\n                      style: 'destructive',\n                      onPress: async () => {\n                        // Подтвердили отключение - сохраняем состояние\n                        await toggleAutoRenew();\n                      }\n                    }\n                  ]\n                );\n              }\n            }}\n            activeOpacity={0.8}\n          >\n            {/* Анимированный фон */}\n            <Animated.View\n              style={[\n                PremiumPackagesScreenStyles.autoRenewBackground,\n                { opacity: switchAnimation }\n              ]}\n            />\n            \n            {/* Анимированный индикатор */}\n            <Animated.View\n              style={[\n                PremiumPackagesScreenStyles.autoRenewIndicator,\n                {\n                  left: switchAnimation.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [4, 22],\n                  }),\n                }\n              ]}\n            >\n              <Animated.View\n                style={[\n                  PremiumPackagesScreenStyles.autoRenewIcon,\n                  {\n                    opacity: switchAnimation.interpolate({\n                      inputRange: [0, 0.5, 1],\n                      outputRange: [1, 0, 0],\n                    }),\n                  }\n                ]}\n              >\n                <Ionicons name=\"close\" size={16} color=\"#EF4444\" />\n              </Animated.View>\n              <Animated.View\n                style={[\n                  PremiumPackagesScreenStyles.autoRenewIcon,\n                  {\n                    opacity: switchAnimation.interpolate({\n                      inputRange: [0, 0.5, 1],\n                      outputRange: [0, 0, 1],\n                    }),\n                  }\n                ]}\n              >\n                <Ionicons name=\"refresh\" size={16} color=\"#10B981\" />\n              </Animated.View>\n            </Animated.View>\n          </TouchableOpacity>\n        ) : (\n          <View style={PremiumPackagesScreenStyles.placeholder} />\n        )}\n      </View>\n\n      {/* Content */}\n      <View style={PremiumPackagesScreenStyles.content}>\n        <VipPackages\n          onSelectPackage={handlePackageSelect}\n          currentPackage={currentPackage}\n          currentPeriod={subscription?.period}\n          selectedPeriod={selectedPeriod}\n          onPeriodChange={setSelectedPeriod}\n          isSubscriptionActive={subscription?.isActive || false}\n        />\n      </View>\n\n      {/* Модальное окно успешной покупки */}\n      <Modal\n        visible={successModalVisible}\n        transparent={true}\n        animationType=\"fade\"\n        onRequestClose={() => setSuccessModalVisible(false)}\n      >\n        <View style={PremiumPackagesScreenStyles.modalOverlay}>\n          <View style={[PremiumPackagesScreenStyles.modalContainer, dynamicStyles.modalContainer]}>\n            <View style={[PremiumPackagesScreenStyles.modalIconContainer, PremiumPackagesScreenStyles.successIconContainer]}>\n              <Ionicons name=\"checkmark\" size={32} color=\"#FFFFFF\" />\n            </View>\n            \n            <Text style={[PremiumPackagesScreenStyles.modalTitle, dynamicStyles.modalTitle]}>\n              {t('premium.success.title')}\n            </Text>\n            \n            <Text style={[PremiumPackagesScreenStyles.modalMessage, dynamicStyles.modalMessage]}>\n              {t('premium.success.message', { packageName: selectedPackageInfo?.name || '' })}\n            </Text>\n            \n            <TouchableOpacity\n              style={[PremiumPackagesScreenStyles.modalButton, PremiumPackagesScreenStyles.primaryButton]}\n              onPress={() => {\n                setSuccessModalVisible(false);\n                navigation.goBack();\n              }}\n              activeOpacity={0.8}\n            >\n              <Text style={[PremiumPackagesScreenStyles.modalButtonText, PremiumPackagesScreenStyles.whiteText]}>\n                {t('common.ok')}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Модальное окно отмены подписки */}\n      <Modal\n        visible={cancelModalVisible}\n        transparent={true}\n        animationType=\"fade\"\n        onRequestClose={() => setCancelModalVisible(false)}\n      >\n        <View style={PremiumPackagesScreenStyles.modalOverlay}>\n          <View style={[PremiumPackagesScreenStyles.modalContainer, PremiumPackagesScreenStyles.cancelModalContainer, dynamicStyles.modalContainer]}>\n            <View style={[PremiumPackagesScreenStyles.modalIconContainer, PremiumPackagesScreenStyles.errorIconContainer]}>\n              <Ionicons name=\"warning\" size={32} color=\"#FFFFFF\" />\n            </View>\n            \n            <Text style={[PremiumPackagesScreenStyles.modalTitle, dynamicStyles.modalTitle]}>\n              {t('premium.subscription.cancelTitle')}\n            </Text>\n            \n            <Text style={[PremiumPackagesScreenStyles.modalMessage, dynamicStyles.modalMessage]}>\n              {t('premium.subscription.cancelMessage', { packageName: selectedPackageInfo?.name || '' })}\n            </Text>\n            \n            <View style={PremiumPackagesScreenStyles.buttonRow}>\n              <TouchableOpacity\n                style={[PremiumPackagesScreenStyles.secondaryButton, dynamicStyles.secondaryButton]}\n                onPress={() => setCancelModalVisible(false)}\n                activeOpacity={0.8}\n              >\n                <Text style={[PremiumPackagesScreenStyles.modalButtonText, dynamicStyles.secondaryButtonText]}>\n                  {t('premium.subscription.keepButton')}\n                </Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity\n                style={[PremiumPackagesScreenStyles.dangerButton]}\n                onPress={async () => {\n                  await cancelSubscription();\n                  setCancelModalVisible(false);\n                  navigation.goBack();\n                }}\n                activeOpacity={0.8}\n              >\n                <Text style={[PremiumPackagesScreenStyles.modalButtonText, PremiumPackagesScreenStyles.whiteText]}>\n                  {t('premium.subscription.cancelButton')}\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nexport default PremiumPackagesScreen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/profile/driver/DriverVehiclesScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsEditing' is assigned a value but never used.","line":34,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1806,1809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1806,1809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2689,2692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2689,2692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3605,3608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3605,3608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9538,9541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9538,9541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, TextInput, ScrollView, Alert } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../../context/ThemeContext';\nimport { useI18n } from '../../../hooks/useI18n';\nimport { DriverScreenProps } from '../../../types/driver/DriverNavigation';\nimport { DriverVehiclesScreenStyles as styles, getDriverVehiclesScreenColors } from '../../../styles/screens/profile/driver/DriverVehiclesScreen.styles';\nimport { colors } from '../../../constants/colors';\nimport Select from '../../../components/Select';\nimport PhotoUpload from '../../../components/PhotoUpload';\n\nimport vehicleSegments from '../../../utils/vehicleSegments.json';\nimport {\n  carBrands,\n  carModelsByBrand,\n  getYearOptions,\n  getTariffOptions,\n} from '../../../utils/driverData';\nimport { useDriverVehicles } from '../../../hooks/driver/useDriverVehicles';\nimport { VehicleFormData } from '../../../types/driver/DriverVehicle';\n\nconst DriverVehiclesScreen: React.FC<DriverScreenProps<'DriverVehicles'>> = ({ navigation }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const dynamicStyles = getDriverVehiclesScreenColors(isDark);\n  const currentColors = isDark ? colors.dark : colors.light;\n  \n  // Хук для работы с автомобилями из БД\n  const {\n    createVehicle,\n    validateVehicleForm,\n  } = useDriverVehicles();\n  \n  const [isEditing, setIsEditing] = useState(true); // Показываем форму сразу\n  \n  // Состояние формы автомобиля\n  const [vehicleForm, setVehicleForm] = useState<VehicleFormData>({\n    vehicleNumber: '',\n    tariff: '',\n    carBrand: '',\n    carModel: '',\n    carYear: '',\n    carMileage: '',\n    passportPhoto: '',\n  });\n  const [vehicleErrors, setVehicleErrors] = useState<any>({});\n  const [brandOptions, setBrandOptions] = useState(carBrands);\n  const [modelOptions, setModelOptions] = useState<{ label: string; value: string; tariff?: string }[]>([]);\n  const [vehiclePhoto, setVehiclePhoto] = useState<string | null>(null);\n  const [uploadingPhoto, setUploadingPhoto] = useState<'vehicle' | null>(null);\n\n  // Логика зависимостей между полями\n  useEffect(() => {\n    if (vehicleForm.tariff) {\n      setBrandOptions(vehicleSegments[vehicleForm.tariff]?.brands || carBrands);\n      setModelOptions([]);\n      setVehicleForm((prev) => ({ ...prev, carBrand: '', carModel: '' }));\n    }\n  }, [vehicleForm.tariff]);\n\n  const tariffOptions = getTariffOptions(t);\n  const yearOptions = getYearOptions();\n\n  const handleVehicleChange = (field: string, value: string) => {\n    setVehicleForm((prev) => ({ ...prev, [field]: value }));\n    setVehicleErrors((prev: any) => ({ ...prev, [field]: undefined }));\n  };\n\n  const handleBrandChange = (brand: string) => {\n    setVehicleForm((prev) => ({ ...prev, carBrand: brand, carModel: '' }));\n    setModelOptions(vehicleSegments[vehicleForm.tariff]?.models[brand] || []);\n  };\n\n  const handleModelChange = (model: string) => {\n    setVehicleForm((prev) => ({ ...prev, carModel: model }));\n    const selectedBrand = vehicleForm.carBrand;\n    const found = (carModelsByBrand[selectedBrand] || []).find((m) => m.value === model);\n    if (found?.tariff) {\n      setVehicleForm((prev) => ({ ...prev, tariff: found.tariff }));\n    }\n  };\n\n  const handleTariffChange = (tariff: string) => {\n    setVehicleForm((prev) => ({ ...prev, tariff }));\n  };\n\n  const handleYearChange = (option: { label: string; value: string | number }) => {\n    setVehicleForm((prev) => ({ ...prev, carYear: option.value.toString() }));\n    setVehicleErrors((prev: any) => ({ ...prev, carYear: undefined }));\n  };\n\n  const validateVehicle = () => {\n    const errors = validateVehicleForm(vehicleForm);\n    setVehicleErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSaveVehicle = async () => {\n    if (!validateVehicle()) return;\n    \n    try {\n      const result = await createVehicle(vehicleForm);\n      if (result) {\n        Alert.alert(\n          t('profile.vehicles.vehicleSaved'),\n          t('profile.vehicles.vehicleSaved'),\n          [{ text: 'OK', onPress: () => {\n            // Переходим на экран EditDriverProfile без накопления в стеке\n            navigation.goBack();\n          }}]\n        );\n      } else {\n        Alert.alert(\n          t('profile.vehicles.vehicleSaveError'),\n          t('profile.vehicles.createError')\n        );\n      }\n    } catch (err) {\n      Alert.alert(\n        t('profile.vehicles.vehicleSaveError'),\n        t('profile.vehicles.createError')\n      );\n    }\n  };\n\n\n\n  return (\n    <View style={[styles.container, dynamicStyles.container]}>\n      <View style={[styles.header, dynamicStyles.header]}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Ionicons name=\"arrow-back\" size={24} color={currentColors.primary} />\n        </TouchableOpacity>\n        <Text style={[styles.title, dynamicStyles.title]}>{t('profile.vehicles.title')}</Text>\n        <View style={styles.addButton} />\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        <View style={styles.headerSpacing} />\n        {isEditing ? (\n          <View style={styles.form}>\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, dynamicStyles.label]}>{t('profile.vehicles.vehicleNumber')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput \n                style={[styles.input, dynamicStyles.input]} \n                value={vehicleForm.vehicleNumber} \n                onChangeText={(v) => handleVehicleChange('vehicleNumber', v)} \n                placeholder={t('profile.vehicles.vehicleNumberPlaceholder')} \n                placeholderTextColor={currentColors.textSecondary}\n                autoCapitalize=\"characters\" \n              />\n              {vehicleErrors.vehicleNumber && <Text style={[styles.errorText, dynamicStyles.errorText]}>{vehicleErrors.vehicleNumber}</Text>}\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, dynamicStyles.label]}>{t('profile.vehicles.tariff')} <Text style={styles.requiredStar}>*</Text></Text>\n              <Select \n                value={vehicleForm.tariff} \n                onSelect={(option) => handleTariffChange(String(option.value))} \n                options={tariffOptions} \n                placeholder={t('profile.vehicles.tariffPlaceholder')} \n              />\n              {vehicleErrors.tariff && <Text style={[styles.errorText, dynamicStyles.errorText]}>{vehicleErrors.tariff}</Text>}\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, dynamicStyles.label]}>{t('profile.vehicles.carBrand')} <Text style={styles.requiredStar}>*</Text></Text>\n              <Select \n                value={vehicleForm.carBrand} \n                onSelect={(option) => handleBrandChange(String(option.value))} \n                options={brandOptions} \n                placeholder={t('profile.vehicles.carBrandPlaceholder')} \n                disabled={!vehicleForm.tariff} \n              />\n              {vehicleErrors.carBrand && <Text style={[styles.errorText, dynamicStyles.errorText]}>{vehicleErrors.carBrand}</Text>}\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, dynamicStyles.label]}>{t('profile.vehicles.carModel')} <Text style={styles.requiredStar}>*</Text></Text>\n              <Select \n                value={vehicleForm.carModel} \n                onSelect={(option) => handleModelChange(String(option.value))} \n                options={modelOptions} \n                placeholder={t('profile.vehicles.carModelPlaceholder')} \n                disabled={!vehicleForm.carBrand} \n              />\n              {vehicleErrors.carModel && <Text style={[styles.errorText, dynamicStyles.errorText]}>{vehicleErrors.carModel}</Text>}\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, dynamicStyles.label]}>{t('profile.vehicles.carYear')} <Text style={styles.requiredStar}>*</Text></Text>\n              <Select \n                value={vehicleForm.carYear} \n                onSelect={handleYearChange} \n                options={yearOptions} \n                placeholder={t('profile.vehicles.carYearPlaceholder')} \n              />\n              {vehicleErrors.carYear && <Text style={[styles.errorText, dynamicStyles.errorText]}>{vehicleErrors.carYear}</Text>}\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, dynamicStyles.label]}>{t('profile.vehicles.carMileage')} <Text style={styles.requiredStar}>*</Text></Text>\n              <TextInput \n                style={[styles.input, dynamicStyles.input]} \n                value={vehicleForm.carMileage} \n                onChangeText={(v) => handleVehicleChange('carMileage', v)} \n                placeholder={t('profile.vehicles.carMileagePlaceholder')} \n                placeholderTextColor={currentColors.textSecondary}\n                keyboardType=\"numeric\" \n              />\n              {vehicleErrors.carMileage && <Text style={[styles.errorText, dynamicStyles.errorText]}>{vehicleErrors.carMileage}</Text>}\n            </View>\n\n            <PhotoUpload\n              photo={vehiclePhoto}\n              onPhotoChange={(uri) => setVehiclePhoto(uri)}\n              onError={(err) => setVehicleErrors((prev: any) => ({ ...prev, vehiclePhoto: err }))}\n              type=\"vehicle\"\n              uploading={uploadingPhoto === 'vehicle'}\n              onUploadingChange={(flag) => setUploadingPhoto(flag ? 'vehicle' : null)}\n            />\n            \n            <TouchableOpacity \n              style={[styles.saveButton, dynamicStyles.saveButton]} \n              onPress={handleSaveVehicle}\n            >\n              <Text style={[styles.saveButtonText, dynamicStyles.saveButtonText]}>\n                {t('profile.vehicles.saveVehicle')}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        ) : null}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default DriverVehiclesScreen;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/profile/driver/EditDriverProfileScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TextInput' is defined but never used.","line":3,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Image' is defined but never used.","line":3,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":75},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDefaultDate' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasChanges' is defined but never used.","line":15,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DatePicker' is defined but never used.","line":16,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logout' is assigned a value but never used.","line":30,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentColors' is assigned a value but never used.","line":33,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":22},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'checkHasChanges' function makes the dependencies of useCallback Hook (at line 218) change on every render. To fix this, wrap the definition of 'checkHasChanges' in its own useCallback() Hook.","line":91,"column":9,"nodeType":"VariableDeclarator","endLine":96,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'checkHasChanges' in its own useCallback() Hook.","fix":{"range":[3727,4002],"text":"useCallback(() => {\n    return formData.firstName !== originalDataRef.current.firstName ||\n           formData.lastName !== originalDataRef.current.lastName ||\n           formData.phone !== originalDataRef.current.phone ||\n           formData.email !== originalDataRef.current.email;\n  })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'checkHasChanges' function makes the dependencies of useCallback Hook (at line 254) change on every render. To fix this, wrap the definition of 'checkHasChanges' in its own useCallback() Hook.","line":91,"column":9,"nodeType":"VariableDeclarator","endLine":96,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'checkHasChanges' in its own useCallback() Hook.","fix":{"range":[3727,4002],"text":"useCallback(() => {\n    return formData.firstName !== originalDataRef.current.firstName ||\n           formData.lastName !== originalDataRef.current.lastName ||\n           formData.phone !== originalDataRef.current.phone ||\n           formData.email !== originalDataRef.current.email;\n  })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'saveProfile' function makes the dependencies of useCallback Hook (at line 218) change on every render. To fix this, wrap the definition of 'saveProfile' in its own useCallback() Hook.","line":128,"column":9,"nodeType":"VariableDeclarator","endLine":188,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'saveProfile' in its own useCallback() Hook.","fix":{"range":[4776,6825],"text":"useCallback(async (): Promise<boolean> => {\n    try {\n      // Проверяем, есть ли изменения в форме\n      const hasFormChanges = formData.firstName !== originalDataRef.current.firstName ||\n                            formData.lastName !== originalDataRef.current.lastName ||\n                            formData.phone !== originalDataRef.current.phone ||\n                            formData.email !== originalDataRef.current.email;\n\n      if (hasFormChanges) {\n        // Валидируем поля перед сохранением\n        const validation = validatePersonalInfo();\n        if (!validation.isValid) {\n          Alert.alert(\n            t('profile.validation.title'),\n            validation.errors.join('\\n'),\n            [{ text: t('common.ok'), style: 'default' }]\n          );\n          return false;\n        }\n\n        // Сохраняем изменения в форме\n        const updateData: any = {};\n        \n        if (hasFormChanges) {\n          updateData.name = formData.firstName.trim();\n          updateData.surname = formData.lastName.trim();\n          updateData.phone = formData.phone.trim();\n          updateData.email = formData.email.trim();\n        }\n\n        const success = await updateProfile(updateData);\n\n        if (success) {\n          Alert.alert(\n            t('profile.profileUpdateSuccess.title'),\n            t('profile.profileUpdateSuccess.message')\n          );\n          setIsEditingPersonalInfo(false);\n          // Обновляем исходные данные\n          originalDataRef.current = { ...formData };\n          return true;\n        } else {\n          Alert.alert(\n            t('profile.profileUpdateError.title'),\n            t('profile.profileUpdateError.message')\n          );\n          return false;\n        }\n      } else {\n        // Если изменений нет, просто закрываем режим редактирования\n        setIsEditingPersonalInfo(false);\n        return true;\n      }\n    } catch (error) {\n      Alert.alert(\n        t('profile.profileUpdateGeneralError.title'),\n        t('profile.profileUpdateGeneralError.message')\n      );\n      return false;\n    }\n  })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'saveProfile' function makes the dependencies of useCallback Hook (at line 254) change on every render. To fix this, wrap the definition of 'saveProfile' in its own useCallback() Hook.","line":128,"column":9,"nodeType":"VariableDeclarator","endLine":188,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'saveProfile' in its own useCallback() Hook.","fix":{"range":[4776,6825],"text":"useCallback(async (): Promise<boolean> => {\n    try {\n      // Проверяем, есть ли изменения в форме\n      const hasFormChanges = formData.firstName !== originalDataRef.current.firstName ||\n                            formData.lastName !== originalDataRef.current.lastName ||\n                            formData.phone !== originalDataRef.current.phone ||\n                            formData.email !== originalDataRef.current.email;\n\n      if (hasFormChanges) {\n        // Валидируем поля перед сохранением\n        const validation = validatePersonalInfo();\n        if (!validation.isValid) {\n          Alert.alert(\n            t('profile.validation.title'),\n            validation.errors.join('\\n'),\n            [{ text: t('common.ok'), style: 'default' }]\n          );\n          return false;\n        }\n\n        // Сохраняем изменения в форме\n        const updateData: any = {};\n        \n        if (hasFormChanges) {\n          updateData.name = formData.firstName.trim();\n          updateData.surname = formData.lastName.trim();\n          updateData.phone = formData.phone.trim();\n          updateData.email = formData.email.trim();\n        }\n\n        const success = await updateProfile(updateData);\n\n        if (success) {\n          Alert.alert(\n            t('profile.profileUpdateSuccess.title'),\n            t('profile.profileUpdateSuccess.message')\n          );\n          setIsEditingPersonalInfo(false);\n          // Обновляем исходные данные\n          originalDataRef.current = { ...formData };\n          return true;\n        } else {\n          Alert.alert(\n            t('profile.profileUpdateError.title'),\n            t('profile.profileUpdateError.message')\n          );\n          return false;\n        }\n      } else {\n        // Если изменений нет, просто закрываем режим редактирования\n        setIsEditingPersonalInfo(false);\n        return true;\n      }\n    } catch (error) {\n      Alert.alert(\n        t('profile.profileUpdateGeneralError.title'),\n        t('profile.profileUpdateGeneralError.message')\n      );\n      return false;\n    }\n  })"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5635,5638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5635,5638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7869,7872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7869,7872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadProfile', 'loadVehicles', and 'loadVerificationStatus'. Either include them or remove the dependency array.","line":276,"column":6,"nodeType":"ArrayExpression","endLine":276,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfile, loadVehicles, loadVerificationStatus]","fix":{"range":[9424,9426],"text":"[loadProfile, loadVehicles, loadVerificationStatus]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'vehicles.length'. Either include it or remove the dependency array.","line":283,"column":8,"nodeType":"ArrayExpression","endLine":283,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [loadVehicles, vehicles.length]","fix":{"range":[9722,9736],"text":"[loadVehicles, vehicles.length]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'closeOpenSwipe' is assigned a value but never used.","line":287,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":287,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":317,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10578,10581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10578,10581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":317,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10590,10593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10590,10593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'profile' and 'updateProfile'. Either include them or remove the dependency array.","line":380,"column":6,"nodeType":"ArrayExpression","endLine":380,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [formData.birthDate, profile, updateProfile]","fix":{"range":[12652,12672],"text":"[formData.birthDate, profile, updateProfile]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { usePackage } from '../../../context/PackageContext';\nimport { View, Text, TouchableOpacity, ScrollView, TextInput, Alert, Image, Animated } from 'react-native';\nimport { Swipeable } from 'react-native-gesture-handler';\nimport type { Swipeable as RNSwipeable } from 'react-native-gesture-handler';\nimport { useTheme } from '../../../context/ThemeContext';\nimport { EditDriverProfileScreenStyles as styles, getEditDriverProfileScreenColors } from '../../../styles/screens/profile/driver/EditDriverProfileScreen.styles';\nimport { Ionicons } from '@expo/vector-icons';\nimport { DriverScreenProps } from '../../../types/driver/DriverNavigation';\n// mockUsers removed - using hardcoded data\nimport { useAuth } from '../../../context/AuthContext';\nimport { useNavigation, useFocusEffect } from '@react-navigation/native';\nimport { useDriverProfile as useProfile } from '../../../hooks/driver/DriverUseProfile';\nimport { useVerification } from '../../../hooks/useVerification';\nimport { getDefaultDate, hasChanges, handleDriverCirclePress } from '../../../utils/profileHelpers';\nimport DatePicker from '../../../components/DatePicker';\nimport PersonalInfoSection from '../../../components/driver/DriverPersonalInfoSection';\nimport ProfileAvatarSection from '../../../components/driver/DriverProfileAvatarSection';\nimport VipSection from '../../../components/driver/DriverVipSection';\nimport ProfileHeader from '../../../components/driver/DriverProfileHeader';\nimport VehicleIdCard from '../../../components/driver/VehicleIdCard';\nimport { useI18n } from '../../../hooks/useI18n';\nimport { useDriverVehicles } from '../../../hooks/driver/useDriverVehicles';\n\nconst ACTION_WIDTH = 100; // Keep in sync with styles.swipeAction.width\n\nconst EditDriverProfileScreen: React.FC<DriverScreenProps<'EditDriverProfile'>> = ({ navigation }) => {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const { logout, login, changeRole } = useAuth();\n  const rootNavigation = useNavigation();\n  const dynamicStyles = getEditDriverProfileScreenColors(isDark);\n  const currentColors = isDark ? { primary: '#3B82F6' } : { primary: '#083198' };\n  \n  const { profile, updateProfile, loadProfile } = useProfile();\n  const { currentPackage } = usePackage();\n  const user = profile || {\n    id: '1',\n    name: 'John',\n    surname: 'Doe',\n    phone: '+1234567890',\n    email: 'john@example.com',\n    birthDate: '1990-01-01',\n    rating: 5,\n    address: '123 Main St',\n    createdAt: '2023-01-01',\n    avatar: null\n  };\n  \n  // Хук для работы с автомобилями\n  const { vehicles, loadVehicles, deleteVehicle } = useDriverVehicles();\n  \n  // Keep refs to swipeable rows to close them programmatically\n  const swipeRefs = useRef<Record<string, RNSwipeable | null>>({});\n  const openSwipeRef = useRef<RNSwipeable | null>(null);\n  \n\n  \n  // Состояние формы\n  const [formData, setFormData] = useState({\n    firstName: user.name,\n    lastName: user.surname,\n    phone: user.phone,\n    email: user.email,\n    birthDate: user.birthDate || '1990-01-01',\n  });\n\n  // Исходные данные для сравнения\n  const originalDataRef = useRef({\n    firstName: user.name,\n    lastName: user.surname,\n    phone: user.phone,\n    email: user.email,\n    birthDate: user.birthDate || '1990-01-01',\n  });\n\n  const [isEditingPersonalInfo, setIsEditingPersonalInfo] = useState(false);\n  const rotateAnim = useRef(new Animated.Value(0)).current;\n\n  // Хуки для верификации\n  const {\n    verificationStatus,\n    isVerifying,\n    loadVerificationStatus,\n    resetVerificationStatus,\n    verifyEmail,\n    verifyPhone,\n  } = useVerification();\n\n  // Функция для проверки изменений\n  const checkHasChanges = () => {\n    return formData.firstName !== originalDataRef.current.firstName ||\n           formData.lastName !== originalDataRef.current.lastName ||\n           formData.phone !== originalDataRef.current.phone ||\n           formData.email !== originalDataRef.current.email;\n  };\n\n\n\n  // Функция валидации полей личной информации\n  const validatePersonalInfo = (): { isValid: boolean; errors: string[] } => {\n    const errors: string[] = [];\n    \n    if (!formData.firstName.trim()) {\n      errors.push(t('profile.validation.firstNameRequired'));\n    }\n    \n    if (!formData.lastName.trim()) {\n      errors.push(t('profile.validation.lastNameRequired'));\n    }\n    \n    // Телефон не обязателен\n    // if (!formData.phone.trim()) {\n    //   errors.push(t('profile.validation.phoneRequired'));\n    // }\n    \n    if (!formData.email.trim()) {\n      errors.push(t('profile.validation.emailRequired'));\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  };\n\n  // Асинхронная функция сохранения профиля\n  const saveProfile = async (): Promise<boolean> => {\n    try {\n      // Проверяем, есть ли изменения в форме\n      const hasFormChanges = formData.firstName !== originalDataRef.current.firstName ||\n                            formData.lastName !== originalDataRef.current.lastName ||\n                            formData.phone !== originalDataRef.current.phone ||\n                            formData.email !== originalDataRef.current.email;\n\n      if (hasFormChanges) {\n        // Валидируем поля перед сохранением\n        const validation = validatePersonalInfo();\n        if (!validation.isValid) {\n          Alert.alert(\n            t('profile.validation.title'),\n            validation.errors.join('\\n'),\n            [{ text: t('common.ok'), style: 'default' }]\n          );\n          return false;\n        }\n\n        // Сохраняем изменения в форме\n        const updateData: any = {};\n        \n        if (hasFormChanges) {\n          updateData.name = formData.firstName.trim();\n          updateData.surname = formData.lastName.trim();\n          updateData.phone = formData.phone.trim();\n          updateData.email = formData.email.trim();\n        }\n\n        const success = await updateProfile(updateData);\n\n        if (success) {\n          Alert.alert(\n            t('profile.profileUpdateSuccess.title'),\n            t('profile.profileUpdateSuccess.message')\n          );\n          setIsEditingPersonalInfo(false);\n          // Обновляем исходные данные\n          originalDataRef.current = { ...formData };\n          return true;\n        } else {\n          Alert.alert(\n            t('profile.profileUpdateError.title'),\n            t('profile.profileUpdateError.message')\n          );\n          return false;\n        }\n      } else {\n        // Если изменений нет, просто закрываем режим редактирования\n        setIsEditingPersonalInfo(false);\n        return true;\n      }\n    } catch (error) {\n      Alert.alert(\n        t('profile.profileUpdateGeneralError.title'),\n        t('profile.profileUpdateGeneralError.message')\n      );\n      return false;\n    }\n  };\n\n  // Обработчик для перехвата swipe-back жеста\n  const handleBackPress = useCallback(() => {\n    const hasPersonalChanges = isEditingPersonalInfo && checkHasChanges();\n    \n    if (hasPersonalChanges) {\n      Alert.alert(\n        t('profile.saveChangesConfirm.title'),\n        t('profile.saveChangesConfirm.message'),\n        [\n          { \n            text: t('profile.saveChangesConfirm.cancel'), \n            style: 'cancel',\n            onPress: () => navigation.goBack()\n          },\n          { \n            text: t('profile.saveChangesConfirm.save'), \n            onPress: async () => {\n              const success = await saveProfile();\n              if (success) {\n                navigation.goBack();\n              }\n            }\n          }\n        ]\n      );\n    } else {\n      navigation.goBack();\n    }\n  }, [isEditingPersonalInfo, checkHasChanges, saveProfile, navigation, t]);\n\n  // Перехватываем swipe-back жест\n  useFocusEffect(\n    useCallback(() => {\n      const unsubscribe = navigation.addListener('beforeRemove', (e: any) => {\n        const hasPersonalChanges = isEditingPersonalInfo && checkHasChanges();\n        \n        if (hasPersonalChanges) {\n          // Предотвращаем переход назад\n          e.preventDefault();\n          \n          Alert.alert(\n            t('profile.saveChangesConfirm.title'),\n            t('profile.saveChangesConfirm.message'),\n            [\n              { \n                text: t('profile.saveChangesConfirm.cancel'), \n                style: 'cancel',\n                onPress: () => navigation.dispatch(e.data.action)\n              },\n              { \n                text: t('profile.saveChangesConfirm.save'), \n                onPress: async () => {\n                  const success = await saveProfile();\n                  if (success) {\n                    navigation.dispatch(e.data.action);\n                  }\n                }\n              }\n            ]\n          );\n        }\n      });\n\n      return unsubscribe;\n    }, [navigation, isEditingPersonalInfo, checkHasChanges, saveProfile, t])\n  );\n\n  const handleCirclePressAction = () => {\n    // Анимация вращения\n    Animated.timing(rotateAnim, {\n      toValue: 1,\n      duration: 500,\n      useNativeDriver: true,\n    }).start(() => {\n      rotateAnim.setValue(0);\n      \n      // После завершения анимации вызываем функцию из утилит\n      handleDriverCirclePress(rootNavigation, login, t, changeRole);\n    });\n  };\n\n  // Загружаем данные только один раз при монтировании компонента\n  useEffect(() => {\n    loadProfile();\n    loadVerificationStatus();\n    loadVehicles();\n  }, []); // Пустой массив зависимостей - выполняется только один раз\n\n  // Обновляем данные при фокусе экрана\n  useFocusEffect(\n    useCallback(() => {\n      loadVehicles(); // Перезагружаем автомобили при каждом фокусе\n      console.log('EditDriverProfile: vehicles loaded:', vehicles.length);\n    }, [loadVehicles])\n  );\n\n  // Функция для закрытия открытого свайпа\n  const closeOpenSwipe = () => {\n    if (openSwipeRef.current) {\n      try {\n        openSwipeRef.current.close();\n      } catch (error) {\n        console.error('Error closing swipe:', error);\n      }\n      openSwipeRef.current = null;\n    }\n  };\n\n  // Функция удаления автомобиля\n  const handleDeleteVehicle = (vehicleId: string) => {\n    Alert.alert(\n      t('profile.vehicles.deleteVehicle'),\n      t('profile.vehicles.deleteVehicleConfirm'),\n      [\n        { text: t('common.cancel'), style: 'cancel' },\n        {\n          text: t('components.modal.delete'),\n          style: 'destructive',\n          onPress: () => {\n            deleteVehicle(vehicleId);\n          }\n        }\n      ]\n    );\n  };\n\n  // Рендер правых действий (кнопка удаления)\n  const renderRightActions = (progress: any, dragX: any, vehicleId: string) => {\n    const scale = dragX.interpolate({\n      inputRange: [-ACTION_WIDTH, 0],\n      outputRange: [1, 0],\n      extrapolate: 'clamp',\n    });\n    const opacity = dragX.interpolate({\n      inputRange: [-ACTION_WIDTH, -ACTION_WIDTH * 0.6, 0],\n      outputRange: [1, 0.6, 0],\n      extrapolate: 'clamp',\n    });\n\n    return (\n      <View style={[styles.swipeActionsRight]}>\n        <Animated.View style={{ transform: [{ scale }], opacity }}>\n          <TouchableOpacity\n            style={[styles.swipeAction, styles.deleteAction, styles.swipeActionInnerRight]}\n            onPress={() => {\n              handleDeleteVehicle(vehicleId);\n              swipeRefs.current[vehicleId]?.close();\n            }}\n            accessibilityRole=\"button\"\n            accessibilityLabel=\"delete\"\n            hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}\n            activeOpacity={0.85}\n          >\n            <Ionicons name=\"trash\" size={28} color=\"#fff\" />\n          </TouchableOpacity>\n        </Animated.View>\n      </View>\n    );\n  };\n\n  // Обновляем форму при изменении профиля\n  useEffect(() => {\n    if (profile) {\n      setFormData({\n        firstName: profile.name,\n        lastName: profile.surname,\n        phone: profile.phone,\n        email: profile.email,\n        birthDate: profile.birthDate || '1990-01-01',\n      });\n      \n      // Обновляем исходные данные\n      originalDataRef.current = {\n        firstName: profile.name,\n        lastName: profile.surname,\n        phone: profile.phone,\n        email: profile.email,\n        birthDate: profile.birthDate || '1990-01-01',\n      };\n    }\n  }, [profile]);\n\n  // Убираем автоматическое сохранение фото - теперь фото сохраняется только при явном сохранении\n\n  // Автоматически сохраняем дату при её изменении\n  useEffect(() => {\n    if (profile && formData.birthDate !== profile.birthDate && formData.birthDate !== originalDataRef.current.birthDate) {\n      // Сохраняем только дату, не трогая остальные данные\n      updateProfile({ birthDate: formData.birthDate });\n    }\n  }, [formData.birthDate]);\n\n\n\n  return (\n    <View style={[styles.container, dynamicStyles.container]}>\n      <ProfileHeader\n        onBackPress={handleBackPress}\n                  onEditPress={() => {\n           if (isEditingPersonalInfo) {\n             // Если в режиме редактирования, проверяем изменения\n             const hasChanges = checkHasChanges();\n             \n             if (hasChanges) {\n              // Если есть изменения, показываем подтверждение\n              Alert.alert(\n                t('profile.saveProfileConfirm.title'),\n                t('profile.saveProfileConfirm.message'),\n                [\n                  { \n                    text: t('profile.saveProfileConfirm.cancel'), \n                    style: 'cancel' \n                  },\n                  { \n                    text: t('profile.saveProfileConfirm.save'), \n                    onPress: async () => {\n                      const success = await saveProfile();\n                      if (success) {\n                        setIsEditingPersonalInfo(false);\n                      }\n                    }\n                  }\n                ]\n              );\n            } else {\n              // Если изменений нет, просто выключаем режим редактирования без подтверждения\n              setIsEditingPersonalInfo(false);\n            }\n          } else {\n            // Если в режиме просмотра, включаем редактирование\n            setIsEditingPersonalInfo(true);\n          }\n        }}\n        isEditing={isEditingPersonalInfo}\n      />\n      \n      <ScrollView style={styles.content} contentContainerStyle={styles.contentContainer}>\n        <ProfileAvatarSection\n          key={`avatar-${currentPackage}`}\n          userName={user.name}\n          userSurname={user.surname}\n          onCirclePress={handleCirclePressAction}\n          rotateAnim={rotateAnim}\n        />\n\n        <PersonalInfoSection\n          formData={formData}\n          setFormData={setFormData}\n          isEditing={isEditingPersonalInfo}\n          verificationStatus={verificationStatus}\n          isVerifying={isVerifying}\n          onVerifyEmail={verifyEmail}\n          onVerifyPhone={verifyPhone}\n          onResetVerification={resetVerificationStatus}\n        />\n\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, dynamicStyles.sectionTitle]}>\n            {t('profile.vehicles.title')} ({vehicles.length})\n          </Text>\n          \n          {/* Карточки автомобилей */}\n          {vehicles.map((vehicle) => (\n            <Swipeable\n              key={vehicle.id}\n              ref={(ref) => { swipeRefs.current[vehicle.id] = ref as RNSwipeable | null; }}\n              renderRightActions={(progress, dragX) => renderRightActions(progress, dragX, vehicle.id)}\n              rightThreshold={60}\n              friction={2}\n              overshootRight={false}\n              onSwipeableWillOpen={() => {\n                if (openSwipeRef.current && openSwipeRef.current !== swipeRefs.current[vehicle.id]) {\n                  try { openSwipeRef.current.close(); } catch (error) {\n                    console.error('Error closing previous swipe:', error);\n                  }\n                }\n                openSwipeRef.current = swipeRefs.current[vehicle.id] ?? null;\n              }}\n              onSwipeableClose={() => {\n                if (openSwipeRef.current === swipeRefs.current[vehicle.id]) {\n                  openSwipeRef.current = null;\n                }\n              }}\n            >\n              <VehicleIdCard\n                vehicleNumber={vehicle.vehicleNumber}\n                brand={vehicle.carBrand}\n                model={vehicle.carModel}\n                year={vehicle.carYear}\n                mileage={vehicle.carMileage}\n                isVerified={vehicle.isVerified}\n              />\n            </Swipeable>\n          ))}\n          \n                            {vehicles.length < 2 && (\n                    <TouchableOpacity \n                      style={[styles.addVehicleButton, dynamicStyles.addVehicleButton]}\n                      onPress={() => navigation.navigate('DriverVehicles')}\n                    >\n                      <Ionicons name=\"add\" size={24} color=\"#fff\" />\n                    </TouchableOpacity>\n                  )}\n        </View>\n\n        <VipSection \n          onVipPress={() => navigation.navigate('PremiumPackages')}\n        />\n\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default EditDriverProfileScreen;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/screens/test/APITestScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ScrollView' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":20,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  StyleSheet,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useI18n } from '../../hooks/useI18n';\nimport { testAPIConnection, testAPIEndpoint, runFullAPITest, APITestResult } from '../../utils/apiTest';\nimport { ENV_CONFIG } from '../../config/environment';\n\nexport default function APITestScreen() {\n  const { isDark } = useTheme();\n  const { t } = useI18n();\n  const [loading, setLoading] = useState(false);\n  const [results, setResults] = useState<APITestResult[]>([]);\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: isDark ? '#1a1a1a' : '#f5f5f5',\n    },\n    content: {\n      flex: 1,\n      padding: 16,\n    },\n    header: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 20,\n    },\n    title: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: isDark ? '#ffffff' : '#000000',\n      marginLeft: 12,\n    },\n    configBox: {\n      backgroundColor: isDark ? '#2a2a2a' : '#ffffff',\n      padding: 16,\n      borderRadius: 12,\n      marginBottom: 20,\n      borderWidth: 1,\n      borderColor: isDark ? '#333333' : '#e0e0e0',\n    },\n    configTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: isDark ? '#ffffff' : '#000000',\n      marginBottom: 8,\n    },\n    configText: {\n      fontSize: 14,\n      color: isDark ? '#cccccc' : '#666666',\n      marginBottom: 4,\n    },\n    button: {\n      backgroundColor: '#007AFF',\n      padding: 16,\n      borderRadius: 12,\n      marginBottom: 12,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    buttonText: {\n      color: '#ffffff',\n      fontSize: 16,\n      fontWeight: '600',\n      marginLeft: 8,\n    },\n    resultsContainer: {\n      marginTop: 20,\n    },\n    resultItem: {\n      backgroundColor: isDark ? '#2a2a2a' : '#ffffff',\n      padding: 16,\n      borderRadius: 12,\n      marginBottom: 12,\n      borderWidth: 1,\n      borderColor: isDark ? '#333333' : '#e0e0e0',\n    },\n    resultTitle: {\n      fontSize: 16,\n      fontWeight: '600',\n      marginBottom: 8,\n    },\n    resultText: {\n      fontSize: 14,\n      marginBottom: 4,\n    },\n    loadingContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: 20,\n    },\n    loadingText: {\n      marginLeft: 8,\n      fontSize: 16,\n      color: isDark ? '#ffffff' : '#000000',\n    },\n  });\n\n  const handleTestConnection = async () => {\n    setLoading(true);\n    try {\n      const result = await testAPIConnection();\n      setResults([result]);\n    } catch (error) {\n      Alert.alert('Ошибка', 'Не удалось выполнить тест подключения');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTestEndpoints = async () => {\n    setLoading(true);\n    try {\n      const endpoints = [\n        '/health',\n        '/api/health',\n        '/api/auth/health',\n      ];\n      \n      const testResults: APITestResult[] = [];\n      for (const endpoint of endpoints) {\n        const result = await testAPIEndpoint(endpoint);\n        testResults.push(result);\n      }\n      \n      setResults(testResults);\n    } catch (error) {\n      Alert.alert('Ошибка', 'Не удалось выполнить тест эндпоинтов');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFullTest = async () => {\n    setLoading(true);\n    try {\n      const testResults = await runFullAPITest();\n      setResults(testResults);\n    } catch (error) {\n      Alert.alert('Ошибка', 'Не удалось выполнить полный тест');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getResultIcon = (success: boolean) => {\n    return success ? (\n      <Ionicons name=\"checkmark-circle\" size={20} color=\"#4CAF50\" />\n    ) : (\n      <Ionicons name=\"close-circle\" size={20} color=\"#F44336\" />\n    );\n  };\n\n  const getResultTextColor = (success: boolean) => {\n    return success ? '#4CAF50' : '#F44336';\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.content}>\n        <View style={styles.header}>\n          <Ionicons name=\"server-outline\" size={32} color=\"#007AFF\" />\n          <Text style={styles.title}>API Тест</Text>\n        </View>\n\n        <View style={styles.configBox}>\n          <Text style={styles.configTitle}>Конфигурация</Text>\n          <Text style={styles.configText}>URL: {ENV_CONFIG.API.BASE_URL}</Text>\n          <Text style={styles.configText}>Таймаут: {ENV_CONFIG.API.TIMEOUT}ms</Text>\n          <Text style={styles.configText}>Режим: {__DEV__ ? 'Development' : 'Production'}</Text>\n        </View>\n\n        <TouchableOpacity style={styles.button} onPress={handleTestConnection} disabled={loading}>\n          <Ionicons name=\"wifi-outline\" size={20} color=\"#ffffff\" />\n          <Text style={styles.buttonText}>Тест подключения</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity style={styles.button} onPress={handleTestEndpoints} disabled={loading}>\n          <Ionicons name=\"list-outline\" size={20} color=\"#ffffff\" />\n          <Text style={styles.buttonText}>Тест эндпоинтов</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity style={styles.button} onPress={handleFullTest} disabled={loading}>\n          <Ionicons name=\"play-outline\" size={20} color=\"#ffffff\" />\n          <Text style={styles.buttonText}>Полный тест</Text>\n        </TouchableOpacity>\n\n        {loading && (\n          <View style={styles.loadingContainer}>\n            <ActivityIndicator size=\"small\" color=\"#007AFF\" />\n            <Text style={styles.loadingText}>Тестирование...</Text>\n          </View>\n        )}\n\n        {results.length > 0 && (\n          <View style={styles.resultsContainer}>\n            <Text style={[styles.configTitle, { marginBottom: 12 }]}>Результаты</Text>\n            {results.map((result, index) => (\n              <View key={index} style={styles.resultItem}>\n                <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 8 }}>\n                  {getResultIcon(result.success)}\n                  <Text style={[styles.resultTitle, { color: getResultTextColor(result.success), marginLeft: 8 }]}>\n                    {result.message}\n                  </Text>\n                </View>\n                {result.responseTime && (\n                  <Text style={[styles.resultText, { color: isDark ? '#cccccc' : '#666666' }]}>\n                    Время ответа: {result.responseTime}ms\n                  </Text>\n                )}\n                {result.error && (\n                  <Text style={[styles.resultText, { color: '#F44336' }]}>\n                    Ошибка: {result.error}\n                  </Text>\n                )}\n              </View>\n            ))}\n          </View>\n        )}\n      </View>\n    </SafeAreaView>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/APIClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/AuthService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ENV_CONFIG' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ConfigUtils' is defined but never used.","line":3,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authMethod' is defined but never used.","line":81,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":74}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import JWTService, { TokenResponse } from './JWTService';\nimport { User, UserRole } from '../types/user';\nimport { ENV_CONFIG, ConfigUtils } from '../config/environment';\nimport APIClient from './APIClient';\n\nexport interface AuthResponse {\n  success: boolean;\n  user?: User;\n  tokens?: {\n    accessToken: string;\n    refreshToken: string;\n    expiresIn: number;\n    tokenType: string;\n  };\n  message?: string;\n}\n\n// Интерфейсы для совместимости с Go API\ninterface GoUserInfo {\n  id: number;\n  email: string;\n  phone_number: string;\n  first_name: string;\n  last_name: string;\n  status: string;\n}\n\ninterface GoTokenResponse {\n  access_token: string;\n  refresh_token: string;\n  token_type: string;\n  expires_in: number;\n  expires_at: string;\n  user_info: GoUserInfo;\n}\n\ninterface GoLoginRequest {\n  email: string;\n  password: string;\n  [key: string]: unknown;\n}\n\ninterface GoRegisterRequest {\n  email: string;\n  password: string;\n  phone_number: string;\n  first_name: string;\n  last_name: string;\n  [key: string]: unknown;\n}\n\n// Преобразование Go API ответа в формат фронтенда\nconst transformGoUserToFrontend = (goUser: GoUserInfo): User => {\n  return {\n    id: goUser.id.toString(),\n    email: goUser.email,\n    name: goUser.first_name,\n    surname: goUser.last_name,\n    phone: goUser.phone_number,\n    role: UserRole.CLIENT, // По умолчанию клиент, для водителей нужно отдельное API\n    avatar: null,\n    rating: 0,\n    createdAt: new Date().toISOString(),\n    address: '',\n  };\n};\n\nconst transformGoTokensToFrontend = (goTokens: GoTokenResponse): TokenResponse => {\n  return {\n    accessToken: goTokens.access_token,\n    refreshToken: goTokens.refresh_token,\n    expiresIn: goTokens.expires_in,\n    tokenType: 'Bearer' as const,\n  };\n};\n\nexport class AuthService {\n  /**\n   * Вход в систему\n   */\n  static async login(email: string, password: string, authMethod?: string): Promise<AuthResponse> {\n    try {\n      const requestBody: GoLoginRequest = {\n        email,\n        password,\n      };\n\n      const response = await APIClient.post<GoTokenResponse>('/auth/client/login', requestBody);\n      \n      if (!response.success || !response.data) {\n        throw new Error(response.error || 'Login failed');\n      }\n      \n      // Преобразуем данные в формат фронтенда\n      const user = transformGoUserToFrontend(response.data.user_info);\n      const tokens = transformGoTokensToFrontend(response.data);\n\n      return {\n        success: true,\n        user,\n        tokens,\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Login failed',\n      };\n    }\n  }\n\n  /**\n   * Регистрация пользователя\n   */\n  static async register(userData: {\n    name: string;\n    surname: string;\n    email: string;\n    phone: string;\n    country: string;\n    role: UserRole;\n    children?: Array<{ name: string; age: number; relationship: string }>;\n  }, password: string): Promise<AuthResponse> {\n    try {\n      const requestBody: GoRegisterRequest = {\n        email: userData.email,\n        password,\n        phone_number: userData.phone,\n        first_name: userData.name,\n        last_name: userData.surname,\n      };\n\n      const response = await APIClient.post<GoTokenResponse>('/auth/client/register', requestBody);\n      \n      if (!response.success || !response.data) {\n        throw new Error(response.error || 'Registration failed');\n      }\n      \n      // Преобразуем данные в формат фронтенда\n      const user = transformGoUserToFrontend(response.data.user_info);\n      const tokens = transformGoTokensToFrontend(response.data);\n\n      return {\n        success: true,\n        user,\n        tokens,\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Registration failed',\n      };\n    }\n  }\n\n  /**\n   * Выход из системы\n   */\n  static async logout(): Promise<AuthResponse> {\n    try {\n      // Получаем refresh token\n      const refreshToken = await JWTService.getRefreshToken();\n      \n      if (refreshToken) {\n        try {\n          await APIClient.post('/auth/client/logout', { refresh_token: refreshToken });\n        } catch (error) {\n          console.warn('Server logout failed, but continuing with local cleanup');\n        }\n      }\n\n      // Очищаем токены локально\n      await JWTService.clearTokens();\n      \n      return {\n        success: true,\n        message: 'Logged out successfully',\n      };\n    } catch (error) {\n      console.error('Logout error:', error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Logout failed',\n      };\n    }\n  }\n\n  /**\n   * Обновление токена\n   */\n  static async refreshToken(): Promise<AuthResponse> {\n    try {\n      const refreshToken = await JWTService.getRefreshToken();\n      \n      if (!refreshToken) {\n        return {\n          success: false,\n          message: 'No refresh token available',\n        };\n      }\n\n      const response = await APIClient.post<GoTokenResponse>('/auth/client/refresh', { refresh_token: refreshToken });\n      \n      if (!response.success || !response.data) {\n        throw new Error(response.error || 'Token refresh failed');\n      }\n      \n      // Преобразуем данные в формат фронтенда\n      const user = transformGoUserToFrontend(response.data.user_info);\n      const tokens = transformGoTokensToFrontend(response.data);\n\n      return {\n        success: true,\n        message: 'Token refreshed successfully',\n        user,\n        tokens,\n      };\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Token refresh failed',\n      };\n    }\n  }\n\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/AvatarService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1095,1098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1095,1098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1230,1233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1230,1233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'uri' is defined but never used.","line":189,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":189,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'quality' is assigned a value but never used.","line":200,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":200,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import APIClient from './APIClient';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport interface AvatarData {\n  id: string;\n  userId: string;\n  url: string;\n  thumbnailUrl?: string;\n  timestamp: number;\n  size: number;\n  type: string;\n  isDefault: boolean;\n}\n\nexport interface UploadAvatarResponse {\n  success: boolean;\n  avatar?: AvatarData;\n  error?: string;\n}\n\nexport class AvatarService {\n  /**\n   * Получает аватар пользователя\n   */\n  static async getAvatar(userId: string): Promise<AvatarData | null> {\n    try {\n      const response = await APIClient.get<AvatarData>(`/avatars/user/${userId}`);\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Error getting avatar:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Загружает новый аватар\n   */\n  static async uploadAvatar(userId: string, imageUri: string): Promise<UploadAvatarResponse> {\n    try {\n      const formData = new FormData();\n      formData.append('avatar', {\n        uri: imageUri,\n        type: 'image/jpeg',\n        name: 'avatar.jpg',\n      } as any);\n      formData.append('userId', userId);\n\n      const response = await APIClient.post<AvatarData>('/avatars/upload', formData as any);\n      \n      if (response.success && response.data) {\n        return {\n          success: true,\n          avatar: response.data\n        };\n      }\n      \n      return {\n        success: false,\n        error: response.error || 'Ошибка при загрузке аватара'\n      };\n    } catch (error) {\n      console.error('Error uploading avatar:', error);\n      return {\n        success: false,\n        error: 'Ошибка при загрузке аватара'\n      };\n    }\n  }\n\n  /**\n   * Удаляет аватар пользователя\n   */\n  static async deleteAvatar(userId: string): Promise<boolean> {\n    try {\n      const response = await APIClient.delete<{ success: boolean }>(`/avatars/user/${userId}`);\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Error deleting avatar:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Устанавливает аватар по умолчанию\n   */\n  static async setDefaultAvatar(userId: string): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/avatars/user/${userId}/default`, {});\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Error setting default avatar:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Получает список доступных аватаров по умолчанию\n   */\n  static async getDefaultAvatars(): Promise<Array<{ id: string; url: string; thumbnailUrl: string; name: string }>> {\n    try {\n      const response = await APIClient.get<Array<{ id: string; url: string; thumbnailUrl: string; name: string }>>('/avatars/defaults');\n      return response.success && response.data ? response.data : [];\n    } catch (error) {\n      console.error('Error getting default avatars:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Устанавливает аватар по умолчанию по ID\n   */\n  static async setDefaultAvatarById(userId: string, avatarId: string): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/avatars/user/${userId}/set-default`, { avatarId });\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Error setting default avatar by ID:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Открывает галерею для выбора изображения\n   */\n  static async pickImageFromGallery(): Promise<string | null> {\n    try {\n      const result = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [1, 1],\n        quality: 0.8,\n      });\n\n      if (!result.canceled && result.assets[0]) {\n        return result.assets[0].uri;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error picking image from gallery:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Открывает камеру для съемки\n   */\n  static async takePhoto(): Promise<string | null> {\n    try {\n      const result = await ImagePicker.launchCameraAsync({\n        allowsEditing: true,\n        aspect: [1, 1],\n        quality: 0.8,\n      });\n\n      if (!result.canceled && result.assets[0]) {\n        return result.assets[0].uri;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error taking photo:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Запрашивает разрешения на доступ к камере и галерее\n   */\n  static async requestPermissions(): Promise<{ camera: boolean; gallery: boolean }> {\n    try {\n      const cameraPermission = await ImagePicker.requestCameraPermissionsAsync();\n      const mediaLibraryPermission = await ImagePicker.requestMediaLibraryPermissionsAsync();\n\n      return {\n        camera: cameraPermission.status === 'granted',\n        gallery: mediaLibraryPermission.status === 'granted'\n      };\n    } catch (error) {\n      console.error('Error requesting permissions:', error);\n      return {\n        camera: false,\n        gallery: false\n      };\n    }\n  }\n\n  /**\n   * Проверяет размер изображения\n   */\n  static validateImageSize(uri: string): Promise<boolean> {\n    return new Promise((resolve) => {\n      // В реальном приложении здесь была бы проверка размера файла\n      // Пока возвращаем true\n      resolve(true);\n    });\n  }\n\n  /**\n   * Сжимает изображение (заглушка)\n   */\n  static async compressImage(uri: string, quality: number = 0.8): Promise<string> {\n    // В реальном приложении здесь была бы сжатие изображения\n    // Пока возвращаем оригинальную URI\n    return uri;\n  }\n}\n\nexport default AvatarService;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/BalanceService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1330,1333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1330,1333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2570,2573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2570,2573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport APIClient from './APIClient';\nimport { devKeyFor } from '../utils/storageKeysDev';\n\nexport interface BalanceRecord {\n  balance: number;\n  updatedAt: string;\n}\n\nexport interface TransactionRecord {\n  id: string;\n  amount: number;\n  type: 'debit' | 'credit';\n  description: string;\n  createdAt: string;\n}\n\nexport const BalanceService = {\n  async getBalance(userId: string): Promise<BalanceRecord> {\n    if (__DEV__) {\n      const key = devKeyFor('BALANCE', userId);\n      const raw = await AsyncStorage.getItem(key);\n      if (raw) return JSON.parse(raw);\n      const initial: BalanceRecord = { balance: 0, updatedAt: new Date().toISOString() };\n      await AsyncStorage.setItem(key, JSON.stringify(initial));\n      return initial;\n    }\n    const res = await APIClient.get<BalanceRecord>(`/balance/${userId}`);\n    return res.data as BalanceRecord;\n  },\n\n  async setBalance(userId: string, value: number): Promise<BalanceRecord> {\n    if (__DEV__) {\n      const record: BalanceRecord = { balance: value, updatedAt: new Date().toISOString() };\n      await AsyncStorage.setItem(devKeyFor('BALANCE', userId), JSON.stringify(record));\n      return record;\n    }\n    const res = await APIClient.post<BalanceRecord>(`/balance/${userId}`, { balance: value } as any);\n    return res.data as BalanceRecord;\n  },\n\n  async getTransactions(userId: string): Promise<TransactionRecord[]> {\n    if (__DEV__) {\n      const key = devKeyFor('TRANSACTIONS', userId);\n      const raw = await AsyncStorage.getItem(key);\n      return raw ? JSON.parse(raw) : [];\n    }\n    const res = await APIClient.get<TransactionRecord[]>(`/balance/${userId}/transactions`);\n    return (res.data || []) as TransactionRecord[];\n  },\n\n  async addTransaction(userId: string, tx: Omit<TransactionRecord, 'id' | 'createdAt'>): Promise<TransactionRecord> {\n    if (__DEV__) {\n      const list = await this.getTransactions(userId);\n      const record: TransactionRecord = {\n        id: String(Date.now()),\n        createdAt: new Date().toISOString(),\n        ...tx,\n      };\n      const newList = [record, ...list];\n      await AsyncStorage.setItem(devKeyFor('TRANSACTIONS', userId), JSON.stringify(newList));\n      // Update balance\n      const b = await this.getBalance(userId);\n      const next = tx.type === 'credit' ? b.balance + tx.amount : b.balance - tx.amount;\n      await this.setBalance(userId, next);\n      return record;\n    }\n    const res = await APIClient.post<TransactionRecord>(`/balance/${userId}/transactions`, tx as any);\n    return res.data as TransactionRecord;\n  },\n};\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/BillingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/ChatService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1060,1063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1060,1063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1107,1110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1107,1110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1191,1194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1191,1194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2357,2360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2357,2360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":167,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4832,4835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4832,4835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":109,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":112,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5142,5145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5142,5145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import APIClient from './APIClient';\n\nexport interface Chat {\n  id: string;\n  clientId: string;\n  driverId: string;\n  clientName: string;\n  driverName: string;\n  clientAvatar?: string;\n  driverAvatar?: string;\n  lastMessage?: string;\n  lastMessageTime?: string;\n  unreadCount: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Message {\n  id: string;\n  chatId: string;\n  senderId: string;\n  senderName: string;\n  content: string;\n  messageType: 'text' | 'image' | 'file' | 'location';\n  timestamp: string;\n  isRead: boolean;\n  metadata?: {\n    latitude?: number;\n    longitude?: number;\n    fileName?: string;\n    fileSize?: number;\n    imageUrl?: string;\n  };\n}\n\nexport interface ChatPreview {\n  id: string;\n  participantName: string;\n  participantAvatar?: string;\n  lastMessage: string;\n  lastMessageTime: string;\n  unreadCount: number;\n  isOnline: boolean;\n}\n\nclass ChatServiceInternal {\n  private static instance: ChatServiceInternal;\n\n  static getInstance(): ChatServiceInternal {\n    if (!(ChatServiceInternal as any).instance) {\n      (ChatServiceInternal as any).instance = new ChatServiceInternal();\n    }\n    return (ChatServiceInternal as any).instance;\n  }\n\n  async getChats(userId: string): Promise<ChatPreview[]> {\n    try {\n      const response = await APIClient.get<ChatPreview[]>(`/chats/user/${userId}`);\n      return response.success && response.data ? response.data : [];\n    } catch (error) {\n      console.error('Get chats error:', error);\n      return [];\n    }\n  }\n\n  async getChat(chatId: string): Promise<Chat | null> {\n    try {\n      const response = await APIClient.get<Chat>(`/chats/${chatId}`);\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Get chat error:', error);\n      return null;\n    }\n  }\n\n  async getMessages(chatId: string, page: number = 1, limit: number = 50): Promise<Message[]> {\n    try {\n      const response = await APIClient.get<Message[]>(`/chats/${chatId}/messages`, { page, limit });\n      return response.success && response.data ? response.data : [];\n    } catch (error) {\n      console.error('Get messages error:', error);\n      return [];\n    }\n  }\n\n  async sendMessage(\n    chatId: string,\n    content: string,\n    messageType: 'text' | 'image' | 'file' | 'location' = 'text',\n    metadata?: any\n  ): Promise<Message | null> {\n    try {\n      const response = await APIClient.post<Message>('/messages', {\n        chatId,\n        content,\n        messageType,\n        metadata\n      });\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Send message error:', error);\n      return null;\n    }\n  }\n\n  async createChat(clientId: string, driverId: string): Promise<Chat | null> {\n    try {\n      const response = await APIClient.post<Chat>('/chats', { clientId, driverId });\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Create chat error:', error);\n      return null;\n    }\n  }\n\n  async markMessagesAsRead(chatId: string, userId: string): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/chats/${chatId}/read`, { userId });\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Mark messages as read error:', error);\n      return false;\n    }\n  }\n\n  async getUnreadCount(userId: string): Promise<number> {\n    try {\n      const response = await APIClient.get<{ count: number }>(`/chats/unread-count/${userId}`);\n      return response.success && response.data?.count || 0;\n    } catch (error) {\n      console.error('Get unread count error:', error);\n      return 0;\n    }\n  }\n\n  async deleteChat(chatId: string): Promise<boolean> {\n    try {\n      const response = await APIClient.delete<{ success: boolean }>(`/chats/${chatId}`);\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Delete chat error:', error);\n      return false;\n    }\n  }\n\n  async blockUser(chatId: string, userId: string): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/chats/${chatId}/block`, { userId });\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Block user error:', error);\n      return false;\n    }\n  }\n\n  async unblockUser(chatId: string, userId: string): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/chats/${chatId}/unblock`, { userId });\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Unblock user error:', error);\n      return false;\n    }\n  }\n\n  async uploadFile(file: any, chatId: string): Promise<{ url: string; fileName: string } | null> {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('chatId', chatId);\n\n      const response = await APIClient.post<{ url: string; fileName: string }>('/chats/upload', formData as any);\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Upload file error:', error);\n      return null;\n    }\n  }\n}\n\n// Export a ready-to-use instance to avoid \"getChats is not a function\" import mismatches\nexport const ChatService = ChatServiceInternal.getInstance();\nexport default ChatService;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/ClientTripShareService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fallbackUrl' is assigned a value but never used.","line":50,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Share } from 'react-native';\nimport type { ShareRoutePoint } from './ShareRouteService';\n\nconst formatCoord = (p: ShareRoutePoint | { latitude: number; longitude: number }) => {\n  const lat = 'coordinate' in p ? p.coordinate.latitude : p.latitude;\n  const lon = 'coordinate' in p ? p.coordinate.longitude : p.longitude;\n  return `${lat},${lon}`;\n};\n\n// TODO: В продакшене заменить на реальный домен\n// const FIXDRIVE_DOMAIN = 'https://fixdrive.app';\nconst FIXDRIVE_DOMAIN = 'https://example.com'; // Временный домен для разработки\n\nconst buildFixDriveUrl = (points: ShareRoutePoint[]) => {\n  const origin = formatCoord(points[0]);\n  const destination = formatCoord(points[points.length - 1]);\n  const waypoints = points.slice(1, -1).map(formatCoord).join('|');\n\n  const params = new URLSearchParams({\n    o: origin,\n    d: destination,\n    ...(waypoints && { w: waypoints }),\n    t: 'driving', // travel mode\n  });\n\n  return `${FIXDRIVE_DOMAIN}/route?${params.toString()}`;\n};\n\n// Fallback на Google Maps если приложение не установлено\nconst buildGoogleWebUrl = (points: ShareRoutePoint[]) => {\n  const origin = formatCoord(points[0]);\n  const destination = formatCoord(points[points.length - 1]);\n  const waypoints = points.slice(1, -1).map(formatCoord).join('|');\n\n  return `https://www.google.com/maps/dir/?api=1&origin=${encodeURIComponent(origin)}&destination=${encodeURIComponent(destination)}${waypoints ? `&waypoints=${encodeURIComponent(waypoints)}` : ''}&travelmode=driving`;\n};\n\nconst hasSufficientRoute = (points: ShareRoutePoint[] | undefined | null): points is ShareRoutePoint[] => {\n  if (!points || points.length < 2) return false;\n  return points.every(p => typeof p?.coordinate?.latitude === 'number' && typeof p?.coordinate?.longitude === 'number');\n};\n\nconst ClientTripShareService = {\n  async share(points: ShareRoutePoint[]): Promise<void> {\n    if (!hasSufficientRoute(points)) {\n      return;\n    }\n\n    const fixDriveUrl = buildFixDriveUrl(points);\n    const fallbackUrl = buildGoogleWebUrl(points);\n\n    // TODO: В продакшене добавить проверку установки приложения\n    // const isAppInstalled = await checkAppInstalled();\n    // const shareUrl = isAppInstalled ? fixDriveUrl : fallbackUrl;\n    const shareUrl = fixDriveUrl; // Пока используем FixDrive URL\n\n    try {\n      await Share.share({\n        url: shareUrl,\n        message: `Маршрут: ${shareUrl}`,\n        title: 'Поделиться маршрутом',\n      });\n    } catch {\n      // noop\n    }\n  },\n};\n\nexport default ClientTripShareService;\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/DevRegistrationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/DistanceCalculationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/DriverService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'driverId' is defined but never used.","line":409,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":409,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import apiClient, { APIResponse } from './APIClient';\nimport {\n  Driver,\n  DriverRegistrationData,\n  DriverRegistrationResponse,\n  DriverUpdateData,\n  DriverDocumentUpdateData,\n  DriverStats,\n  DriverLocation,\n  DriverFilters,\n  DriverSort,\n  DriverStatus,\n} from '../types/driver';\nimport { ENV_CONFIG } from '../config/environment';\n\nexport interface DriverListParams {\n  page?: number;\n  pageSize?: number;\n  search?: string;\n  favoritesOnly?: boolean;\n  onlineOnly?: boolean;\n}\n\nexport interface DriverListDto {\n  items: Driver[];\n  total: number;\n  page: number;\n  pageSize: number;\n}\n\nexport interface DriverTrip {\n  text: string;\n  time: string;\n  dotStyle: 'default' | 'blue' | 'location';\n}\n\nexport interface DriverProfileResponse extends Driver {\n  schedule?: string;\n  price?: string;\n  distance?: string;\n  time?: string;\n  client?: {\n    name: string;\n    childName: string;\n    childAge: number;\n    childType: string;\n  };\n}\n\nclass DriverService {\n  private static BASE_URL = ENV_CONFIG.API.BASE_URL;\n\n  // Пагинированный список водителей\n  static async getDriversPaged(params: DriverListParams): Promise<APIResponse<DriverListDto>> {\n    return apiClient.get<DriverListDto>('/drivers', params as Record<string, unknown>);\n  }\n\n  // Регистрация водителя\n  static async registerDriver(data: DriverRegistrationData): Promise<DriverRegistrationResponse> {\n    try {\n      // Валидация обязательных полей\n      const requiredFields = ['email', 'password', 'license_number', 'license_expiry_date', 'vehicle_number'];\n      for (const field of requiredFields) {\n        if (!data[field as keyof DriverRegistrationData]) {\n          throw new Error(`Поле ${field} обязательно для заполнения`);\n        }\n      }\n\n      // Валидация email\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(data.email)) {\n        throw new Error('Некорректный email адрес');\n      }\n\n      // Валидация даты истечения прав\n      const expiryDate = new Date(data.license_expiry_date);\n      const today = new Date();\n      if (expiryDate <= today) {\n        throw new Error('Срок действия водительских прав истек');\n      }\n\n      // Валидация года выпуска автомобиля\n      if (data.vehicle_year) {\n        const currentYear = new Date().getFullYear();\n        if (data.vehicle_year < 1900 || data.vehicle_year > currentYear + 1) {\n          throw new Error('Некорректный год выпуска автомобиля');\n        }\n      }\n\n      const response = await fetch(`${this.BASE_URL}/drivers/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || 'Ошибка при регистрации');\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Driver registration error:', error);\n      \n      // В режиме разработки возвращаем мок данные\n      if (__DEV__) {\n        return this.mockDriverRegistration(data);\n      }\n      \n      throw error;\n    }\n  }\n\n  // Мок данные для разработки\n  private static async mockDriverRegistration(data: DriverRegistrationData): Promise<DriverRegistrationResponse> {\n    // Симулируем задержку сети\n    return new Promise((resolve) => {\n      setTimeout(() => {\n\n\n        const mockDriver: Driver = {\n          id: `driver_${Date.now()}`,\n          email: data.email,\n          phone_number: data.phone_number,\n          first_name: data.first_name,\n          last_name: data.last_name,\n          license_number: data.license_number,\n          license_expiry_date: data.license_expiry_date,\n          vehicle_brand: data.vehicle_brand, // Добавлено отдельное поле\n          vehicle_model: data.vehicle_model,\n          vehicle_number: data.vehicle_number,\n          vehicle_year: data.vehicle_year,\n          status: DriverStatus.PENDING,\n          rating: 0.0,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          isAvailable: false,\n        };\n\n        resolve({\n          success: true,\n          message: 'Регистрация прошла успешно! Ваша заявка на рассмотрении.',\n          driver: mockDriver,\n          token: 'mock_jwt_token_' + Date.now(),\n        });\n      }, 1500);\n    });\n  }\n\n  // Получить профиль водителя\n  static async getDriverProfile(driverId: string): Promise<DriverProfileResponse> {\n    try {\n      const response = await apiClient.get<DriverProfileResponse>(`/drivers/${driverId}`);\n      if (!response.success || !response.data) {\n        throw new Error(response.error || 'Failed to load driver profile');\n      }\n\n      return response.data;\n    } catch (error) {\n      if (__DEV__) {\n        return this.mockGetDriverProfile(driverId);\n      }\n      throw error;\n    }\n  }\n\n  // Обновить профиль водителя\n  static async updateDriverProfile(driverId: string, data: DriverUpdateData): Promise<Driver> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/drivers/${driverId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.getToken()}`,\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка при обновлении профиля');\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (__DEV__) {\n        return this.mockUpdateDriverProfile(driverId, data);\n      }\n      throw error;\n    }\n  }\n\n  // Обновить документы водителя\n  static async updateDriverDocuments(driverId: string, data: DriverDocumentUpdateData): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/drivers/${driverId}/documents`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.getToken()}`,\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка при обновлении документов');\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (__DEV__) {\n        return {\n          success: true,\n          message: 'Документы отправлены на проверку администратору',\n        };\n      }\n      throw error;\n    }\n  }\n\n  // Получить статистику водителя\n  static async getDriverStats(driverId: string): Promise<DriverStats> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/drivers/${driverId}/stats`, {\n        headers: {\n          'Authorization': `Bearer ${this.getToken()}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка при получении статистики');\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (__DEV__) {\n        return this.mockGetDriverStats();\n      }\n      throw error;\n    }\n  }\n\n  // Обновить местоположение водителя\n  static async updateDriverLocation(location: Omit<DriverLocation, 'driver_id'>): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/drivers/location`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.getToken()}`,\n        },\n        body: JSON.stringify(location),\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка при обновлении местоположения');\n      }\n    } catch (error) {\n      if (__DEV__) {\n\n        return;\n      }\n      throw error;\n    }\n  }\n\n  // Получить список водителей (для админа или клиентского поиска)\n  static async getDrivers(filters?: DriverFilters, sort?: DriverSort): Promise<Driver[]> {\n    try {\n      const params = new URLSearchParams();\n      \n      if (filters) {\n        Object.entries(filters).forEach(([key, value]) => {\n          if (value !== undefined) {\n            params.append(key, String(value));\n          }\n        });\n      }\n\n      if (sort) {\n        params.append('sort_field', sort.field);\n        params.append('sort_order', sort.order);\n      }\n\n      const response = await fetch(`${this.BASE_URL}/drivers?${params}`, {\n        headers: {\n          'Authorization': `Bearer ${this.getToken()}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка при получении списка водителей');\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (__DEV__) {\n        return this.mockGetDrivers();\n      }\n      throw error;\n    }\n  }\n\n  // Изменить статус доступности\n  static async toggleAvailability(isAvailable: boolean): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/drivers/availability`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.getToken()}`,\n        },\n        body: JSON.stringify({ is_available: isAvailable }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка при изменении статуса');\n      }\n    } catch (error) {\n      if (__DEV__) {\n\n        return;\n      }\n      throw error;\n    }\n  }\n\n  static async getDriverTrips(driverId: string): Promise<DriverTrip[]> {\n    try {\n      const response = await apiClient.get<{ items: DriverTrip[] }>(`/drivers/${driverId}/trips`);\n      if (!response.success || !response.data) {\n        throw new Error(response.error || 'Failed to load driver trips');\n      }\n      return response.data.items;\n    } catch (error) {\n      if (__DEV__) {\n        return this.mockGetDriverTrips(driverId);\n      }\n      throw error;\n    }\n  }\n\n  // Утилиты\n  private static getToken(): string | null {\n    // Здесь должна быть логика получения токена из AsyncStorage\n    return 'mock_token';\n  }\n\n  // Мок методы для разработки\n  private static mockGetDriverProfile(driverId: string): DriverProfileResponse {\n    return {\n      id: driverId,\n      email: 'driver@example.com',\n      phone_number: '+7 900 000-00-00',\n      first_name: 'Иван',\n      last_name: 'Иванов',\n      license_number: 'AB1234567',\n      license_expiry_date: '2030-01-01',\n      vehicle_number: 'A001AA777',\n      status: DriverStatus.ACTIVE,\n      rating: 4.9,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      schedule: '08:00 — 18:00',\n      price: '₽1500',\n      distance: '5 км',\n      time: '30 мин',\n      client: {\n        name: 'Анна Петрова',\n        childName: 'Маша',\n        childAge: 8,\n        childType: 'VIP',\n      },\n    };\n  }\n\n  private static mockUpdateDriverProfile(driverId: string, data: DriverUpdateData): Driver {\n    return {\n      ...this.mockGetDriverProfile(driverId),\n      ...data,\n      updated_at: new Date().toISOString(),\n    };\n  }\n\n  private static mockGetDriverStats(): DriverStats {\n    return {\n      total_trips: 245,\n      completed_trips: 238,\n      cancelled_trips: 7,\n      total_earnings: 2450.75,\n      average_rating: 4.8,\n      total_ratings: 185,\n      online_hours_today: 8.5,\n      online_hours_week: 42.3,\n      online_hours_month: 168.7,\n    };\n  }\n\n  private static mockGetDrivers(): Driver[] {\n    return [\n      this.mockGetDriverProfile('driver1'),\n      this.mockGetDriverProfile('driver2'),\n      this.mockGetDriverProfile('driver3'),\n    ];\n  }\n\n  private static mockGetDriverTrips(driverId: string): DriverTrip[] {\n    return [\n      { text: 'Школа', time: '08:30', dotStyle: 'location' },\n      { text: 'Музыкальная школа', time: '15:00', dotStyle: 'blue' },\n      { text: 'Дом', time: '18:00', dotStyle: 'default' },\n    ];\n  }\n}\n\nexport default DriverService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/DriverStatsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2285,2288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2285,2288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import APIClient from './APIClient';\n\nexport interface DayStats {\n  date: string; // YYYY-MM-DD\n  hoursOnline: number;\n  ridesCount: number;\n  earnings: number;\n  isQualified: boolean;\n  timestamp: number;\n}\n\nexport interface PeriodStats {\n  totalHours: number;\n  totalRides: number;\n  totalEarnings: number;\n  qualifiedDays: number;\n  averageHoursPerDay: number;\n  averageRidesPerDay: number;\n}\n\nexport interface EarningsChartData {\n  labels: string[];\n  data: number[];\n  period: 'today' | 'week' | 'month' | 'year';\n}\n\nexport interface StatsRequest {\n  driverId: string;\n  period: 'today' | 'week' | 'month' | 'year';\n  startDate?: string;\n  endDate?: string;\n}\n\nexport interface DriverStats {\n  driverId: string;\n  currentEarnings: number;\n  todayEarnings: number;\n  weekEarnings: number;\n  monthEarnings: number;\n  yearEarnings: number;\n  totalRides: number;\n  rating: number;\n  level: number;\n  nextLevelProgress: number;\n  isOnline: boolean;\n  lastActivity: string;\n}\n\nexport class DriverStatsService {\n  private static instance: DriverStatsService;\n\n  static getInstance(): DriverStatsService {\n    if (!DriverStatsService.instance) {\n      DriverStatsService.instance = new DriverStatsService();\n    }\n    return DriverStatsService.instance;\n  }\n\n  async getEarningsChartData(driverId: string, period: 'today' | 'week' | 'month' | 'year'): Promise<EarningsChartData> {\n    try {\n      const response = await APIClient.get<EarningsChartData>(`/driver-stats/${driverId}/earnings-chart`, { period });\n      return response.success && response.data ? response.data : { labels: [], data: [], period };\n    } catch (error) {\n      console.error('Get earnings chart data error:', error);\n      return { labels: [], data: [], period };\n    }\n  }\n\n  async getDayStats(driverId: string, date: string): Promise<DayStats | null> {\n    try {\n      const response = await APIClient.get<DayStats>(`/driver-stats/${driverId}/day`, { date });\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Get day stats error:', error);\n      return null;\n    }\n  }\n\n  async getPeriodStats(driverId: string, period: 'week' | 'month' | 'year', startDate?: string, endDate?: string): Promise<PeriodStats | null> {\n    try {\n      const params: any = { period };\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      \n      const response = await APIClient.get<PeriodStats>(`/driver-stats/${driverId}/period`, params);\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Get period stats error:', error);\n      return null;\n    }\n  }\n\n  async getDriverStats(driverId: string): Promise<DriverStats | null> {\n    try {\n      const response = await APIClient.get<DriverStats>(`/driver-stats/${driverId}`);\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Get driver stats error:', error);\n      return null;\n    }\n  }\n\n  async updateDriverStatus(driverId: string, isOnline: boolean): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/driver-stats/${driverId}/status`, { isOnline });\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Update driver status error:', error);\n      return false;\n    }\n  }\n\n  async startShift(driverId: string): Promise<{ shiftId: string; startTime: string } | null> {\n    try {\n      const response = await APIClient.post<{ shiftId: string; startTime: string }>(`/driver-stats/${driverId}/shift/start`, {});\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Start shift error:', error);\n      return null;\n    }\n  }\n\n  async endShift(driverId: string, shiftId: string): Promise<{ earnings: number; hours: number; rides: number } | null> {\n    try {\n      const response = await APIClient.post<{ earnings: number; hours: number; rides: number }>(`/driver-stats/${driverId}/shift/end`, { shiftId });\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('End shift error:', error);\n      return null;\n    }\n  }\n\n  async getLeaderboard(driverId: string, period: 'week' | 'month' | 'year'): Promise<Array<{ driverId: string; name: string; earnings: number; rides: number; position: number }> | null> {\n    try {\n      const response = await APIClient.get<Array<{ driverId: string; name: string; earnings: number; rides: number; position: number }>>(`/driver-stats/leaderboard`, { period, driverId });\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Get leaderboard error:', error);\n      return null;\n    }\n  }\n\n  async getAchievements(driverId: string): Promise<Array<{ id: string; name: string; description: string; icon: string; unlockedAt?: string; progress?: number; maxProgress?: number }> | null> {\n    try {\n      const response = await APIClient.get<Array<{ id: string; name: string; description: string; icon: string; unlockedAt?: string; progress?: number; maxProgress?: number }>>(`/driver-stats/${driverId}/achievements`);\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Get achievements error:', error);\n      return null;\n    }\n  }\n\n  async updateLocation(driverId: string, latitude: number, longitude: number): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/driver-stats/${driverId}/location`, { latitude, longitude });\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Update location error:', error);\n      return false;\n    }\n  }\n\n  async getWeeklyGoal(driverId: string): Promise<{ targetEarnings: number; currentEarnings: number; targetRides: number; currentRides: number; daysLeft: number } | null> {\n    try {\n      const response = await APIClient.get<{ targetEarnings: number; currentEarnings: number; targetRides: number; currentRides: number; daysLeft: number }>(`/driver-stats/${driverId}/weekly-goal`);\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Get weekly goal error:', error);\n      return null;\n    }\n  }\n\n  async updateWeeklyGoal(driverId: string, targetEarnings: number, targetRides: number): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/driver-stats/${driverId}/weekly-goal`, { targetEarnings, targetRides });\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Update weekly goal error:', error);\n      return false;\n    }\n  }\n}\n\nexport default DriverStatsService;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/DriverStatusService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/HelpService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/JWTService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/MapService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/NotificationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":111,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":114,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4292,4295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4292,4295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import APIClient from './APIClient';\n\nexport interface Notification {\n  id: string;\n  userId: string;\n  title: string;\n  message: string;\n  type: 'trip' | 'payment' | 'driver' | 'system' | 'order';\n  isRead: boolean;\n  createdAt: string;\n  data?: Record<string, unknown>;\n}\n\nexport interface PushNotificationPayload {\n  title: string;\n  message: string;\n  data?: Record<string, unknown>;\n}\n\nexport interface NotificationSettings {\n  userId: string;\n  pushEnabled: boolean;\n  emailEnabled: boolean;\n  smsEnabled: boolean;\n  tripNotifications: boolean;\n  paymentNotifications: boolean;\n  driverNotifications: boolean;\n  systemNotifications: boolean;\n  orderNotifications: boolean;\n}\n\nclass NotificationService {\n  private static instance: NotificationService;\n  private listeners: ((notifications: Notification[]) => void)[] = [];\n\n  private constructor() {}\n\n  static getInstance(): NotificationService {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n\n  async getNotifications(userId: string, page: number = 1, limit: number = 20): Promise<Notification[]> {\n    try {\n      const response = await APIClient.get<Notification[]>(`/notifications/user/${userId}`, { page, limit });\n      return response.success && response.data ? response.data : [];\n    } catch (error) {\n      console.error('Get notifications error:', error);\n      return [];\n    }\n  }\n\n  async getUnreadCount(userId: string): Promise<number> {\n    try {\n      const response = await APIClient.get<{ count: number }>(`/notifications/user/${userId}/unread-count`);\n      return response.success && response.data?.count || 0;\n    } catch (error) {\n      console.error('Get unread count error:', error);\n      return 0;\n    }\n  }\n\n  async markAsRead(notificationId: string): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/notifications/${notificationId}/read`, {});\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Mark notification as read error:', error);\n      return false;\n    }\n  }\n\n  async markAllAsRead(userId: string): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/notifications/user/${userId}/mark-all-read`, {});\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Mark all notifications as read error:', error);\n      return false;\n    }\n  }\n\n  async deleteNotification(notificationId: string): Promise<boolean> {\n    try {\n      const response = await APIClient.delete<{ success: boolean }>(`/notifications/${notificationId}`);\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Delete notification error:', error);\n      return false;\n    }\n  }\n\n  async clearAll(userId: string): Promise<boolean> {\n    try {\n      const response = await APIClient.delete<{ success: boolean }>(`/notifications/user/${userId}/clear-all`);\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Clear all notifications error:', error);\n      return false;\n    }\n  }\n\n  async getNotificationSettings(userId: string): Promise<NotificationSettings | null> {\n    try {\n      const response = await APIClient.get<NotificationSettings>(`/notifications/settings/${userId}`);\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Get notification settings error:', error);\n      return null;\n    }\n  }\n\n  async updateNotificationSettings(userId: string, settings: Partial<NotificationSettings>): Promise<boolean> {\n    try {\n      const response = await APIClient.put<{ success: boolean }>(`/notifications/settings/${userId}`, settings);\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Update notification settings error:', error);\n      return false;\n    }\n  }\n\n  async sendPushNotification(userId: string, payload: PushNotificationPayload): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/notifications/push/${userId}`, payload as any);\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Send push notification error:', error);\n      return false;\n    }\n  }\n\n  async registerPushToken(userId: string, token: string, platform: 'ios' | 'android'): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/notifications/register-token`, {\n        userId,\n        token,\n        platform\n      });\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Register push token error:', error);\n      return false;\n    }\n  }\n\n  async unregisterPushToken(userId: string, token: string): Promise<boolean> {\n    try {\n      const response = await APIClient.post<{ success: boolean }>(`/notifications/unregister-token`, {\n        userId,\n        token\n      });\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Unregister push token error:', error);\n      return false;\n    }\n  }\n\n  // Подписка на обновления уведомлений\n  subscribe(listener: (notifications: Notification[]) => void): () => void {\n    this.listeners.push(listener);\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  // Уведомление подписчиков об изменениях\n  private notifyListeners(notifications: Notification[]): void {\n    this.listeners.forEach(listener => listener(notifications));\n  }\n\n  // Метод для обновления уведомлений (вызывается извне при получении новых уведомлений)\n  updateNotifications(notifications: Notification[]): void {\n    this.notifyListeners(notifications);\n  }\n}\n\nexport default NotificationService;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/OTPService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/OrderService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/PaymentHistoryService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useUserStorageKey' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport APIClient from './APIClient';\nimport { useUserStorageKey, STORAGE_KEYS } from '../utils/storageKeys';\n\nexport interface PaymentTransaction {\n  id: string;\n  type: 'trip' | 'topup' | 'refund' | 'fee' | 'package_purchase' | 'subscription_renewal' | 'withdrawal' | 'earnings';\n  amount: number;\n  description: string;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n  translationKey?: string;\n  translationParams?: Record<string, string>;\n  packageType?: string;\n  tripId?: string;\n  driverId?: string;\n}\n\nexport interface PaymentFilter {\n  type: 'all' | 'trip' | 'topup' | 'refund' | 'fee' | 'package_purchase' | 'subscription_renewal' | 'withdrawal' | 'earnings';\n  status: 'all' | 'completed' | 'pending' | 'failed';\n  dateRange: 'all' | 'today' | 'week' | 'month' | 'year';\n}\n\nexport interface PaymentStats {\n  totalTransactions: number;\n  totalAmount: number;\n  totalEarned: number;\n  totalSpent: number;\n  completedCount: number;\n  pendingCount: number;\n  failedCount: number;\n}\n\nexport interface PaymentHistoryResponse {\n  transactions: PaymentTransaction[];\n  stats: PaymentStats;\n  hasMore: boolean;\n  nextCursor?: string;\n}\n\nexport const PaymentHistoryService = {\n  /**\n   * Получить историю платежей с фильтрацией и пагинацией\n   */\n  async getPaymentHistory(\n    userId: string,\n    userRole: 'client' | 'driver',\n    filter: PaymentFilter = { type: 'all', status: 'all', dateRange: 'all' },\n    page: number = 1,\n    limit: number = 20,\n    cursor?: string\n  ): Promise<PaymentHistoryResponse> {\n    if (__DEV__) {\n      return this.getPaymentHistoryDev(userId, userRole, filter, page, limit);\n    }\n\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString(),\n      ...(filter.type !== 'all' && { type: filter.type }),\n      ...(filter.status !== 'all' && { status: filter.status }),\n      ...(filter.dateRange !== 'all' && { dateRange: filter.dateRange }),\n      ...(cursor && { cursor }),\n      role: userRole,\n    });\n\n    const response = await APIClient.get<PaymentHistoryResponse>(\n      `/payment-history/${userId}?${params.toString()}`\n    );\n\n    return response.data;\n  },\n\n  /**\n   * DEV: Получить историю платежей из AsyncStorage\n   */\n  async getPaymentHistoryDev(\n    userId: string,\n    userRole: 'client' | 'driver',\n    filter: PaymentFilter,\n    page: number,\n    limit: number\n  ): Promise<PaymentHistoryResponse> {\n    try {\n      const storageKey = userRole === 'client' \n        ? `${STORAGE_KEYS.CLIENT_TRANSACTIONS}_${userId}`\n        : `${STORAGE_KEYS.DRIVER_TRANSACTIONS}_${userId}`;\n\n      const storedData = await AsyncStorage.getItem(storageKey);\n      let allTransactions: PaymentTransaction[] = [];\n\n      if (storedData) {\n        const parsed = JSON.parse(storedData);\n        allTransactions = Array.isArray(parsed) ? parsed : [];\n      }\n\n      // Применяем фильтры\n      let filteredTransactions = this.applyFilters(allTransactions, filter);\n\n      // Сортируем по дате (новые сначала)\n      filteredTransactions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n      // Пагинация\n      const startIndex = (page - 1) * limit;\n      const endIndex = startIndex + limit;\n      const paginatedTransactions = filteredTransactions.slice(startIndex, endIndex);\n\n      // Статистика\n      const stats = this.calculateStats(allTransactions);\n\n      return {\n        transactions: paginatedTransactions,\n        stats,\n        hasMore: endIndex < filteredTransactions.length,\n        nextCursor: endIndex < filteredTransactions.length ? endIndex.toString() : undefined,\n      };\n    } catch (error) {\n      console.error('Error loading payment history from DEV storage:', error);\n      return {\n        transactions: [],\n        stats: this.getEmptyStats(),\n        hasMore: false,\n      };\n    }\n  },\n\n  /**\n   * Получить статистику по платежам\n   */\n  async getPaymentStats(userId: string, userRole: 'client' | 'driver'): Promise<PaymentStats> {\n    if (__DEV__) {\n      return this.getPaymentStatsDev(userId, userRole);\n    }\n\n    const response = await APIClient.get<PaymentStats>(\n      `/payment-history/${userId}/stats?role=${userRole}`\n    );\n\n    return response.data;\n  },\n\n  /**\n   * DEV: Получить статистику из AsyncStorage\n   */\n  async getPaymentStatsDev(userId: string, userRole: 'client' | 'driver'): Promise<PaymentStats> {\n    try {\n      const storageKey = userRole === 'client' \n        ? `${STORAGE_KEYS.CLIENT_TRANSACTIONS}_${userId}`\n        : `${STORAGE_KEYS.DRIVER_TRANSACTIONS}_${userId}`;\n\n      const storedData = await AsyncStorage.getItem(storageKey);\n      const transactions: PaymentTransaction[] = storedData ? JSON.parse(storedData) : [];\n\n      return this.calculateStats(transactions);\n    } catch (error) {\n      console.error('Error loading payment stats from DEV storage:', error);\n      return this.getEmptyStats();\n    }\n  },\n\n  /**\n   * Обновить кэш истории платежей (для DEV режима)\n   */\n  async updatePaymentHistoryCache(\n    userId: string,\n    userRole: 'client' | 'driver',\n    transactions: PaymentTransaction[]\n  ): Promise<void> {\n    if (!__DEV__) return;\n\n    try {\n      const storageKey = userRole === 'client' \n        ? `${STORAGE_KEYS.CLIENT_TRANSACTIONS}_${userId}`\n        : `${STORAGE_KEYS.DRIVER_TRANSACTIONS}_${userId}`;\n\n      await AsyncStorage.setItem(storageKey, JSON.stringify(transactions));\n    } catch (error) {\n      console.error('Error updating payment history cache:', error);\n    }\n  },\n\n  /**\n   * Применить фильтры к транзакциям\n   */\n  applyFilters(transactions: PaymentTransaction[], filter: PaymentFilter): PaymentTransaction[] {\n    let filtered = [...transactions];\n\n    // Фильтр по типу\n    if (filter.type !== 'all') {\n      filtered = filtered.filter(tx => tx.type === filter.type);\n    }\n\n    // Фильтр по статусу\n    if (filter.status !== 'all') {\n      filtered = filtered.filter(tx => tx.status === filter.status);\n    }\n\n    // Фильтр по дате\n    if (filter.dateRange !== 'all') {\n      const now = new Date();\n      const startDate = this.getDateRangeStart(filter.dateRange, now);\n      \n      filtered = filtered.filter(tx => {\n        const txDate = new Date(tx.date);\n        return txDate >= startDate && txDate <= now;\n      });\n    }\n\n    return filtered;\n  },\n\n  /**\n   * Вычислить статистику по транзакциям\n   */\n  calculateStats(transactions: PaymentTransaction[]): PaymentStats {\n    const stats = this.getEmptyStats();\n\n    transactions.forEach(tx => {\n      stats.totalTransactions++;\n      stats.totalAmount += Math.abs(tx.amount);\n\n      if (tx.amount > 0) {\n        stats.totalEarned += tx.amount;\n      } else {\n        stats.totalSpent += Math.abs(tx.amount);\n      }\n\n      switch (tx.status) {\n        case 'completed':\n          stats.completedCount++;\n          break;\n        case 'pending':\n          stats.pendingCount++;\n          break;\n        case 'failed':\n          stats.failedCount++;\n          break;\n      }\n    });\n\n    return stats;\n  },\n\n  /**\n   * Получить начальную дату для диапазона\n   */\n  getDateRangeStart(dateRange: string, now: Date): Date {\n    const start = new Date(now);\n    \n    switch (dateRange) {\n      case 'today':\n        start.setHours(0, 0, 0, 0);\n        break;\n      case 'week':\n        start.setDate(now.getDate() - 7);\n        break;\n      case 'month':\n        start.setMonth(now.getMonth() - 1);\n        break;\n      case 'year':\n        start.setFullYear(now.getFullYear() - 1);\n        break;\n      default:\n        start.setFullYear(2000); // Все время\n    }\n\n    return start;\n  },\n\n  /**\n   * Получить пустую статистику\n   */\n  getEmptyStats(): PaymentStats {\n    return {\n      totalTransactions: 0,\n      totalAmount: 0,\n      totalEarned: 0,\n      totalSpent: 0,\n      completedCount: 0,\n      pendingCount: 0,\n      failedCount: 0,\n    };\n  },\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/ProfileService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Client' is defined but never used.","line":4,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4811,4814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4811,4814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4943,4946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4943,4946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import APIClient from './APIClient';\nimport JWTService from './JWTService';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { User, Client } from '../types/user';\n\nexport interface ChangePasswordRequest {\n  currentPassword: string;\n  newPassword: string;\n}\n\nexport interface ChangePasswordResponse {\n  success: boolean;\n  message?: string;\n  error?: string;\n}\n\nexport interface UpdateProfileRequest {\n  firstName?: string;\n  lastName?: string;\n  phone?: string;\n  avatar?: string;\n  // Client specific\n  children?: Array<{ name: string; age: number; relationship: string }>;\n  // Driver specific\n  vehicle?: {\n    brand: string;\n    model: string;\n    year: string;\n    licensePlate: string;\n  };\n}\n\nexport class ProfileService {\n  private static STORAGE_KEY = '@profile_';\n\n  /**\n   * Получить профиль пользователя\n   * DEV: загружает из AsyncStorage\n   * PROD: загружает с API\n   */\n  static async getProfile(userId: string): Promise<User | null> {\n    try {\n      // ⚠️ DEV ONLY: Загружаем из локального хранилища\n      if (__DEV__) {\n        console.log('[DEV] 📂 Loading profile from AsyncStorage:', userId);\n        \n        const profileJson = await AsyncStorage.getItem(`${this.STORAGE_KEY}${userId}`);\n        if (profileJson) {\n          const profile = JSON.parse(profileJson);\n          console.log('[DEV] ✅ Profile loaded:', profile.email);\n          return profile;\n        }\n        \n        console.log('[DEV] ℹ️ No profile in AsyncStorage');\n        return null;\n      }\n\n      // PROD: Загружаем с API\n      const response = await APIClient.get<User>(`/profile/${userId}`);\n      \n      if (response.success && response.data) {\n        // Кэшируем в AsyncStorage\n        await AsyncStorage.setItem(\n          `${this.STORAGE_KEY}${userId}`,\n          JSON.stringify(response.data)\n        );\n        return response.data;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('[ProfileService] getProfile error:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Обновить профиль пользователя\n   * DEV: сохраняет в AsyncStorage\n   * PROD: отправляет на API\n   */\n  static async updateProfile(userId: string, updates: UpdateProfileRequest): Promise<{ success: boolean; profile?: User; error?: string }> {\n    try {\n      // ⚠️ DEV ONLY: Обновляем в локальном хранилище\n      if (__DEV__) {\n        console.log('[DEV] 💾 Updating profile in AsyncStorage:', userId);\n        \n        // Получаем текущий профиль\n        const currentProfile = await this.getProfile(userId);\n        if (!currentProfile) {\n          return { success: false, error: 'Profile not found' };\n        }\n\n        // Обновляем\n        const updatedProfile: User = {\n          ...currentProfile,\n          ...updates,\n        };\n\n        // Сохраняем\n        await AsyncStorage.setItem(\n          `${this.STORAGE_KEY}${userId}`,\n          JSON.stringify(updatedProfile)\n        );\n\n        console.log('[DEV] ✅ Profile updated');\n        return { success: true, profile: updatedProfile };\n      }\n\n      // PROD: Отправляем на API\n      const response = await APIClient.patch<User>(`/profile/${userId}`, updates);\n\n      if (response.success && response.data) {\n        // Обновляем кэш\n        await AsyncStorage.setItem(\n          `${this.STORAGE_KEY}${userId}`,\n          JSON.stringify(response.data)\n        );\n\n        return { success: true, profile: response.data };\n      }\n\n      return { success: false, error: response.error || 'Update failed' };\n    } catch (error) {\n      console.error('[ProfileService] updateProfile error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Update failed',\n      };\n    }\n  }\n\n  /**\n   * Загрузить аватар\n   * DEV: сохраняет base64 в AsyncStorage\n   * PROD: загружает файл на сервер\n   */\n  static async uploadAvatar(userId: string, imageUri: string): Promise<{ success: boolean; avatarUrl?: string; error?: string }> {\n    try {\n      // ⚠️ DEV ONLY: Сохраняем URI локально\n      if (__DEV__) {\n        console.log('[DEV] 📸 Saving avatar URI locally');\n        \n        const profile = await this.getProfile(userId);\n        if (!profile) {\n          return { success: false, error: 'Profile not found' };\n        }\n\n        const updatedProfile = {\n          ...profile,\n          avatar: imageUri, // В DEV просто URI\n        };\n\n        await AsyncStorage.setItem(\n          `${this.STORAGE_KEY}${userId}`,\n          JSON.stringify(updatedProfile)\n        );\n\n        console.log('[DEV] ✅ Avatar saved');\n        return { success: true, avatarUrl: imageUri };\n      }\n\n      // PROD: Загружаем на сервер\n      const formData = new FormData();\n      formData.append('avatar', {\n        uri: imageUri,\n        type: 'image/jpeg',\n        name: 'avatar.jpg',\n      } as any);\n\n      const response = await APIClient.post<{ avatarUrl: string }>(\n        `/profile/${userId}/avatar`,\n        formData as any\n      );\n\n      if (response.success && response.data) {\n        // Обновляем кэш\n        const profile = await this.getProfile(userId);\n        if (profile) {\n          profile.avatar = response.data.avatarUrl;\n          await AsyncStorage.setItem(\n            `${this.STORAGE_KEY}${userId}`,\n            JSON.stringify(profile)\n          );\n        }\n\n        return { success: true, avatarUrl: response.data.avatarUrl };\n      }\n\n      return { success: false, error: response.error || 'Upload failed' };\n    } catch (error) {\n      console.error('[ProfileService] uploadAvatar error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Upload failed',\n      };\n    }\n  }\n  /**\n   * Изменение пароля пользователя\n   */\n  static async changePassword(data: ChangePasswordRequest): Promise<ChangePasswordResponse> {\n    try {\n\n      const response = await APIClient.post<{ message: string }>('/profile/change-password', {\n        current_password: data.currentPassword,\n        new_password: data.newPassword,\n      });\n\n      if (response.success) {\n        return {\n          success: true,\n          message: response.data?.message || 'Password changed successfully',\n        };\n      } else {\n        return {\n          success: false,\n          error: response.error || 'Failed to change password',\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Change password failed',\n      };\n    }\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * Полностью удаляет все данные пользователя из БД\n   */\n  static async deleteAccount(): Promise<{ success: boolean; message?: string }> {\n    try {\n      const authHeader = await JWTService.getAuthHeader();\n      if (!authHeader) {\n        throw new Error('No authentication token');\n      }\n\n      const response = await APIClient.delete<{ message: string }>('/profile/account');\n\n      if (response.success) {\n        return { success: true };\n      } else {\n        throw new Error(response.error || 'Failed to delete account');\n      }\n    } catch (error) {\n      \n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/PushNotificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/ShareRouteService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/SocialAuthService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/SupportService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/UniversalLinkHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Linking' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'travelMode' is assigned a value but never used.","line":38,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Linking } from 'react-native';\nimport type { ShareRoutePoint } from './ShareRouteService';\n\nexport interface RouteParams {\n  o: string; // origin: \"lat,lon\"\n  d: string; // destination: \"lat,lon\" \n  w?: string; // waypoints: \"lat1,lon1|lat2,lon2\"\n  t?: string; // travel mode: \"driving\", \"walking\", etc.\n}\n\nconst parseCoordinate = (coordStr: string): { latitude: number; longitude: number } | null => {\n  const [lat, lon] = coordStr.split(',').map(Number);\n  if (isNaN(lat) || isNaN(lon)) return null;\n  return { latitude: lat, longitude: lon };\n};\n\nconst parseWaypoints = (waypointsStr: string): Array<{ latitude: number; longitude: number }> => {\n  return waypointsStr\n    .split('|')\n    .map(parseCoordinate)\n    .filter((coord): coord is { latitude: number; longitude: number } => coord !== null);\n};\n\nexport const UniversalLinkHandler = {\n  /**\n   * Парсит URL маршрута и возвращает точки\n   * Пример: https://fixdrive.app/route?o=55.75,37.61&d=55.80,37.50&w=55.76,37.62|55.77,37.60&t=driving\n   */\n  parseRouteUrl(url: string): ShareRoutePoint[] | null {\n    try {\n      const urlObj = new URL(url);\n      if (!urlObj.pathname.includes('/route')) return null;\n\n      const params = new URLSearchParams(urlObj.search);\n      const origin = params.get('o');\n      const destination = params.get('d');\n      const waypoints = params.get('w');\n      const travelMode = params.get('t') || 'driving';\n\n      if (!origin || !destination) return null;\n\n      const originCoord = parseCoordinate(origin);\n      const destCoord = parseCoordinate(destination);\n      \n      if (!originCoord || !destCoord) return null;\n\n      const points: ShareRoutePoint[] = [\n        {\n          id: 'start',\n          type: 'start',\n          coordinate: originCoord,\n        },\n      ];\n\n      // Добавляем промежуточные точки\n      if (waypoints) {\n        const waypointCoords = parseWaypoints(waypoints);\n        waypointCoords.forEach((coord, index) => {\n          points.push({\n            id: `wp${index + 1}`,\n            type: 'waypoint',\n            coordinate: coord,\n          });\n        });\n      }\n\n      // Добавляем конечную точку\n      points.push({\n        id: 'end',\n        type: 'end',\n        coordinate: destCoord,\n      });\n\n      return points;\n    } catch {\n      return null;\n    }\n  },\n\n  /**\n   * Проверяет, является ли URL ссылкой на маршрут FixDrive\n   */\n  isFixDriveRouteUrl(url: string): boolean {\n    try {\n      const urlObj = new URL(url);\n      return urlObj.hostname.includes('fixdrive') || urlObj.hostname.includes('example.com');\n    } catch {\n      return false;\n    }\n  },\n\n  /**\n   * Обрабатывает входящую ссылку\n   * TODO: В продакшене интегрировать с навигацией приложения\n   */\n  handleIncomingUrl(url: string): void {\n    if (!this.isFixDriveRouteUrl(url)) return;\n\n    const points = this.parseRouteUrl(url);\n    if (!points) return;\n\n    // TODO: В продакшене открыть экран карты с маршрутом\n    // navigation.navigate('OrdersMapScreen', { routePoints: points });\n    console.log('Получен маршрут:', points);\n  },\n};\n\nexport default UniversalLinkHandler;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/addressService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/cardService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/driver/DriverAddressService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/driver/DriverAvatarService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1124,1127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1124,1127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1270,1273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1270,1273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import APIClient from '../APIClient';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport interface AvatarData {\n  id: string;\n  driverId: string;\n  url: string;\n  thumbnailUrl?: string;\n  timestamp: number;\n  size: number;\n  type: string;\n  isDefault: boolean;\n}\n\nexport interface UploadAvatarResponse {\n  success: boolean;\n  avatar?: AvatarData;\n  error?: string;\n}\n\nexport class DriverAvatarService {\n  /**\n   * Получает аватар водителя\n   */\n  static async getAvatar(driverId: string): Promise<AvatarData | null> {\n    try {\n      const response = await APIClient.get<AvatarData>(`/drivers/${driverId}/avatar`);\n      return response.success && response.data ? response.data : null;\n    } catch (error) {\n      console.error('Error getting driver avatar:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Загружает новый аватар водителя\n   */\n  static async uploadAvatar(driverId: string, imageUri: string): Promise<UploadAvatarResponse> {\n    try {\n      const formData = new FormData();\n      formData.append('avatar', {\n        uri: imageUri,\n        type: 'image/jpeg',\n        name: 'avatar.jpg',\n      } as any);\n      formData.append('driverId', driverId);\n\n      const response = await APIClient.post<AvatarData>('/drivers/avatar/upload', formData as any);\n      \n      if (response.success && response.data) {\n        return {\n          success: true,\n          avatar: response.data\n        };\n      }\n      \n      return {\n        success: false,\n        error: response.error || 'Ошибка при загрузке аватара'\n      };\n    } catch (error) {\n      console.error('Error uploading driver avatar:', error);\n      return {\n        success: false,\n        error: 'Ошибка при загрузке аватара'\n      };\n    }\n  }\n\n  /**\n   * Удаляет аватар водителя\n   */\n  static async deleteAvatar(driverId: string): Promise<boolean> {\n    try {\n      const response = await APIClient.delete<{ success: boolean }>(`/drivers/${driverId}/avatar`);\n      return response.success && response.data?.success || false;\n    } catch (error) {\n      console.error('Error deleting driver avatar:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Открывает галерею для выбора изображения\n   */\n  static async pickImageFromGallery(): Promise<string | null> {\n    try {\n      const result = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [1, 1],\n        quality: 0.8,\n      });\n\n      if (!result.canceled && result.assets[0]) {\n        return result.assets[0].uri;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error picking image from gallery:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Открывает камеру для съемки\n   */\n  static async takePhoto(): Promise<string | null> {\n    try {\n      const result = await ImagePicker.launchCameraAsync({\n        allowsEditing: true,\n        aspect: [1, 1],\n        quality: 0.8,\n      });\n\n      if (!result.canceled && result.assets[0]) {\n        return result.assets[0].uri;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error taking photo:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Запрашивает разрешения на доступ к камере и галерее\n   */\n  static async requestPermissions(): Promise<{ camera: boolean; gallery: boolean }> {\n    try {\n      const cameraPermission = await ImagePicker.requestCameraPermissionsAsync();\n      const mediaLibraryPermission = await ImagePicker.requestMediaLibraryPermissionsAsync();\n\n      return {\n        camera: cameraPermission.status === 'granted',\n        gallery: mediaLibraryPermission.status === 'granted'\n      };\n    } catch (error) {\n      console.error('Error requesting permissions:', error);\n      return {\n        camera: false,\n        gallery: false\n      };\n    }\n  }\n}\n\nexport default DriverAvatarService;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/driver/DriverProfileService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/driver/DriverVehicleService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DriverVehicle' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[871,874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[871,874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1350,1353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1350,1353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1763,1766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1763,1766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1844,1847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1844,1847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2354,2357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2354,2357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2820,2823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2820,2823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3359,3362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3359,3362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3914,3917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3914,3917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4002,4005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4002,4005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import APIClient from '../APIClient';\nimport {\n  DriverVehicle,\n  CreateVehicleRequest,\n  UpdateVehicleRequest,\n  VehicleResponse,\n  VehiclesListResponse,\n} from '../../types/driver/DriverVehicle';\n\nexport class DriverVehicleService {\n  private static instance: DriverVehicleService;\n  private apiClient: typeof APIClient;\n\n  private constructor() {\n    this.apiClient = APIClient;\n  }\n\n  public static getInstance(): DriverVehicleService {\n    if (!DriverVehicleService.instance) {\n      DriverVehicleService.instance = new DriverVehicleService();\n    }\n    return DriverVehicleService.instance;\n  }\n\n  /**\n   * Получить список автомобилей водителя\n   */\n  async getDriverVehicles(): Promise<VehiclesListResponse> {\n    try {\n      const response = await this.apiClient.get('/driver/vehicles');\n      return {\n        success: true,\n        data: response.data || [] as any,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Не удалось загрузить автомобили',\n      };\n    }\n  }\n\n  /**\n   * Получить конкретный автомобиль по ID\n   */\n  async getDriverVehicle(vehicleId: string): Promise<VehicleResponse> {\n    try {\n      const response = await this.apiClient.get(`/driver/vehicles/${vehicleId}`);\n      return {\n        success: true,\n        data: response.data || [] as any,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Не удалось загрузить автомобиль',\n      };\n    }\n  }\n\n  /**\n   * Создать новый автомобиль\n   */\n  async createDriverVehicle(vehicleData: CreateVehicleRequest): Promise<VehicleResponse> {\n    try {\n      const response = await this.apiClient.post('/driver/vehicles', vehicleData as any);\n      return {\n        success: true,\n        data: response.data || [] as any,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Не удалось создать автомобиль',\n      };\n    }\n  }\n\n  /**\n   * Обновить существующий автомобиль\n   */\n  async updateDriverVehicle(vehicleData: UpdateVehicleRequest): Promise<VehicleResponse> {\n    try {\n      const response = await this.apiClient.put(`/driver/vehicles/${vehicleData.id}`, vehicleData);\n      return {\n        success: true,\n        data: response.data || [] as any,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Не удалось обновить автомобиль',\n      };\n    }\n  }\n\n  /**\n   * Удалить автомобиль\n   */\n  async deleteDriverVehicle(vehicleId: string): Promise<VehicleResponse> {\n    try {\n      const response = await this.apiClient.delete(`/driver/vehicles/${vehicleId}`);\n      return {\n        success: true,\n        data: response.data || [] as any,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Не удалось удалить автомобиль',\n      };\n    }\n  }\n\n  /**\n   * Активировать/деактивировать автомобиль\n   */\n  async toggleVehicleActive(vehicleId: string, isActive: boolean): Promise<VehicleResponse> {\n    try {\n      const response = await this.apiClient.patch(`/driver/vehicles/${vehicleId}/toggle`, {\n        isActive,\n      });\n      return {\n        success: true,\n        data: response.data || [] as any,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Не удалось изменить статус автомобиля',\n      };\n    }\n  }\n\n  /**\n   * Загрузить фото техпаспорта\n   */\n  async uploadPassportPhoto(vehicleId: string, photoFile: File): Promise<VehicleResponse> {\n    try {\n      const formData = new FormData();\n      formData.append('passportPhoto', photoFile);\n\n      const response = await this.apiClient.post(\n        `/driver/vehicles/${vehicleId}/passport-photo`,\n        formData as any\n      );\n      return {\n        success: true,\n        data: response.data || [] as any,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Не удалось загрузить фото техпаспорта',\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/fixdriveOrderService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2190,2193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2190,2193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2218,2221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2218,2221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3636,3639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3636,3639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3664,3667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3664,3667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5908,5911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5908,5911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5932,5935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5932,5935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface OrderData {\n  id: string;\n  familyMemberId: string;\n  familyMemberName: string;\n  packageType: string;\n  addresses: Array<{\n    id: string;\n    type: 'from' | 'to' | 'stop';\n    address: string;\n    coordinates?: {\n      latitude: number;\n      longitude: number;\n    };\n  }>;\n  createdAt: number;\n  status: 'draft' | 'confirmed' | 'completed' | 'cancelled';\n}\n\nclass FixDriveOrderService {\n  private storageKey = 'fixdrive_order_data';\n  private sessionKey = 'fixdrive_session_data';\n\n  // Сохранение данных заказа\n  async saveOrderData(orderData: Omit<OrderData, 'id' | 'createdAt' | 'status'>): Promise<OrderData> {\n    try {\n      const order: OrderData = {\n        ...orderData,\n        id: `order_${Date.now()}`,\n        createdAt: Date.now(),\n        status: 'draft',\n      };\n\n      await AsyncStorage.setItem(this.storageKey, JSON.stringify(order));\n      return order;\n    } catch (error) {\n      console.error('Error saving order data:', error);\n      throw new Error('Не удалось сохранить данные заказа');\n    }\n  }\n\n  // Загрузка данных заказа\n  async loadOrderData(): Promise<OrderData | null> {\n    try {\n      const data = await AsyncStorage.getItem(this.storageKey);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error('Error loading order data:', error);\n      return null;\n    }\n  }\n\n  // Обновление данных заказа\n  async updateOrderData(updates: Partial<OrderData>): Promise<OrderData | null> {\n    try {\n      const currentData = await this.loadOrderData();\n      if (!currentData) {\n        throw new Error('Нет сохраненных данных заказа');\n      }\n\n      const updatedData: OrderData = {\n        ...currentData,\n        ...updates,\n      };\n\n      await AsyncStorage.setItem(this.storageKey, JSON.stringify(updatedData));\n      return updatedData;\n    } catch (error) {\n      console.error('Error updating order data:', error);\n      throw new Error('Не удалось обновить данные заказа');\n    }\n  }\n\n  // Сохранение данных сессии (для навигации между страницами)\n  async saveSessionData(sessionData: {\n    currentPage: string;\n    addressData?: any;\n    timeScheduleData?: any;\n  }): Promise<void> {\n    try {\n      const sessionDataWithTimestamp = {\n        ...sessionData,\n        lastUpdate: Date.now(),\n      };\n      await AsyncStorage.setItem(this.sessionKey, JSON.stringify(sessionDataWithTimestamp));\n    } catch (error) {\n      console.error('Error saving session data:', error);\n      throw new Error('Не удалось сохранить данные сессии');\n    }\n  }\n\n  // Сохранение данных контейнеров по отдельности\n  async saveContainerTimes(containerData: Array<{\n    containerId: string;\n    containerType: string;\n    containerIndex: number;\n    address: string;\n    fromCoordinate?: { latitude: number; longitude: number };\n    toCoordinate?: { latitude: number; longitude: number };\n    time: string;\n    isActive: boolean;\n    isCalculated: boolean;\n  }>): Promise<void> {\n    try {\n      const containerTimesKey = 'fixdrive_container_times';\n      const containerTimesWithTimestamp = {\n        containers: containerData,\n        lastUpdate: Date.now(),\n      };\n      await AsyncStorage.setItem(containerTimesKey, JSON.stringify(containerTimesWithTimestamp));\n      console.log('Container times saved:', containerData);\n    } catch (error) {\n      console.error('Error saving container times:', error);\n      throw new Error('Не удалось сохранить данные контейнеров');\n    }\n  }\n\n  // Загрузка данных сессии\n  async loadSessionData(): Promise<{\n    currentPage: string;\n    addressData?: any;\n    timeScheduleData?: any;\n    lastUpdate?: number;\n  } | null> {\n    try {\n      const data = await AsyncStorage.getItem(this.sessionKey);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error('Error loading session data:', error);\n      return null;\n    }\n  }\n\n  // Очистка данных заказа\n  async clearOrderData(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(this.storageKey);\n    } catch (error) {\n      console.error('Error clearing order data:', error);\n      throw new Error('Не удалось очистить данные заказа');\n    }\n  }\n\n  // Очистка данных сессии\n  async clearSessionData(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(this.sessionKey);\n    } catch (error) {\n      console.error('Error clearing session data:', error);\n      throw new Error('Не удалось очистить данные сессии');\n    }\n  }\n\n  // Очистка всех данных\n  async clearAllData(): Promise<void> {\n    try {\n      await AsyncStorage.multiRemove([this.storageKey, this.sessionKey]);\n    } catch (error) {\n      console.error('Error clearing all data:', error);\n      throw new Error('Не удалось очистить все данные');\n    }\n  }\n\n  // Получение времени последнего обновления сессии\n  async getSessionLastUpdate(): Promise<number | null> {\n    try {\n      const sessionData = await this.loadSessionData();\n      return sessionData?.lastUpdate || null;\n    } catch (error) {\n      console.error('Error getting session last update:', error);\n      return null;\n    }\n  }\n\n  // Проверка и очистка устаревшей сессии\n  async checkAndClearExpiredSession(): Promise<void> {\n    try {\n      const lastUpdate = await this.getSessionLastUpdate();\n      if (lastUpdate) {\n        const now = Date.now();\n        const fiveMinutes = 5 * 60 * 1000; // 5 минут в миллисекундах\n        \n        if (now - lastUpdate > fiveMinutes) {\n          console.log('Session expired, clearing...');\n          await this.clearSessionData();\n        }\n      }\n    } catch (error) {\n      console.error('Error checking expired session:', error);\n    }\n  }\n\n  // Проверка валидности данных заказа\n  validateOrderData(data: {\n    familyMemberId: string;\n    packageType: string;\n    addresses: Array<{\n      type: string;\n      address: string;\n      coordinates?: any;\n      coordinate?: any; // Добавляем поддержку обоих форматов\n    }>;\n  }): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Проверка участника семьи\n    if (!data.familyMemberId) {\n      errors.push('Не выбран участник семьи');\n    }\n\n    // Проверка пакета\n    if (!data.packageType) {\n      errors.push('Не выбран пакет');\n    }\n\n    // Проверка адресов\n    if (!data.addresses || data.addresses.length === 0) {\n      errors.push('Не указаны адреса');\n    } else {\n      const fromAddress = data.addresses.find(addr => addr.type === 'from');\n      const toAddress = data.addresses.find(addr => addr.type === 'to');\n\n      if (!fromAddress || !fromAddress.address) {\n        errors.push('Не указан адрес отправления');\n      }\n\n      if (!toAddress || !toAddress.address) {\n        errors.push('Не указан адрес назначения');\n      }\n\n      // Проверка координат для основных адресов (проверяем оба формата)\n      if (fromAddress && !fromAddress.coordinates && !fromAddress.coordinate) {\n        errors.push('Не удалось определить координаты адреса отправления');\n      }\n\n      if (toAddress && !toAddress.coordinates && !toAddress.coordinate) {\n        errors.push('Не удалось определить координаты адреса назначения');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n}\n\nexport const fixdriveOrderService = new FixDriveOrderService();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/fixwaveOrderService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2151,2154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2151,2154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2179,2182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2179,2182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3596,3599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3596,3599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3624,3627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3624,3627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5868,5871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5868,5871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5892,5895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5892,5895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface OrderData {\n  id: string;\n  familyMemberId: string;\n  familyMemberName: string;\n  packageType: string;\n  addresses: Array<{\n    id: string;\n    type: 'from' | 'to' | 'stop';\n    address: string;\n    coordinates?: {\n      latitude: number;\n      longitude: number;\n    };\n  }>;\n  createdAt: number;\n  status: 'draft' | 'confirmed' | 'completed' | 'cancelled';\n}\n\nclass FixWaveOrderService {\n  private storageKey = 'fixwave_order_data';\n  private sessionKey = 'fixwave_session_data';\n\n  // Сохранение данных заказа\n  async saveOrderData(orderData: Omit<OrderData, 'id' | 'createdAt'>): Promise<OrderData> {\n    try {\n      const order: OrderData = {\n        ...orderData,\n        id: `order_${Date.now()}`,\n        createdAt: Date.now(),\n      };\n\n      await AsyncStorage.setItem(this.storageKey, JSON.stringify(order));\n      return order;\n    } catch (error) {\n      console.error('Error saving order data:', error);\n      throw new Error('Не удалось сохранить данные заказа');\n    }\n  }\n\n  // Загрузка данных заказа\n  async loadOrderData(): Promise<OrderData | null> {\n    try {\n      const data = await AsyncStorage.getItem(this.storageKey);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error('Error loading order data:', error);\n      return null;\n    }\n  }\n\n  // Обновление данных заказа\n  async updateOrderData(updates: Partial<OrderData>): Promise<OrderData | null> {\n    try {\n      const currentData = await this.loadOrderData();\n      if (!currentData) {\n        throw new Error('Нет сохраненных данных заказа');\n      }\n\n      const updatedData: OrderData = {\n        ...currentData,\n        ...updates,\n      };\n\n      await AsyncStorage.setItem(this.storageKey, JSON.stringify(updatedData));\n      return updatedData;\n    } catch (error) {\n      console.error('Error updating order data:', error);\n      throw new Error('Не удалось обновить данные заказа');\n    }\n  }\n\n  // Сохранение данных сессии (для навигации между страницами)\n  async saveSessionData(sessionData: {\n    currentPage: string;\n    addressData?: any;\n    timeScheduleData?: any;\n  }): Promise<void> {\n    try {\n      const sessionDataWithTimestamp = {\n        ...sessionData,\n        lastUpdate: Date.now(),\n      };\n      await AsyncStorage.setItem(this.sessionKey, JSON.stringify(sessionDataWithTimestamp));\n    } catch (error) {\n      console.error('Error saving session data:', error);\n      throw new Error('Не удалось сохранить данные сессии');\n    }\n  }\n\n  // Сохранение данных контейнеров по отдельности\n  async saveContainerTimes(containerData: Array<{\n    containerId: string;\n    containerType: string;\n    containerIndex: number;\n    address: string;\n    fromCoordinate?: { latitude: number; longitude: number };\n    toCoordinate?: { latitude: number; longitude: number };\n    time: string;\n    isActive: boolean;\n    isCalculated: boolean;\n  }>): Promise<void> {\n    try {\n      const containerTimesKey = 'fixwave_container_times';\n      const containerTimesWithTimestamp = {\n        containers: containerData,\n        lastUpdate: Date.now(),\n      };\n      await AsyncStorage.setItem(containerTimesKey, JSON.stringify(containerTimesWithTimestamp));\n      console.log('Container times saved:', containerData);\n    } catch (error) {\n      console.error('Error saving container times:', error);\n      throw new Error('Не удалось сохранить данные контейнеров');\n    }\n  }\n\n  // Загрузка данных сессии\n  async loadSessionData(): Promise<{\n    currentPage: string;\n    addressData?: any;\n    timeScheduleData?: any;\n    lastUpdate?: number;\n  } | null> {\n    try {\n      const data = await AsyncStorage.getItem(this.sessionKey);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error('Error loading session data:', error);\n      return null;\n    }\n  }\n\n  // Очистка данных заказа\n  async clearOrderData(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(this.storageKey);\n    } catch (error) {\n      console.error('Error clearing order data:', error);\n      throw new Error('Не удалось очистить данные заказа');\n    }\n  }\n\n  // Очистка данных сессии\n  async clearSessionData(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(this.sessionKey);\n    } catch (error) {\n      console.error('Error clearing session data:', error);\n      throw new Error('Не удалось очистить данные сессии');\n    }\n  }\n\n  // Очистка всех данных\n  async clearAllData(): Promise<void> {\n    try {\n      await AsyncStorage.multiRemove([this.storageKey, this.sessionKey]);\n    } catch (error) {\n      console.error('Error clearing all data:', error);\n      throw new Error('Не удалось очистить все данные');\n    }\n  }\n\n  // Получение времени последнего обновления сессии\n  async getSessionLastUpdate(): Promise<number | null> {\n    try {\n      const sessionData = await this.loadSessionData();\n      return sessionData?.lastUpdate || null;\n    } catch (error) {\n      console.error('Error getting session last update:', error);\n      return null;\n    }\n  }\n\n  // Проверка и очистка устаревшей сессии\n  async checkAndClearExpiredSession(): Promise<void> {\n    try {\n      const lastUpdate = await this.getSessionLastUpdate();\n      if (lastUpdate) {\n        const now = Date.now();\n        const fiveMinutes = 5 * 60 * 1000; // 5 минут в миллисекундах\n        \n        if (now - lastUpdate > fiveMinutes) {\n          console.log('Session expired, clearing...');\n          await this.clearSessionData();\n        }\n      }\n    } catch (error) {\n      console.error('Error checking expired session:', error);\n    }\n  }\n\n  // Проверка валидности данных заказа\n  validateOrderData(data: {\n    familyMemberId: string;\n    packageType: string;\n    addresses: Array<{\n      type: string;\n      address: string;\n      coordinates?: any;\n      coordinate?: any; // Добавляем поддержку обоих форматов\n    }>;\n  }): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Проверка участника семьи\n    if (!data.familyMemberId) {\n      errors.push('Не выбран участник семьи');\n    }\n\n    // Проверка пакета\n    if (!data.packageType) {\n      errors.push('Не выбран пакет');\n    }\n\n    // Проверка адресов\n    if (!data.addresses || data.addresses.length === 0) {\n      errors.push('Не указаны адреса');\n    } else {\n      const fromAddress = data.addresses.find(addr => addr.type === 'from');\n      const toAddress = data.addresses.find(addr => addr.type === 'to');\n\n      if (!fromAddress || !fromAddress.address) {\n        errors.push('Не указан адрес отправления');\n      }\n\n      if (!toAddress || !toAddress.address) {\n        errors.push('Не указан адрес назначения');\n      }\n\n      // Проверка координат для основных адресов (проверяем оба формата)\n      if (fromAddress && !fromAddress.coordinates && !fromAddress.coordinate) {\n        errors.push('Не удалось определить координаты адреса отправления');\n      }\n\n      if (toAddress && !toAddress.coordinates && !toAddress.coordinate) {\n        errors.push('Не удалось определить координаты адреса назначения');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n}\n\nexport const fixwaveOrderService = new FixWaveOrderService();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/services/placesService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'country' is defined but never used.","line":43,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1511,1514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1511,1514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":68,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface PlacePrediction {\n  place_id: string;\n  description: string;\n  structured_formatting: {\n    main_text: string;\n    secondary_text: string;\n  };\n}\n\nexport interface PlaceDetails {\n  place_id: string;\n  formatted_address: string;\n  geometry: {\n    location: {\n      lat: number;\n      lng: number;\n    };\n  };\n  name: string;\n}\n\nexport interface AddressHistory {\n  id: string;\n  address: string;\n  placeId: string;\n  coordinates: {\n    latitude: number;\n    longitude: number;\n  };\n  timestamp: number;\n  useCount: number;\n}\n\nclass PlacesService {\n  private baseUrl = 'https://nominatim.openstreetmap.org';\n  private maxHistoryItems = 5;\n\n  constructor() {}\n\n  // Получение предсказаний адресов через OpenStreetMap Nominatim\n  async getPlacePredictions(input: string, country?: string): Promise<PlacePrediction[]> {\n    if (!input.trim() || input.length < 2) {\n      return [];\n    }\n\n    try {\n      const params = new URLSearchParams({\n        q: input.trim(),\n        format: 'json',\n        limit: '10',\n        addressdetails: '1',\n        'accept-language': 'ru,az,en',\n      });\n\n      const response = await fetch(\n        `${this.baseUrl}/search?${params.toString()}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      // Преобразуем ответ OpenStreetMap в формат Google Places\n      return data.map((item: any, index: number) => ({\n        place_id: item.place_id.toString(),\n        description: item.display_name,\n        structured_formatting: {\n          main_text: item.address?.road || item.address?.house_number || item.name || '',\n          secondary_text: item.address?.city || item.address?.town || item.address?.state || '',\n        },\n      }));\n    } catch (error) {\n      console.error('Error fetching place predictions:', error);\n      return [];\n    }\n  }\n\n  // Получение деталей места по place_id\n  async getPlaceDetails(placeId: string): Promise<PlaceDetails | null> {\n    try {\n      const params = new URLSearchParams({\n        place_id: placeId,\n        format: 'json',\n        addressdetails: '1',\n        'accept-language': 'ru,az,en',\n      });\n\n      const response = await fetch(\n        `${this.baseUrl}/lookup?${params.toString()}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      if (!data || data.length === 0) {\n        return null;\n      }\n\n      const item = data[0];\n\n      return {\n        place_id: item.place_id.toString(),\n        formatted_address: item.display_name,\n        geometry: {\n          location: {\n            lat: parseFloat(item.lat),\n            lng: parseFloat(item.lon),\n          },\n        },\n        name: item.name || item.display_name,\n      };\n    } catch (error) {\n      console.error('Error fetching place details:', error);\n      return null;\n    }\n  }\n\n  // Сохранение адреса в историю\n  async saveToHistory(storageKey: string, address: string, placeId: string, coordinates: { latitude: number; longitude: number }) {\n    try {\n      const history = await this.getHistory(storageKey);\n      \n      // Проверяем, есть ли уже такой адрес\n      const existingIndex = history.findIndex(item => item.placeId === placeId);\n      \n      if (existingIndex !== -1) {\n        // Обновляем существующий\n        history[existingIndex].useCount += 1;\n        history[existingIndex].timestamp = Date.now();\n      } else {\n        // Добавляем новый\n        const newItem: AddressHistory = {\n          id: Date.now().toString(),\n          address,\n          placeId,\n          coordinates,\n          timestamp: Date.now(),\n          useCount: 1,\n        };\n        \n        history.unshift(newItem);\n        \n        // Ограничиваем количество элементов\n        if (history.length > this.maxHistoryItems) {\n          history.splice(this.maxHistoryItems);\n        }\n      }\n      \n      await AsyncStorage.setItem(storageKey, JSON.stringify(history));\n    } catch (error) {\n      console.error('Error saving to history:', error);\n    }\n  }\n\n  // Получение истории адресов\n  async getHistory(storageKey: string): Promise<AddressHistory[]> {\n    if (!__DEV__) {\n      return [];\n    }\n\n    try {\n      const history = await AsyncStorage.getItem(storageKey);\n      return history ? JSON.parse(history) : [];\n    } catch (error) {\n      console.error('Error getting history:', error);\n      return [];\n    }\n  }\n\n  // Очистка истории\n  async clearHistory(storageKey: string): Promise<void> {\n    if (!__DEV__) {\n      return;\n    }\n\n    try {\n      await AsyncStorage.removeItem(storageKey);\n    } catch (error) {\n      console.error('Error clearing history:', error);\n    }\n  }\n\n  // Валидация адреса (минимальная проверка)\n  validateAddress(address: string): { isValid: boolean; error?: string } {\n    const trimmed = address.trim();\n    \n    if (trimmed.length < 5) {\n      return { isValid: false, error: 'components:common.autocomplete.errors.tooShort' };\n    }\n    \n    // Проверяем наличие номера дома (цифры)\n    const hasNumber = /\\d/.test(trimmed);\n    if (!hasNumber) {\n      return { isValid: false, error: 'components:common.autocomplete.errors.noNumber' };\n    }\n    \n    // Проверяем наличие улицы (минимум 3 символа)\n    const words = trimmed.split(/\\s+/);\n    const hasStreet = words.some(word => word.length >= 3 && !/\\d/.test(word));\n    if (!hasStreet) {\n      return { isValid: false, error: 'components:common.autocomplete.errors.noStreet' };\n    }\n    \n    return { isValid: true };\n  }\n}\n\nexport const placesService = new PlacesService();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/shared/constants/addressCategories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/shared/constants/help.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/shared/hooks/useAddressCategories.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AddressCategory' is defined but never used.","line":3,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useMemo, useState } from 'react';\n\nimport AddressService, { AddressCategory } from '../../services/addressService';\nimport { ADDRESS_CATEGORY_CONFIG } from '../constants/addressCategories';\nimport { useI18n } from '../../hooks/useI18n';\n\nconst addressService = new AddressService();\n\nexport interface AddressCategoryOption {\n  id: string;\n  label: string;\n  icon?: string;\n  color?: string;\n}\n\nexport const useAddressCategories = () => {\n  const { t } = useI18n();\n  const [categories, setCategories] = useState<AddressCategoryOption[]>([]);\n\n  useEffect(() => {\n    const loadCategories = async () => {\n      if (__DEV__) {\n        const options = ADDRESS_CATEGORY_CONFIG.map(config => ({\n          id: config.id,\n          label: t(config.translationKey),\n          icon: config.icon,\n        }));\n        setCategories(options);\n        return;\n      }\n\n      const apiCategories = await addressService.fetchAddressCategories();\n      if (!apiCategories.length) {\n        const fallback = ADDRESS_CATEGORY_CONFIG.map(config => ({\n          id: config.id,\n          label: t(config.translationKey),\n          icon: config.icon,\n        }));\n        setCategories(fallback);\n        return;\n      }\n\n      setCategories(\n        apiCategories.map(category => ({\n          id: category.id,\n          label: t(category.name),\n          icon: category.icon,\n          color: category.color,\n        }))\n      );\n    };\n\n    loadCategories();\n  }, [t]);\n\n  const options = useMemo(() => categories, [categories]);\n\n  return {\n    categories: options,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/shared/hooks/useAddressGeocoding.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/shared/hooks/useHelpContent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/shared/hooks/usePaymentHistory.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":146,"column":6,"nodeType":"ArrayExpression","endLine":146,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [currentFilter, loadData]","fix":{"range":[5411,5426],"text":"[currentFilter, loadData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadData' and 'loadStats'. Either include them or remove the dependency array.","line":152,"column":6,"nodeType":"ArrayExpression","endLine":152,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, loadStats, user.id, userRole]","fix":{"range":[5525,5545],"text":"[loadData, loadStats, user.id, userRole]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'type' is defined but never used.","line":242,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":242,"endColumn":65}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { PaymentHistoryService, PaymentTransaction, PaymentFilter, PaymentStats } from '../../services/PaymentHistoryService';\n\nexport interface UsePaymentHistoryResult {\n  // Данные\n  transactions: PaymentTransaction[];\n  stats: PaymentStats;\n  filteredTransactions: PaymentTransaction[];\n  \n  // Состояние\n  loading: boolean;\n  refreshing: boolean;\n  errorKey: string | null;\n  hasMore: boolean;\n  \n  // Фильтры\n  currentFilter: PaymentFilter;\n  availableFilters: {\n    types: Array<{ key: string; label: string; icon: string }>;\n    statuses: Array<{ key: string; label: string; icon: string }>;\n    dateRanges: Array<{ key: string; label: string; icon: string }>;\n  };\n  \n  // Действия\n  setFilter: (filter: PaymentFilter) => void;\n  resetFilter: () => void;\n  refresh: () => Promise<void>;\n  loadMore: () => Promise<void>;\n  clearError: () => void;\n  \n  // Утилиты\n  getTransactionIcon: (type: string) => string;\n  getTransactionColor: (type: string) => string;\n  getStatusColor: (status: string) => string;\n  formatAmount: (amount: number, type: string) => string;\n}\n\nexport const usePaymentHistory = (): UsePaymentHistoryResult => {\n  const { user } = useAuth();\n  const [transactions, setTransactions] = useState<PaymentTransaction[]>([]);\n  const [stats, setStats] = useState<PaymentStats>(PaymentHistoryService.getEmptyStats());\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n  const [errorKey, setErrorKey] = useState<string | null>(null);\n  const [hasMore, setHasMore] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [currentFilter, setCurrentFilter] = useState<PaymentFilter>({\n    type: 'all',\n    status: 'all',\n    dateRange: 'all',\n  });\n\n  const userRole = user?.role === 'driver' ? 'driver' : 'client';\n\n  // Доступные фильтры\n  const availableFilters = useMemo(() => ({\n    types: [\n      { key: 'all', label: 'client.paymentHistory.filter.allTypes', icon: 'list' },\n      { key: 'trip', label: 'client.paymentHistory.filter.trips', icon: 'car' },\n      { key: 'topup', label: 'client.paymentHistory.filter.topups', icon: 'add-circle' },\n      { key: 'refund', label: 'client.paymentHistory.filter.refunds', icon: 'refresh-circle' },\n      { key: 'fee', label: 'client.paymentHistory.filter.fees', icon: 'card' },\n      { key: 'package_purchase', label: 'client.paymentHistory.filter.packages', icon: 'cube' },\n      { key: 'subscription_renewal', label: 'client.paymentHistory.filter.subscriptions', icon: 'refresh' },\n      ...(userRole === 'driver' ? [\n        { key: 'withdrawal', label: 'driver.balance.transactions.withdrawal', icon: 'cash' },\n        { key: 'earnings', label: 'driver.balance.transactions.earnings', icon: 'trending-up' },\n      ] : []),\n    ],\n    statuses: [\n      { key: 'all', label: 'client.paymentHistory.filter.allStatuses', icon: 'checkmark-circle' },\n      { key: 'completed', label: 'client.paymentHistory.status.completed', icon: 'checkmark-circle' },\n      { key: 'pending', label: 'client.paymentHistory.status.pending', icon: 'time' },\n      { key: 'failed', label: 'client.paymentHistory.status.failed', icon: 'close-circle' },\n    ],\n    dateRanges: [\n      { key: 'all', label: 'client.paymentHistory.filter.allTime', icon: 'calendar' },\n      { key: 'today', label: 'client.paymentHistory.filter.today', icon: 'today' },\n      { key: 'week', label: 'client.paymentHistory.filter.thisWeek', icon: 'calendar-outline' },\n      { key: 'month', label: 'client.paymentHistory.filter.thisMonth', icon: 'calendar' },\n      { key: 'year', label: 'client.paymentHistory.filter.thisYear', icon: 'calendar' },\n    ],\n  }), [userRole]);\n\n  // Отфильтрованные транзакции\n  const filteredTransactions = useMemo(() => {\n    return PaymentHistoryService.applyFilters(transactions, currentFilter);\n  }, [transactions, currentFilter]);\n\n  // Загрузка данных\n  const loadData = useCallback(async (page: number = 1, isRefresh: boolean = false) => {\n    if (!user?.id) return;\n\n    try {\n      if (isRefresh) {\n        setRefreshing(true);\n      } else if (page === 1) {\n        setLoading(true);\n      }\n\n      setErrorKey(null);\n\n      const response = await PaymentHistoryService.getPaymentHistory(\n        user.id,\n        userRole,\n        currentFilter,\n        page,\n        20\n      );\n\n      if (page === 1) {\n        setTransactions(response.transactions);\n      } else {\n        setTransactions(prev => [...prev, ...response.transactions]);\n      }\n\n      setStats(response.stats);\n      setHasMore(response.hasMore);\n      setCurrentPage(page);\n    } catch (error) {\n      console.error('Error loading payment history:', error);\n      setErrorKey('errors.paymentHistoryLoadFailed');\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  }, [user?.id, userRole, currentFilter]);\n\n  // Обновление статистики\n  const loadStats = useCallback(async () => {\n    if (!user?.id) return;\n\n    try {\n      const newStats = await PaymentHistoryService.getPaymentStats(user.id, userRole);\n      setStats(newStats);\n    } catch (error) {\n      console.error('Error loading payment stats:', error);\n    }\n  }, [user?.id, userRole]);\n\n  // Загрузка при изменении фильтра\n  useEffect(() => {\n    setCurrentPage(1);\n    loadData(1, false);\n  }, [currentFilter]);\n\n  // Первоначальная загрузка\n  useEffect(() => {\n    loadData(1, false);\n    loadStats();\n  }, [user?.id, userRole]);\n\n  // Обновление данных\n  const refresh = useCallback(async () => {\n    setCurrentPage(1);\n    await loadData(1, true);\n    await loadStats();\n  }, [loadData, loadStats]);\n\n  // Загрузка следующей страницы\n  const loadMore = useCallback(async () => {\n    if (!hasMore || loading || refreshing) return;\n    \n    await loadData(currentPage + 1, false);\n  }, [hasMore, loading, refreshing, currentPage, loadData]);\n\n  // Установка фильтра\n  const setFilter = useCallback((filter: PaymentFilter) => {\n    setCurrentFilter(filter);\n  }, []);\n\n  // Сброс фильтра\n  const resetFilter = useCallback(() => {\n    setCurrentFilter({\n      type: 'all',\n      status: 'all',\n      dateRange: 'all',\n    });\n  }, []);\n\n  // Очистка ошибки\n  const clearError = useCallback(() => {\n    setErrorKey(null);\n  }, []);\n\n  // Утилиты для отображения\n  const getTransactionIcon = useCallback((type: string): string => {\n    switch (type) {\n      case 'trip':\n        return 'car';\n      case 'topup':\n        return 'add-circle';\n      case 'refund':\n        return 'refresh-circle';\n      case 'fee':\n      case 'package_purchase':\n      case 'subscription_renewal':\n        return 'card';\n      case 'withdrawal':\n        return 'cash';\n      case 'earnings':\n        return 'trending-up';\n      default:\n        return 'card';\n    }\n  }, []);\n\n  const getTransactionColor = useCallback((type: string): string => {\n    switch (type) {\n      case 'trip':\n        return '#e53935';\n      case 'topup':\n      case 'earnings':\n        return '#4caf50';\n      case 'refund':\n        return '#2196f3';\n      case 'fee':\n      case 'package_purchase':\n      case 'subscription_renewal':\n        return '#ff9800';\n      case 'withdrawal':\n        return '#f44336';\n      default:\n        return '#003366';\n    }\n  }, []);\n\n  const getStatusColor = useCallback((status: string): string => {\n    switch (status) {\n      case 'completed':\n        return '#4caf50';\n      case 'pending':\n        return '#ff9800';\n      case 'failed':\n        return '#e53935';\n      default:\n        return '#888';\n    }\n  }, []);\n\n  const formatAmount = useCallback((amount: number, type: string): string => {\n    const sign = amount > 0 ? '+' : '';\n    const absAmount = Math.abs(amount);\n    return `${sign}${absAmount} AFc`;\n  }, []);\n\n  return {\n    // Данные\n    transactions,\n    stats,\n    filteredTransactions,\n    \n    // Состояние\n    loading,\n    refreshing,\n    errorKey,\n    hasMore,\n    \n    // Фильтры\n    currentFilter,\n    availableFilters,\n    \n    // Действия\n    setFilter,\n    resetFilter,\n    refresh,\n    loadMore,\n    clearError,\n    \n    // Утилиты\n    getTransactionIcon,\n    getTransactionColor,\n    getStatusColor,\n    formatAmount,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/shared/types/address.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/shared/types/help.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/animations/BalanceAnimations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/animations/RulesAnimations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/animations/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/AddressModal.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/AppAvatar.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/AppCard.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/AuthStatusIndicator.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/BalanceCardDecoration.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/BalanceTopUpHistory.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/Button.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/DatePicker.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/DriverModal/content/Buttons.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/DriverModal/content/InfoBar.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/DriverModal/content/Trips.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/DriverModal/dialogs/Dialogs.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/DriverModal/dialogs/Rating.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/DriverModal/header/Avatar.styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SIZES' is defined but never used.","line":2,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StyleSheet } from 'react-native';\nimport { getCurrentColors, SIZES } from '../../../../constants/colors';\n\nexport const createAvatarStyles = (isDark: boolean, role: 'client' | 'driver' = 'client') => {\n  const palette = getCurrentColors(isDark);\n\n  return StyleSheet.create({\n    avatarContainer: {\n      position: 'relative',\n    },\n    avatar: {\n      width: 48,\n      height: 48,\n      borderRadius: 24,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: palette.primary,\n      ...(role === 'client' && {\n        width: 56,\n        height: 56,\n        borderRadius: 28,\n      }),\n    },\n    onlineIndicator: {\n      position: 'absolute',\n      bottom: 2,\n      right: 2,\n      width: 12,\n      height: 12,\n      borderRadius: 6,\n      backgroundColor: '#10B981',\n      borderWidth: 2,\n      borderColor: palette.background,\n    },\n  });\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/DriverModal/header/Header.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/DriverModal/header/Slider.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/DriverModal/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCurrentColors' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SHADOWS' is defined but never used.","line":2,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SIZES' is defined but never used.","line":2,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StyleSheet } from 'react-native';\nimport { getCurrentColors, SHADOWS, SIZES } from '../../../constants/colors';\n\n// Импорты стилей\nimport { createModalStyles } from './modal/Modal.styles';\nimport { createCallSheetStyles } from './modal/CallSheet.styles';\nimport { createHeaderStyles } from './header/Header.styles';\nimport { createAvatarStyles } from './header/Avatar.styles';\nimport { createSliderStyles } from './header/Slider.styles';\nimport { createInfoBarStyles } from './content/InfoBar.styles';\nimport { createTripsStyles } from './content/Trips.styles';\nimport { createButtonsStyles } from './content/Buttons.styles';\nimport { createDialogsStyles } from './dialogs/Dialogs.styles';\nimport { createRatingStyles } from './dialogs/Rating.styles';\n\nexport const createDriverModalStyles = (isDark: boolean, role: 'client' | 'driver' = 'client') => {\n  // Создаем все стили\n  const modalStyles = createModalStyles(isDark);\n  const callSheetStyles = createCallSheetStyles(isDark);\n  const headerStyles = createHeaderStyles(isDark, role);\n  const avatarStyles = createAvatarStyles(isDark, role);\n  const sliderStyles = createSliderStyles(isDark);\n  const infoBarStyles = createInfoBarStyles(isDark);\n  const tripsStyles = createTripsStyles(isDark);\n  const buttonsStyles = createButtonsStyles(isDark);\n  const dialogsStyles = createDialogsStyles(isDark);\n  const ratingStyles = createRatingStyles(isDark);\n\n  // Объединяем все стили\n  return StyleSheet.create({\n    // Modal styles\n    ...modalStyles,\n    \n    // Call sheet styles\n    ...callSheetStyles,\n    \n    // Header styles\n    ...headerStyles,\n    \n    // Avatar styles\n    ...avatarStyles,\n    \n    // Slider styles\n    ...sliderStyles,\n    \n    // Info bar styles\n    ...infoBarStyles,\n    \n    // Trips styles\n    ...tripsStyles,\n    \n    // Buttons styles\n    ...buttonsStyles,\n    \n    // Dialogs styles\n    ...dialogsStyles,\n    \n    // Rating styles\n    ...ratingStyles,\n  });\n};\n\n// Экспортируем отдельные функции для использования в других компонентах\nexport { createModalStyles } from './modal/Modal.styles';\nexport { createCallSheetStyles } from './modal/CallSheet.styles';\nexport { createHeaderStyles } from './header/Header.styles';\nexport { createAvatarStyles } from './header/Avatar.styles';\nexport { createSliderStyles } from './header/Slider.styles';\nexport { createInfoBarStyles } from './content/InfoBar.styles';\nexport { createTripsStyles } from './content/Trips.styles';\nexport { createButtonsStyles } from './content/Buttons.styles';\nexport { createDialogsStyles } from './dialogs/Dialogs.styles';\nexport { createRatingStyles } from './dialogs/Rating.styles';\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/DriverModal/modal/CallSheet.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/DriverModal/modal/Modal.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/ErrorDisplay.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/FixDriveAddressInput.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/FixDriveDropdown.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/LanguageButton.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/LanguageModal.styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'screenHeight' is assigned a value but never used.","line":3,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StyleSheet, Dimensions } from 'react-native';\n\nconst { height: screenHeight } = Dimensions.get('window');\n\nexport const LanguageModalStyles = StyleSheet.create({\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n  },\n  modalContent: {\n    backgroundColor: '#fff',\n    borderRadius: 16,\n    width: '100%',\n    maxHeight: '70%',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 6,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 12,\n    elevation: 8,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e0e0e0',\n    backgroundColor: '#f5f5f5',\n    borderTopLeftRadius: 16,\n    borderTopRightRadius: 16,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#333',\n  },\n  closeButton: {\n    padding: 6,\n  },\n  languageList: {\n    maxHeight: 350,\n    paddingVertical: 8,\n  },\n  languageItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingVertical: 14,\n    marginHorizontal: 12,\n    marginVertical: 4,\n    borderRadius: 12,\n    backgroundColor: '#fff',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.08,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  languageItemSelected: {\n    backgroundColor: '#e3f2fd',\n    borderWidth: 1,\n    borderColor: '#2196f3',\n  },\n  languageFlag: {\n    fontSize: 24,\n    marginRight: 12,\n  },\n  languageName: {\n    fontSize: 16,\n    color: '#333',\n    flex: 1,\n    fontWeight: '500',\n  },\n  languageNameSelected: {\n    fontWeight: '600',\n    color: '#1976d2',\n  },\n  // Стили для иконки выбора\n  checkIcon: {\n    marginLeft: 6,\n  },\n});\n\n// Функция для получения цветовых стилей в зависимости от темы\nexport const getLanguageModalColors = (isDark: boolean) => {\n  const colors = isDark ? {\n    background: '#1F2937',\n    surface: '#374151',\n    text: '#F9FAFB',\n    textSecondary: '#9CA3AF',\n    primary: '#3B82F6',\n    border: '#4B5563',\n    selectedBg: '#1E3A8A',\n    selectedBorder: '#3B82F6',\n  } : {\n    background: '#ffffff',\n    surface: '#f5f5f5',\n    text: '#333333',\n    textSecondary: '#666666',\n    primary: '#2196f3',\n    border: '#e0e0e0',\n    selectedBg: '#e3f2fd',\n    selectedBorder: '#2196f3',\n  };\n\n  return {\n    modalContent: { backgroundColor: colors.background },\n    modalHeader: { \n      backgroundColor: colors.surface,\n      borderBottomColor: colors.border \n    },\n    modalTitle: { color: colors.text },\n    languageItem: { \n      backgroundColor: colors.background,\n      shadowColor: isDark ? '#000' : '#000',\n    },\n    languageItemSelected: { \n      backgroundColor: colors.selectedBg,\n      borderColor: colors.selectedBorder \n    },\n    languageName: { color: colors.text },\n    languageNameSelected: { color: colors.primary },\n  };\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/LanguageSelector.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/LanguageTest.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/MapView.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/NotificationDropdown.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/PackageCard.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/PasswordStrengthIndicator.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/PaymentHistoryFilter.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/PaymentPackageCard.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/PhoneInput.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/PhotoUpload.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/ProfileChildrenSection.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/ProfileHeader.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/ProfileNotificationsModal.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/ProfileOption.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/ProgressBar.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/RatingStars.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/RouteBuilder.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/RulesModal.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/RulesSlides.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/Select.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/SocialAuthButtons.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/ThemeToggle.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/TripsFilter.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/VipPackages.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/driver/DriverAddVehicleModal.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/driver/DriverInfoBar.styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SHADOWS' is defined but never used.","line":2,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StyleSheet } from 'react-native';\nimport { getCurrentColors, SHADOWS, SIZES } from '../../../constants/colors';\n\nexport const createDriverInfoBarStyles = (isDark: boolean) => {\n  const palette = getCurrentColors(isDark);\n\n  return StyleSheet.create({\n    driverInfoBar: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginTop: -SIZES.lg - 4,\n      marginBottom: SIZES.xs + 6,\n      paddingHorizontal: SIZES.sm,\n      paddingVertical: SIZES.xs + 6,\n      borderTopWidth: 1,\n      borderTopColor: palette.border,\n      borderBottomWidth: 1,\n      borderBottomColor: palette.border,\n      backgroundColor: palette.surface,\n      borderRadius: SIZES.radius.md,\n    },\n    scheduleInfo: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: SIZES.xs,\n    },\n    scheduleText: {\n      fontSize: SIZES.fontSize.sm,\n      color: palette.textSecondary,\n      fontWeight: '500',\n    },\n    priceInfo: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: SIZES.xs,\n    },\n    priceText: {\n      fontSize: SIZES.fontSize.sm,\n      color: palette.textSecondary,\n      fontWeight: '500',\n    },\n    distanceInfo: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: SIZES.xs,\n    },\n    distanceText: {\n      fontSize: SIZES.fontSize.sm,\n      color: palette.textSecondary,\n      fontWeight: '500',\n    },\n    timeInfo: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: SIZES.xs,\n    },\n    timeText: {\n      fontSize: SIZES.fontSize.sm,\n      color: palette.textSecondary,\n      fontWeight: '500',\n    },\n  });\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/driver/DriverPersonalInfoSection.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/driver/DriverProfileAvatarSection.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/driver/DriverProfileHeader.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/driver/DriverVipSection.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/driver/VehicleIdCard.styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'colors' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StyleSheet } from 'react-native';\nimport { colors } from '../../../constants/colors';\n\nexport const VehicleIdCardStyles = StyleSheet.create({\n  card: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    overflow: 'hidden',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3.84,\n    elevation: 5,\n    marginBottom: 12,\n  },\n  header: {\n    backgroundColor: '#003366', // Используем тот же цвет что и кнопки\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  headerIcon: {\n    marginRight: 6,\n  },\n  headerText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '700',\n    letterSpacing: 0.5,\n  },\n  content: {\n    flexDirection: 'row',\n    padding: 16,\n  },\n  photoContainer: {\n    width: '40%',\n    marginRight: 12,\n  },\n  vehiclePhoto: {\n    width: '90%',\n    height: 90,\n    borderRadius: 8,\n    alignSelf: 'center',\n    marginTop: 8,\n  },\n  dataContainer: {\n    flex: 1,\n    justifyContent: 'space-between',\n  },\n  dataRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 4,\n    borderBottomWidth: 1,\n    borderBottomColor: '#083198', // Используем цвет активной иконки заработка\n  },\n  dataLabel: {\n    fontSize: 12,\n    color: '#6b7280',\n    fontWeight: '500',\n    fontFamily: 'monospace',\n  },\n  dataValue: {\n    fontSize: 12,\n    color: '#1f2937',\n    fontWeight: '600',\n    fontFamily: 'monospace',\n    textAlign: 'right',\n  },\n});\n\nexport const getVehicleIdCardColors = (isDark: boolean) => {\n  // Используем цвета иконки заработка из TabBar\n  const themeColors = isDark ? {\n    background: '#111827',\n    surface: '#1F2937',\n    text: '#F9FAFB',\n    textSecondary: '#9CA3AF',\n    primary: '#3B82F6', // Цвет активной иконки заработка в темной теме\n    border: '#3B82F6', // Линия под текстом в темной теме\n    card: '#1F2937',\n    shadow: '#000',\n  } : {\n    background: '#ffffff',\n    surface: '#f9f9f9',\n    text: '#003366',\n    textSecondary: '#666666',\n    primary: '#083198', // Цвет активной иконки заработка в светлой теме\n    border: '#083198', // Линия под текстом в светлой теме\n    card: '#ffffff',\n    shadow: '#000',\n  };\n  \n  return {\n    card: { \n      backgroundColor: themeColors.surface,\n      shadowColor: themeColors.shadow \n    },\n    header: { backgroundColor: themeColors.primary },\n    dataLabel: { color: themeColors.textSecondary },\n    dataValue: { color: themeColors.text },\n    dataRow: { borderBottomColor: themeColors.border },\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/profile/AddFamilyModal.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/profile/FamilyMemberItem.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/profile/FamilySection.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/profile/PersonalInfoSection.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/profile/ProfileAvatarSection.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/profile/ProfileHeader.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/profile/VipSection.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/components/profile/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/navigation/TabBar.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/ChatScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/ClientProfileScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/ClientRegisterScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/DriverRegisterScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/EarningsScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/EarningsScreen/EarningsStats.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/ForgotPasswordScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/LoginScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/NotificationsScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/OTPVerificationScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/OrdersMapScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/PlusScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/ProgressScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/RoleSelectScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/ScheduleScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/StartTripScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/SupportChatScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/auth/OTPVerificationScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/chats/ChatListScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/chats/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/client/AboutScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/driver/DriverProfileScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/drivers/DriverCard.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/drivers/DriversScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/drivers/NotificationsModal.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/drivers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/AboutScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/BalanceScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/CardsScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/ChangePasswordScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/EditClientProfileScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/HelpScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/PaymentHistoryScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/PremiumPackagesScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/ResidenceScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/SettingsScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/TripsScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/driver/DriverVehiclesScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/styles/screens/profile/driver/EditDriverProfileScreen.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/balance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/billing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/chat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/countries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/driver.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/driver/DriverNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/driver/DriverVehicle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/family.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/navigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/order.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/package.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/types/user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/apiTest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/countries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/countries/africa.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/countries/america.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/countries/asia.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/countries/europe.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/countries/oceania.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/countryHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/devTools.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2711,2714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2711,2714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6787,6790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6787,6790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ⚠️ DEV ONLY - DEVELOPMENT TOOLS ⚠️\n * \n * Утилиты для работы с DEV-режимом\n * TODO: УДАЛИТЬ ПЕРЕД ПРОДАКШЕНОМ!\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport DevRegistrationService from '../services/DevRegistrationService';\n\n/**\n * Показать все данные в AsyncStorage (только DEV ключи)\n */\nexport const showDevStorage = async (): Promise<void> => {\n  if (!__DEV__) return;\n\n  console.log('\\n╔════════════════════════════════════════╗');\n  console.log('║   DEV STORAGE INSPECTOR                ║');\n  console.log('╠════════════════════════════════════════╣');\n\n  try {\n    // Получаем все ключи\n    const allKeys = await AsyncStorage.getAllKeys();\n    const devKeys = allKeys.filter(key => key.startsWith('@dev_'));\n\n    console.log(`║ 🔑 Total DEV keys: ${devKeys.length.toString().padEnd(20)}║`);\n    console.log('╠════════════════════════════════════════╣');\n\n    for (const key of devKeys) {\n      const value = await AsyncStorage.getItem(key);\n      if (value) {\n        try {\n          const parsed = JSON.parse(value);\n          const count = Array.isArray(parsed) ? parsed.length : 1;\n          console.log(`║ ${key.padEnd(38)}║`);\n          console.log(`║   Items: ${count.toString().padEnd(30)}║`);\n        } catch {\n          console.log(`║ ${key.padEnd(38)}║`);\n          console.log(`║   Value: ${value.substring(0, 26).padEnd(30)}║`);\n        }\n      }\n    }\n\n    console.log('╚════════════════════════════════════════╝\\n');\n\n    // Показываем пользователей\n    await DevRegistrationService.logDevRegistrationStats();\n  } catch (error) {\n    console.error('[DEV] Error showing storage:', error);\n  }\n};\n\n/**\n * Очистить ТОЛЬКО DEV данные (безопасно)\n */\nexport const clearDevStorage = async (): Promise<void> => {\n  if (!__DEV__) return;\n\n  try {\n    console.log('[DEV] 🗑️ Clearing DEV storage...');\n\n    // Получаем все ключи\n    const allKeys = await AsyncStorage.getAllKeys();\n    const devKeys = allKeys.filter(key => key.startsWith('@dev_'));\n\n    if (devKeys.length === 0) {\n      console.log('[DEV] ℹ️ No DEV keys to clear');\n      return;\n    }\n\n    // Удаляем только DEV ключи\n    await AsyncStorage.multiRemove(devKeys);\n\n    console.log(`[DEV] ✅ Cleared ${devKeys.length} DEV keys`);\n    console.log('[DEV] 🔑 Removed keys:', devKeys.join(', '));\n  } catch (error) {\n    console.error('[DEV] Error clearing storage:', error);\n    throw error;\n  }\n};\n\n/**\n * Экспорт всех DEV данных в JSON\n */\nexport const exportDevData = async (): Promise<string> => {\n  if (!__DEV__) return '{}';\n\n  try {\n    const allKeys = await AsyncStorage.getAllKeys();\n    const devKeys = allKeys.filter(key => key.startsWith('@dev_'));\n\n    const data: Record<string, any> = {};\n\n    for (const key of devKeys) {\n      const value = await AsyncStorage.getItem(key);\n      if (value) {\n        try {\n          data[key] = JSON.parse(value);\n        } catch {\n          data[key] = value;\n        }\n      }\n    }\n\n    const json = JSON.stringify(data, null, 2);\n    console.log('[DEV] 📤 Exported data:');\n    console.log(json);\n\n    return json;\n  } catch (error) {\n    console.error('[DEV] Error exporting data:', error);\n    return '{}';\n  }\n};\n\n/**\n * Импорт DEV данных из JSON\n */\nexport const importDevData = async (jsonString: string): Promise<void> => {\n  if (!__DEV__) return;\n\n  try {\n    const data = JSON.parse(jsonString);\n\n    for (const [key, value] of Object.entries(data)) {\n      if (key.startsWith('@dev_')) {\n        const stringValue = typeof value === 'string' ? value : JSON.stringify(value);\n        await AsyncStorage.setItem(key, stringValue);\n        console.log(`[DEV] ✅ Imported: ${key}`);\n      }\n    }\n\n    console.log('[DEV] 🎉 Import completed!');\n  } catch (error) {\n    console.error('[DEV] Error importing data:', error);\n    throw error;\n  }\n};\n\n/**\n * Проверить состояние AsyncStorage\n */\nexport const checkStorageHealth = async (): Promise<void> => {\n  if (!__DEV__) return;\n\n  console.log('[DEV] 🏥 Checking AsyncStorage health...');\n\n  try {\n    // Тестовая запись\n    const testKey = '@dev_health_check';\n    const testValue = { timestamp: Date.now(), test: true };\n\n    await AsyncStorage.setItem(testKey, JSON.stringify(testValue));\n    const retrieved = await AsyncStorage.getItem(testKey);\n    await AsyncStorage.removeItem(testKey);\n\n    if (retrieved) {\n      const parsed = JSON.parse(retrieved);\n      if (parsed.test === true) {\n        console.log('[DEV] ✅ AsyncStorage is healthy');\n        return;\n      }\n    }\n\n    console.log('[DEV] ⚠️ AsyncStorage may have issues');\n  } catch (error) {\n    console.error('[DEV] ❌ AsyncStorage error:', error);\n  }\n};\n\n/**\n * Проверить профили пользователей\n */\nexport const checkProfiles = async (): Promise<void> => {\n  if (!__DEV__) return;\n\n  console.log('\\n╔════════════════════════════════════════╗');\n  console.log('║   PROFILE CHECK                        ║');\n  console.log('╠════════════════════════════════════════╣');\n\n  try {\n    const allKeys = await AsyncStorage.getAllKeys();\n    const profileKeys = allKeys.filter(key => key.startsWith('@profile_'));\n\n    console.log(`║ 🔑 Total profile keys: ${profileKeys.length.toString().padEnd(17)}║`);\n    console.log('╚════════════════════════════════════════╝\\n');\n\n    for (const key of profileKeys) {\n      const profile = await AsyncStorage.getItem(key);\n      if (profile) {\n        const parsed = JSON.parse(profile);\n        console.log(`📋 ${key}`);\n        console.log(`   Email: ${parsed.email}`);\n        console.log(`   Name: ${parsed.firstName} ${parsed.lastName}`);\n        console.log(`   Role: ${parsed.role}`);\n        console.log('');\n      }\n    }\n\n    // Проверяем user в 'user' ключе\n    const currentUser = await AsyncStorage.getItem('user');\n    if (currentUser) {\n      const user = JSON.parse(currentUser);\n      console.log('👤 Current logged user:');\n      console.log(`   ID: ${user.id}`);\n      console.log(`   Email: ${user.email}`);\n      console.log(`   Profile key should be: @profile_${user.id}`);\n      \n      // Проверяем существует ли профиль\n      const profileExists = await AsyncStorage.getItem(`@profile_${user.id}`);\n      console.log(`   Profile exists: ${profileExists ? '✅ YES' : '❌ NO'}`);\n    } else {\n      console.log('👤 No user logged in');\n    }\n  } catch (error) {\n    console.error('[DEV] Error checking profiles:', error);\n  }\n};\n\n/**\n * Быстрые команды для консоли\n */\nexport const DevCommands = {\n  show: showDevStorage,\n  clear: clearDevStorage,\n  export: exportDevData,\n  import: importDevData,\n  health: checkStorageHealth,\n  users: DevRegistrationService.logDevRegistrationStats,\n  profiles: checkProfiles,\n};\n\n// Экспортируем в глобальный объект для удобства (только в DEV)\nif (__DEV__ && typeof global !== 'undefined') {\n  (global as any).DevCommands = DevCommands;\n  console.log('\\n✅ DevCommands доступны в консоли!');\n  console.log('Используй: DevCommands.show() / .clear() / .users() и т.д.\\n');\n}\n\nexport default {\n  showDevStorage,\n  clearDevStorage,\n  exportDevData,\n  importDevData,\n  checkStorageHealth,\n  checkProfiles,\n  DevCommands,\n};\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/driverData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/packageVisuals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/profileHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1391,1394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1391,1394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3136,3139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3136,3139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Alert } from 'react-native';\n\n// Функция для получения дефолтной даты (теперь всегда 06.11.2000)\nexport const getDefaultDate = (): string => {\n  return '2000-11-06';\n};\n\n// Функция для точного расчета возраста\nexport const calculateAge = (birthDate: string): number => {\n  const today = new Date();\n  const birth = new Date(birthDate);\n  \n  let age = today.getFullYear() - birth.getFullYear();\n  const monthDiff = today.getMonth() - birth.getMonth();\n  \n  // Если день рождения еще не наступил в этом году, уменьшаем возраст на 1\n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n    age--;\n  }\n  \n  return age;\n};\n\n// Функция для проверки изменений в форме\nexport const hasChanges = (\n  formData: {\n    firstName: string;\n    lastName: string;\n    phone: string;\n    email: string;\n    birthDate: string;\n  },\n  originalData: {\n    firstName: string;\n    lastName: string;\n    phone: string;\n    email: string;\n    birthDate: string;\n  }\n): boolean => {\n  return (\n    formData.firstName !== originalData.firstName ||\n    formData.lastName !== originalData.lastName ||\n    formData.phone !== originalData.phone ||\n    formData.email !== originalData.email ||\n    formData.birthDate !== originalData.birthDate\n  );\n};\n\n// Функция для обработки нажатия на круг (переключение между клиентом и водителем)\nexport const handleCirclePress = (\n  navigation: any,\n  login: (email: string, password: string) => Promise<boolean>,\n  t: (key: string) => string,\n  changeRole?: (role: 'client' | 'driver') => void\n): void => {\n  // После завершения анимации проверяем, есть ли уже аккаунт водителя\n  // TODO: Здесь должна быть проверка статуса водителя\n  const hasDriverAccount = false; // Заглушка, нужно заменить на реальную проверку\n  \n  if (hasDriverAccount) {\n    // Если уже есть аккаунт водителя, переключаемся на профиль водителя\n    console.log('Переключаемся к водительскому профилю...');\n    try {\n      // Просто меняем роль - RootNavigator автоматически переключится\n      if (changeRole) {\n        changeRole('driver');\n      }\n      console.log('Роль изменена на водитель');\n    } catch (error) {\n      console.error('Ошибка смены роли:', error);\n      Alert.alert('Ошибка', 'Не удалось переключиться к водительскому профилю');\n    }\n  } else {\n    // Если нет аккаунта водителя, показываем уведомление\n    Alert.alert(\n      t('profile.becomeDriverModal.title') || 'Стать водителем',\n      t('profile.becomeDriverModal.message') || 'Открыть страницу водителя?',\n      [\n        { text: t('profile.becomeDriverModal.cancel') || 'Отмена', style: 'cancel' },\n        { \n          text: t('profile.becomeDriverModal.proceed') || 'Перейти',\n          onPress: async () => {\n            // Автоматически входим как водитель\n            const success = await login('driver@example.com', 'password123');\n            if (!success) {\n              Alert.alert('Ошибка', 'Не удалось войти как водитель');\n            }\n          }\n        }\n      ]\n    );\n  }\n};\n\n// Функция для обработки нажатия на круг в профиле водителя (переключение к клиенту)\nexport const handleDriverCirclePress = (\n  navigation: any,\n  login: (email: string, password: string) => Promise<boolean>,\n  t: (key: string) => string,\n  changeRole?: (role: 'client' | 'driver') => void\n): void => {\n  // После завершения анимации проверяем, есть ли уже аккаунт клиента\n  // TODO: Здесь должна быть проверка статуса клиента\n  const hasClientAccount = false; // Заглушка, нужно заменить на реальную проверку\n  \n  if (hasClientAccount) {\n    // Если уже есть аккаунт клиента, переключаемся на профиль клиента\n    console.log('Переключаемся к клиентскому профилю...');\n    try {\n      // Просто меняем роль - RootNavigator автоматически переключится\n      if (changeRole) {\n        changeRole('client');\n      }\n      console.log('Роль изменена на клиент');\n    } catch (error) {\n      console.error('Ошибка смены роли:', error);\n      Alert.alert('Ошибка', 'Не удалось переключиться к клиентскому профилю');\n    }\n  } else {\n    // Если нет аккаунта клиента, показываем уведомление\n    Alert.alert(\n      t('profile.becomeClientModal.title') || 'Стать клиентом',\n      t('profile.becomeClientModal.message') || 'Открыть страницу клиента?',\n      [\n        { text: t('profile.becomeClientModal.cancel') || 'Отмена', style: 'cancel' },\n        { \n          text: t('profile.becomeClientModal.proceed') || 'Перейти',\n          onPress: async () => {\n            // Автоматически входим как клиент\n            const success = await login('client@example.com', 'password123');\n            if (!success) {\n              Alert.alert(t('errors.error'), t('profile.becomeClientModal.loginError') || 'Не удалось войти как клиент');\n            }\n          }\n        }\n      ]\n    );\n  }\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/scheduleStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/storageKeys.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/storageKeysDev.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/translationValidator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2289,2292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2289,2292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SUPPORTED_LANGUAGES, type SupportedLanguage } from '../i18n';\n\ninterface TranslationKey {\n  key: string;\n  namespace: string;\n  path: string[];\n}\n\ninterface MissingTranslation {\n  key: string;\n  namespace: string;\n  missingLanguages: SupportedLanguage[];\n}\n\n/**\n * Утилита для проверки полноты переводов\n */\nexport class TranslationValidator {\n  private static readonly REQUIRED_NAMESPACES = [\n    'common',\n    'login',\n    'register',\n    'profile',\n    'errors',\n    'notifications',\n    'support',\n    'navigation',\n    'components',\n    'driver',\n    'client'\n  ];\n\n  /**\n   * Проверяет полноту переводов для всех языков\n   */\n  static validateTranslations(): MissingTranslation[] {\n    const missingTranslations: MissingTranslation[] = [];\n    \n    // Получаем все ключи из русского языка (основного)\n    const baseLanguage: SupportedLanguage = 'ru';\n    const baseKeys = this.getAllTranslationKeys(baseLanguage);\n    \n    // Проверяем каждый ключ во всех языках\n    for (const translationKey of baseKeys) {\n      const missingLanguages: SupportedLanguage[] = [];\n      \n      for (const language of Object.keys(SUPPORTED_LANGUAGES) as SupportedLanguage[]) {\n        if (language === baseLanguage) continue;\n        \n        if (!this.hasTranslation(language, translationKey.key)) {\n          missingLanguages.push(language);\n        }\n      }\n      \n      if (missingLanguages.length > 0) {\n        missingTranslations.push({\n          key: translationKey.key,\n          namespace: translationKey.namespace,\n          missingLanguages\n        });\n      }\n    }\n    \n    return missingTranslations;\n  }\n\n  /**\n   * Получает все ключи переводов для указанного языка\n   */\n  private static getAllTranslationKeys(language: SupportedLanguage): TranslationKey[] {\n    const keys: TranslationKey[] = [];\n    \n    for (const namespace of this.REQUIRED_NAMESPACES) {\n      try {\n        const translations = require(`../i18n/${namespace}/${language}.json`);\n        this.extractKeys(translations, namespace, [], keys);\n      } catch (error) {\n        console.warn(`Failed to load translations for ${namespace}/${language}:`, error);\n      }\n    }\n    \n    return keys;\n  }\n\n  /**\n   * Рекурсивно извлекает все ключи из объекта переводов\n   */\n  private static extractKeys(\n    obj: any, \n    namespace: string, \n    path: string[], \n    keys: TranslationKey[]\n  ): void {\n    for (const [key, value] of Object.entries(obj)) {\n      const currentPath = [...path, key];\n      \n      if (typeof value === 'string') {\n        keys.push({\n          key: `${namespace}.${currentPath.join('.')}`,\n          namespace,\n          path: currentPath\n        });\n      } else if (typeof value === 'object' && value !== null) {\n        this.extractKeys(value, namespace, currentPath, keys);\n      }\n    }\n  }\n\n  /**\n   * Проверяет наличие перевода для указанного ключа\n   */\n  private static hasTranslation(language: SupportedLanguage, key: string): boolean {\n    try {\n      const [namespace, ...pathParts] = key.split('.');\n      const translations = require(`../i18n/${namespace}/${language}.json`);\n      \n      let current = translations;\n      for (const part of pathParts) {\n        if (current && typeof current === 'object' && part in current) {\n          current = current[part];\n        } else {\n          return false;\n        }\n      }\n      \n      return typeof current === 'string' && current.trim().length > 0;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Генерирует отчет о недостающих переводах\n   */\n  static generateReport(): string {\n    const missingTranslations = this.validateTranslations();\n    \n    if (missingTranslations.length === 0) {\n      return '✅ Все переводы полные!';\n    }\n    \n    let report = `❌ Найдено ${missingTranslations.length} недостающих переводов:\\n\\n`;\n    \n    for (const missing of missingTranslations) {\n      report += `🔑 Ключ: ${missing.key}\\n`;\n      report += `📁 Namespace: ${missing.namespace}\\n`;\n      report += `🌍 Отсутствует в: ${missing.missingLanguages.join(', ')}\\n\\n`;\n    }\n    \n    return report;\n  }\n\n  /**\n   * Проверяет конкретный ключ во всех языках\n   */\n  static checkKey(key: string): { [language: string]: boolean } {\n    const result: { [language: string]: boolean } = {};\n    \n    for (const language of Object.keys(SUPPORTED_LANGUAGES) as SupportedLanguage[]) {\n      result[language] = this.hasTranslation(language, key);\n    }\n    \n    return result;\n  }\n\n  /**\n   * Получает статистику переводов\n   */\n  static getTranslationStats(): { [language: string]: number } {\n    const stats: { [language: string]: number } = {};\n    \n    for (const language of Object.keys(SUPPORTED_LANGUAGES) as SupportedLanguage[]) {\n      const keys = this.getAllTranslationKeys(language);\n      stats[language] = keys.length;\n    }\n    \n    return stats;\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/gulliyevn/FixDrive/src/utils/validators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]